/* eslint-disable */

import { AllTypesProps, ReturnTypes, Ops } from './const';


export const HOST="Specify host"


export const HEADERS = {}
export const apiSubscription = (options: chainOptions) => (query: string) => {
  try {
    const queryString = options[0] + '?query=' + encodeURIComponent(query);
    const wsString = queryString.replace('http', 'ws');
    const host = (options.length > 1 && options[1]?.websocket?.[0]) || wsString;
    const webSocketOptions = options[1]?.websocket || [host];
    const ws = new WebSocket(...webSocketOptions);
    return {
      ws,
      on: (e: (args: any) => void) => {
        ws.onmessage = (event: any) => {
          if (event.data) {
            const parsed = JSON.parse(event.data);
            const data = parsed.data;
            return e(data);
          }
        };
      },
      off: (e: (args: any) => void) => {
        ws.onclose = e;
      },
      error: (e: (args: any) => void) => {
        ws.onerror = e;
      },
      open: (e: () => void) => {
        ws.onopen = e;
      },
    };
  } catch {
    throw new Error('No websockets implemented');
  }
};
const handleFetchResponse = (response: Response): Promise<GraphQLResponse> => {
  if (!response.ok) {
    return new Promise((_, reject) => {
      response
        .text()
        .then((text) => {
          try {
            reject(JSON.parse(text));
          } catch (err) {
            reject(text);
          }
        })
        .catch(reject);
    });
  }
  return response.json();
};

export const apiFetch =
  (options: fetchOptions) =>
  (query: string, variables: Record<string, unknown> = {}) => {
    const fetchOptions = options[1] || {};
    if (fetchOptions.method && fetchOptions.method === 'GET') {
      return fetch(`${options[0]}?query=${encodeURIComponent(query)}`, fetchOptions)
        .then(handleFetchResponse)
        .then((response: GraphQLResponse) => {
          if (response.errors) {
            throw new GraphQLError(response);
          }
          return response.data;
        });
    }
    return fetch(`${options[0]}`, {
      body: JSON.stringify({ query, variables }),
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      ...fetchOptions,
    })
      .then(handleFetchResponse)
      .then((response: GraphQLResponse) => {
        if (response.errors) {
          throw new GraphQLError(response);
        }
        return response.data;
      });
  };

export const InternalsBuildQuery = ({
  ops,
  props,
  returns,
  options,
  scalars,
}: {
  props: AllTypesPropsType;
  returns: ReturnTypesType;
  ops: Operations;
  options?: OperationOptions;
  scalars?: ScalarDefinition;
}) => {
  const ibb = (
    k: string,
    o: InputValueType | VType,
    p = '',
    root = true,
    vars: Array<{ name: string; graphQLType: string }> = [],
  ): string => {
    const keyForPath = purifyGraphQLKey(k);
    const newPath = [p, keyForPath].join(SEPARATOR);
    if (!o) {
      return '';
    }
    if (typeof o === 'boolean' || typeof o === 'number') {
      return k;
    }
    if (typeof o === 'string') {
      return `${k} ${o}`;
    }
    if (Array.isArray(o)) {
      const args = InternalArgsBuilt({
        props,
        returns,
        ops,
        scalars,
        vars,
      })(o[0], newPath);
      return `${ibb(args ? `${k}(${args})` : k, o[1], p, false, vars)}`;
    }
    if (k === '__alias') {
      return Object.entries(o)
        .map(([alias, objectUnderAlias]) => {
          if (typeof objectUnderAlias !== 'object' || Array.isArray(objectUnderAlias)) {
            throw new Error(
              'Invalid alias it should be __alias:{ YOUR_ALIAS_NAME: { OPERATION_NAME: { ...selectors }}}',
            );
          }
          const operationName = Object.keys(objectUnderAlias)[0];
          const operation = objectUnderAlias[operationName];
          return ibb(`${alias}:${operationName}`, operation, p, false, vars);
        })
        .join('\n');
    }
    const hasOperationName = root && options?.operationName ? ' ' + options.operationName : '';
    const keyForDirectives = o.__directives ?? '';
    const query = `{${Object.entries(o)
      .filter(([k]) => k !== '__directives')
      .map((e) => ibb(...e, [p, `field<>${keyForPath}`].join(SEPARATOR), false, vars))
      .join('\n')}}`;
    if (!root) {
      return `${k} ${keyForDirectives}${hasOperationName} ${query}`;
    }
    const varsString = vars.map((v) => `${v.name}: ${v.graphQLType}`).join(', ');
    return `${k} ${keyForDirectives}${hasOperationName}${varsString ? `(${varsString})` : ''} ${query}`;
  };
  return ibb;
};

export const Thunder =
  (fn: FetchFunction) =>
  <O extends keyof typeof Ops, SCLR extends ScalarDefinition, R extends keyof ValueTypes = GenericOperation<O>>(
    operation: O,
    graphqlOptions?: ThunderGraphQLOptions<SCLR>,
  ) =>
  <Z extends ValueTypes[R]>(o: Z | ValueTypes[R], ops?: OperationOptions & { variables?: Record<string, unknown> }) =>
    fn(
      Zeus(operation, o, {
        operationOptions: ops,
        scalars: graphqlOptions?.scalars,
      }),
      ops?.variables,
    ).then((data) => {
      if (graphqlOptions?.scalars) {
        return decodeScalarsInResponse({
          response: data,
          initialOp: operation,
          initialZeusQuery: o as VType,
          returns: ReturnTypes,
          scalars: graphqlOptions.scalars,
          ops: Ops,
        });
      }
      return data;
    }) as Promise<InputType<GraphQLTypes[R], Z, SCLR>>;

export const Chain = (...options: chainOptions) => Thunder(apiFetch(options));

export const SubscriptionThunder =
  (fn: SubscriptionFunction) =>
  <O extends keyof typeof Ops, SCLR extends ScalarDefinition, R extends keyof ValueTypes = GenericOperation<O>>(
    operation: O,
    graphqlOptions?: ThunderGraphQLOptions<SCLR>,
  ) =>
  <Z extends ValueTypes[R]>(o: Z | ValueTypes[R], ops?: OperationOptions & { variables?: ExtractVariables<Z> }) => {
    const returnedFunction = fn(
      Zeus(operation, o, {
        operationOptions: ops,
        scalars: graphqlOptions?.scalars,
      }),
    ) as SubscriptionToGraphQL<Z, GraphQLTypes[R], SCLR>;
    if (returnedFunction?.on && graphqlOptions?.scalars) {
      const wrapped = returnedFunction.on;
      returnedFunction.on = (fnToCall: (args: InputType<GraphQLTypes[R], Z, SCLR>) => void) =>
        wrapped((data: InputType<GraphQLTypes[R], Z, SCLR>) => {
          if (graphqlOptions?.scalars) {
            return fnToCall(
              decodeScalarsInResponse({
                response: data,
                initialOp: operation,
                initialZeusQuery: o as VType,
                returns: ReturnTypes,
                scalars: graphqlOptions.scalars,
                ops: Ops,
              }),
            );
          }
          return fnToCall(data);
        });
    }
    return returnedFunction;
  };

export const Subscription = (...options: chainOptions) => SubscriptionThunder(apiSubscription(options));
export const Zeus = <
  Z extends ValueTypes[R],
  O extends keyof typeof Ops,
  R extends keyof ValueTypes = GenericOperation<O>,
>(
  operation: O,
  o: Z | ValueTypes[R],
  ops?: {
    operationOptions?: OperationOptions;
    scalars?: ScalarDefinition;
  },
) =>
  InternalsBuildQuery({
    props: AllTypesProps,
    returns: ReturnTypes,
    ops: Ops,
    options: ops?.operationOptions,
    scalars: ops?.scalars,
  })(operation, o as VType);

export const ZeusSelect = <T>() => ((t: unknown) => t) as SelectionFunction<T>;

export const Selector = <T extends keyof ValueTypes>(key: T) => key && ZeusSelect<ValueTypes[T]>();

export const TypeFromSelector = <T extends keyof ValueTypes>(key: T) => key && ZeusSelect<ValueTypes[T]>();
export const Gql = Chain(HOST, {
  headers: {
    'Content-Type': 'application/json',
    ...HEADERS,
  },
});

export const ZeusScalars = ZeusSelect<ScalarCoders>();

export const decodeScalarsInResponse = <O extends Operations>({
  response,
  scalars,
  returns,
  ops,
  initialZeusQuery,
  initialOp,
}: {
  ops: O;
  response: any;
  returns: ReturnTypesType;
  scalars?: Record<string, ScalarResolver | undefined>;
  initialOp: keyof O;
  initialZeusQuery: InputValueType | VType;
}) => {
  if (!scalars) {
    return response;
  }
  const builder = PrepareScalarPaths({
    ops,
    returns,
  });

  const scalarPaths = builder(initialOp as string, ops[initialOp], initialZeusQuery);
  if (scalarPaths) {
    const r = traverseResponse({ scalarPaths, resolvers: scalars })(initialOp as string, response, [ops[initialOp]]);
    return r;
  }
  return response;
};

export const traverseResponse = ({
  resolvers,
  scalarPaths,
}: {
  scalarPaths: { [x: string]: `scalar.${string}` };
  resolvers: {
    [x: string]: ScalarResolver | undefined;
  };
}) => {
  const ibb = (k: string, o: InputValueType | VType, p: string[] = []): unknown => {
    if (Array.isArray(o)) {
      return o.map((eachO) => ibb(k, eachO, p));
    }
    if (o == null) {
      return o;
    }
    const scalarPathString = p.join(SEPARATOR);
    const currentScalarString = scalarPaths[scalarPathString];
    if (currentScalarString) {
      const currentDecoder = resolvers[currentScalarString.split('.')[1]]?.decode;
      if (currentDecoder) {
        return currentDecoder(o);
      }
    }
    if (typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string' || !o) {
      return o;
    }
    return Object.fromEntries(Object.entries(o).map(([k, v]) => [k, ibb(k, v, [...p, purifyGraphQLKey(k)])]));
  };
  return ibb;
};

export type AllTypesPropsType = {
  [x: string]:
    | undefined
    | `scalar.${string}`
    | 'enum'
    | {
        [x: string]:
          | undefined
          | string
          | {
              [x: string]: string | undefined;
            };
      };
};

export type ReturnTypesType = {
  [x: string]:
    | {
        [x: string]: string | undefined;
      }
    | `scalar.${string}`
    | undefined;
};
export type InputValueType = {
  [x: string]: undefined | boolean | string | number | [any, undefined | boolean | InputValueType] | InputValueType;
};
export type VType =
  | undefined
  | boolean
  | string
  | number
  | [any, undefined | boolean | InputValueType]
  | InputValueType;

export type PlainType = boolean | number | string | null | undefined;
export type ZeusArgsType =
  | PlainType
  | {
      [x: string]: ZeusArgsType;
    }
  | Array<ZeusArgsType>;

export type Operations = Record<string, string>;

export type VariableDefinition = {
  [x: string]: unknown;
};

export const SEPARATOR = '|';

export type fetchOptions = Parameters<typeof fetch>;
type websocketOptions = typeof WebSocket extends new (...args: infer R) => WebSocket ? R : never;
export type chainOptions = [fetchOptions[0], fetchOptions[1] & { websocket?: websocketOptions }] | [fetchOptions[0]];
export type FetchFunction = (query: string, variables?: Record<string, unknown>) => Promise<any>;
export type SubscriptionFunction = (query: string) => any;
type NotUndefined<T> = T extends undefined ? never : T;
export type ResolverType<F> = NotUndefined<F extends [infer ARGS, any] ? ARGS : undefined>;

export type OperationOptions = {
  operationName?: string;
};

export type ScalarCoder = Record<string, (s: unknown) => string>;

export interface GraphQLResponse {
  data?: Record<string, any>;
  errors?: Array<{
    message: string;
  }>;
}
export class GraphQLError extends Error {
  constructor(public response: GraphQLResponse) {
    super('');
    console.error(response);
  }
  toString() {
    return 'GraphQL Response Error';
  }
}
export type GenericOperation<O> = O extends keyof typeof Ops ? typeof Ops[O] : never;
export type ThunderGraphQLOptions<SCLR extends ScalarDefinition> = {
  scalars?: SCLR | ScalarCoders;
};

const ExtractScalar = (mappedParts: string[], returns: ReturnTypesType): `scalar.${string}` | undefined => {
  if (mappedParts.length === 0) {
    return;
  }
  const oKey = mappedParts[0];
  const returnP1 = returns[oKey];
  if (typeof returnP1 === 'object') {
    const returnP2 = returnP1[mappedParts[1]];
    if (returnP2) {
      return ExtractScalar([returnP2, ...mappedParts.slice(2)], returns);
    }
    return undefined;
  }
  return returnP1 as `scalar.${string}` | undefined;
};

export const PrepareScalarPaths = ({ ops, returns }: { returns: ReturnTypesType; ops: Operations }) => {
  const ibb = (
    k: string,
    originalKey: string,
    o: InputValueType | VType,
    p: string[] = [],
    pOriginals: string[] = [],
    root = true,
  ): { [x: string]: `scalar.${string}` } | undefined => {
    if (!o) {
      return;
    }
    if (typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string') {
      const extractionArray = [...pOriginals, originalKey];
      const isScalar = ExtractScalar(extractionArray, returns);
      if (isScalar?.startsWith('scalar')) {
        const partOfTree = {
          [[...p, k].join(SEPARATOR)]: isScalar,
        };
        return partOfTree;
      }
      return {};
    }
    if (Array.isArray(o)) {
      return ibb(k, k, o[1], p, pOriginals, false);
    }
    if (k === '__alias') {
      return Object.entries(o)
        .map(([alias, objectUnderAlias]) => {
          if (typeof objectUnderAlias !== 'object' || Array.isArray(objectUnderAlias)) {
            throw new Error(
              'Invalid alias it should be __alias:{ YOUR_ALIAS_NAME: { OPERATION_NAME: { ...selectors }}}',
            );
          }
          const operationName = Object.keys(objectUnderAlias)[0];
          const operation = objectUnderAlias[operationName];
          return ibb(alias, operationName, operation, p, pOriginals, false);
        })
        .reduce((a, b) => ({
          ...a,
          ...b,
        }));
    }
    const keyName = root ? ops[k] : k;
    return Object.entries(o)
      .filter(([k]) => k !== '__directives')
      .map(([k, v]) => {
        // Inline fragments shouldn't be added to the path as they aren't a field
        const isInlineFragment = originalKey.match(/^...\s*on/) != null;
        return ibb(
          k,
          k,
          v,
          isInlineFragment ? p : [...p, purifyGraphQLKey(keyName || k)],
          isInlineFragment ? pOriginals : [...pOriginals, purifyGraphQLKey(originalKey)],
          false,
        );
      })
      .reduce((a, b) => ({
        ...a,
        ...b,
      }));
  };
  return ibb;
};

export const purifyGraphQLKey = (k: string) => k.replace(/\([^)]*\)/g, '').replace(/^[^:]*\:/g, '');

const mapPart = (p: string) => {
  const [isArg, isField] = p.split('<>');
  if (isField) {
    return {
      v: isField,
      __type: 'field',
    } as const;
  }
  return {
    v: isArg,
    __type: 'arg',
  } as const;
};

type Part = ReturnType<typeof mapPart>;

export const ResolveFromPath = (props: AllTypesPropsType, returns: ReturnTypesType, ops: Operations) => {
  const ResolvePropsType = (mappedParts: Part[]) => {
    const oKey = ops[mappedParts[0].v];
    const propsP1 = oKey ? props[oKey] : props[mappedParts[0].v];
    if (propsP1 === 'enum' && mappedParts.length === 1) {
      return 'enum';
    }
    if (typeof propsP1 === 'string' && propsP1.startsWith('scalar.') && mappedParts.length === 1) {
      return propsP1;
    }
    if (typeof propsP1 === 'object') {
      if (mappedParts.length < 2) {
        return 'not';
      }
      const propsP2 = propsP1[mappedParts[1].v];
      if (typeof propsP2 === 'string') {
        return rpp(
          `${propsP2}${SEPARATOR}${mappedParts
            .slice(2)
            .map((mp) => mp.v)
            .join(SEPARATOR)}`,
        );
      }
      if (typeof propsP2 === 'object') {
        if (mappedParts.length < 3) {
          return 'not';
        }
        const propsP3 = propsP2[mappedParts[2].v];
        if (propsP3 && mappedParts[2].__type === 'arg') {
          return rpp(
            `${propsP3}${SEPARATOR}${mappedParts
              .slice(3)
              .map((mp) => mp.v)
              .join(SEPARATOR)}`,
          );
        }
      }
    }
  };
  const ResolveReturnType = (mappedParts: Part[]) => {
    if (mappedParts.length === 0) {
      return 'not';
    }
    const oKey = ops[mappedParts[0].v];
    const returnP1 = oKey ? returns[oKey] : returns[mappedParts[0].v];
    if (typeof returnP1 === 'object') {
      if (mappedParts.length < 2) return 'not';
      const returnP2 = returnP1[mappedParts[1].v];
      if (returnP2) {
        return rpp(
          `${returnP2}${SEPARATOR}${mappedParts
            .slice(2)
            .map((mp) => mp.v)
            .join(SEPARATOR)}`,
        );
      }
    }
  };
  const rpp = (path: string): 'enum' | 'not' | `scalar.${string}` => {
    const parts = path.split(SEPARATOR).filter((l) => l.length > 0);
    const mappedParts = parts.map(mapPart);
    const propsP1 = ResolvePropsType(mappedParts);
    if (propsP1) {
      return propsP1;
    }
    const returnP1 = ResolveReturnType(mappedParts);
    if (returnP1) {
      return returnP1;
    }
    return 'not';
  };
  return rpp;
};

export const InternalArgsBuilt = ({
  props,
  ops,
  returns,
  scalars,
  vars,
}: {
  props: AllTypesPropsType;
  returns: ReturnTypesType;
  ops: Operations;
  scalars?: ScalarDefinition;
  vars: Array<{ name: string; graphQLType: string }>;
}) => {
  const arb = (a: ZeusArgsType, p = '', root = true): string => {
    if (typeof a === 'string') {
      if (a.startsWith(START_VAR_NAME)) {
        const [varName, graphQLType] = a.replace(START_VAR_NAME, '$').split(GRAPHQL_TYPE_SEPARATOR);
        const v = vars.find((v) => v.name === varName);
        if (!v) {
          vars.push({
            name: varName,
            graphQLType,
          });
        } else {
          if (v.graphQLType !== graphQLType) {
            throw new Error(
              `Invalid variable exists with two different GraphQL Types, "${v.graphQLType}" and ${graphQLType}`,
            );
          }
        }
        return varName;
      }
    }
    const checkType = ResolveFromPath(props, returns, ops)(p);
    if (checkType.startsWith('scalar.')) {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const [_, ...splittedScalar] = checkType.split('.');
      const scalarKey = splittedScalar.join('.');
      return (scalars?.[scalarKey]?.encode?.(a) as string) || JSON.stringify(a);
    }
    if (Array.isArray(a)) {
      return `[${a.map((arr) => arb(arr, p, false)).join(', ')}]`;
    }
    if (typeof a === 'string') {
      if (checkType === 'enum') {
        return a;
      }
      return `${JSON.stringify(a)}`;
    }
    if (typeof a === 'object') {
      if (a === null) {
        return `null`;
      }
      const returnedObjectString = Object.entries(a)
        .filter(([, v]) => typeof v !== 'undefined')
        .map(([k, v]) => `${k}: ${arb(v, [p, k].join(SEPARATOR), false)}`)
        .join(',\n');
      if (!root) {
        return `{${returnedObjectString}}`;
      }
      return returnedObjectString;
    }
    return `${a}`;
  };
  return arb;
};

export const resolverFor = <X, T extends keyof ResolverInputTypes, Z extends keyof ResolverInputTypes[T]>(
  type: T,
  field: Z,
  fn: (
    args: Required<ResolverInputTypes[T]>[Z] extends [infer Input, any] ? Input : any,
    source: any,
  ) => Z extends keyof ModelTypes[T] ? ModelTypes[T][Z] | Promise<ModelTypes[T][Z]> | X : any,
) => fn as (args?: any, source?: any) => any;

export type UnwrapPromise<T> = T extends Promise<infer R> ? R : T;
export type ZeusState<T extends (...args: any[]) => Promise<any>> = NonNullable<UnwrapPromise<ReturnType<T>>>;
export type ZeusHook<
  T extends (...args: any[]) => Record<string, (...args: any[]) => Promise<any>>,
  N extends keyof ReturnType<T>,
> = ZeusState<ReturnType<T>[N]>;

export type WithTypeNameValue<T> = T & {
  __typename?: boolean;
  __directives?: string;
};
export type AliasType<T> = WithTypeNameValue<T> & {
  __alias?: Record<string, WithTypeNameValue<T>>;
};
type DeepAnify<T> = {
  [P in keyof T]?: any;
};
type IsPayLoad<T> = T extends [any, infer PayLoad] ? PayLoad : T;
export type ScalarDefinition = Record<string, ScalarResolver>;

type IsScalar<S, SCLR extends ScalarDefinition> = S extends 'scalar' & { name: infer T }
  ? T extends keyof SCLR
    ? SCLR[T]['decode'] extends (s: unknown) => unknown
      ? ReturnType<SCLR[T]['decode']>
      : unknown
    : unknown
  : S;
type IsArray<T, U, SCLR extends ScalarDefinition> = T extends Array<infer R>
  ? InputType<R, U, SCLR>[]
  : InputType<T, U, SCLR>;
type FlattenArray<T> = T extends Array<infer R> ? R : T;
type BaseZeusResolver = boolean | 1 | string | Variable<any, string>;

type IsInterfaced<SRC extends DeepAnify<DST>, DST, SCLR extends ScalarDefinition> = FlattenArray<SRC> extends
  | ZEUS_INTERFACES
  | ZEUS_UNIONS
  ? {
      [P in keyof SRC]: SRC[P] extends '__union' & infer R
        ? P extends keyof DST
          ? IsArray<R, '__typename' extends keyof DST ? DST[P] & { __typename: true } : DST[P], SCLR>
          : Record<string, unknown>
        : never;
    }[keyof DST] & {
      [P in keyof Omit<
        Pick<
          SRC,
          {
            [P in keyof DST]: SRC[P] extends '__union' & infer R ? never : P;
          }[keyof DST]
        >,
        '__typename'
      >]: IsPayLoad<DST[P]> extends BaseZeusResolver ? IsScalar<SRC[P], SCLR> : IsArray<SRC[P], DST[P], SCLR>;
    }
  : {
      [P in keyof Pick<SRC, keyof DST>]: IsPayLoad<DST[P]> extends BaseZeusResolver
        ? IsScalar<SRC[P], SCLR>
        : IsArray<SRC[P], DST[P], SCLR>;
    };

export type MapType<SRC, DST, SCLR extends ScalarDefinition> = SRC extends DeepAnify<DST>
  ? IsInterfaced<SRC, DST, SCLR>
  : never;
// eslint-disable-next-line @typescript-eslint/ban-types
export type InputType<SRC, DST, SCLR extends ScalarDefinition = {}> = IsPayLoad<DST> extends { __alias: infer R }
  ? {
      [P in keyof R]: MapType<SRC, R[P], SCLR>[keyof MapType<SRC, R[P], SCLR>];
    } & MapType<SRC, Omit<IsPayLoad<DST>, '__alias'>, SCLR>
  : MapType<SRC, IsPayLoad<DST>, SCLR>;
export type SubscriptionToGraphQL<Z, T, SCLR extends ScalarDefinition> = {
  ws: WebSocket;
  on: (fn: (args: InputType<T, Z, SCLR>) => void) => void;
  off: (fn: (e: { data?: InputType<T, Z, SCLR>; code?: number; reason?: string; message?: string }) => void) => void;
  error: (fn: (e: { data?: InputType<T, Z, SCLR>; errors?: string[] }) => void) => void;
  open: () => void;
};

// eslint-disable-next-line @typescript-eslint/ban-types
export type FromSelector<SELECTOR, NAME extends keyof GraphQLTypes, SCLR extends ScalarDefinition = {}> = InputType<
  GraphQLTypes[NAME],
  SELECTOR,
  SCLR
>;

export type ScalarResolver = {
  encode?: (s: unknown) => string;
  decode?: (s: unknown) => unknown;
};

export type SelectionFunction<V> = <T>(t: T | V) => T;

type BuiltInVariableTypes = {
  ['String']: string;
  ['Int']: number;
  ['Float']: number;
  ['ID']: unknown;
  ['Boolean']: boolean;
};
type AllVariableTypes = keyof BuiltInVariableTypes | keyof ZEUS_VARIABLES;
type VariableRequired<T extends string> = `${T}!` | T | `[${T}]` | `[${T}]!` | `[${T}!]` | `[${T}!]!`;
type VR<T extends string> = VariableRequired<VariableRequired<T>>;

export type GraphQLVariableType = VR<AllVariableTypes>;

type ExtractVariableTypeString<T extends string> = T extends VR<infer R1>
  ? R1 extends VR<infer R2>
    ? R2 extends VR<infer R3>
      ? R3 extends VR<infer R4>
        ? R4 extends VR<infer R5>
          ? R5
          : R4
        : R3
      : R2
    : R1
  : T;

type DecomposeType<T, Type> = T extends `[${infer R}]`
  ? Array<DecomposeType<R, Type>> | undefined
  : T extends `${infer R}!`
  ? NonNullable<DecomposeType<R, Type>>
  : Type | undefined;

type ExtractTypeFromGraphQLType<T extends string> = T extends keyof ZEUS_VARIABLES
  ? ZEUS_VARIABLES[T]
  : T extends keyof BuiltInVariableTypes
  ? BuiltInVariableTypes[T]
  : any;

export type GetVariableType<T extends string> = DecomposeType<
  T,
  ExtractTypeFromGraphQLType<ExtractVariableTypeString<T>>
>;

type UndefinedKeys<T> = {
  [K in keyof T]-?: T[K] extends NonNullable<T[K]> ? never : K;
}[keyof T];

type WithNullableKeys<T> = Pick<T, UndefinedKeys<T>>;
type WithNonNullableKeys<T> = Omit<T, UndefinedKeys<T>>;

type OptionalKeys<T> = {
  [P in keyof T]?: T[P];
};

export type WithOptionalNullables<T> = OptionalKeys<WithNullableKeys<T>> & WithNonNullableKeys<T>;

export type Variable<T extends GraphQLVariableType, Name extends string> = {
  ' __zeus_name': Name;
  ' __zeus_type': T;
};

export type ExtractVariables<Query> = Query extends Variable<infer VType, infer VName>
  ? { [key in VName]: GetVariableType<VType> }
  : Query extends [infer Inputs, infer Outputs]
  ? ExtractVariables<Inputs> & ExtractVariables<Outputs>
  : Query extends string | number | boolean
  ? // eslint-disable-next-line @typescript-eslint/ban-types
    {}
  : UnionToIntersection<{ [K in keyof Query]: WithOptionalNullables<ExtractVariables<Query[K]>> }[keyof Query]>;

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;

export const START_VAR_NAME = `$ZEUS_VAR`;
export const GRAPHQL_TYPE_SEPARATOR = `__$GRAPHQL__`;

export const $ = <Type extends GraphQLVariableType, Name extends string>(name: Name, graphqlType: Type) => {
  return (START_VAR_NAME + name + GRAPHQL_TYPE_SEPARATOR + graphqlType) as unknown as Variable<Type, Name>;
};
type ZEUS_INTERFACES = GraphQLTypes["Actor"] | GraphQLTypes["Assignable"] | GraphQLTypes["AuditEntry"] | GraphQLTypes["Closable"] | GraphQLTypes["Comment"] | GraphQLTypes["Contribution"] | GraphQLTypes["Deletable"] | GraphQLTypes["EnterpriseAuditEntryData"] | GraphQLTypes["GitObject"] | GraphQLTypes["GitSignature"] | GraphQLTypes["HovercardContext"] | GraphQLTypes["Labelable"] | GraphQLTypes["Lockable"] | GraphQLTypes["MemberStatusable"] | GraphQLTypes["Migration"] | GraphQLTypes["Minimizable"] | GraphQLTypes["Node"] | GraphQLTypes["OauthApplicationAuditEntryData"] | GraphQLTypes["OrganizationAuditEntryData"] | GraphQLTypes["PackageOwner"] | GraphQLTypes["ProfileOwner"] | GraphQLTypes["ProjectNextFieldCommon"] | GraphQLTypes["ProjectNextOwner"] | GraphQLTypes["ProjectOwner"] | GraphQLTypes["ProjectV2FieldCommon"] | GraphQLTypes["ProjectV2ItemFieldValueCommon"] | GraphQLTypes["ProjectV2Owner"] | GraphQLTypes["ProjectV2Recent"] | GraphQLTypes["Reactable"] | GraphQLTypes["RepositoryAuditEntryData"] | GraphQLTypes["RepositoryDiscussionAuthor"] | GraphQLTypes["RepositoryDiscussionCommentAuthor"] | GraphQLTypes["RepositoryInfo"] | GraphQLTypes["RepositoryNode"] | GraphQLTypes["RepositoryOwner"] | GraphQLTypes["RequirableByPullRequest"] | GraphQLTypes["Sponsorable"] | GraphQLTypes["Starrable"] | GraphQLTypes["Subscribable"] | GraphQLTypes["TeamAuditEntryData"] | GraphQLTypes["TopicAuditEntryData"] | GraphQLTypes["UniformResourceLocatable"] | GraphQLTypes["Updatable"] | GraphQLTypes["UpdatableComment"] | GraphQLTypes["Votable"]
export type ScalarCoders = {
	Base64String?: ScalarResolver;
	Date?: ScalarResolver;
	DateTime?: ScalarResolver;
	GitObjectID?: ScalarResolver;
	GitRefname?: ScalarResolver;
	GitSSHRemote?: ScalarResolver;
	GitTimestamp?: ScalarResolver;
	HTML?: ScalarResolver;
	PreciseDateTime?: ScalarResolver;
	URI?: ScalarResolver;
	X509Certificate?: ScalarResolver;
}
type ZEUS_UNIONS = GraphQLTypes["Assignee"] | GraphQLTypes["AuditEntryActor"] | GraphQLTypes["BranchActorAllowanceActor"] | GraphQLTypes["Closer"] | GraphQLTypes["CreatedIssueOrRestrictedContribution"] | GraphQLTypes["CreatedPullRequestOrRestrictedContribution"] | GraphQLTypes["CreatedRepositoryOrRestrictedContribution"] | GraphQLTypes["DeploymentReviewer"] | GraphQLTypes["EnterpriseMember"] | GraphQLTypes["IpAllowListOwner"] | GraphQLTypes["IssueOrPullRequest"] | GraphQLTypes["IssueTimelineItem"] | GraphQLTypes["IssueTimelineItems"] | GraphQLTypes["MilestoneItem"] | GraphQLTypes["OrgRestoreMemberAuditEntryMembership"] | GraphQLTypes["OrganizationAuditEntry"] | GraphQLTypes["OrganizationOrUser"] | GraphQLTypes["PermissionGranter"] | GraphQLTypes["PinnableItem"] | GraphQLTypes["ProjectCardItem"] | GraphQLTypes["ProjectNextItemContent"] | GraphQLTypes["ProjectV2FieldConfiguration"] | GraphQLTypes["ProjectV2ItemContent"] | GraphQLTypes["ProjectV2ItemFieldValue"] | GraphQLTypes["PullRequestTimelineItem"] | GraphQLTypes["PullRequestTimelineItems"] | GraphQLTypes["PushAllowanceActor"] | GraphQLTypes["Reactor"] | GraphQLTypes["ReferencedSubject"] | GraphQLTypes["RenamedTitleSubject"] | GraphQLTypes["RequestedReviewer"] | GraphQLTypes["ReviewDismissalAllowanceActor"] | GraphQLTypes["SearchResultItem"] | GraphQLTypes["Sponsor"] | GraphQLTypes["SponsorableItem"] | GraphQLTypes["StatusCheckRollupContext"] | GraphQLTypes["VerifiableDomainOwner"]

export type ValueTypes = {
    /** Autogenerated input type of AbortQueuedMigrations */
["AbortQueuedMigrationsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the organization that is running the migrations. */
	ownerId: string | Variable<any, string>
};
	/** Autogenerated return type of AbortQueuedMigrations */
["AbortQueuedMigrationsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Did the operation succeed? */
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
["AcceptEnterpriseAdministratorInvitationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The id of the invitation being accepted */
	invitationId: string | Variable<any, string>
};
	/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
["AcceptEnterpriseAdministratorInvitationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The invitation that was accepted. */
	invitation?:ValueTypes["EnterpriseAdministratorInvitation"],
	/** A message confirming the result of accepting an administrator invitation. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AcceptTopicSuggestion */
["AcceptTopicSuggestionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of the suggested topic. */
	name: string | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of AcceptTopicSuggestion */
["AcceptTopicSuggestionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The accepted topic. */
	topic?:ValueTypes["Topic"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
["Actor"]:AliasType<{
	avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The username of the actor. */
	login?:boolean | `@${string}`,
	/** The HTTP path for this actor. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this actor. */
	url?:boolean | `@${string}`;
		['...on Bot']?: Omit<ValueTypes["Bot"],keyof ValueTypes["Actor"]>;
		['...on EnterpriseUserAccount']?: Omit<ValueTypes["EnterpriseUserAccount"],keyof ValueTypes["Actor"]>;
		['...on Mannequin']?: Omit<ValueTypes["Mannequin"],keyof ValueTypes["Actor"]>;
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["Actor"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["Actor"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Location information for an actor */
["ActorLocation"]: AliasType<{
	/** City */
	city?:boolean | `@${string}`,
	/** Country name */
	country?:boolean | `@${string}`,
	/** Country code */
	countryCode?:boolean | `@${string}`,
	/** Region name */
	region?:boolean | `@${string}`,
	/** Region or state code */
	regionCode?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The actor's type. */
["ActorType"]:ActorType;
	/** Autogenerated input type of AddAssigneesToAssignable */
["AddAssigneesToAssignableInput"]: {
	/** The id of the assignable object to add assignees to. */
	assignableId: string | Variable<any, string>,
	/** The id of users to add as assignees. */
	assigneeIds: Array<string> | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of AddAssigneesToAssignable */
["AddAssigneesToAssignablePayload"]: AliasType<{
	/** The item that was assigned. */
	assignable?:ValueTypes["Assignable"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddComment */
["AddCommentInput"]: {
	/** The contents of the comment. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the subject to modify. */
	subjectId: string | Variable<any, string>
};
	/** Autogenerated return type of AddComment */
["AddCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The edge from the subject's comment connection. */
	commentEdge?:ValueTypes["IssueCommentEdge"],
	/** The subject */
	subject?:ValueTypes["Node"],
	/** The edge from the subject's timeline connection. */
	timelineEdge?:ValueTypes["IssueTimelineItemEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddDiscussionComment */
["AddDiscussionCommentInput"]: {
	/** The contents of the comment. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the discussion to comment on. */
	discussionId: string | Variable<any, string>,
	/** The Node ID of the discussion comment within this discussion to reply to. */
	replyToId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of AddDiscussionComment */
["AddDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created discussion comment. */
	comment?:ValueTypes["DiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddDiscussionPollVote */
["AddDiscussionPollVoteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the discussion poll option to vote for. */
	pollOptionId: string | Variable<any, string>
};
	/** Autogenerated return type of AddDiscussionPollVote */
["AddDiscussionPollVotePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The poll option that a vote was added to. */
	pollOption?:ValueTypes["DiscussionPollOption"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddEnterpriseSupportEntitlement */
["AddEnterpriseSupportEntitlementInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string | Variable<any, string>,
	/** The login of a member who will receive the support entitlement. */
	login: string | Variable<any, string>
};
	/** Autogenerated return type of AddEnterpriseSupportEntitlement */
["AddEnterpriseSupportEntitlementPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of adding the support entitlement. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddLabelsToLabelable */
["AddLabelsToLabelableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ids of the labels to add. */
	labelIds: Array<string> | Variable<any, string>,
	/** The id of the labelable object to add labels to. */
	labelableId: string | Variable<any, string>
};
	/** Autogenerated return type of AddLabelsToLabelable */
["AddLabelsToLabelablePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item that was labeled. */
	labelable?:ValueTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectCard */
["AddProjectCardInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The content of the card. Must be a member of the ProjectCardItem union */
	contentId?: string | undefined | null | Variable<any, string>,
	/** The note on the card. */
	note?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the ProjectColumn. */
	projectColumnId: string | Variable<any, string>
};
	/** Autogenerated return type of AddProjectCard */
["AddProjectCardPayload"]: AliasType<{
	/** The edge from the ProjectColumn's card connection. */
	cardEdge?:ValueTypes["ProjectCardEdge"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The ProjectColumn */
	projectColumn?:ValueTypes["ProjectColumn"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectColumn */
["AddProjectColumnInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of the column. */
	name: string | Variable<any, string>,
	/** The Node ID of the project. */
	projectId: string | Variable<any, string>
};
	/** Autogenerated return type of AddProjectColumn */
["AddProjectColumnPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The edge from the project's column connection. */
	columnEdge?:ValueTypes["ProjectColumnEdge"],
	/** The project */
	project?:ValueTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectDraftIssue */
["AddProjectDraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `assigneeIds` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	assigneeIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The body of the draft issue.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `body` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Project to add the draft issue to. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined | null | Variable<any, string>,
	/** The title of the draft issue. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of AddProjectDraftIssue */
["AddProjectDraftIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The draft issue added to the project. */
	projectNextItem?:ValueTypes["ProjectNextItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectNextItem */
["AddProjectNextItemInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The content id of the item (Issue or PullRequest). This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `contentId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	contentId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Project to add the item to. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of AddProjectNextItem */
["AddProjectNextItemPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item added to the project. */
	projectNextItem?:ValueTypes["ProjectNextItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectV2DraftIssue */
["AddProjectV2DraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The body of the draft issue. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Project to add the draft issue to. */
	projectId: string | Variable<any, string>,
	/** The title of the draft issue. */
	title: string | Variable<any, string>
};
	/** Autogenerated return type of AddProjectV2DraftIssue */
["AddProjectV2DraftIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The draft issue added to the project. */
	projectItem?:ValueTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectV2ItemById */
["AddProjectV2ItemByIdInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The id of the Issue or Pull Request to add. */
	contentId: string | Variable<any, string>,
	/** The ID of the Project to add the item to. */
	projectId: string | Variable<any, string>
};
	/** Autogenerated return type of AddProjectV2ItemById */
["AddProjectV2ItemByIdPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item added to the project. */
	item?:ValueTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddPullRequestReviewComment */
["AddPullRequestReviewCommentInput"]: {
	/** The text of the comment. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The SHA of the commit to comment on. */
	commitOID?: ValueTypes["GitObjectID"] | undefined | null | Variable<any, string>,
	/** The comment id to reply to. */
	inReplyTo?: string | undefined | null | Variable<any, string>,
	/** The relative path of the file to comment on. */
	path?: string | undefined | null | Variable<any, string>,
	/** The line index in the diff to comment on. */
	position?: number | undefined | null | Variable<any, string>,
	/** The node ID of the pull request reviewing */
	pullRequestId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the review to modify. */
	pullRequestReviewId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of AddPullRequestReviewComment */
["AddPullRequestReviewCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created comment. */
	comment?:ValueTypes["PullRequestReviewComment"],
	/** The edge from the review's comment connection. */
	commentEdge?:ValueTypes["PullRequestReviewCommentEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddPullRequestReview */
["AddPullRequestReviewInput"]: {
	/** The contents of the review body comment. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The review line comments. */
	comments?: Array<ValueTypes["DraftPullRequestReviewComment"] | undefined | null> | undefined | null | Variable<any, string>,
	/** The commit OID the review pertains to. */
	commitOID?: ValueTypes["GitObjectID"] | undefined | null | Variable<any, string>,
	/** The event to perform on the pull request review. */
	event?: ValueTypes["PullRequestReviewEvent"] | undefined | null | Variable<any, string>,
	/** The Node ID of the pull request to modify. */
	pullRequestId: string | Variable<any, string>,
	/** The review line comment threads. */
	threads?: Array<ValueTypes["DraftPullRequestReviewThread"] | undefined | null> | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of AddPullRequestReview */
["AddPullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created pull request review. */
	pullRequestReview?:ValueTypes["PullRequestReview"],
	/** The edge from the pull request's review connection. */
	reviewEdge?:ValueTypes["PullRequestReviewEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddPullRequestReviewThread */
["AddPullRequestReviewThreadInput"]: {
	/** Body of the thread's first comment. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
	line: number | Variable<any, string>,
	/** Path to the file being commented on. */
	path: string | Variable<any, string>,
	/** The node ID of the pull request reviewing */
	pullRequestId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the review to modify. */
	pullRequestReviewId?: string | undefined | null | Variable<any, string>,
	/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
	side?: ValueTypes["DiffSide"] | undefined | null | Variable<any, string>,
	/** The first line of the range to which the comment refers. */
	startLine?: number | undefined | null | Variable<any, string>,
	/** The side of the diff on which the start line resides. */
	startSide?: ValueTypes["DiffSide"] | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of AddPullRequestReviewThread */
["AddPullRequestReviewThreadPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created thread. */
	thread?:ValueTypes["PullRequestReviewThread"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddReaction */
["AddReactionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of the emoji to react with. */
	content: ValueTypes["ReactionContent"] | Variable<any, string>,
	/** The Node ID of the subject to modify. */
	subjectId: string | Variable<any, string>
};
	/** Autogenerated return type of AddReaction */
["AddReactionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The reaction object. */
	reaction?:ValueTypes["Reaction"],
	/** The reactable subject. */
	subject?:ValueTypes["Reactable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddStar */
["AddStarInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Starrable ID to star. */
	starrableId: string | Variable<any, string>
};
	/** Autogenerated return type of AddStar */
["AddStarPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The starrable. */
	starrable?:ValueTypes["Starrable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddUpvote */
["AddUpvoteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the discussion or comment to upvote. */
	subjectId: string | Variable<any, string>
};
	/** Autogenerated return type of AddUpvote */
["AddUpvotePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The votable subject. */
	subject?:ValueTypes["Votable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddVerifiableDomain */
["AddVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The URL of the domain */
	domain: ValueTypes["URI"] | Variable<any, string>,
	/** The ID of the owner to add the domain to */
	ownerId: string | Variable<any, string>
};
	/** Autogenerated return type of AddVerifiableDomain */
["AddVerifiableDomainPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The verifiable domain that was added. */
	domain?:ValueTypes["VerifiableDomain"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'added_to_project' event on a given issue or pull request. */
["AddedToProjectEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Project referenced by event. */
	project?:ValueTypes["Project"],
	/** Project card referenced by this project event. */
	projectCard?:ValueTypes["ProjectCard"],
	/** Column name referenced by this project event. */
	projectColumnName?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A GitHub App. */
["App"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The description of the app. */
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
ipAllowListEntries?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for IP allow list entries returned. */
	orderBy?: ValueTypes["IpAllowListEntryOrder"] | undefined | null | Variable<any, string>},ValueTypes["IpAllowListEntryConnection"]],
	/** The hex color code, without the leading '#', for the logo background. */
	logoBackgroundColor?:boolean | `@${string}`,
logoUrl?: [{	/** The size of the resulting image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The name of the app. */
	name?:boolean | `@${string}`,
	/** A slug based on the name of the app for use in URLs. */
	slug?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The URL to the app's homepage. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ApproveDeployments */
["ApproveDeploymentsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Optional comment for approving deployments */
	comment?: string | undefined | null | Variable<any, string>,
	/** The ids of environments to reject deployments */
	environmentIds: Array<string> | Variable<any, string>,
	/** The node ID of the workflow run containing the pending deployments. */
	workflowRunId: string | Variable<any, string>
};
	/** Autogenerated return type of ApproveDeployments */
["ApproveDeploymentsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The affected deployments. */
	deployments?:ValueTypes["Deployment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ApproveVerifiableDomain */
["ApproveVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the verifiable domain to approve. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of ApproveVerifiableDomain */
["ApproveVerifiableDomainPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The verifiable domain that was approved. */
	domain?:ValueTypes["VerifiableDomain"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ArchiveRepository */
["ArchiveRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the repository to mark as archived. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of ArchiveRepository */
["ArchiveRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository that was marked as archived. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An object that can have users assigned to it. */
["Assignable"]:AliasType<{
	assignees?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]];
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["Assignable"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["Assignable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'assigned' event on any assignable object. */
["AssignedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the assignable associated with the event. */
	assignable?:ValueTypes["Assignable"],
	/** Identifies the user or mannequin that was assigned. */
	assignee?:ValueTypes["Assignee"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the user who was assigned. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be assigned to issues. */
["Assignee"]: AliasType<{		["...on Bot"] : ValueTypes["Bot"],
		["...on Mannequin"] : ValueTypes["Mannequin"],
		["...on Organization"] : ValueTypes["Organization"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** An entry in the audit log. */
["AuditEntry"]:AliasType<{
		/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`;
		['...on MembersCanDeleteReposClearAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposClearAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on MembersCanDeleteReposDisableAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposDisableAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on MembersCanDeleteReposEnableAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposEnableAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OauthApplicationCreateAuditEntry']?: Omit<ValueTypes["OauthApplicationCreateAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgAddBillingManagerAuditEntry']?: Omit<ValueTypes["OrgAddBillingManagerAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgAddMemberAuditEntry']?: Omit<ValueTypes["OrgAddMemberAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgBlockUserAuditEntry']?: Omit<ValueTypes["OrgBlockUserAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgCreateAuditEntry']?: Omit<ValueTypes["OrgCreateAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgDisableOauthAppRestrictionsAuditEntry']?: Omit<ValueTypes["OrgDisableOauthAppRestrictionsAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgDisableSamlAuditEntry']?: Omit<ValueTypes["OrgDisableSamlAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgDisableTwoFactorRequirementAuditEntry']?: Omit<ValueTypes["OrgDisableTwoFactorRequirementAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgEnableOauthAppRestrictionsAuditEntry']?: Omit<ValueTypes["OrgEnableOauthAppRestrictionsAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgEnableSamlAuditEntry']?: Omit<ValueTypes["OrgEnableSamlAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgEnableTwoFactorRequirementAuditEntry']?: Omit<ValueTypes["OrgEnableTwoFactorRequirementAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgInviteMemberAuditEntry']?: Omit<ValueTypes["OrgInviteMemberAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgInviteToBusinessAuditEntry']?: Omit<ValueTypes["OrgInviteToBusinessAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgOauthAppAccessApprovedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessApprovedAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgOauthAppAccessDeniedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessDeniedAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgOauthAppAccessRequestedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessRequestedAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgRemoveBillingManagerAuditEntry']?: Omit<ValueTypes["OrgRemoveBillingManagerAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgRemoveMemberAuditEntry']?: Omit<ValueTypes["OrgRemoveMemberAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgRemoveOutsideCollaboratorAuditEntry']?: Omit<ValueTypes["OrgRemoveOutsideCollaboratorAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgRestoreMemberAuditEntry']?: Omit<ValueTypes["OrgRestoreMemberAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgUnblockUserAuditEntry']?: Omit<ValueTypes["OrgUnblockUserAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']?: Omit<ValueTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgUpdateMemberAuditEntry']?: Omit<ValueTypes["OrgUpdateMemberAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']?: Omit<ValueTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']?: Omit<ValueTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoAccessAuditEntry']?: Omit<ValueTypes["RepoAccessAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoAddMemberAuditEntry']?: Omit<ValueTypes["RepoAddMemberAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoAddTopicAuditEntry']?: Omit<ValueTypes["RepoAddTopicAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoArchivedAuditEntry']?: Omit<ValueTypes["RepoArchivedAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoChangeMergeSettingAuditEntry']?: Omit<ValueTypes["RepoChangeMergeSettingAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigDisableAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigDisableContributorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigDisableContributorsOnlyAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']?: Omit<ValueTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigEnableAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigEnableContributorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigEnableContributorsOnlyAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']?: Omit<ValueTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigLockAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoCreateAuditEntry']?: Omit<ValueTypes["RepoCreateAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoDestroyAuditEntry']?: Omit<ValueTypes["RepoDestroyAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoRemoveMemberAuditEntry']?: Omit<ValueTypes["RepoRemoveMemberAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ValueTypes["RepoRemoveTopicAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepositoryVisibilityChangeDisableAuditEntry']?: Omit<ValueTypes["RepositoryVisibilityChangeDisableAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on RepositoryVisibilityChangeEnableAuditEntry']?: Omit<ValueTypes["RepositoryVisibilityChangeEnableAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on TeamAddMemberAuditEntry']?: Omit<ValueTypes["TeamAddMemberAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ValueTypes["TeamAddRepositoryAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on TeamChangeParentTeamAuditEntry']?: Omit<ValueTypes["TeamChangeParentTeamAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on TeamRemoveMemberAuditEntry']?: Omit<ValueTypes["TeamRemoveMemberAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ValueTypes["TeamRemoveRepositoryAuditEntry"],keyof ValueTypes["AuditEntry"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Types that can initiate an audit log event. */
["AuditEntryActor"]: AliasType<{		["...on Bot"] : ValueTypes["Bot"],
		["...on Organization"] : ValueTypes["Organization"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Audit Log connections. */
["AuditLogOrder"]: {
	/** The ordering direction. */
	direction?: ValueTypes["OrderDirection"] | undefined | null | Variable<any, string>,
	/** The field to order Audit Logs by. */
	field?: ValueTypes["AuditLogOrderField"] | undefined | null | Variable<any, string>
};
	/** Properties by which Audit Log connections can be ordered. */
["AuditLogOrderField"]:AuditLogOrderField;
	/** Represents a 'auto_merge_disabled' event on a given pull request. */
["AutoMergeDisabledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who disabled auto-merge for this Pull Request */
	disabler?:ValueTypes["User"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event */
	pullRequest?:ValueTypes["PullRequest"],
	/** The reason auto-merge was disabled */
	reason?:boolean | `@${string}`,
	/** The reason_code relating to why auto-merge was disabled */
	reasonCode?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'auto_merge_enabled' event on a given pull request. */
["AutoMergeEnabledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who enabled auto-merge for this Pull Request */
	enabler?:ValueTypes["User"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an auto-merge request for a pull request */
["AutoMergeRequest"]: AliasType<{
	/** The email address of the author of this auto-merge request. */
	authorEmail?:boolean | `@${string}`,
	/** The commit message of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging. */
	commitBody?:boolean | `@${string}`,
	/** The commit title of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging */
	commitHeadline?:boolean | `@${string}`,
	/** When was this auto-merge request was enabled. */
	enabledAt?:boolean | `@${string}`,
	/** The actor who created the auto-merge request. */
	enabledBy?:ValueTypes["Actor"],
	/** The merge method of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging. */
	mergeMethod?:boolean | `@${string}`,
	/** The pull request that this auto-merge request is set against. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'auto_rebase_enabled' event on a given pull request. */
["AutoRebaseEnabledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who enabled auto-merge (rebase) for this Pull Request */
	enabler?:ValueTypes["User"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'auto_squash_enabled' event on a given pull request. */
["AutoSquashEnabledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who enabled auto-merge (squash) for this Pull Request */
	enabler?:ValueTypes["User"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'automatic_base_change_failed' event on a given pull request. */
["AutomaticBaseChangeFailedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The new base for this PR */
	newBase?:boolean | `@${string}`,
	/** The old base for this PR */
	oldBase?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
["AutomaticBaseChangeSucceededEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The new base for this PR */
	newBase?:boolean | `@${string}`,
	/** The old base for this PR */
	oldBase?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** A (potentially binary) string encoded using base64. */
["Base64String"]:unknown;
	/** Represents a 'base_ref_changed' event on a given issue or pull request. */
["BaseRefChangedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the name of the base ref for the pull request after it was changed. */
	currentRefName?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the name of the base ref for the pull request before it was changed. */
	previousRefName?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'base_ref_deleted' event on a given pull request. */
["BaseRefDeletedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
	baseRefName?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'base_ref_force_pushed' event on a given pull request. */
["BaseRefForcePushedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
	afterCommit?:ValueTypes["Commit"],
	/** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
	beforeCommit?:ValueTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
	/** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
	ref?:ValueTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git blame. */
["Blame"]: AliasType<{
	/** The list of ranges from a Git blame. */
	ranges?:ValueTypes["BlameRange"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a range of information from a Git blame. */
["BlameRange"]: AliasType<{
	/** Identifies the recency of the change, from 1 (new) to 10 (old). This is
calculated as a 2-quantile and determines the length of distance between the
median age of all the changes in the file and the recency of the current
range's change. */
	age?:boolean | `@${string}`,
	/** Identifies the line author */
	commit?:ValueTypes["Commit"],
	/** The ending line for the range */
	endingLine?:boolean | `@${string}`,
	/** The starting line for the range */
	startingLine?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git blob. */
["Blob"]: AliasType<{
	/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** Byte size of Blob object */
	byteSize?:boolean | `@${string}`,
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
	isBinary?:boolean | `@${string}`,
	/** Indicates whether the contents is truncated */
	isTruncated?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The Repository the Git object belongs to */
	repository?:ValueTypes["Repository"],
	/** UTF8 text data or null if the Blob is binary */
	text?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A special type of user which takes actions on behalf of GitHub Apps. */
["Bot"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The username of the actor. */
	login?:boolean | `@${string}`,
	/** The HTTP path for this bot */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this bot */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types which can be actors for `BranchActorAllowance` objects. */
["BranchActorAllowanceActor"]: AliasType<{		["...on App"] : ValueTypes["App"],
		["...on Team"] : ValueTypes["Team"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** A branch protection rule. */
["BranchProtectionRule"]: AliasType<{
	/** Can this branch be deleted. */
	allowsDeletions?:boolean | `@${string}`,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?:boolean | `@${string}`,
	/** Is branch creation a protected operation. */
	blocksCreations?:boolean | `@${string}`,
branchProtectionRuleConflicts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["BranchProtectionRuleConflictConnection"]],
bypassForcePushAllowances?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["BypassForcePushAllowanceConnection"]],
bypassPullRequestAllowances?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["BypassPullRequestAllowanceConnection"]],
	/** The actor who created this branch protection rule. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?:boolean | `@${string}`,
matchingRefs?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filters refs with query on name */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["RefConnection"]],
	/** Identifies the protection rule pattern. */
	pattern?:boolean | `@${string}`,
pushAllowances?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PushAllowanceConnection"]],
	/** The repository associated with this branch protection rule. */
	repository?:ValueTypes["Repository"],
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?:boolean | `@${string}`,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?:boolean | `@${string}`,
	/** List of required status checks that must pass for commits to be accepted to matching branches. */
	requiredStatusChecks?:ValueTypes["RequiredStatusCheckDescription"],
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?:boolean | `@${string}`,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?:boolean | `@${string}`,
	/** Are commits required to be signed. */
	requiresCommitSignatures?:boolean | `@${string}`,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?:boolean | `@${string}`,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?:boolean | `@${string}`,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?:boolean | `@${string}`,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?:boolean | `@${string}`,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?:boolean | `@${string}`,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?:boolean | `@${string}`,
reviewDismissalAllowances?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ReviewDismissalAllowanceConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** A conflict between two branch protection rules. */
["BranchProtectionRuleConflict"]: AliasType<{
	/** Identifies the branch protection rule. */
	branchProtectionRule?:ValueTypes["BranchProtectionRule"],
	/** Identifies the conflicting branch protection rule. */
	conflictingBranchProtectionRule?:ValueTypes["BranchProtectionRule"],
	/** Identifies the branch ref that has conflicting rules */
	ref?:ValueTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for BranchProtectionRuleConflict. */
["BranchProtectionRuleConflictConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["BranchProtectionRuleConflictEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["BranchProtectionRuleConflict"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["BranchProtectionRuleConflictEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["BranchProtectionRuleConflict"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for BranchProtectionRule. */
["BranchProtectionRuleConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["BranchProtectionRuleEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["BranchProtectionRule"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["BranchProtectionRuleEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["BranchProtectionRule"],
		__typename?: boolean | `@${string}`
}>;
	/** A user, team, or app who has the ability to bypass a force push requirement on a protected branch. */
["BypassForcePushAllowance"]: AliasType<{
	/** The actor that can force push. */
	actor?:ValueTypes["BranchActorAllowanceActor"],
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?:ValueTypes["BranchProtectionRule"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for BypassForcePushAllowance. */
["BypassForcePushAllowanceConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["BypassForcePushAllowanceEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["BypassForcePushAllowance"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["BypassForcePushAllowanceEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["BypassForcePushAllowance"],
		__typename?: boolean | `@${string}`
}>;
	/** A user, team, or app who has the ability to bypass a pull request requirement on a protected branch. */
["BypassPullRequestAllowance"]: AliasType<{
	/** The actor that can bypass. */
	actor?:ValueTypes["BranchActorAllowanceActor"],
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?:ValueTypes["BranchProtectionRule"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for BypassPullRequestAllowance. */
["BypassPullRequestAllowanceConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["BypassPullRequestAllowanceEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["BypassPullRequestAllowance"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["BypassPullRequestAllowanceEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["BypassPullRequestAllowance"],
		__typename?: boolean | `@${string}`
}>;
	/** The Common Vulnerability Scoring System */
["CVSS"]: AliasType<{
	/** The CVSS score associated with this advisory */
	score?:boolean | `@${string}`,
	/** The CVSS vector string associated with this advisory */
	vectorString?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A common weakness enumeration */
["CWE"]: AliasType<{
	/** The id of the CWE */
	cweId?:boolean | `@${string}`,
	/** A detailed description of this CWE */
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of this CWE */
	name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CWE. */
["CWEConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CWEEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CWE"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CWEEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CWE"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CancelEnterpriseAdminInvitation */
["CancelEnterpriseAdminInvitationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the pending enterprise administrator invitation. */
	invitationId: string | Variable<any, string>
};
	/** Autogenerated return type of CancelEnterpriseAdminInvitation */
["CancelEnterpriseAdminInvitationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The invitation that was canceled. */
	invitation?:ValueTypes["EnterpriseAdministratorInvitation"],
	/** A message confirming the result of canceling an administrator invitation. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CancelSponsorship */
["CancelSponsorshipInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined | null | Variable<any, string>,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined | null | Variable<any, string>,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined | null | Variable<any, string>,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of CancelSponsorship */
["CancelSponsorshipPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The tier that was being used at the time of cancellation. */
	sponsorsTier?:ValueTypes["SponsorsTier"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ChangeUserStatus */
["ChangeUserStatusInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
	emoji?: string | undefined | null | Variable<any, string>,
	/** If set, the user status will not be shown after this date. */
	expiresAt?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,
	/** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
	limitedAvailability?: boolean | undefined | null | Variable<any, string>,
	/** A short description of your current status. */
	message?: string | undefined | null | Variable<any, string>,
	/** The ID of the organization whose members will be allowed to see the status. If
omitted, the status will be publicly visible. */
	organizationId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of ChangeUserStatus */
["ChangeUserStatusPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Your updated status. */
	status?:ValueTypes["UserStatus"],
		__typename?: boolean | `@${string}`
}>;
	/** A single check annotation. */
["CheckAnnotation"]: AliasType<{
	/** The annotation's severity level. */
	annotationLevel?:boolean | `@${string}`,
	/** The path to the file that this annotation was made on. */
	blobUrl?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The position of this annotation. */
	location?:ValueTypes["CheckAnnotationSpan"],
	/** The annotation's message. */
	message?:boolean | `@${string}`,
	/** The path that this annotation was made on. */
	path?:boolean | `@${string}`,
	/** Additional information about the annotation. */
	rawDetails?:boolean | `@${string}`,
	/** The annotation's title */
	title?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CheckAnnotation. */
["CheckAnnotationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CheckAnnotationEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CheckAnnotation"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Information from a check run analysis to specific lines of code. */
["CheckAnnotationData"]: {
	/** Represents an annotation's information level */
	annotationLevel: ValueTypes["CheckAnnotationLevel"] | Variable<any, string>,
	/** The location of the annotation */
	location: ValueTypes["CheckAnnotationRange"] | Variable<any, string>,
	/** A short description of the feedback for these lines of code. */
	message: string | Variable<any, string>,
	/** The path of the file to add an annotation to. */
	path: string | Variable<any, string>,
	/** Details about this annotation. */
	rawDetails?: string | undefined | null | Variable<any, string>,
	/** The title that represents the annotation. */
	title?: string | undefined | null | Variable<any, string>
};
	/** An edge in a connection. */
["CheckAnnotationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CheckAnnotation"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an annotation's information level. */
["CheckAnnotationLevel"]:CheckAnnotationLevel;
	/** A character position in a check annotation. */
["CheckAnnotationPosition"]: AliasType<{
	/** Column number (1 indexed). */
	column?:boolean | `@${string}`,
	/** Line number (1 indexed). */
	line?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Information from a check run analysis to specific lines of code. */
["CheckAnnotationRange"]: {
	/** The ending column of the range. */
	endColumn?: number | undefined | null | Variable<any, string>,
	/** The ending line of the range. */
	endLine: number | Variable<any, string>,
	/** The starting column of the range. */
	startColumn?: number | undefined | null | Variable<any, string>,
	/** The starting line of the range. */
	startLine: number | Variable<any, string>
};
	/** An inclusive pair of positions for a check annotation. */
["CheckAnnotationSpan"]: AliasType<{
	/** End position (inclusive). */
	end?:ValueTypes["CheckAnnotationPosition"],
	/** Start position (inclusive). */
	start?:ValueTypes["CheckAnnotationPosition"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states for a check suite or run conclusion. */
["CheckConclusionState"]:CheckConclusionState;
	/** A check run. */
["CheckRun"]: AliasType<{
annotations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CheckAnnotationConnection"]],
	/** The check suite that this run is a part of. */
	checkSuite?:ValueTypes["CheckSuite"],
	/** Identifies the date and time when the check run was completed. */
	completedAt?:boolean | `@${string}`,
	/** The conclusion of the check run. */
	conclusion?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The corresponding deployment for this job, if any */
	deployment?:ValueTypes["Deployment"],
	/** The URL from which to find full details of the check run on the integrator's site. */
	detailsUrl?:boolean | `@${string}`,
	/** A reference for the check run on the integrator's system. */
	externalId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
isRequired?: [{	/** The id of the pull request this is required for */
	pullRequestId?: string | undefined | null | Variable<any, string>,	/** The number of the pull request this is required for */
	pullRequestNumber?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The name of the check for this check run. */
	name?:boolean | `@${string}`,
	/** Information about a pending deployment, if any, in this check run */
	pendingDeploymentRequest?:ValueTypes["DeploymentRequest"],
	/** The permalink to the check run summary. */
	permalink?:boolean | `@${string}`,
	/** The repository associated with this check run. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this check run. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the check run was started. */
	startedAt?:boolean | `@${string}`,
	/** The current status of the check run. */
	status?:boolean | `@${string}`,
steps?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Step number */
	number?: number | undefined | null | Variable<any, string>},ValueTypes["CheckStepConnection"]],
	/** A string representing the check run's summary */
	summary?:boolean | `@${string}`,
	/** A string representing the check run's text */
	text?:boolean | `@${string}`,
	/** A string representing the check run */
	title?:boolean | `@${string}`,
	/** The HTTP URL for this check run. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Possible further actions the integrator can perform. */
["CheckRunAction"]: {
	/** A short explanation of what this action would do. */
	description: string | Variable<any, string>,
	/** A reference for the action on the integrator's system. */
	identifier: string | Variable<any, string>,
	/** The text to be displayed on a button in the web UI. */
	label: string | Variable<any, string>
};
	/** The connection type for CheckRun. */
["CheckRunConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CheckRunEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CheckRun"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CheckRunEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CheckRun"],
		__typename?: boolean | `@${string}`
}>;
	/** The filters that are available when fetching check runs. */
["CheckRunFilter"]: {
	/** Filters the check runs created by this application ID. */
	appId?: number | undefined | null | Variable<any, string>,
	/** Filters the check runs by this name. */
	checkName?: string | undefined | null | Variable<any, string>,
	/** Filters the check runs by this type. */
	checkType?: ValueTypes["CheckRunType"] | undefined | null | Variable<any, string>,
	/** Filters the check runs by these conclusions. */
	conclusions?: Array<ValueTypes["CheckConclusionState"]> | undefined | null | Variable<any, string>,
	/** Filters the check runs by this status. Superceded by statuses. */
	status?: ValueTypes["CheckStatusState"] | undefined | null | Variable<any, string>,
	/** Filters the check runs by this status. Overrides status. */
	statuses?: Array<ValueTypes["CheckStatusState"]> | undefined | null | Variable<any, string>
};
	/** Descriptive details about the check run. */
["CheckRunOutput"]: {
	/** The annotations that are made as part of the check run. */
	annotations?: Array<ValueTypes["CheckAnnotationData"]> | undefined | null | Variable<any, string>,
	/** Images attached to the check run output displayed in the GitHub pull request UI. */
	images?: Array<ValueTypes["CheckRunOutputImage"]> | undefined | null | Variable<any, string>,
	/** The summary of the check run (supports Commonmark). */
	summary: string | Variable<any, string>,
	/** The details of the check run (supports Commonmark). */
	text?: string | undefined | null | Variable<any, string>,
	/** A title to provide for this check run. */
	title: string | Variable<any, string>
};
	/** Images attached to the check run output displayed in the GitHub pull request UI. */
["CheckRunOutputImage"]: {
	/** The alternative text for the image. */
	alt: string | Variable<any, string>,
	/** A short image description. */
	caption?: string | undefined | null | Variable<any, string>,
	/** The full URL of the image. */
	imageUrl: ValueTypes["URI"] | Variable<any, string>
};
	/** The possible states of a check run in a status rollup. */
["CheckRunState"]:CheckRunState;
	/** Represents a count of the state of a check run. */
["CheckRunStateCount"]: AliasType<{
	/** The number of check runs with this state. */
	count?:boolean | `@${string}`,
	/** The state of a check run. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible types of check runs. */
["CheckRunType"]:CheckRunType;
	/** The possible states for a check suite or run status. */
["CheckStatusState"]:CheckStatusState;
	/** A single check step. */
["CheckStep"]: AliasType<{
	/** Identifies the date and time when the check step was completed. */
	completedAt?:boolean | `@${string}`,
	/** The conclusion of the check step. */
	conclusion?:boolean | `@${string}`,
	/** A reference for the check step on the integrator's system. */
	externalId?:boolean | `@${string}`,
	/** The step's name. */
	name?:boolean | `@${string}`,
	/** The index of the step in the list of steps of the parent check run. */
	number?:boolean | `@${string}`,
	/** Number of seconds to completion. */
	secondsToCompletion?:boolean | `@${string}`,
	/** Identifies the date and time when the check step was started. */
	startedAt?:boolean | `@${string}`,
	/** The current status of the check step. */
	status?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CheckStep. */
["CheckStepConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CheckStepEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CheckStep"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CheckStepEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CheckStep"],
		__typename?: boolean | `@${string}`
}>;
	/** A check suite. */
["CheckSuite"]: AliasType<{
	/** The GitHub App which created this check suite. */
	app?:ValueTypes["App"],
	/** The name of the branch for this check suite. */
	branch?:ValueTypes["Ref"],
checkRuns?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Filters the check runs by this type. */
	filterBy?: ValueTypes["CheckRunFilter"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CheckRunConnection"]],
	/** The commit for this check suite */
	commit?:ValueTypes["Commit"],
	/** The conclusion of this check suite. */
	conclusion?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who triggered the check suite. */
	creator?:ValueTypes["User"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
matchingPullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the pull requests by. */
	states?: Array<ValueTypes["PullRequestState"]> | undefined | null | Variable<any, string>},ValueTypes["PullRequestConnection"]],
	/** The push that triggered this check suite. */
	push?:ValueTypes["Push"],
	/** The repository associated with this check suite. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this check suite */
	resourcePath?:boolean | `@${string}`,
	/** The status of this check suite. */
	status?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this check suite */
	url?:boolean | `@${string}`,
	/** The workflow run associated with this check suite. */
	workflowRun?:ValueTypes["WorkflowRun"],
		__typename?: boolean | `@${string}`
}>;
	/** The auto-trigger preferences that are available for check suites. */
["CheckSuiteAutoTriggerPreference"]: {
	/** The node ID of the application that owns the check suite. */
	appId: string | Variable<any, string>,
	/** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
	setting: boolean | Variable<any, string>
};
	/** The connection type for CheckSuite. */
["CheckSuiteConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CheckSuiteEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CheckSuite"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CheckSuiteEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CheckSuite"],
		__typename?: boolean | `@${string}`
}>;
	/** The filters that are available when fetching check suites. */
["CheckSuiteFilter"]: {
	/** Filters the check suites created by this application ID. */
	appId?: number | undefined | null | Variable<any, string>,
	/** Filters the check suites by this name. */
	checkName?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated input type of ClearLabelsFromLabelable */
["ClearLabelsFromLabelableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The id of the labelable object to clear the labels from. */
	labelableId: string | Variable<any, string>
};
	/** Autogenerated return type of ClearLabelsFromLabelable */
["ClearLabelsFromLabelablePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item that was unlabeled. */
	labelable?:ValueTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ClearProjectV2ItemFieldValue */
["ClearProjectV2ItemFieldValueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the field to be cleared. */
	fieldId: string | Variable<any, string>,
	/** The ID of the item to be cleared. */
	itemId: string | Variable<any, string>,
	/** The ID of the Project. */
	projectId: string | Variable<any, string>
};
	/** Autogenerated return type of ClearProjectV2ItemFieldValue */
["ClearProjectV2ItemFieldValuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated item. */
	projectV2Item?:ValueTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CloneProject */
["CloneProjectInput"]: {
	/** The description of the project. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Whether or not to clone the source project's workflows. */
	includeWorkflows: boolean | Variable<any, string>,
	/** The name of the project. */
	name: string | Variable<any, string>,
	/** The visibility of the project, defaults to false (private). */
	public?: boolean | undefined | null | Variable<any, string>,
	/** The source project to clone. */
	sourceId: string | Variable<any, string>,
	/** The owner ID to create the project under. */
	targetOwnerId: string | Variable<any, string>
};
	/** Autogenerated return type of CloneProject */
["CloneProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The id of the JobStatus for populating cloned fields. */
	jobStatusId?:boolean | `@${string}`,
	/** The new cloned project. */
	project?:ValueTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CloneTemplateRepository */
["CloneTemplateRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** A short description of the new repository. */
	description?: string | undefined | null | Variable<any, string>,
	/** Whether to copy all branches from the template to the new repository. Defaults
to copying only the default branch of the template. */
	includeAllBranches?: boolean | undefined | null | Variable<any, string>,
	/** The name of the new repository. */
	name: string | Variable<any, string>,
	/** The ID of the owner for the new repository. */
	ownerId: string | Variable<any, string>,
	/** The Node ID of the template repository. */
	repositoryId: string | Variable<any, string>,
	/** Indicates the repository's visibility level. */
	visibility: ValueTypes["RepositoryVisibility"] | Variable<any, string>
};
	/** Autogenerated return type of CloneTemplateRepository */
["CloneTemplateRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new repository. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An object that can be closed */
["Closable"]:AliasType<{
		/** `true` if the object is closed (definition of closed may depend on type) */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["Closable"]>;
		['...on Milestone']?: Omit<ValueTypes["Milestone"],keyof ValueTypes["Closable"]>;
		['...on Project']?: Omit<ValueTypes["Project"],keyof ValueTypes["Closable"]>;
		['...on ProjectNext']?: Omit<ValueTypes["ProjectNext"],keyof ValueTypes["Closable"]>;
		['...on ProjectV2']?: Omit<ValueTypes["ProjectV2"],keyof ValueTypes["Closable"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["Closable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CloseIssue */
["CloseIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the issue to be closed. */
	issueId: string | Variable<any, string>,
	/** The reason the issue is to be closed. */
	stateReason?: ValueTypes["IssueClosedStateReason"] | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of CloseIssue */
["CloseIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was closed. */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ClosePullRequest */
["ClosePullRequestInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the pull request to be closed. */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of ClosePullRequest */
["ClosePullRequestPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that was closed. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'closed' event on any `Closable`. */
["ClosedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Object that was closed. */
	closable?:ValueTypes["Closable"],
	/** Object which triggered the creation of this event. */
	closer?:ValueTypes["Closer"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The HTTP path for this closed event. */
	resourcePath?:boolean | `@${string}`,
	/** The reason the issue state was changed to closed. */
	stateReason?:boolean | `@${string}`,
	/** The HTTP URL for this closed event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The object which triggered a `ClosedEvent`. */
["Closer"]: AliasType<{		["...on Commit"] : ValueTypes["Commit"],
		["...on PullRequest"] : ValueTypes["PullRequest"]
		__typename?: boolean | `@${string}`
}>;
	/** The Code of Conduct for a repository */
["CodeOfConduct"]: AliasType<{
	/** The body of the Code of Conduct */
	body?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The key for the Code of Conduct */
	key?:boolean | `@${string}`,
	/** The formal name of the Code of Conduct */
	name?:boolean | `@${string}`,
	/** The HTTP path for this Code of Conduct */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Code of Conduct */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Collaborators affiliation level with a subject. */
["CollaboratorAffiliation"]:CollaboratorAffiliation;
	/** Represents a comment. */
["Comment"]:AliasType<{
		/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ValueTypes["CommitComment"],keyof ValueTypes["Comment"]>;
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["Comment"]>;
		['...on DiscussionComment']?: Omit<ValueTypes["DiscussionComment"],keyof ValueTypes["Comment"]>;
		['...on GistComment']?: Omit<ValueTypes["GistComment"],keyof ValueTypes["Comment"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["Comment"]>;
		['...on IssueComment']?: Omit<ValueTypes["IssueComment"],keyof ValueTypes["Comment"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["Comment"]>;
		['...on PullRequestReview']?: Omit<ValueTypes["PullRequestReview"],keyof ValueTypes["Comment"]>;
		['...on PullRequestReviewComment']?: Omit<ValueTypes["PullRequestReviewComment"],keyof ValueTypes["Comment"]>;
		['...on TeamDiscussion']?: Omit<ValueTypes["TeamDiscussion"],keyof ValueTypes["Comment"]>;
		['...on TeamDiscussionComment']?: Omit<ValueTypes["TeamDiscussionComment"],keyof ValueTypes["Comment"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A comment author association with repository. */
["CommentAuthorAssociation"]:CommentAuthorAssociation;
	/** The possible errors that will prevent a user from updating a comment. */
["CommentCannotUpdateReason"]:CommentCannotUpdateReason;
	/** Represents a 'comment_deleted' event on a given issue or pull request. */
["CommentDeletedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The user who authored the deleted comment. */
	deletedCommentAuthor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git commit. */
["Commit"]: AliasType<{
	/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** The number of additions in this commit. */
	additions?:boolean | `@${string}`,
associatedPullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pull requests. */
	orderBy?: ValueTypes["PullRequestOrder"] | undefined | null | Variable<any, string>},ValueTypes["PullRequestConnection"]],
	/** Authorship details of the commit. */
	author?:ValueTypes["GitActor"],
	/** Check if the committer and the author match. */
	authoredByCommitter?:boolean | `@${string}`,
	/** The datetime when this commit was authored. */
	authoredDate?:boolean | `@${string}`,
authors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["GitActorConnection"]],
blame?: [{	/** The file whose Git blame information you want. */
	path: string | Variable<any, string>},ValueTypes["Blame"]],
	/** We recommend using the `changedFielsIfAvailable` field instead of
`changedFiles`, as `changedFiles` will cause your request to return an error
if GitHub is unable to calculate the number of changed files. */
	changedFiles?:boolean | `@${string}`,
	/** The number of changed files in this commit. If GitHub is unable to calculate
the number of changed files (for example due to a timeout), this will return
`null`. We recommend using this field instead of `changedFiles`. */
	changedFilesIfAvailable?:boolean | `@${string}`,
checkSuites?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Filters the check suites by this type. */
	filterBy?: ValueTypes["CheckSuiteFilter"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CheckSuiteConnection"]],
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CommitCommentConnection"]],
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	/** The datetime when this commit was committed. */
	committedDate?:boolean | `@${string}`,
	/** Check if committed via GitHub web UI. */
	committedViaWeb?:boolean | `@${string}`,
	/** Committer details of the commit. */
	committer?:ValueTypes["GitActor"],
	/** The number of deletions in this commit. */
	deletions?:boolean | `@${string}`,
deployments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Environments to list deployments for */
	environments?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for deployments returned from the connection. */
	orderBy?: ValueTypes["DeploymentOrder"] | undefined | null | Variable<any, string>},ValueTypes["DeploymentConnection"]],
file?: [{	/** The path for the file */
	path: string | Variable<any, string>},ValueTypes["TreeEntry"]],
history?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** If non-null, filters history to only show commits with matching authorship. */
	author?: ValueTypes["CommitAuthor"] | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** If non-null, filters history to only show commits touching files under this path. */
	path?: string | undefined | null | Variable<any, string>,	/** Allows specifying a beginning time or date for fetching commits. */
	since?: ValueTypes["GitTimestamp"] | undefined | null | Variable<any, string>,	/** Allows specifying an ending time or date for fetching commits. */
	until?: ValueTypes["GitTimestamp"] | undefined | null | Variable<any, string>},ValueTypes["CommitHistoryConnection"]],
	id?:boolean | `@${string}`,
	/** The Git commit message */
	message?:boolean | `@${string}`,
	/** The Git commit message body */
	messageBody?:boolean | `@${string}`,
	/** The commit message body rendered to HTML. */
	messageBodyHTML?:boolean | `@${string}`,
	/** The Git commit message headline */
	messageHeadline?:boolean | `@${string}`,
	/** The commit message headline rendered to HTML. */
	messageHeadlineHTML?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The organization this commit was made on behalf of. */
	onBehalfOf?:ValueTypes["Organization"],
parents?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CommitConnection"]],
	/** The datetime when this commit was pushed. */
	pushedDate?:boolean | `@${string}`,
	/** The Repository this commit belongs to */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this commit */
	resourcePath?:boolean | `@${string}`,
	/** Commit signing information, if present. */
	signature?:ValueTypes["GitSignature"],
	/** Status information for this commit */
	status?:ValueTypes["Status"],
	/** Check and Status rollup information for this commit. */
	statusCheckRollup?:ValueTypes["StatusCheckRollup"],
submodules?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["SubmoduleConnection"]],
	/** Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes. */
	tarballUrl?:boolean | `@${string}`,
	/** Commit's root Tree */
	tree?:ValueTypes["Tree"],
	/** The HTTP path for the tree of this commit */
	treeResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the tree of this commit */
	treeUrl?:boolean | `@${string}`,
	/** The HTTP URL for this commit */
	url?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
	/** Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes. */
	zipballUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Specifies an author for filtering Git commits. */
["CommitAuthor"]: {
	/** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
	emails?: Array<string> | undefined | null | Variable<any, string>,
	/** ID of a User to filter by. If non-null, only commits authored by this user
will be returned. This field takes precedence over emails. */
	id?: string | undefined | null | Variable<any, string>
};
	/** Represents a comment on a given Commit. */
["CommitComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** Identifies the comment body. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the commit associated with the comment, if the commit exists. */
	commit?:ValueTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies the file path associated with the comment. */
	path?:boolean | `@${string}`,
	/** Identifies the line position associated with the comment. */
	position?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path permalink for this commit comment. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL permalink for this commit comment. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CommitComment. */
["CommitCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CommitCommentEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CommitComment"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CommitCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CommitComment"],
		__typename?: boolean | `@${string}`
}>;
	/** A thread of comments on a commit. */
["CommitCommentThread"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CommitCommentConnection"]],
	/** The commit the comments were made on. */
	commit?:ValueTypes["Commit"],
	id?:boolean | `@${string}`,
	/** The file the comments were made on. */
	path?:boolean | `@${string}`,
	/** The position in the diff for the commit that the comment was made on. */
	position?:boolean | `@${string}`,
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Commit. */
["CommitConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CommitEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Commit"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for commit contribution connections. */
["CommitContributionOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field by which to order commit contributions. */
	field: ValueTypes["CommitContributionOrderField"] | Variable<any, string>
};
	/** Properties by which commit contribution connections can be ordered. */
["CommitContributionOrderField"]:CommitContributionOrderField;
	/** This aggregates commits made by a user within one repository. */
["CommitContributionsByRepository"]: AliasType<{
contributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for commit contributions returned from the connection. */
	orderBy?: ValueTypes["CommitContributionOrder"] | undefined | null | Variable<any, string>},ValueTypes["CreatedCommitContributionConnection"]],
	/** The repository in which the commits were made. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for the user's commits to the repository in this time range. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user's commits to the repository in this time range. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CommitEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Commit"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Commit. */
["CommitHistoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CommitEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Commit"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A message to include with a new commit */
["CommitMessage"]: {
	/** The body of the message. */
	body?: string | undefined | null | Variable<any, string>,
	/** The headline of the message. */
	headline: string | Variable<any, string>
};
	/** A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    } */
["CommittableBranch"]: {
	/** The unqualified name of the branch to append the commit to. */
	branchName?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the Ref to be updated. */
	id?: string | undefined | null | Variable<any, string>,
	/** The nameWithOwner of the repository to commit to. */
	repositoryNameWithOwner?: string | undefined | null | Variable<any, string>
};
	/** Represents a comparison between two commit revisions. */
["Comparison"]: AliasType<{
	/** The number of commits ahead of the base branch. */
	aheadBy?:boolean | `@${string}`,
	/** The base revision of this comparison. */
	baseTarget?:ValueTypes["GitObject"],
	/** The number of commits behind the base branch. */
	behindBy?:boolean | `@${string}`,
commits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ComparisonCommitConnection"]],
	/** The head revision of this comparison. */
	headTarget?:ValueTypes["GitObject"],
	id?:boolean | `@${string}`,
	/** The status of this comparison. */
	status?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Commit. */
["ComparisonCommitConnection"]: AliasType<{
	/** The total count of authors and co-authors across all commits. */
	authorCount?:boolean | `@${string}`,
	/** A list of edges. */
	edges?:ValueTypes["CommitEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Commit"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The status of a git comparison between two refs. */
["ComparisonStatus"]:ComparisonStatus;
	/** Represents a 'connected' event on a given issue or pull request. */
["ConnectedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reference originated in a different repository. */
	isCrossRepository?:boolean | `@${string}`,
	/** Issue or pull request that made the reference. */
	source?:ValueTypes["ReferencedSubject"],
	/** Issue or pull request which was connected. */
	subject?:ValueTypes["ReferencedSubject"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a contribution a user made on GitHub, such as opening an issue. */
["Contribution"]:AliasType<{
		/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ValueTypes["User"];
		['...on CreatedCommitContribution']?: Omit<ValueTypes["CreatedCommitContribution"],keyof ValueTypes["Contribution"]>;
		['...on CreatedIssueContribution']?: Omit<ValueTypes["CreatedIssueContribution"],keyof ValueTypes["Contribution"]>;
		['...on CreatedPullRequestContribution']?: Omit<ValueTypes["CreatedPullRequestContribution"],keyof ValueTypes["Contribution"]>;
		['...on CreatedPullRequestReviewContribution']?: Omit<ValueTypes["CreatedPullRequestReviewContribution"],keyof ValueTypes["Contribution"]>;
		['...on CreatedRepositoryContribution']?: Omit<ValueTypes["CreatedRepositoryContribution"],keyof ValueTypes["Contribution"]>;
		['...on JoinedGitHubContribution']?: Omit<ValueTypes["JoinedGitHubContribution"],keyof ValueTypes["Contribution"]>;
		['...on RestrictedContribution']?: Omit<ValueTypes["RestrictedContribution"],keyof ValueTypes["Contribution"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A calendar of contributions made on GitHub by a user. */
["ContributionCalendar"]: AliasType<{
	/** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
	colors?:boolean | `@${string}`,
	/** Determine if the color set was chosen because it's currently Halloween. */
	isHalloween?:boolean | `@${string}`,
	/** A list of the months of contributions in this calendar. */
	months?:ValueTypes["ContributionCalendarMonth"],
	/** The count of total contributions in the calendar. */
	totalContributions?:boolean | `@${string}`,
	/** A list of the weeks of contributions in this calendar. */
	weeks?:ValueTypes["ContributionCalendarWeek"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a single day of contributions on GitHub by a user. */
["ContributionCalendarDay"]: AliasType<{
	/** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
	color?:boolean | `@${string}`,
	/** How many contributions were made by the user on this day. */
	contributionCount?:boolean | `@${string}`,
	/** Indication of contributions, relative to other days. Can be used to indicate
which color to represent this day on a calendar. */
	contributionLevel?:boolean | `@${string}`,
	/** The day this square represents. */
	date?:boolean | `@${string}`,
	/** A number representing which day of the week this square represents, e.g., 1 is Monday. */
	weekday?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A month of contributions in a user's contribution graph. */
["ContributionCalendarMonth"]: AliasType<{
	/** The date of the first day of this month. */
	firstDay?:boolean | `@${string}`,
	/** The name of the month. */
	name?:boolean | `@${string}`,
	/** How many weeks started in this month. */
	totalWeeks?:boolean | `@${string}`,
	/** The year the month occurred in. */
	year?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A week of contributions in a user's contribution graph. */
["ContributionCalendarWeek"]: AliasType<{
	/** The days of contributions in this week. */
	contributionDays?:ValueTypes["ContributionCalendarDay"],
	/** The date of the earliest square in this week. */
	firstDay?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Varying levels of contributions from none to many. */
["ContributionLevel"]:ContributionLevel;
	/** Ordering options for contribution connections. */
["ContributionOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>
};
	/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
["ContributionsCollection"]: AliasType<{
commitContributionsByRepository?: [{	/** How many repositories should be included. */
	maxRepositories?: number | undefined | null | Variable<any, string>},ValueTypes["CommitContributionsByRepository"]],
	/** A calendar of this user's contributions on GitHub. */
	contributionCalendar?:ValueTypes["ContributionCalendar"],
	/** The years the user has been making contributions with the most recent year first. */
	contributionYears?:boolean | `@${string}`,
	/** Determine if this collection's time span ends in the current month. */
	doesEndInCurrentMonth?:boolean | `@${string}`,
	/** The date of the first restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts. */
	earliestRestrictedContributionDate?:boolean | `@${string}`,
	/** The ending date and time of this collection. */
	endedAt?:boolean | `@${string}`,
	/** The first issue the user opened on GitHub. This will be null if that issue was
opened outside the collection's time range and ignoreTimeRange is false. If
the issue is not visible but the user has opted to show private contributions,
a RestrictedContribution will be returned. */
	firstIssueContribution?:ValueTypes["CreatedIssueOrRestrictedContribution"],
	/** The first pull request the user opened on GitHub. This will be null if that
pull request was opened outside the collection's time range and
ignoreTimeRange is not true. If the pull request is not visible but the user
has opted to show private contributions, a RestrictedContribution will be returned. */
	firstPullRequestContribution?:ValueTypes["CreatedPullRequestOrRestrictedContribution"],
	/** The first repository the user created on GitHub. This will be null if that
first repository was created outside the collection's time range and
ignoreTimeRange is false. If the repository is not visible, then a
RestrictedContribution is returned. */
	firstRepositoryContribution?:ValueTypes["CreatedRepositoryOrRestrictedContribution"],
	/** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
	hasActivityInThePast?:boolean | `@${string}`,
	/** Determine if there are any contributions in this collection. */
	hasAnyContributions?:boolean | `@${string}`,
	/** Determine if the user made any contributions in this time frame whose details
are not visible because they were made in a private repository. Can only be
true if the user enabled private contribution counts. */
	hasAnyRestrictedContributions?:boolean | `@${string}`,
	/** Whether or not the collector's time span is all within the same day. */
	isSingleDay?:boolean | `@${string}`,
issueContributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Should the user's first issue ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>,	/** Should the user's most commented issue be excluded from the result. */
	excludePopular?: boolean | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ValueTypes["ContributionOrder"] | undefined | null | Variable<any, string>},ValueTypes["CreatedIssueContributionConnection"]],
issueContributionsByRepository?: [{	/** Should the user's first issue ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>,	/** Should the user's most commented issue be excluded from the result. */
	excludePopular?: boolean | undefined | null | Variable<any, string>,	/** How many repositories should be included. */
	maxRepositories?: number | undefined | null | Variable<any, string>},ValueTypes["IssueContributionsByRepository"]],
	/** When the user signed up for GitHub. This will be null if that sign up date
falls outside the collection's time range and ignoreTimeRange is false. */
	joinedGitHubContribution?:ValueTypes["JoinedGitHubContribution"],
	/** The date of the most recent restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts. */
	latestRestrictedContributionDate?:boolean | `@${string}`,
	/** When this collection's time range does not include any activity from the user, use this
to get a different collection from an earlier time range that does have activity. */
	mostRecentCollectionWithActivity?:ValueTypes["ContributionsCollection"],
	/** Returns a different contributions collection from an earlier time range than this one
that does not have any contributions. */
	mostRecentCollectionWithoutActivity?:ValueTypes["ContributionsCollection"],
	/** The issue the user opened on GitHub that received the most comments in the specified
time frame. */
	popularIssueContribution?:ValueTypes["CreatedIssueContribution"],
	/** The pull request the user opened on GitHub that received the most comments in the
specified time frame. */
	popularPullRequestContribution?:ValueTypes["CreatedPullRequestContribution"],
pullRequestContributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Should the user's first pull request ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>,	/** Should the user's most commented pull request be excluded from the result. */
	excludePopular?: boolean | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ValueTypes["ContributionOrder"] | undefined | null | Variable<any, string>},ValueTypes["CreatedPullRequestContributionConnection"]],
pullRequestContributionsByRepository?: [{	/** Should the user's first pull request ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>,	/** Should the user's most commented pull request be excluded from the result. */
	excludePopular?: boolean | undefined | null | Variable<any, string>,	/** How many repositories should be included. */
	maxRepositories?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestContributionsByRepository"]],
pullRequestReviewContributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ValueTypes["ContributionOrder"] | undefined | null | Variable<any, string>},ValueTypes["CreatedPullRequestReviewContributionConnection"]],
pullRequestReviewContributionsByRepository?: [{	/** How many repositories should be included. */
	maxRepositories?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestReviewContributionsByRepository"]],
repositoryContributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Should the user's first repository ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ValueTypes["ContributionOrder"] | undefined | null | Variable<any, string>},ValueTypes["CreatedRepositoryContributionConnection"]],
	/** A count of contributions made by the user that the viewer cannot access. Only
non-zero when the user has chosen to share their private contribution counts. */
	restrictedContributionsCount?:boolean | `@${string}`,
	/** The beginning date and time of this collection. */
	startedAt?:boolean | `@${string}`,
	/** How many commits were made by the user in this time span. */
	totalCommitContributions?:boolean | `@${string}`,
totalIssueContributions?: [{	/** Should the user's first issue ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>,	/** Should the user's most commented issue be excluded from this count. */
	excludePopular?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
totalPullRequestContributions?: [{	/** Should the user's first pull request ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>,	/** Should the user's most commented pull request be excluded from this count. */
	excludePopular?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** How many pull request reviews the user left. */
	totalPullRequestReviewContributions?:boolean | `@${string}`,
	/** How many different repositories the user committed to. */
	totalRepositoriesWithContributedCommits?:boolean | `@${string}`,
totalRepositoriesWithContributedIssues?: [{	/** Should the user's first issue ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>,	/** Should the user's most commented issue be excluded from this count. */
	excludePopular?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** How many different repositories the user left pull request reviews in. */
	totalRepositoriesWithContributedPullRequestReviews?:boolean | `@${string}`,
totalRepositoriesWithContributedPullRequests?: [{	/** Should the user's first pull request ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>,	/** Should the user's most commented pull request be excluded from this count. */
	excludePopular?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
totalRepositoryContributions?: [{	/** Should the user's first repository ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The user who made the contributions in this collection. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ConvertProjectCardNoteToIssue */
["ConvertProjectCardNoteToIssueInput"]: {
	/** The body of the newly created issue. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ProjectCard ID to convert. */
	projectCardId: string | Variable<any, string>,
	/** The ID of the repository to create the issue in. */
	repositoryId: string | Variable<any, string>,
	/** The title of the newly created issue. Defaults to the card's note text. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of ConvertProjectCardNoteToIssue */
["ConvertProjectCardNoteToIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated ProjectCard. */
	projectCard?:ValueTypes["ProjectCard"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ConvertPullRequestToDraft */
["ConvertPullRequestToDraftInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the pull request to convert to draft */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of ConvertPullRequestToDraft */
["ConvertPullRequestToDraftPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that is now a draft. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'convert_to_draft' event on a given pull request. */
["ConvertToDraftEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
	/** The HTTP path for this convert to draft event. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this convert to draft event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
["ConvertedNoteToIssueEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Project referenced by event. */
	project?:ValueTypes["Project"],
	/** Project card referenced by this project event. */
	projectCard?:ValueTypes["ProjectCard"],
	/** Column name referenced by this project event. */
	projectColumnName?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'converted_to_discussion' event on a given issue. */
["ConvertedToDiscussionEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The discussion that the issue was converted into. */
	discussion?:ValueTypes["Discussion"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateBranchProtectionRule */
["CreateBranchProtectionRuleInput"]: {
	/** Can this branch be deleted. */
	allowsDeletions?: boolean | undefined | null | Variable<any, string>,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?: boolean | undefined | null | Variable<any, string>,
	/** Is branch creation a protected operation. */
	blocksCreations?: boolean | undefined | null | Variable<any, string>,
	/** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
	bypassForcePushActorIds?: Array<string> | undefined | null | Variable<any, string>,
	/** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
	bypassPullRequestActorIds?: Array<string> | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?: boolean | undefined | null | Variable<any, string>,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?: boolean | undefined | null | Variable<any, string>,
	/** The glob-like pattern used to determine matching branches. */
	pattern: string | Variable<any, string>,
	/** A list of User, Team, or App IDs allowed to push to matching branches. */
	pushActorIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The global relay id of the repository in which a new branch protection rule should be created in. */
	repositoryId: string | Variable<any, string>,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined | null | Variable<any, string>,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string> | undefined | null | Variable<any, string>,
	/** The list of required status checks */
	requiredStatusChecks?: Array<ValueTypes["RequiredStatusCheckInput"]> | undefined | null | Variable<any, string>,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?: boolean | undefined | null | Variable<any, string>,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?: boolean | undefined | null | Variable<any, string>,
	/** Are commits required to be signed. */
	requiresCommitSignatures?: boolean | undefined | null | Variable<any, string>,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?: boolean | undefined | null | Variable<any, string>,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?: boolean | undefined | null | Variable<any, string>,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?: boolean | undefined | null | Variable<any, string>,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?: boolean | undefined | null | Variable<any, string>,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?: boolean | undefined | null | Variable<any, string>,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?: boolean | undefined | null | Variable<any, string>,
	/** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
	reviewDismissalActorIds?: Array<string> | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of CreateBranchProtectionRule */
["CreateBranchProtectionRulePayload"]: AliasType<{
	/** The newly created BranchProtectionRule. */
	branchProtectionRule?:ValueTypes["BranchProtectionRule"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateCheckRun */
["CreateCheckRunInput"]: {
	/** Possible further actions the integrator can perform, which a user may trigger. */
	actions?: Array<ValueTypes["CheckRunAction"]> | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The time that the check run finished. */
	completedAt?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,
	/** The final conclusion of the check. */
	conclusion?: ValueTypes["CheckConclusionState"] | undefined | null | Variable<any, string>,
	/** The URL of the integrator's site that has the full details of the check. */
	detailsUrl?: ValueTypes["URI"] | undefined | null | Variable<any, string>,
	/** A reference for the run on the integrator's system. */
	externalId?: string | undefined | null | Variable<any, string>,
	/** The SHA of the head commit. */
	headSha: ValueTypes["GitObjectID"] | Variable<any, string>,
	/** The name of the check. */
	name: string | Variable<any, string>,
	/** Descriptive details about the run. */
	output?: ValueTypes["CheckRunOutput"] | undefined | null | Variable<any, string>,
	/** The node ID of the repository. */
	repositoryId: string | Variable<any, string>,
	/** The time that the check run began. */
	startedAt?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,
	/** The current status. */
	status?: ValueTypes["RequestableCheckStatusState"] | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of CreateCheckRun */
["CreateCheckRunPayload"]: AliasType<{
	/** The newly created check run. */
	checkRun?:ValueTypes["CheckRun"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateCheckSuite */
["CreateCheckSuiteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The SHA of the head commit. */
	headSha: ValueTypes["GitObjectID"] | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of CreateCheckSuite */
["CreateCheckSuitePayload"]: AliasType<{
	/** The newly created check suite. */
	checkSuite?:ValueTypes["CheckSuite"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateCommitOnBranch */
["CreateCommitOnBranchInput"]: {
	/** The Ref to be updated.  Must be a branch. */
	branch: ValueTypes["CommittableBranch"] | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The git commit oid expected at the head of the branch prior to the commit */
	expectedHeadOid: ValueTypes["GitObjectID"] | Variable<any, string>,
	/** A description of changes to files in this commit. */
	fileChanges?: ValueTypes["FileChanges"] | undefined | null | Variable<any, string>,
	/** The commit message the be included with the commit. */
	message: ValueTypes["CommitMessage"] | Variable<any, string>
};
	/** Autogenerated return type of CreateCommitOnBranch */
["CreateCommitOnBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new commit. */
	commit?:ValueTypes["Commit"],
	/** The ref which has been updated to point to the new commit. */
	ref?:ValueTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateDeployment */
["CreateDeploymentInput"]: {
	/** Attempt to automatically merge the default branch into the requested ref, defaults to true. */
	autoMerge?: boolean | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Short description of the deployment. */
	description?: string | undefined | null | Variable<any, string>,
	/** Name for the target deployment environment. */
	environment?: string | undefined | null | Variable<any, string>,
	/** JSON payload with extra information about the deployment. */
	payload?: string | undefined | null | Variable<any, string>,
	/** The node ID of the ref to be deployed. */
	refId: string | Variable<any, string>,
	/** The node ID of the repository. */
	repositoryId: string | Variable<any, string>,
	/** The status contexts to verify against commit status checks. To bypass required
contexts, pass an empty array. Defaults to all unique contexts. */
	requiredContexts?: Array<string> | undefined | null | Variable<any, string>,
	/** Specifies a task to execute. */
	task?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of CreateDeployment */
["CreateDeploymentPayload"]: AliasType<{
	/** True if the default branch has been auto-merged into the deployment ref. */
	autoMerged?:boolean | `@${string}`,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new deployment. */
	deployment?:ValueTypes["Deployment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateDeploymentStatus */
["CreateDeploymentStatusInput"]: {
	/** Adds a new inactive status to all non-transient, non-production environment
deployments with the same repository and environment name as the created
status's deployment. */
	autoInactive?: boolean | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The node ID of the deployment. */
	deploymentId: string | Variable<any, string>,
	/** A short description of the status. Maximum length of 140 characters. */
	description?: string | undefined | null | Variable<any, string>,
	/** If provided, updates the environment of the deploy. Otherwise, does not modify the environment. */
	environment?: string | undefined | null | Variable<any, string>,
	/** Sets the URL for accessing your environment. */
	environmentUrl?: string | undefined | null | Variable<any, string>,
	/** The log URL to associate with this status.       This URL should contain
output to keep the user updated while the task is running       or serve as
historical information for what happened in the deployment. */
	logUrl?: string | undefined | null | Variable<any, string>,
	/** The state of the deployment. */
	state: ValueTypes["DeploymentStatusState"] | Variable<any, string>
};
	/** Autogenerated return type of CreateDeploymentStatus */
["CreateDeploymentStatusPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new deployment status. */
	deploymentStatus?:ValueTypes["DeploymentStatus"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateDiscussion */
["CreateDiscussionInput"]: {
	/** The body of the discussion. */
	body: string | Variable<any, string>,
	/** The id of the discussion category to associate with this discussion. */
	categoryId: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The id of the repository on which to create the discussion. */
	repositoryId: string | Variable<any, string>,
	/** The title of the discussion. */
	title: string | Variable<any, string>
};
	/** Autogenerated return type of CreateDiscussion */
["CreateDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion that was just created. */
	discussion?:ValueTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateEnterpriseOrganization */
["CreateEnterpriseOrganizationInput"]: {
	/** The logins for the administrators of the new organization. */
	adminLogins: Array<string> | Variable<any, string>,
	/** The email used for sending billing receipts. */
	billingEmail: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise owning the new organization. */
	enterpriseId: string | Variable<any, string>,
	/** The login of the new organization. */
	login: string | Variable<any, string>,
	/** The profile name of the new organization. */
	profileName: string | Variable<any, string>
};
	/** Autogenerated return type of CreateEnterpriseOrganization */
["CreateEnterpriseOrganizationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise that owns the created organization. */
	enterprise?:ValueTypes["Enterprise"],
	/** The organization that was created. */
	organization?:ValueTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateEnvironment */
["CreateEnvironmentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of the environment. */
	name: string | Variable<any, string>,
	/** The node ID of the repository. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of CreateEnvironment */
["CreateEnvironmentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new or existing environment. */
	environment?:ValueTypes["Environment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateIpAllowListEntry */
["CreateIpAllowListEntryInput"]: {
	/** An IP address or range of addresses in CIDR notation. */
	allowListValue: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Whether the IP allow list entry is active when an IP allow list is enabled. */
	isActive: boolean | Variable<any, string>,
	/** An optional name for the IP allow list entry. */
	name?: string | undefined | null | Variable<any, string>,
	/** The ID of the owner for which to create the new IP allow list entry. */
	ownerId: string | Variable<any, string>
};
	/** Autogenerated return type of CreateIpAllowListEntry */
["CreateIpAllowListEntryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list entry that was created. */
	ipAllowListEntry?:ValueTypes["IpAllowListEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateIssue */
["CreateIssueInput"]: {
	/** The Node ID for the user assignee for this issue. */
	assigneeIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The body for the issue description. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
	issueTemplate?: string | undefined | null | Variable<any, string>,
	/** An array of Node IDs of labels for this issue. */
	labelIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The Node ID of the milestone for this issue. */
	milestoneId?: string | undefined | null | Variable<any, string>,
	/** An array of Node IDs for projects associated with this issue. */
	projectIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>,
	/** The title for the issue. */
	title: string | Variable<any, string>
};
	/** Autogenerated return type of CreateIssue */
["CreateIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new issue. */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateLabel */
["CreateLabelInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** A 6 character hex code, without the leading #, identifying the color of the label. */
	color: string | Variable<any, string>,
	/** A brief description of the label, such as its purpose. */
	description?: string | undefined | null | Variable<any, string>,
	/** The name of the label. */
	name: string | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of CreateLabel */
["CreateLabelPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new label. */
	label?:ValueTypes["Label"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateLinkedBranch */
["CreateLinkedBranchInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the issue to link to. */
	issueId: string | Variable<any, string>,
	/** The name of the new branch. Defaults to issue number and title. */
	name?: string | undefined | null | Variable<any, string>,
	/** The commit SHA to base the new branch on. */
	oid: ValueTypes["GitObjectID"] | Variable<any, string>,
	/** ID of the repository to create the branch in. Defaults to the issue repository. */
	repositoryId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of CreateLinkedBranch */
["CreateLinkedBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new branch issue reference. */
	linkedBranch?:ValueTypes["LinkedBranch"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateMigrationSource */
["CreateMigrationSourceInput"]: {
	/** The Octoshift migration source access token. */
	accessToken?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The GitHub personal access token of the user importing to the target repository. */
	githubPat?: string | undefined | null | Variable<any, string>,
	/** The Octoshift migration source name. */
	name: string | Variable<any, string>,
	/** The ID of the organization that will own the Octoshift migration source. */
	ownerId: string | Variable<any, string>,
	/** The Octoshift migration source type. */
	type: ValueTypes["MigrationSourceType"] | Variable<any, string>,
	/** The Octoshift migration source URL. */
	url: string | Variable<any, string>
};
	/** Autogenerated return type of CreateMigrationSource */
["CreateMigrationSourcePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The created Octoshift migration source. */
	migrationSource?:ValueTypes["MigrationSource"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateProject */
["CreateProjectInput"]: {
	/** The description of project. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of project. */
	name: string | Variable<any, string>,
	/** The owner ID to create the project under. */
	ownerId: string | Variable<any, string>,
	/** A list of repository IDs to create as linked repositories for the project */
	repositoryIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The name of the GitHub-provided template. */
	template?: ValueTypes["ProjectTemplate"] | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of CreateProject */
["CreateProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new project. */
	project?:ValueTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateProjectV2 */
["CreateProjectV2Input"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The owner ID to create the project under. */
	ownerId: string | Variable<any, string>,
	/** The title of the project. */
	title: string | Variable<any, string>
};
	/** Autogenerated return type of CreateProjectV2 */
["CreateProjectV2Payload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new project. */
	projectV2?:ValueTypes["ProjectV2"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreatePullRequest */
["CreatePullRequestInput"]: {
	/** The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository. You cannot update the base branch on a pull request to point
to another repository. */
	baseRefName: string | Variable<any, string>,
	/** The contents of the pull request. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Indicates whether this pull request should be a draft. */
	draft?: boolean | undefined | null | Variable<any, string>,
	/** The name of the branch where your changes are implemented. For cross-repository pull requests
in the same network, namespace `head_ref_name` with a user like this: `username:branch`. */
	headRefName: string | Variable<any, string>,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?: boolean | undefined | null | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>,
	/** The title of the pull request. */
	title: string | Variable<any, string>
};
	/** Autogenerated return type of CreatePullRequest */
["CreatePullRequestPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new pull request. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateRef */
["CreateRefInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
	name: string | Variable<any, string>,
	/** The GitObjectID that the new Ref shall target. Must point to a commit. */
	oid: ValueTypes["GitObjectID"] | Variable<any, string>,
	/** The Node ID of the Repository to create the Ref in. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of CreateRef */
["CreateRefPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created ref. */
	ref?:ValueTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateRepository */
["CreateRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** A short description of the new repository. */
	description?: string | undefined | null | Variable<any, string>,
	/** Indicates if the repository should have the issues feature enabled. */
	hasIssuesEnabled?: boolean | undefined | null | Variable<any, string>,
	/** Indicates if the repository should have the wiki feature enabled. */
	hasWikiEnabled?: boolean | undefined | null | Variable<any, string>,
	/** The URL for a web page about this repository. */
	homepageUrl?: ValueTypes["URI"] | undefined | null | Variable<any, string>,
	/** The name of the new repository. */
	name: string | Variable<any, string>,
	/** The ID of the owner for the new repository. */
	ownerId?: string | undefined | null | Variable<any, string>,
	/** When an organization is specified as the owner, this ID identifies the team
that should be granted access to the new repository. */
	teamId?: string | undefined | null | Variable<any, string>,
	/** Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure. */
	template?: boolean | undefined | null | Variable<any, string>,
	/** Indicates the repository's visibility level. */
	visibility: ValueTypes["RepositoryVisibility"] | Variable<any, string>
};
	/** Autogenerated return type of CreateRepository */
["CreateRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new repository. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateSponsorsTier */
["CreateSponsorsTierInput"]: {
	/** The value of the new tier in US dollars. Valid values: 1-12000. */
	amount: number | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
	description: string | Variable<any, string>,
	/** Whether sponsorships using this tier should happen monthly/yearly or just once. */
	isRecurring?: boolean | undefined | null | Variable<any, string>,
	/** Whether to make the tier available immediately for sponsors to choose.
Defaults to creating a draft tier that will not be publicly visible. */
	publish?: boolean | undefined | null | Variable<any, string>,
	/** Optional ID of the private repository that sponsors at this tier should gain
read-only access to. Must be owned by an organization. */
	repositoryId?: string | undefined | null | Variable<any, string>,
	/** Optional name of the private repository that sponsors at this tier should gain
read-only access to. Must be owned by an organization. Necessary if
repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
	repositoryName?: string | undefined | null | Variable<any, string>,
	/** Optional login of the organization owner of the private repository that
sponsors at this tier should gain read-only access to. Necessary if
repositoryName is given. Will be ignored if repositoryId is given. */
	repositoryOwnerLogin?: string | undefined | null | Variable<any, string>,
	/** The ID of the user or organization who owns the GitHub Sponsors profile.
Defaults to the current user if omitted and sponsorableLogin is not given. */
	sponsorableId?: string | undefined | null | Variable<any, string>,
	/** The username of the user or organization who owns the GitHub Sponsors profile.
Defaults to the current user if omitted and sponsorableId is not given. */
	sponsorableLogin?: string | undefined | null | Variable<any, string>,
	/** Optional message new sponsors at this tier will receive. */
	welcomeMessage?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of CreateSponsorsTier */
["CreateSponsorsTierPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new tier. */
	sponsorsTier?:ValueTypes["SponsorsTier"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateSponsorship */
["CreateSponsorshipInput"]: {
	/** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
	amount?: number | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
	isRecurring?: boolean | undefined | null | Variable<any, string>,
	/** Specify whether others should be able to see that the sponsor is sponsoring
the sponsorable. Public visibility still does not reveal which tier is used. */
	privacyLevel?: ValueTypes["SponsorshipPrivacy"] | undefined | null | Variable<any, string>,
	/** Whether the sponsor should receive email updates from the sponsorable. */
	receiveEmails?: boolean | undefined | null | Variable<any, string>,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined | null | Variable<any, string>,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined | null | Variable<any, string>,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined | null | Variable<any, string>,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined | null | Variable<any, string>,
	/** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
	tierId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of CreateSponsorship */
["CreateSponsorshipPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The sponsorship that was started. */
	sponsorship?:ValueTypes["Sponsorship"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateTeamDiscussionComment */
["CreateTeamDiscussionCommentInput"]: {
	/** The content of the comment. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the discussion to which the comment belongs. */
	discussionId: string | Variable<any, string>
};
	/** Autogenerated return type of CreateTeamDiscussionComment */
["CreateTeamDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new comment. */
	teamDiscussionComment?:ValueTypes["TeamDiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateTeamDiscussion */
["CreateTeamDiscussionInput"]: {
	/** The content of the discussion. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** If true, restricts the visibility of this discussion to team members and
organization admins. If false or not specified, allows any organization member
to view this discussion. */
	private?: boolean | undefined | null | Variable<any, string>,
	/** The ID of the team to which the discussion belongs. */
	teamId: string | Variable<any, string>,
	/** The title of the discussion. */
	title: string | Variable<any, string>
};
	/** Autogenerated return type of CreateTeamDiscussion */
["CreateTeamDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new discussion. */
	teamDiscussion?:ValueTypes["TeamDiscussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made by committing to a repository. */
["CreatedCommitContribution"]: AliasType<{
	/** How many commits were made on this day to this repository by the user. */
	commitCount?:boolean | `@${string}`,
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The repository the user made a commit in. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedCommitContribution. */
["CreatedCommitContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CreatedCommitContributionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CreatedCommitContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of commits across days and repositories in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedCommitContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CreatedCommitContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made on GitHub by opening an issue. */
["CreatedIssueContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** The issue that was opened. */
	issue?:ValueTypes["Issue"],
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedIssueContribution. */
["CreatedIssueContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CreatedIssueContributionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CreatedIssueContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedIssueContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CreatedIssueContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents either a issue the viewer can access or a restricted contribution. */
["CreatedIssueOrRestrictedContribution"]: AliasType<{		["...on CreatedIssueContribution"] : ValueTypes["CreatedIssueContribution"],
		["...on RestrictedContribution"] : ValueTypes["RestrictedContribution"]
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made on GitHub by opening a pull request. */
["CreatedPullRequestContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The pull request that was opened. */
	pullRequest?:ValueTypes["PullRequest"],
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedPullRequestContribution. */
["CreatedPullRequestContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CreatedPullRequestContributionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CreatedPullRequestContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedPullRequestContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CreatedPullRequestContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents either a pull request the viewer can access or a restricted contribution. */
["CreatedPullRequestOrRestrictedContribution"]: AliasType<{		["...on CreatedPullRequestContribution"] : ValueTypes["CreatedPullRequestContribution"],
		["...on RestrictedContribution"] : ValueTypes["RestrictedContribution"]
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made by leaving a review on a pull request. */
["CreatedPullRequestReviewContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The pull request the user reviewed. */
	pullRequest?:ValueTypes["PullRequest"],
	/** The review the user left on the pull request. */
	pullRequestReview?:ValueTypes["PullRequestReview"],
	/** The repository containing the pull request that the user reviewed. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedPullRequestReviewContribution. */
["CreatedPullRequestReviewContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CreatedPullRequestReviewContributionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CreatedPullRequestReviewContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedPullRequestReviewContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CreatedPullRequestReviewContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made on GitHub by creating a repository. */
["CreatedRepositoryContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The repository that was created. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedRepositoryContribution. */
["CreatedRepositoryContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["CreatedRepositoryContributionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["CreatedRepositoryContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedRepositoryContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["CreatedRepositoryContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents either a repository the viewer can access or a restricted contribution. */
["CreatedRepositoryOrRestrictedContribution"]: AliasType<{		["...on CreatedRepositoryContribution"] : ValueTypes["CreatedRepositoryContribution"],
		["...on RestrictedContribution"] : ValueTypes["RestrictedContribution"]
		__typename?: boolean | `@${string}`
}>;
	/** Represents a mention made by one issue or pull request to another. */
["CrossReferencedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reference originated in a different repository. */
	isCrossRepository?:boolean | `@${string}`,
	/** Identifies when the reference was made. */
	referencedAt?:boolean | `@${string}`,
	/** The HTTP path for this pull request. */
	resourcePath?:boolean | `@${string}`,
	/** Issue or pull request that made the reference. */
	source?:ValueTypes["ReferencedSubject"],
	/** Issue or pull request to which the reference was made. */
	target?:ValueTypes["ReferencedSubject"],
	/** The HTTP URL for this pull request. */
	url?:boolean | `@${string}`,
	/** Checks if the target will be closed when the source is merged. */
	willCloseTarget?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An ISO-8601 encoded date string. */
["Date"]:unknown;
	/** An ISO-8601 encoded UTC date string. */
["DateTime"]:unknown;
	/** Autogenerated input type of DeclineTopicSuggestion */
["DeclineTopicSuggestionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of the suggested topic. */
	name: string | Variable<any, string>,
	/** The reason why the suggested topic is declined. */
	reason: ValueTypes["TopicSuggestionDeclineReason"] | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of DeclineTopicSuggestion */
["DeclineTopicSuggestionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The declined topic. */
	topic?:ValueTypes["Topic"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible base permissions for repositories. */
["DefaultRepositoryPermissionField"]:DefaultRepositoryPermissionField;
	/** Entities that can be deleted. */
["Deletable"]:AliasType<{
		/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ValueTypes["CommitComment"],keyof ValueTypes["Deletable"]>;
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["Deletable"]>;
		['...on DiscussionComment']?: Omit<ValueTypes["DiscussionComment"],keyof ValueTypes["Deletable"]>;
		['...on GistComment']?: Omit<ValueTypes["GistComment"],keyof ValueTypes["Deletable"]>;
		['...on IssueComment']?: Omit<ValueTypes["IssueComment"],keyof ValueTypes["Deletable"]>;
		['...on PullRequestReview']?: Omit<ValueTypes["PullRequestReview"],keyof ValueTypes["Deletable"]>;
		['...on PullRequestReviewComment']?: Omit<ValueTypes["PullRequestReviewComment"],keyof ValueTypes["Deletable"]>;
		['...on TeamDiscussion']?: Omit<ValueTypes["TeamDiscussion"],keyof ValueTypes["Deletable"]>;
		['...on TeamDiscussionComment']?: Omit<ValueTypes["TeamDiscussionComment"],keyof ValueTypes["Deletable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteBranchProtectionRule */
["DeleteBranchProtectionRuleInput"]: {
	/** The global relay id of the branch protection rule to be deleted. */
	branchProtectionRuleId: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of DeleteBranchProtectionRule */
["DeleteBranchProtectionRulePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteDeployment */
["DeleteDeploymentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the deployment to be deleted. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteDeployment */
["DeleteDeploymentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteDiscussionComment */
["DeleteDiscussionCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node id of the discussion comment to delete. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteDiscussionComment */
["DeleteDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion comment that was just deleted. */
	comment?:ValueTypes["DiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteDiscussion */
["DeleteDiscussionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The id of the discussion to delete. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteDiscussion */
["DeleteDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion that was just deleted. */
	discussion?:ValueTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteEnvironment */
["DeleteEnvironmentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the environment to be deleted. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteEnvironment */
["DeleteEnvironmentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteIpAllowListEntry */
["DeleteIpAllowListEntryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the IP allow list entry to delete. */
	ipAllowListEntryId: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteIpAllowListEntry */
["DeleteIpAllowListEntryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list entry that was deleted. */
	ipAllowListEntry?:ValueTypes["IpAllowListEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteIssueComment */
["DeleteIssueCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the comment to delete. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteIssueComment */
["DeleteIssueCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteIssue */
["DeleteIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the issue to delete. */
	issueId: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteIssue */
["DeleteIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository the issue belonged to */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteLabel */
["DeleteLabelInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the label to be deleted. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteLabel */
["DeleteLabelPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteLinkedBranch */
["DeleteLinkedBranchInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the linked branch */
	linkedBranchId: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteLinkedBranch */
["DeleteLinkedBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue the linked branch was unlinked from. */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeletePackageVersion */
["DeletePackageVersionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the package version to be deleted. */
	packageVersionId: string | Variable<any, string>
};
	/** Autogenerated return type of DeletePackageVersion */
["DeletePackageVersionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Whether or not the operation succeeded. */
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteProjectCard */
["DeleteProjectCardInput"]: {
	/** The id of the card to delete. */
	cardId: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of DeleteProjectCard */
["DeleteProjectCardPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The column the deleted card was in. */
	column?:ValueTypes["ProjectColumn"],
	/** The deleted card ID. */
	deletedCardId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteProjectColumn */
["DeleteProjectColumnInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The id of the column to delete. */
	columnId: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteProjectColumn */
["DeleteProjectColumnPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The deleted column ID. */
	deletedColumnId?:boolean | `@${string}`,
	/** The project the deleted column was in. */
	project?:ValueTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteProject */
["DeleteProjectInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Project ID to update. */
	projectId: string | Variable<any, string>
};
	/** Autogenerated input type of DeleteProjectNextItem */
["DeleteProjectNextItemInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the item to be removed. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	itemId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Project from which the item should be removed. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of DeleteProjectNextItem */
["DeleteProjectNextItemPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The ID of the deleted item. */
	deletedItemId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated return type of DeleteProject */
["DeleteProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository or organization the project was removed from. */
	owner?:ValueTypes["ProjectOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteProjectV2Item */
["DeleteProjectV2ItemInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the item to be removed. */
	itemId: string | Variable<any, string>,
	/** The ID of the Project from which the item should be removed. */
	projectId: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteProjectV2Item */
["DeleteProjectV2ItemPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The ID of the deleted item. */
	deletedItemId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeletePullRequestReviewComment */
["DeletePullRequestReviewCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the comment to delete. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeletePullRequestReviewComment */
["DeletePullRequestReviewCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request review the deleted comment belonged to. */
	pullRequestReview?:ValueTypes["PullRequestReview"],
	/** The deleted pull request review comment. */
	pullRequestReviewComment?:ValueTypes["PullRequestReviewComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeletePullRequestReview */
["DeletePullRequestReviewInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the pull request review to delete. */
	pullRequestReviewId: string | Variable<any, string>
};
	/** Autogenerated return type of DeletePullRequestReview */
["DeletePullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The deleted pull request review. */
	pullRequestReview?:ValueTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteRef */
["DeleteRefInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the Ref to be deleted. */
	refId: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteRef */
["DeleteRefPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteTeamDiscussionComment */
["DeleteTeamDiscussionCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the comment to delete. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteTeamDiscussionComment */
["DeleteTeamDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteTeamDiscussion */
["DeleteTeamDiscussionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The discussion ID to delete. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteTeamDiscussion */
["DeleteTeamDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteVerifiableDomain */
["DeleteVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the verifiable domain to delete. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of DeleteVerifiableDomain */
["DeleteVerifiableDomainPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The owning account from which the domain was deleted. */
	owner?:ValueTypes["VerifiableDomainOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'demilestoned' event on a given issue or pull request. */
["DemilestonedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the milestone title associated with the 'demilestoned' event. */
	milestoneTitle?:boolean | `@${string}`,
	/** Object referenced by event. */
	subject?:ValueTypes["MilestoneItem"],
		__typename?: boolean | `@${string}`
}>;
	/** A Dependabot Update for a dependency in a repository */
["DependabotUpdate"]: AliasType<{
	/** The error from a dependency update */
	error?:ValueTypes["DependabotUpdateError"],
	/** The associated pull request */
	pullRequest?:ValueTypes["PullRequest"],
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An error produced from a Dependabot Update */
["DependabotUpdateError"]: AliasType<{
	/** The body of the error */
	body?:boolean | `@${string}`,
	/** The error code */
	errorType?:boolean | `@${string}`,
	/** The title of the error */
	title?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A dependency manifest entry */
["DependencyGraphDependency"]: AliasType<{
	/** Does the dependency itself have dependencies? */
	hasDependencies?:boolean | `@${string}`,
	/** The original name of the package, as it appears in the manifest. */
	packageLabel?:boolean | `@${string}`,
	/** The dependency package manager */
	packageManager?:boolean | `@${string}`,
	/** The name of the package in the canonical form used by the package manager.
This may differ from the original textual form (see packageLabel), for example
in a package manager that uses case-insensitive comparisons. */
	packageName?:boolean | `@${string}`,
	/** The repository containing the package */
	repository?:ValueTypes["Repository"],
	/** The dependency version requirements */
	requirements?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DependencyGraphDependency. */
["DependencyGraphDependencyConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DependencyGraphDependencyEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DependencyGraphDependency"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DependencyGraphDependencyEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DependencyGraphDependency"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible ecosystems of a dependency graph package. */
["DependencyGraphEcosystem"]:DependencyGraphEcosystem;
	/** Dependency manifest for a repository */
["DependencyGraphManifest"]: AliasType<{
	/** Path to view the manifest file blob */
	blobPath?:boolean | `@${string}`,
dependencies?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DependencyGraphDependencyConnection"]],
	/** The number of dependencies listed in the manifest */
	dependenciesCount?:boolean | `@${string}`,
	/** Is the manifest too big to parse? */
	exceedsMaxSize?:boolean | `@${string}`,
	/** Fully qualified manifest filename */
	filename?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Were we able to parse the manifest? */
	parseable?:boolean | `@${string}`,
	/** The repository containing the manifest */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DependencyGraphManifest. */
["DependencyGraphManifestConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DependencyGraphManifestEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DependencyGraphManifest"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DependencyGraphManifestEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DependencyGraphManifest"],
		__typename?: boolean | `@${string}`
}>;
	/** A repository deploy key. */
["DeployKey"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The deploy key. */
	key?:boolean | `@${string}`,
	/** Whether or not the deploy key is read only. */
	readOnly?:boolean | `@${string}`,
	/** The deploy key title. */
	title?:boolean | `@${string}`,
	/** Whether or not the deploy key has been verified. */
	verified?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeployKey. */
["DeployKeyConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DeployKeyEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DeployKey"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeployKeyEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DeployKey"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'deployed' event on a given pull request. */
["DeployedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The deployment associated with the 'deployed' event. */
	deployment?:ValueTypes["Deployment"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
	/** The ref associated with the 'deployed' event. */
	ref?:ValueTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents triggered deployment instance. */
["Deployment"]: AliasType<{
	/** Identifies the commit sha of the deployment. */
	commit?:ValueTypes["Commit"],
	/** Identifies the oid of the deployment commit, even if the commit has been deleted. */
	commitOid?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the actor who triggered the deployment. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The deployment description. */
	description?:boolean | `@${string}`,
	/** The latest environment to which this deployment was made. */
	environment?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The latest environment to which this deployment was made. */
	latestEnvironment?:boolean | `@${string}`,
	/** The latest status of this deployment. */
	latestStatus?:ValueTypes["DeploymentStatus"],
	/** The original environment to which this deployment was made. */
	originalEnvironment?:boolean | `@${string}`,
	/** Extra information that a deployment system might need. */
	payload?:boolean | `@${string}`,
	/** Identifies the Ref of the deployment, if the deployment was created by ref. */
	ref?:ValueTypes["Ref"],
	/** Identifies the repository associated with the deployment. */
	repository?:ValueTypes["Repository"],
	/** The current state of the deployment. */
	state?:boolean | `@${string}`,
statuses?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DeploymentStatusConnection"]],
	/** The deployment task. */
	task?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Deployment. */
["DeploymentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DeploymentEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Deployment"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Deployment"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'deployment_environment_changed' event on a given pull request. */
["DeploymentEnvironmentChangedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The deployment status that updated the deployment environment. */
	deploymentStatus?:ValueTypes["DeploymentStatus"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for deployment connections */
["DeploymentOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order deployments by. */
	field: ValueTypes["DeploymentOrderField"] | Variable<any, string>
};
	/** Properties by which deployment connections can be ordered. */
["DeploymentOrderField"]:DeploymentOrderField;
	/** A protection rule. */
["DeploymentProtectionRule"]: AliasType<{
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
reviewers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DeploymentReviewerConnection"]],
	/** The timeout in minutes for this protection rule. */
	timeout?:boolean | `@${string}`,
	/** The type of protection rule. */
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentProtectionRule. */
["DeploymentProtectionRuleConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DeploymentProtectionRuleEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DeploymentProtectionRule"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentProtectionRuleEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DeploymentProtectionRule"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible protection rule types. */
["DeploymentProtectionRuleType"]:DeploymentProtectionRuleType;
	/** A request to deploy a workflow run to an environment. */
["DeploymentRequest"]: AliasType<{
	/** Whether or not the current user can approve the deployment */
	currentUserCanApprove?:boolean | `@${string}`,
	/** The target environment of the deployment */
	environment?:ValueTypes["Environment"],
reviewers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DeploymentReviewerConnection"]],
	/** The wait timer in minutes configured in the environment */
	waitTimer?:boolean | `@${string}`,
	/** The wait timer in minutes configured in the environment */
	waitTimerStartedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentRequest. */
["DeploymentRequestConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DeploymentRequestEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DeploymentRequest"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentRequestEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DeploymentRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** A deployment review. */
["DeploymentReview"]: AliasType<{
	/** The comment the user left. */
	comment?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
environments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["EnvironmentConnection"]],
	id?:boolean | `@${string}`,
	/** The decision of the user. */
	state?:boolean | `@${string}`,
	/** The user that reviewed the deployment. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentReview. */
["DeploymentReviewConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DeploymentReviewEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DeploymentReview"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentReviewEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DeploymentReview"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states for a deployment review. */
["DeploymentReviewState"]:DeploymentReviewState;
	/** Users and teams. */
["DeploymentReviewer"]: AliasType<{		["...on Team"] : ValueTypes["Team"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentReviewer. */
["DeploymentReviewerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DeploymentReviewerEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DeploymentReviewer"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentReviewerEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DeploymentReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states in which a deployment can be. */
["DeploymentState"]:DeploymentState;
	/** Describes the status of a given deployment attempt. */
["DeploymentStatus"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the actor who triggered the deployment. */
	creator?:ValueTypes["Actor"],
	/** Identifies the deployment associated with status. */
	deployment?:ValueTypes["Deployment"],
	/** Identifies the description of the deployment. */
	description?:boolean | `@${string}`,
	/** Identifies the environment of the deployment at the time of this deployment status */
	environment?:boolean | `@${string}`,
	/** Identifies the environment URL of the deployment. */
	environmentUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the log URL of the deployment. */
	logUrl?:boolean | `@${string}`,
	/** Identifies the current state of the deployment. */
	state?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentStatus. */
["DeploymentStatusConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DeploymentStatusEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DeploymentStatus"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentStatusEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DeploymentStatus"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states for a deployment status. */
["DeploymentStatusState"]:DeploymentStatusState;
	/** The possible sides of a diff. */
["DiffSide"]:DiffSide;
	/** Autogenerated input type of DisablePullRequestAutoMerge */
["DisablePullRequestAutoMergeInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the pull request to disable auto merge on. */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of DisablePullRequestAutoMerge */
["DisablePullRequestAutoMergePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request auto merge was disabled on. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'disconnected' event on a given issue or pull request. */
["DisconnectedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reference originated in a different repository. */
	isCrossRepository?:boolean | `@${string}`,
	/** Issue or pull request from which the issue was disconnected. */
	source?:ValueTypes["ReferencedSubject"],
	/** Issue or pull request which was disconnected. */
	subject?:ValueTypes["ReferencedSubject"],
		__typename?: boolean | `@${string}`
}>;
	/** A discussion in a repository. */
["Discussion"]: AliasType<{
	/** Reason that the conversation was locked. */
	activeLockReason?:boolean | `@${string}`,
	/** The comment chosen as this discussion's answer, if any. */
	answer?:ValueTypes["DiscussionComment"],
	/** The time when a user chose this discussion's answer, if answered. */
	answerChosenAt?:boolean | `@${string}`,
	/** The user who chose this discussion's answer, if answered. */
	answerChosenBy?:ValueTypes["Actor"],
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The main text of the discussion post. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** The category for this discussion. */
	category?:ValueTypes["DiscussionCategory"],
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DiscussionCommentConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for labels returned from the connection. */
	orderBy?: ValueTypes["LabelOrder"] | undefined | null | Variable<any, string>},ValueTypes["LabelConnection"]],
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** `true` if the object is locked */
	locked?:boolean | `@${string}`,
	/** The number identifying this discussion within the repository. */
	number?:boolean | `@${string}`,
	/** The poll associated with this discussion, if one exists. */
	poll?:ValueTypes["DiscussionPoll"],
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
	/** The path for this discussion. */
	resourcePath?:boolean | `@${string}`,
	/** The title of this discussion. */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** Number of upvotes that this subject has received. */
	upvoteCount?:boolean | `@${string}`,
	/** The URL for this discussion. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A category for discussions in a repository. */
["DiscussionCategory"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** A description of this category. */
	description?:boolean | `@${string}`,
	/** An emoji representing this category. */
	emoji?:boolean | `@${string}`,
	/** This category's emoji rendered as HTML. */
	emojiHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
	isAnswerable?:boolean | `@${string}`,
	/** The name of this category. */
	name?:boolean | `@${string}`,
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
	/** The slug of this category. */
	slug?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DiscussionCategory. */
["DiscussionCategoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DiscussionCategoryEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DiscussionCategory"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DiscussionCategoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DiscussionCategory"],
		__typename?: boolean | `@${string}`
}>;
	/** A comment on a discussion. */
["DiscussionComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The time when this replied-to comment was deleted */
	deletedAt?:boolean | `@${string}`,
	/** The discussion this comment was created in */
	discussion?:ValueTypes["Discussion"],
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Has this comment been chosen as the answer of its discussion? */
	isAnswer?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
replies?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DiscussionCommentConnection"]],
	/** The discussion comment this comment is a reply to */
	replyTo?:ValueTypes["DiscussionComment"],
	/** The path for this discussion comment. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** Number of upvotes that this subject has received. */
	upvoteCount?:boolean | `@${string}`,
	/** The URL for this discussion comment. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Can the current user mark this comment as an answer? */
	viewerCanMarkAsAnswer?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Can the current user unmark this comment as an answer? */
	viewerCanUnmarkAsAnswer?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DiscussionComment. */
["DiscussionCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DiscussionCommentEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DiscussionComment"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DiscussionCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Discussion. */
["DiscussionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DiscussionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Discussion"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DiscussionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of discussions can be ordered upon return. */
["DiscussionOrder"]: {
	/** The direction in which to order discussions by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field by which to order discussions. */
	field: ValueTypes["DiscussionOrderField"] | Variable<any, string>
};
	/** Properties by which discussion connections can be ordered. */
["DiscussionOrderField"]:DiscussionOrderField;
	/** A poll for a discussion. */
["DiscussionPoll"]: AliasType<{
	/** The discussion that this poll belongs to. */
	discussion?:ValueTypes["Discussion"],
	id?:boolean | `@${string}`,
options?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** How to order the options for the discussion poll. */
	orderBy?: ValueTypes["DiscussionPollOptionOrder"] | undefined | null | Variable<any, string>},ValueTypes["DiscussionPollOptionConnection"]],
	/** The question that is being asked by this poll. */
	question?:boolean | `@${string}`,
	/** The total number of votes that have been cast for this poll. */
	totalVoteCount?:boolean | `@${string}`,
	/** Indicates if the viewer has permission to vote in this poll. */
	viewerCanVote?:boolean | `@${string}`,
	/** Indicates if the viewer has voted for any option in this poll. */
	viewerHasVoted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An option for a discussion poll. */
["DiscussionPollOption"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The text for this option. */
	option?:boolean | `@${string}`,
	/** The discussion poll that this option belongs to. */
	poll?:ValueTypes["DiscussionPoll"],
	/** The total number of votes that have been cast for this option. */
	totalVoteCount?:boolean | `@${string}`,
	/** Indicates if the viewer has voted for this option in the poll. */
	viewerHasVoted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DiscussionPollOption. */
["DiscussionPollOptionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["DiscussionPollOptionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["DiscussionPollOption"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DiscussionPollOptionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["DiscussionPollOption"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for discussion poll option connections. */
["DiscussionPollOptionOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order poll options by. */
	field: ValueTypes["DiscussionPollOptionOrderField"] | Variable<any, string>
};
	/** Properties by which discussion poll option connections can be ordered. */
["DiscussionPollOptionOrderField"]:DiscussionPollOptionOrderField;
	/** Autogenerated input type of DismissPullRequestReview */
["DismissPullRequestReviewInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The contents of the pull request review dismissal message. */
	message: string | Variable<any, string>,
	/** The Node ID of the pull request review to modify. */
	pullRequestReviewId: string | Variable<any, string>
};
	/** Autogenerated return type of DismissPullRequestReview */
["DismissPullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The dismissed pull request review. */
	pullRequestReview?:ValueTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible reasons that a Dependabot alert was dismissed. */
["DismissReason"]:DismissReason;
	/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
["DismissRepositoryVulnerabilityAlertInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The reason the Dependabot alert is being dismissed. */
	dismissReason: ValueTypes["DismissReason"] | Variable<any, string>,
	/** The Dependabot alert ID to dismiss. */
	repositoryVulnerabilityAlertId: string | Variable<any, string>
};
	/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */
["DismissRepositoryVulnerabilityAlertPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The Dependabot alert that was dismissed */
	repositoryVulnerabilityAlert?:ValueTypes["RepositoryVulnerabilityAlert"],
		__typename?: boolean | `@${string}`
}>;
	/** A draft issue within a project. */
["DraftIssue"]: AliasType<{
assignees?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
	/** The body of the draft issue. */
	body?:boolean | `@${string}`,
	/** The body of the draft issue rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body of the draft issue rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created this draft issue. */
	creator?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** The project (beta) that contains this draft issue. */
	project?:ValueTypes["ProjectNext"],
	/** The project (beta) item that wraps this draft issue. */
	projectItem?:ValueTypes["ProjectNextItem"],
projectV2Items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2ItemConnection"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
	/** The title of the draft issue */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Specifies a review comment to be left with a Pull Request Review. */
["DraftPullRequestReviewComment"]: {
	/** Body of the comment to leave. */
	body: string | Variable<any, string>,
	/** Path to the file being commented on. */
	path: string | Variable<any, string>,
	/** Position in the file to leave a comment on. */
	position: number | Variable<any, string>
};
	/** Specifies a review comment thread to be left with a Pull Request Review. */
["DraftPullRequestReviewThread"]: {
	/** Body of the comment to leave. */
	body: string | Variable<any, string>,
	/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
	line: number | Variable<any, string>,
	/** Path to the file being commented on. */
	path: string | Variable<any, string>,
	/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
	side?: ValueTypes["DiffSide"] | undefined | null | Variable<any, string>,
	/** The first line of the range to which the comment refers. */
	startLine?: number | undefined | null | Variable<any, string>,
	/** The side of the diff on which the start line resides. */
	startSide?: ValueTypes["DiffSide"] | undefined | null | Variable<any, string>
};
	/** Autogenerated input type of EnablePullRequestAutoMerge */
["EnablePullRequestAutoMergeInput"]: {
	/** The email address to associate with this merge. */
	authorEmail?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Commit body to use for the commit when the PR is mergable; if omitted, a
default message will be used. NOTE: when merging with a merge queue any input
value for commit message is ignored. */
	commitBody?: string | undefined | null | Variable<any, string>,
	/** Commit headline to use for the commit when the PR is mergable; if omitted, a
default message will be used. NOTE: when merging with a merge queue any input
value for commit headline is ignored. */
	commitHeadline?: string | undefined | null | Variable<any, string>,
	/** The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
with a merge queue any input value for merge method is ignored. */
	mergeMethod?: ValueTypes["PullRequestMergeMethod"] | undefined | null | Variable<any, string>,
	/** ID of the pull request to enable auto-merge on. */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of EnablePullRequestAutoMerge */
["EnablePullRequestAutoMergePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request auto-merge was enabled on. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** An account to manage multiple organizations with consolidated policy and billing. */
["Enterprise"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** Enterprise billing information visible to enterprise billing managers. */
	billingInfo?:ValueTypes["EnterpriseBillingInfo"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The description of the enterprise. */
	description?:boolean | `@${string}`,
	/** The description of the enterprise as HTML. */
	descriptionHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The location of the enterprise. */
	location?:boolean | `@${string}`,
members?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Only return members within the selected GitHub Enterprise deployment */
	deployment?: ValueTypes["EnterpriseUserDeployment"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Only return members with this two-factor authentication status. Does not
include members who only have an account on a GitHub Enterprise Server instance. */
	hasTwoFactorEnabled?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for members returned from the connection. */
	orderBy?: ValueTypes["EnterpriseMemberOrder"] | undefined | null | Variable<any, string>,	/** Only return members within the organizations with these logins */
	organizationLogins?: Array<string> | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>,	/** The role of the user in the enterprise organization or server. */
	role?: ValueTypes["EnterpriseUserAccountMembershipRole"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseMemberConnection"]],
	/** The name of the enterprise. */
	name?:boolean | `@${string}`,
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations returned from the connection. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>,	/** The viewer's role in an organization. */
	viewerOrganizationRole?: ValueTypes["RoleInOrganization"] | undefined | null | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** Enterprise information only visible to enterprise owners. */
	ownerInfo?:ValueTypes["EnterpriseOwnerInfo"],
	/** The HTTP path for this enterprise. */
	resourcePath?:boolean | `@${string}`,
	/** The URL-friendly identifier for the enterprise. */
	slug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	url?:boolean | `@${string}`,
	/** Is the current viewer an admin of this enterprise? */
	viewerIsAdmin?:boolean | `@${string}`,
	/** The URL of the enterprise website. */
	websiteUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["EnterpriseAdministratorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseAdministratorEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A User who is an administrator of an enterprise. */
["EnterpriseAdministratorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["User"],
	/** The role of the administrator. */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An invitation for a user to become an owner or billing manager of an enterprise. */
["EnterpriseAdministratorInvitation"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The email of the person who was invited to the enterprise. */
	email?:boolean | `@${string}`,
	/** The enterprise the invitation is for. */
	enterprise?:ValueTypes["Enterprise"],
	id?:boolean | `@${string}`,
	/** The user who was invited to the enterprise. */
	invitee?:ValueTypes["User"],
	/** The user who created the invitation. */
	inviter?:ValueTypes["User"],
	/** The invitee's pending role in the enterprise (owner or billing_manager). */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseAdministratorInvitation. */
["EnterpriseAdministratorInvitationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseAdministratorInvitationEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["EnterpriseAdministratorInvitation"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseAdministratorInvitationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["EnterpriseAdministratorInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for enterprise administrator invitation connections */
["EnterpriseAdministratorInvitationOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order enterprise administrator invitations by. */
	field: ValueTypes["EnterpriseAdministratorInvitationOrderField"] | Variable<any, string>
};
	/** Properties by which enterprise administrator invitation connections can be ordered. */
["EnterpriseAdministratorInvitationOrderField"]:EnterpriseAdministratorInvitationOrderField;
	/** The possible administrator roles in an enterprise account. */
["EnterpriseAdministratorRole"]:EnterpriseAdministratorRole;
	/** The possible values for the enterprise allow private repository forking policy value. */
["EnterpriseAllowPrivateRepositoryForkingPolicyValue"]:EnterpriseAllowPrivateRepositoryForkingPolicyValue;
	/** Metadata for an audit entry containing enterprise account information. */
["EnterpriseAuditEntryData"]:AliasType<{
		/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`;
		['...on MembersCanDeleteReposClearAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposClearAuditEntry"],keyof ValueTypes["EnterpriseAuditEntryData"]>;
		['...on MembersCanDeleteReposDisableAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposDisableAuditEntry"],keyof ValueTypes["EnterpriseAuditEntryData"]>;
		['...on MembersCanDeleteReposEnableAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposEnableAuditEntry"],keyof ValueTypes["EnterpriseAuditEntryData"]>;
		['...on OrgInviteToBusinessAuditEntry']?: Omit<ValueTypes["OrgInviteToBusinessAuditEntry"],keyof ValueTypes["EnterpriseAuditEntryData"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ValueTypes["EnterpriseAuditEntryData"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ValueTypes["EnterpriseAuditEntryData"]>;
		['...on RepositoryVisibilityChangeDisableAuditEntry']?: Omit<ValueTypes["RepositoryVisibilityChangeDisableAuditEntry"],keyof ValueTypes["EnterpriseAuditEntryData"]>;
		['...on RepositoryVisibilityChangeEnableAuditEntry']?: Omit<ValueTypes["RepositoryVisibilityChangeEnableAuditEntry"],keyof ValueTypes["EnterpriseAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Enterprise billing information visible to enterprise billing managers and owners. */
["EnterpriseBillingInfo"]: AliasType<{
	/** The number of licenseable users/emails across the enterprise. */
	allLicensableUsersCount?:boolean | `@${string}`,
	/** The number of data packs used by all organizations owned by the enterprise. */
	assetPacks?:boolean | `@${string}`,
	/** The bandwidth quota in GB for all organizations owned by the enterprise. */
	bandwidthQuota?:boolean | `@${string}`,
	/** The bandwidth usage in GB for all organizations owned by the enterprise. */
	bandwidthUsage?:boolean | `@${string}`,
	/** The bandwidth usage as a percentage of the bandwidth quota. */
	bandwidthUsagePercentage?:boolean | `@${string}`,
	/** The storage quota in GB for all organizations owned by the enterprise. */
	storageQuota?:boolean | `@${string}`,
	/** The storage usage in GB for all organizations owned by the enterprise. */
	storageUsage?:boolean | `@${string}`,
	/** The storage usage as a percentage of the storage quota. */
	storageUsagePercentage?:boolean | `@${string}`,
	/** The number of available licenses across all owned organizations based on the unique number of billable users. */
	totalAvailableLicenses?:boolean | `@${string}`,
	/** The total number of licenses allocated. */
	totalLicenses?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible values for the enterprise base repository permission setting. */
["EnterpriseDefaultRepositoryPermissionSettingValue"]:EnterpriseDefaultRepositoryPermissionSettingValue;
	/** The possible values for an enabled/disabled enterprise setting. */
["EnterpriseEnabledDisabledSettingValue"]:EnterpriseEnabledDisabledSettingValue;
	/** The possible values for an enabled/no policy enterprise setting. */
["EnterpriseEnabledSettingValue"]:EnterpriseEnabledSettingValue;
	/** An identity provider configured to provision identities for an enterprise. */
["EnterpriseIdentityProvider"]: AliasType<{
	/** The digest algorithm used to sign SAML requests for the identity provider. */
	digestMethod?:boolean | `@${string}`,
	/** The enterprise this identity provider belongs to. */
	enterprise?:ValueTypes["Enterprise"],
externalIdentities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter to external identities with the users login */
	login?: string | undefined | null | Variable<any, string>,	/** Filter to external identities with valid org membership only */
	membersOnly?: boolean | undefined | null | Variable<any, string>,	/** Filter to external identities with the users userName/NameID attribute */
	userName?: string | undefined | null | Variable<any, string>},ValueTypes["ExternalIdentityConnection"]],
	id?:boolean | `@${string}`,
	/** The x509 certificate used by the identity provider to sign assertions and responses. */
	idpCertificate?:boolean | `@${string}`,
	/** The Issuer Entity ID for the SAML identity provider. */
	issuer?:boolean | `@${string}`,
	/** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
	recoveryCodes?:boolean | `@${string}`,
	/** The signature algorithm used to sign SAML requests for the identity provider. */
	signatureMethod?:boolean | `@${string}`,
	/** The URL endpoint for the identity provider's SAML SSO. */
	ssoUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An object that is a member of an enterprise. */
["EnterpriseMember"]: AliasType<{		["...on EnterpriseUserAccount"] : ValueTypes["EnterpriseUserAccount"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseMember. */
["EnterpriseMemberConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseMemberEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["EnterpriseMember"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A User who is a member of an enterprise through one or more organizations. */
["EnterpriseMemberEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["EnterpriseMember"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for enterprise member connections. */
["EnterpriseMemberOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order enterprise members by. */
	field: ValueTypes["EnterpriseMemberOrderField"] | Variable<any, string>
};
	/** Properties by which enterprise member connections can be ordered. */
["EnterpriseMemberOrderField"]:EnterpriseMemberOrderField;
	/** The possible values for the enterprise members can create repositories setting. */
["EnterpriseMembersCanCreateRepositoriesSettingValue"]:EnterpriseMembersCanCreateRepositoriesSettingValue;
	/** The possible values for the members can make purchases setting. */
["EnterpriseMembersCanMakePurchasesSettingValue"]:EnterpriseMembersCanMakePurchasesSettingValue;
	/** The connection type for Organization. */
["EnterpriseOrganizationMembershipConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseOrganizationMembershipEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Organization"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An enterprise organization that a user is a member of. */
["EnterpriseOrganizationMembershipEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Organization"],
	/** The role of the user in the enterprise membership. */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["EnterpriseOutsideCollaboratorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseOutsideCollaboratorEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A User who is an outside collaborator of an enterprise through one or more organizations. */
["EnterpriseOutsideCollaboratorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["User"],
repositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories. */
	orderBy?: ValueTypes["RepositoryOrder"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseRepositoryInfoConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Enterprise information only visible to enterprise owners. */
["EnterpriseOwnerInfo"]: AliasType<{
admins?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Only return administrators with this two-factor authentication status. */
	hasTwoFactorEnabled?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for administrators returned from the connection. */
	orderBy?: ValueTypes["EnterpriseMemberOrder"] | undefined | null | Variable<any, string>,	/** Only return members within the organizations with these logins */
	organizationLogins?: Array<string> | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>,	/** The role to filter by. */
	role?: ValueTypes["EnterpriseAdministratorRole"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseAdministratorConnection"]],
affiliatedUsersWithTwoFactorDisabled?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
	/** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
	affiliatedUsersWithTwoFactorDisabledExist?:boolean | `@${string}`,
	/** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
	allowPrivateRepositoryForkingSetting?:boolean | `@${string}`,
allowPrivateRepositoryForkingSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** The value for the allow private repository forking policy on the enterprise. */
	allowPrivateRepositoryForkingSettingPolicyValue?:boolean | `@${string}`,
	/** The setting value for base repository permissions for organizations in this enterprise. */
	defaultRepositoryPermissionSetting?:boolean | `@${string}`,
defaultRepositoryPermissionSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The permission to find organizations for. */
	value: ValueTypes["DefaultRepositoryPermissionField"] | Variable<any, string>},ValueTypes["OrganizationConnection"]],
domains?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Filter whether or not the domain is approved. */
	isApproved?: boolean | undefined | null | Variable<any, string>,	/** Filter whether or not the domain is verified. */
	isVerified?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for verifiable domains returned. */
	orderBy?: ValueTypes["VerifiableDomainOrder"] | undefined | null | Variable<any, string>},ValueTypes["VerifiableDomainConnection"]],
enterpriseServerInstallations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Whether or not to only return installations discovered via GitHub Connect. */
	connectedOnly?: boolean | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for Enterprise Server installations returned. */
	orderBy?: ValueTypes["EnterpriseServerInstallationOrder"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseServerInstallationConnection"]],
	/** The setting value for whether the enterprise has an IP allow list enabled. */
	ipAllowListEnabledSetting?:boolean | `@${string}`,
ipAllowListEntries?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for IP allow list entries returned. */
	orderBy?: ValueTypes["IpAllowListEntryOrder"] | undefined | null | Variable<any, string>},ValueTypes["IpAllowListEntryConnection"]],
	/** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
	ipAllowListForInstalledAppsEnabledSetting?:boolean | `@${string}`,
	/** Whether or not the base repository permission is currently being updated. */
	isUpdatingDefaultRepositoryPermission?:boolean | `@${string}`,
	/** Whether the two-factor authentication requirement is currently being enforced. */
	isUpdatingTwoFactorRequirement?:boolean | `@${string}`,
	/** The setting value for whether organization members with admin permissions on a
repository can change repository visibility. */
	membersCanChangeRepositoryVisibilitySetting?:boolean | `@${string}`,
membersCanChangeRepositoryVisibilitySettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** The setting value for whether members of organizations in the enterprise can create internal repositories. */
	membersCanCreateInternalRepositoriesSetting?:boolean | `@${string}`,
	/** The setting value for whether members of organizations in the enterprise can create private repositories. */
	membersCanCreatePrivateRepositoriesSetting?:boolean | `@${string}`,
	/** The setting value for whether members of organizations in the enterprise can create public repositories. */
	membersCanCreatePublicRepositoriesSetting?:boolean | `@${string}`,
	/** The setting value for whether members of organizations in the enterprise can create repositories. */
	membersCanCreateRepositoriesSetting?:boolean | `@${string}`,
membersCanCreateRepositoriesSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting to find organizations for. */
	value: ValueTypes["OrganizationMembersCanCreateRepositoriesSettingValue"] | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** The setting value for whether members with admin permissions for repositories can delete issues. */
	membersCanDeleteIssuesSetting?:boolean | `@${string}`,
membersCanDeleteIssuesSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
	membersCanDeleteRepositoriesSetting?:boolean | `@${string}`,
membersCanDeleteRepositoriesSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
	membersCanInviteCollaboratorsSetting?:boolean | `@${string}`,
membersCanInviteCollaboratorsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
	membersCanMakePurchasesSetting?:boolean | `@${string}`,
	/** The setting value for whether members with admin permissions for repositories can update protected branches. */
	membersCanUpdateProtectedBranchesSetting?:boolean | `@${string}`,
membersCanUpdateProtectedBranchesSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** The setting value for whether members can view dependency insights. */
	membersCanViewDependencyInsightsSetting?:boolean | `@${string}`,
membersCanViewDependencyInsightsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
	notificationDeliveryRestrictionEnabledSetting?:boolean | `@${string}`,
	/** The OIDC Identity Provider for the enterprise. */
	oidcProvider?:ValueTypes["OIDCProvider"],
	/** The setting value for whether organization projects are enabled for organizations in this enterprise. */
	organizationProjectsSetting?:boolean | `@${string}`,
organizationProjectsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
outsideCollaborators?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Only return outside collaborators with this two-factor authentication status. */
	hasTwoFactorEnabled?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** The login of one specific outside collaborator. */
	login?: string | undefined | null | Variable<any, string>,	/** Ordering options for outside collaborators returned from the connection. */
	orderBy?: ValueTypes["EnterpriseMemberOrder"] | undefined | null | Variable<any, string>,	/** Only return outside collaborators within the organizations with these logins */
	organizationLogins?: Array<string> | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>,	/** Only return outside collaborators on repositories with this visibility. */
	visibility?: ValueTypes["RepositoryVisibility"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseOutsideCollaboratorConnection"]],
pendingAdminInvitations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pending enterprise administrator invitations returned from the connection. */
	orderBy?: ValueTypes["EnterpriseAdministratorInvitationOrder"] | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>,	/** The role to filter by. */
	role?: ValueTypes["EnterpriseAdministratorRole"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseAdministratorInvitationConnection"]],
pendingCollaboratorInvitations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pending repository collaborator invitations returned from the connection. */
	orderBy?: ValueTypes["RepositoryInvitationOrder"] | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["RepositoryInvitationConnection"]],
pendingMemberInvitations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Only return invitations within the organizations with these logins */
	organizationLogins?: Array<string> | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["EnterprisePendingMemberInvitationConnection"]],
	/** The setting value for whether repository projects are enabled in this enterprise. */
	repositoryProjectsSetting?:boolean | `@${string}`,
repositoryProjectsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** The SAML Identity Provider for the enterprise. When used by a GitHub App,
requires an installation token with read and write access to members. */
	samlIdentityProvider?:ValueTypes["EnterpriseIdentityProvider"],
samlIdentityProviderSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: ValueTypes["IdentityProviderConfigurationState"] | Variable<any, string>},ValueTypes["OrganizationConnection"]],
supportEntitlements?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for support entitlement users returned from the connection. */
	orderBy?: ValueTypes["EnterpriseMemberOrder"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseMemberConnection"]],
	/** The setting value for whether team discussions are enabled for organizations in this enterprise. */
	teamDiscussionsSetting?:boolean | `@${string}`,
teamDiscussionsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
	twoFactorRequiredSetting?:boolean | `@${string}`,
twoFactorRequiredSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations with this setting. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The setting value to find organizations for. */
	value: boolean | Variable<any, string>},ValueTypes["OrganizationConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for OrganizationInvitation. */
["EnterprisePendingMemberInvitationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterprisePendingMemberInvitationEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["OrganizationInvitation"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** Identifies the total count of unique users in the connection. */
	totalUniqueUserCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An invitation to be a member in an enterprise organization. */
["EnterprisePendingMemberInvitationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["OrganizationInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** A subset of repository information queryable from an enterprise. */
["EnterpriseRepositoryInfo"]: AliasType<{
	id?:boolean | `@${string}`,
	/** Identifies if the repository is private or internal. */
	isPrivate?:boolean | `@${string}`,
	/** The repository's name. */
	name?:boolean | `@${string}`,
	/** The repository's name with owner. */
	nameWithOwner?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseRepositoryInfo. */
["EnterpriseRepositoryInfoConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseRepositoryInfoEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["EnterpriseRepositoryInfo"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseRepositoryInfoEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["EnterpriseRepositoryInfo"],
		__typename?: boolean | `@${string}`
}>;
	/** An Enterprise Server installation. */
["EnterpriseServerInstallation"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The customer name to which the Enterprise Server installation belongs. */
	customerName?:boolean | `@${string}`,
	/** The host name of the Enterprise Server installation. */
	hostName?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
	isConnected?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
userAccounts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for Enterprise Server user accounts returned from the connection. */
	orderBy?: ValueTypes["EnterpriseServerUserAccountOrder"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseServerUserAccountConnection"]],
userAccountsUploads?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for Enterprise Server user accounts uploads returned from the connection. */
	orderBy?: ValueTypes["EnterpriseServerUserAccountsUploadOrder"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseServerUserAccountsUploadConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseServerInstallation. */
["EnterpriseServerInstallationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseServerInstallationEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["EnterpriseServerInstallation"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseServerInstallationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["EnterpriseServerInstallation"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Enterprise Server installation connections. */
["EnterpriseServerInstallationOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order Enterprise Server installations by. */
	field: ValueTypes["EnterpriseServerInstallationOrderField"] | Variable<any, string>
};
	/** Properties by which Enterprise Server installation connections can be ordered. */
["EnterpriseServerInstallationOrderField"]:EnterpriseServerInstallationOrderField;
	/** A user account on an Enterprise Server installation. */
["EnterpriseServerUserAccount"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
emails?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for Enterprise Server user account emails returned from the connection. */
	orderBy?: ValueTypes["EnterpriseServerUserAccountEmailOrder"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseServerUserAccountEmailConnection"]],
	/** The Enterprise Server installation on which this user account exists. */
	enterpriseServerInstallation?:ValueTypes["EnterpriseServerInstallation"],
	id?:boolean | `@${string}`,
	/** Whether the user account is a site administrator on the Enterprise Server installation. */
	isSiteAdmin?:boolean | `@${string}`,
	/** The login of the user account on the Enterprise Server installation. */
	login?:boolean | `@${string}`,
	/** The profile name of the user account on the Enterprise Server installation. */
	profileName?:boolean | `@${string}`,
	/** The date and time when the user account was created on the Enterprise Server installation. */
	remoteCreatedAt?:boolean | `@${string}`,
	/** The ID of the user account on the Enterprise Server installation. */
	remoteUserId?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseServerUserAccount. */
["EnterpriseServerUserAccountConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseServerUserAccountEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["EnterpriseServerUserAccount"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseServerUserAccountEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["EnterpriseServerUserAccount"],
		__typename?: boolean | `@${string}`
}>;
	/** An email belonging to a user account on an Enterprise Server installation. */
["EnterpriseServerUserAccountEmail"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The email address. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Indicates whether this is the primary email of the associated user account. */
	isPrimary?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The user account to which the email belongs. */
	userAccount?:ValueTypes["EnterpriseServerUserAccount"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseServerUserAccountEmail. */
["EnterpriseServerUserAccountEmailConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseServerUserAccountEmailEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["EnterpriseServerUserAccountEmail"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseServerUserAccountEmailEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["EnterpriseServerUserAccountEmail"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Enterprise Server user account email connections. */
["EnterpriseServerUserAccountEmailOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order emails by. */
	field: ValueTypes["EnterpriseServerUserAccountEmailOrderField"] | Variable<any, string>
};
	/** Properties by which Enterprise Server user account email connections can be ordered. */
["EnterpriseServerUserAccountEmailOrderField"]:EnterpriseServerUserAccountEmailOrderField;
	/** Ordering options for Enterprise Server user account connections. */
["EnterpriseServerUserAccountOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order user accounts by. */
	field: ValueTypes["EnterpriseServerUserAccountOrderField"] | Variable<any, string>
};
	/** Properties by which Enterprise Server user account connections can be ordered. */
["EnterpriseServerUserAccountOrderField"]:EnterpriseServerUserAccountOrderField;
	/** A user accounts upload from an Enterprise Server installation. */
["EnterpriseServerUserAccountsUpload"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The enterprise to which this upload belongs. */
	enterprise?:ValueTypes["Enterprise"],
	/** The Enterprise Server installation for which this upload was generated. */
	enterpriseServerInstallation?:ValueTypes["EnterpriseServerInstallation"],
	id?:boolean | `@${string}`,
	/** The name of the file uploaded. */
	name?:boolean | `@${string}`,
	/** The synchronization state of the upload */
	syncState?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseServerUserAccountsUpload. */
["EnterpriseServerUserAccountsUploadConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnterpriseServerUserAccountsUploadEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["EnterpriseServerUserAccountsUpload"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseServerUserAccountsUploadEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["EnterpriseServerUserAccountsUpload"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Enterprise Server user accounts upload connections. */
["EnterpriseServerUserAccountsUploadOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order user accounts uploads by. */
	field: ValueTypes["EnterpriseServerUserAccountsUploadOrderField"] | Variable<any, string>
};
	/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
["EnterpriseServerUserAccountsUploadOrderField"]:EnterpriseServerUserAccountsUploadOrderField;
	/** Synchronization state of the Enterprise Server user accounts upload */
["EnterpriseServerUserAccountsUploadSyncState"]:EnterpriseServerUserAccountsUploadSyncState;
	/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
["EnterpriseUserAccount"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The enterprise in which this user account exists. */
	enterprise?:ValueTypes["Enterprise"],
	id?:boolean | `@${string}`,
	/** An identifier for the enterprise user account, a login or email address */
	login?:boolean | `@${string}`,
	/** The name of the enterprise user account */
	name?:boolean | `@${string}`,
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for organizations returned from the connection. */
	orderBy?: ValueTypes["OrganizationOrder"] | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>,	/** The role of the user in the enterprise organization. */
	role?: ValueTypes["EnterpriseUserAccountMembershipRole"] | undefined | null | Variable<any, string>},ValueTypes["EnterpriseOrganizationMembershipConnection"]],
	/** The HTTP path for this user. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this user. */
	url?:boolean | `@${string}`,
	/** The user within the enterprise. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible roles for enterprise membership. */
["EnterpriseUserAccountMembershipRole"]:EnterpriseUserAccountMembershipRole;
	/** The possible GitHub Enterprise deployments where this user can exist. */
["EnterpriseUserDeployment"]:EnterpriseUserDeployment;
	/** An environment. */
["Environment"]: AliasType<{
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the environment */
	name?:boolean | `@${string}`,
protectionRules?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DeploymentProtectionRuleConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Environment. */
["EnvironmentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["EnvironmentEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Environment"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnvironmentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Environment"],
		__typename?: boolean | `@${string}`
}>;
	/** An external identity provisioned by SAML SSO or SCIM. */
["ExternalIdentity"]: AliasType<{
	/** The GUID for this identity */
	guid?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Organization invitation for this SCIM-provisioned external identity */
	organizationInvitation?:ValueTypes["OrganizationInvitation"],
	/** SAML Identity attributes */
	samlIdentity?:ValueTypes["ExternalIdentitySamlAttributes"],
	/** SCIM Identity attributes */
	scimIdentity?:ValueTypes["ExternalIdentityScimAttributes"],
	/** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** An attribute for the External Identity attributes collection */
["ExternalIdentityAttribute"]: AliasType<{
	/** The attribute metadata as JSON */
	metadata?:boolean | `@${string}`,
	/** The attribute name */
	name?:boolean | `@${string}`,
	/** The attribute value */
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ExternalIdentity. */
["ExternalIdentityConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ExternalIdentityEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ExternalIdentity"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ExternalIdentityEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ExternalIdentity"],
		__typename?: boolean | `@${string}`
}>;
	/** SAML attributes for the External Identity */
["ExternalIdentitySamlAttributes"]: AliasType<{
	/** SAML Identity attributes */
	attributes?:ValueTypes["ExternalIdentityAttribute"],
	/** The emails associated with the SAML identity */
	emails?:ValueTypes["UserEmailMetadata"],
	/** Family name of the SAML identity */
	familyName?:boolean | `@${string}`,
	/** Given name of the SAML identity */
	givenName?:boolean | `@${string}`,
	/** The groups linked to this identity in IDP */
	groups?:boolean | `@${string}`,
	/** The NameID of the SAML identity */
	nameId?:boolean | `@${string}`,
	/** The userName of the SAML identity */
	username?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** SCIM attributes for the External Identity */
["ExternalIdentityScimAttributes"]: AliasType<{
	/** The emails associated with the SCIM identity */
	emails?:ValueTypes["UserEmailMetadata"],
	/** Family name of the SCIM identity */
	familyName?:boolean | `@${string}`,
	/** Given name of the SCIM identity */
	givenName?:boolean | `@${string}`,
	/** The groups linked to this identity in IDP */
	groups?:boolean | `@${string}`,
	/** The userName of the SCIM identity */
	username?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A command to add a file at the given path with the given contents as part of a
commit.  Any existing file at that that path will be replaced. */
["FileAddition"]: {
	/** The base64 encoded contents of the file */
	contents: ValueTypes["Base64String"] | Variable<any, string>,
	/** The path in the repository where the file will be located */
	path: string | Variable<any, string>
};
	/** A description of a set of changes to a file tree to be made as part of
a git commit, modeled as zero or more file `additions` and zero or more
file `deletions`.

Both fields are optional; omitting both will produce a commit with no
file changes.

`deletions` and `additions` describe changes to files identified
by their path in the git tree using unix-style path separators, i.e.
`/`.  The root of a git tree is an empty string, so paths are not
slash-prefixed.

`path` values must be unique across all `additions` and `deletions`
provided.  Any duplication will result in a validation error.

### Encoding

File contents must be provided in full for each `FileAddition`.

The `contents` of a `FileAddition` must be encoded using RFC 4648
compliant base64, i.e. correct padding is required and no characters
outside the standard alphabet may be used.  Invalid base64
encoding will be rejected with a validation error.

The encoded contents may be binary.

For text files, no assumptions are made about the character encoding of
the file contents (after base64 decoding).  No charset transcoding or
line-ending normalization will be performed; it is the client's
responsibility to manage the character encoding of files they provide.
However, for maximum compatibility we recommend using UTF-8 encoding
and ensuring that all files in a repository use a consistent
line-ending convention (`\n` or `\r\n`), and that all files end
with a newline.

### Modeling file changes

Each of the the five types of conceptual changes that can be made in a
git commit can be described using the `FileChanges` type as follows:

1. New file addition: create file `hello world\n` at path `docs/README.txt`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }

2. Existing file modification: change existing `docs/README.txt` to have new
   content `new content here\n`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("new content here\n")
           }
         ]
       }

3. Existing file deletion: remove existing file `docs/README.txt`.
   Note that the path is required to exist -- specifying a
   path that does not exist on the given branch will abort the
   commit and return an error.

       {
         "deletions" [
           {
             "path": "docs/README.txt"
           }
         ]
       }


4. File rename with no changes: rename `docs/README.txt` with
   previous content `hello world\n` to the same content at
   `newdocs/README.txt`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }


5. File rename with changes: rename `docs/README.txt` with
   previous content `hello world\n` to a file at path
   `newdocs/README.txt` with content `new contents\n`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("new contents\n")
           }
         ]
       } */
["FileChanges"]: {
	/** File to add or change. */
	additions?: Array<ValueTypes["FileAddition"]> | undefined | null | Variable<any, string>,
	/** Files to delete. */
	deletions?: Array<ValueTypes["FileDeletion"]> | undefined | null | Variable<any, string>
};
	/** A command to delete the file at the given path as part of a commit. */
["FileDeletion"]: {
	/** The path to delete */
	path: string | Variable<any, string>
};
	/** The possible viewed states of a file . */
["FileViewedState"]:FileViewedState;
	/** Autogenerated input type of FollowOrganization */
["FollowOrganizationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the organization to follow. */
	organizationId: string | Variable<any, string>
};
	/** Autogenerated return type of FollowOrganization */
["FollowOrganizationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The organization that was followed. */
	organization?:ValueTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of FollowUser */
["FollowUserInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the user to follow. */
	userId: string | Variable<any, string>
};
	/** Autogenerated return type of FollowUser */
["FollowUserPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The user that was followed. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["FollowerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["UserEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["FollowingConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["UserEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A funding platform link for a repository. */
["FundingLink"]: AliasType<{
	/** The funding platform this link is for. */
	platform?:boolean | `@${string}`,
	/** The configured URL for this funding link. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible funding platforms for repository funding links. */
["FundingPlatform"]:FundingPlatform;
	/** A generic hovercard context with a message and icon */
["GenericHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A Gist. */
["Gist"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["GistCommentConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The gist description. */
	description?:boolean | `@${string}`,
files?: [{	/** The maximum number of files to return. */
	limit?: number | undefined | null | Variable<any, string>,	/** The oid of the files to return */
	oid?: ValueTypes["GitObjectID"] | undefined | null | Variable<any, string>},ValueTypes["GistFile"]],
forks?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for gists returned from the connection */
	orderBy?: ValueTypes["GistOrder"] | undefined | null | Variable<any, string>},ValueTypes["GistConnection"]],
	id?:boolean | `@${string}`,
	/** Identifies if the gist is a fork. */
	isFork?:boolean | `@${string}`,
	/** Whether the gist is public or not. */
	isPublic?:boolean | `@${string}`,
	/** The gist name. */
	name?:boolean | `@${string}`,
	/** The gist owner. */
	owner?:ValueTypes["RepositoryOwner"],
	/** Identifies when the gist was last pushed to. */
	pushedAt?:boolean | `@${string}`,
	/** The HTML path to this resource. */
	resourcePath?:boolean | `@${string}`,
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount?:boolean | `@${string}`,
stargazers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["StarOrder"] | undefined | null | Variable<any, string>},ValueTypes["StargazerConnection"]],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this Gist. */
	url?:boolean | `@${string}`,
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a comment on an Gist. */
["GistComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the gist. */
	authorAssociation?:boolean | `@${string}`,
	/** Identifies the comment body. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	/** The associated gist. */
	gist?:ValueTypes["Gist"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for GistComment. */
["GistCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["GistCommentEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["GistComment"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["GistCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["GistComment"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Gist. */
["GistConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["GistEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Gist"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["GistEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Gist"],
		__typename?: boolean | `@${string}`
}>;
	/** A file in a gist. */
["GistFile"]: AliasType<{
	/** The file name encoded to remove characters that are invalid in URL paths. */
	encodedName?:boolean | `@${string}`,
	/** The gist file encoding. */
	encoding?:boolean | `@${string}`,
	/** The file extension from the file name. */
	extension?:boolean | `@${string}`,
	/** Indicates if this file is an image. */
	isImage?:boolean | `@${string}`,
	/** Whether the file's contents were truncated. */
	isTruncated?:boolean | `@${string}`,
	/** The programming language this file is written in. */
	language?:ValueTypes["Language"],
	/** The gist file name. */
	name?:boolean | `@${string}`,
	/** The gist file size in bytes. */
	size?:boolean | `@${string}`,
text?: [{	/** Optionally truncate the returned file to this length. */
	truncate?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for gist connections */
["GistOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order repositories by. */
	field: ValueTypes["GistOrderField"] | Variable<any, string>
};
	/** Properties by which gist connections can be ordered. */
["GistOrderField"]:GistOrderField;
	/** The privacy of a Gist */
["GistPrivacy"]:GistPrivacy;
	/** Represents an actor in a Git commit (ie. an author or committer). */
["GitActor"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The timestamp of the Git action (authoring or committing). */
	date?:boolean | `@${string}`,
	/** The email in the Git commit. */
	email?:boolean | `@${string}`,
	/** The name in the Git commit. */
	name?:boolean | `@${string}`,
	/** The GitHub user corresponding to the email field. Null if no such user exists. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for GitActor. */
["GitActorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["GitActorEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["GitActor"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["GitActorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["GitActor"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents information about the GitHub instance. */
["GitHubMetadata"]: AliasType<{
	/** Returns a String that's a SHA of `github-services` */
	gitHubServicesSha?:boolean | `@${string}`,
	/** IP addresses that users connect to for git operations */
	gitIpAddresses?:boolean | `@${string}`,
	/** IP addresses that service hooks are sent from */
	hookIpAddresses?:boolean | `@${string}`,
	/** IP addresses that the importer connects from */
	importerIpAddresses?:boolean | `@${string}`,
	/** Whether or not users are verified */
	isPasswordAuthenticationVerifiable?:boolean | `@${string}`,
	/** IP addresses for GitHub Pages' A records */
	pagesIpAddresses?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git object. */
["GitObject"]:AliasType<{
		/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The Repository the Git object belongs to */
	repository?:ValueTypes["Repository"];
		['...on Blob']?: Omit<ValueTypes["Blob"],keyof ValueTypes["GitObject"]>;
		['...on Commit']?: Omit<ValueTypes["Commit"],keyof ValueTypes["GitObject"]>;
		['...on Tag']?: Omit<ValueTypes["Tag"],keyof ValueTypes["GitObject"]>;
		['...on Tree']?: Omit<ValueTypes["Tree"],keyof ValueTypes["GitObject"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A Git object ID. */
["GitObjectID"]:unknown;
	/** A fully qualified reference name (e.g. `refs/heads/master`). */
["GitRefname"]:unknown;
	/** Git SSH string */
["GitSSHRemote"]:unknown;
	/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
["GitSignature"]:AliasType<{
		/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ValueTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`;
		['...on GpgSignature']?: Omit<ValueTypes["GpgSignature"],keyof ValueTypes["GitSignature"]>;
		['...on SmimeSignature']?: Omit<ValueTypes["SmimeSignature"],keyof ValueTypes["GitSignature"]>;
		['...on SshSignature']?: Omit<ValueTypes["SshSignature"],keyof ValueTypes["GitSignature"]>;
		['...on UnknownSignature']?: Omit<ValueTypes["UnknownSignature"],keyof ValueTypes["GitSignature"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The state of a Git signature. */
["GitSignatureState"]:GitSignatureState;
	/** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
["GitTimestamp"]:unknown;
	/** Represents a GPG signature on a Commit or Tag. */
["GpgSignature"]: AliasType<{
	/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Hex-encoded ID of the key that signed this object. */
	keyId?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ValueTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
["GrantEnterpriseOrganizationsMigratorRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
	enterpriseId: string | Variable<any, string>,
	/** The login of the user to grant the migrator role */
	login: string | Variable<any, string>
};
	/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
["GrantEnterpriseOrganizationsMigratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["OrganizationConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of GrantMigratorRole */
["GrantMigratorRoleInput"]: {
	/** The user login or Team slug to grant the migrator role. */
	actor: string | Variable<any, string>,
	/** Specifies the type of the actor, can be either USER or TEAM. */
	actorType: ValueTypes["ActorType"] | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the organization that the user/team belongs to. */
	organizationId: string | Variable<any, string>
};
	/** Autogenerated return type of GrantMigratorRole */
["GrantMigratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Did the operation succeed? */
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A string containing HTML code. */
["HTML"]:unknown;
	/** Represents a 'head_ref_deleted' event on a given pull request. */
["HeadRefDeletedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the Ref associated with the `head_ref_deleted` event. */
	headRef?:ValueTypes["Ref"],
	/** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
	headRefName?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'head_ref_force_pushed' event on a given pull request. */
["HeadRefForcePushedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
	afterCommit?:ValueTypes["Commit"],
	/** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
	beforeCommit?:ValueTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
	/** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
	ref?:ValueTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'head_ref_restored' event on a given pull request. */
["HeadRefRestoredEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Detail needed to display a hovercard for a user */
["Hovercard"]: AliasType<{
	/** Each of the contexts for this hovercard */
	contexts?:ValueTypes["HovercardContext"],
		__typename?: boolean | `@${string}`
}>;
	/** An individual line of a hovercard */
["HovercardContext"]:AliasType<{
		/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`;
		['...on GenericHovercardContext']?: Omit<ValueTypes["GenericHovercardContext"],keyof ValueTypes["HovercardContext"]>;
		['...on OrganizationTeamsHovercardContext']?: Omit<ValueTypes["OrganizationTeamsHovercardContext"],keyof ValueTypes["HovercardContext"]>;
		['...on OrganizationsHovercardContext']?: Omit<ValueTypes["OrganizationsHovercardContext"],keyof ValueTypes["HovercardContext"]>;
		['...on ReviewStatusHovercardContext']?: Omit<ValueTypes["ReviewStatusHovercardContext"],keyof ValueTypes["HovercardContext"]>;
		['...on ViewerHovercardContext']?: Omit<ValueTypes["ViewerHovercardContext"],keyof ValueTypes["HovercardContext"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The possible states in which authentication can be configured with an identity provider. */
["IdentityProviderConfigurationState"]:IdentityProviderConfigurationState;
	/** Autogenerated input type of ImportProject */
["ImportProjectInput"]: {
	/** The description of Project. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** A list of columns containing issues and pull requests. */
	columnImports: Array<ValueTypes["ProjectColumnImport"]> | Variable<any, string>,
	/** The name of Project. */
	name: string | Variable<any, string>,
	/** The name of the Organization or User to create the Project under. */
	ownerName: string | Variable<any, string>,
	/** Whether the Project is public or not. */
	public?: boolean | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of ImportProject */
["ImportProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new Project! */
	project?:ValueTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of InviteEnterpriseAdmin */
["InviteEnterpriseAdminInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The email of the person to invite as an administrator. */
	email?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise to which you want to invite an administrator. */
	enterpriseId: string | Variable<any, string>,
	/** The login of a user to invite as an administrator. */
	invitee?: string | undefined | null | Variable<any, string>,
	/** The role of the administrator. */
	role?: ValueTypes["EnterpriseAdministratorRole"] | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of InviteEnterpriseAdmin */
["InviteEnterpriseAdminPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The created enterprise administrator invitation. */
	invitation?:ValueTypes["EnterpriseAdministratorInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible values for the IP allow list enabled setting. */
["IpAllowListEnabledSettingValue"]:IpAllowListEnabledSettingValue;
	/** An IP address or range of addresses that is allowed to access an owner's resources. */
["IpAllowListEntry"]: AliasType<{
	/** A single IP address or range of IP addresses in CIDR notation. */
	allowListValue?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the entry is currently active. */
	isActive?:boolean | `@${string}`,
	/** The name of the IP allow list entry. */
	name?:boolean | `@${string}`,
	/** The owner of the IP allow list entry. */
	owner?:ValueTypes["IpAllowListOwner"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for IpAllowListEntry. */
["IpAllowListEntryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["IpAllowListEntryEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["IpAllowListEntry"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IpAllowListEntryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["IpAllowListEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for IP allow list entry connections. */
["IpAllowListEntryOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order IP allow list entries by. */
	field: ValueTypes["IpAllowListEntryOrderField"] | Variable<any, string>
};
	/** Properties by which IP allow list entry connections can be ordered. */
["IpAllowListEntryOrderField"]:IpAllowListEntryOrderField;
	/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
["IpAllowListForInstalledAppsEnabledSettingValue"]:IpAllowListForInstalledAppsEnabledSettingValue;
	/** Types that can own an IP allow list. */
["IpAllowListOwner"]: AliasType<{		["...on App"] : ValueTypes["App"],
		["...on Enterprise"] : ValueTypes["Enterprise"],
		["...on Organization"] : ValueTypes["Organization"]
		__typename?: boolean | `@${string}`
}>;
	/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
["Issue"]: AliasType<{
	/** Reason that the conversation was locked. */
	activeLockReason?:boolean | `@${string}`,
assignees?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** Identifies the body of the issue. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The http path for this issue body */
	bodyResourcePath?:boolean | `@${string}`,
	/** Identifies the body of the issue rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** The http URL for this issue body */
	bodyUrl?:boolean | `@${string}`,
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for issue comments returned from the connection. */
	orderBy?: ValueTypes["IssueCommentOrder"] | undefined | null | Variable<any, string>},ValueTypes["IssueCommentConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
hovercard?: [{	/** Whether or not to include notification contexts */
	includeNotificationContexts?: boolean | undefined | null | Variable<any, string>},ValueTypes["Hovercard"]],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Indicates whether or not this issue is currently pinned to the repository issues list */
	isPinned?:boolean | `@${string}`,
	/** Is this issue read by the viewer */
	isReadByViewer?:boolean | `@${string}`,
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for labels returned from the connection. */
	orderBy?: ValueTypes["LabelOrder"] | undefined | null | Variable<any, string>},ValueTypes["LabelConnection"]],
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
linkedBranches?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["LinkedBranchConnection"]],
	/** `true` if the object is locked */
	locked?:boolean | `@${string}`,
	/** Identifies the milestone associated with the issue. */
	milestone?:ValueTypes["Milestone"],
	/** Identifies the issue number. */
	number?:boolean | `@${string}`,
participants?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
projectCards?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** A list of archived states to filter the cards by */
	archivedStates?: Array<ValueTypes["ProjectCardArchivedState"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectCardConnection"]],
projectItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Include archived items. */
	includeArchived?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2ItemConnection"]],
projectNext?: [{	/** The project (beta) number. */
	number: number | Variable<any, string>},ValueTypes["ProjectNext"]],
projectNextItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Include archived items. */
	includeArchived?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectNextItemConnection"]],
projectV2?: [{	/** The project number. */
	number: number | Variable<any, string>},ValueTypes["ProjectV2"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>,	/** How to order the returned projects (beta). */
	sortBy?: ValueTypes["ProjectNextOrderField"] | undefined | null | Variable<any, string>},ValueTypes["ProjectNextConnection"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** How to order the returned projects. */
	orderBy?: ValueTypes["ProjectV2Order"] | undefined | null | Variable<any, string>,	/** A project to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this issue */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the state of the issue. */
	state?:boolean | `@${string}`,
	/** Identifies the reason for the issue state. */
	stateReason?:boolean | `@${string}`,
timeline?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows filtering timeline events by a `since` timestamp. */
	since?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>},ValueTypes["IssueTimelineConnection"]],
timelineItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Filter timeline items by type. */
	itemTypes?: Array<ValueTypes["IssueTimelineItemsItemType"]> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter timeline items by a `since` timestamp. */
	since?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,	/** Skips the first _n_ elements in the list. */
	skip?: number | undefined | null | Variable<any, string>},ValueTypes["IssueTimelineItemsConnection"]],
	/** Identifies the issue title. */
	title?:boolean | `@${string}`,
	/** Identifies the issue title rendered to HTML. */
	titleHTML?:boolean | `@${string}`,
trackedInIssues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["IssueConnection"]],
trackedIssues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["IssueConnection"]],
trackedIssuesCount?: [{	/** Limit the count to tracked issues with the specified states. */
	states?: Array<ValueTypes["TrackedIssueStates"] | undefined | null> | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this issue */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible state reasons of a closed issue. */
["IssueClosedStateReason"]:IssueClosedStateReason;
	/** Represents a comment on an Issue. */
["IssueComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** Identifies the issue associated with the comment. */
	issue?:ValueTypes["Issue"],
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** Returns the pull request associated with the comment, if this comment was made on a
pull request. */
	pullRequest?:ValueTypes["PullRequest"],
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this issue comment */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this issue comment */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for IssueComment. */
["IssueCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["IssueCommentEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["IssueComment"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IssueCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["IssueComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of issue comments can be ordered upon return. */
["IssueCommentOrder"]: {
	/** The direction in which to order issue comments by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order issue comments by. */
	field: ValueTypes["IssueCommentOrderField"] | Variable<any, string>
};
	/** Properties by which issue comment connections can be ordered. */
["IssueCommentOrderField"]:IssueCommentOrderField;
	/** The connection type for Issue. */
["IssueConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["IssueEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Issue"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** This aggregates issues opened by a user within one repository. */
["IssueContributionsByRepository"]: AliasType<{
contributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ValueTypes["ContributionOrder"] | undefined | null | Variable<any, string>},ValueTypes["CreatedIssueContributionConnection"]],
	/** The repository in which the issues were opened. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IssueEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which to filter lists of issues. */
["IssueFilters"]: {
	/** List issues assigned to given name. Pass in `null` for issues with no assigned
user, and `*` for issues assigned to any user. */
	assignee?: string | undefined | null | Variable<any, string>,
	/** List issues created by given name. */
	createdBy?: string | undefined | null | Variable<any, string>,
	/** List issues where the list of label names exist on the issue. */
	labels?: Array<string> | undefined | null | Variable<any, string>,
	/** List issues where the given name is mentioned in the issue. */
	mentioned?: string | undefined | null | Variable<any, string>,
	/** List issues by given milestone argument. If an string representation of an
integer is passed, it should refer to a milestone by its database ID. Pass in
`null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
	milestone?: string | undefined | null | Variable<any, string>,
	/** List issues by given milestone argument. If an string representation of an
integer is passed, it should refer to a milestone by its number field. Pass in
`null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
	milestoneNumber?: string | undefined | null | Variable<any, string>,
	/** List issues that have been updated at or after the given date. */
	since?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,
	/** List issues filtered by the list of states given. */
	states?: Array<ValueTypes["IssueState"]> | undefined | null | Variable<any, string>,
	/** List issues subscribed to by viewer. */
	viewerSubscribed?: boolean | undefined | null | Variable<any, string>
};
	/** Used for return value of Repository.issueOrPullRequest. */
["IssueOrPullRequest"]: AliasType<{		["...on Issue"] : ValueTypes["Issue"],
		["...on PullRequest"] : ValueTypes["PullRequest"]
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of issues can be ordered upon return. */
["IssueOrder"]: {
	/** The direction in which to order issues by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order issues by. */
	field: ValueTypes["IssueOrderField"] | Variable<any, string>
};
	/** Properties by which issue connections can be ordered. */
["IssueOrderField"]:IssueOrderField;
	/** The possible states of an issue. */
["IssueState"]:IssueState;
	/** The possible state reasons of an issue. */
["IssueStateReason"]:IssueStateReason;
	/** A repository issue template. */
["IssueTemplate"]: AliasType<{
	/** The template purpose. */
	about?:boolean | `@${string}`,
	/** The suggested issue body. */
	body?:boolean | `@${string}`,
	/** The template filename. */
	filename?:boolean | `@${string}`,
	/** The template name. */
	name?:boolean | `@${string}`,
	/** The suggested issue title. */
	title?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for IssueTimelineItem. */
["IssueTimelineConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["IssueTimelineItemEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["IssueTimelineItem"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An item in an issue timeline */
["IssueTimelineItem"]: AliasType<{		["...on AssignedEvent"] : ValueTypes["AssignedEvent"],
		["...on ClosedEvent"] : ValueTypes["ClosedEvent"],
		["...on Commit"] : ValueTypes["Commit"],
		["...on CrossReferencedEvent"] : ValueTypes["CrossReferencedEvent"],
		["...on DemilestonedEvent"] : ValueTypes["DemilestonedEvent"],
		["...on IssueComment"] : ValueTypes["IssueComment"],
		["...on LabeledEvent"] : ValueTypes["LabeledEvent"],
		["...on LockedEvent"] : ValueTypes["LockedEvent"],
		["...on MilestonedEvent"] : ValueTypes["MilestonedEvent"],
		["...on ReferencedEvent"] : ValueTypes["ReferencedEvent"],
		["...on RenamedTitleEvent"] : ValueTypes["RenamedTitleEvent"],
		["...on ReopenedEvent"] : ValueTypes["ReopenedEvent"],
		["...on SubscribedEvent"] : ValueTypes["SubscribedEvent"],
		["...on TransferredEvent"] : ValueTypes["TransferredEvent"],
		["...on UnassignedEvent"] : ValueTypes["UnassignedEvent"],
		["...on UnlabeledEvent"] : ValueTypes["UnlabeledEvent"],
		["...on UnlockedEvent"] : ValueTypes["UnlockedEvent"],
		["...on UnsubscribedEvent"] : ValueTypes["UnsubscribedEvent"],
		["...on UserBlockedEvent"] : ValueTypes["UserBlockedEvent"]
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IssueTimelineItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["IssueTimelineItem"],
		__typename?: boolean | `@${string}`
}>;
	/** An item in an issue timeline */
["IssueTimelineItems"]: AliasType<{		["...on AddedToProjectEvent"] : ValueTypes["AddedToProjectEvent"],
		["...on AssignedEvent"] : ValueTypes["AssignedEvent"],
		["...on ClosedEvent"] : ValueTypes["ClosedEvent"],
		["...on CommentDeletedEvent"] : ValueTypes["CommentDeletedEvent"],
		["...on ConnectedEvent"] : ValueTypes["ConnectedEvent"],
		["...on ConvertedNoteToIssueEvent"] : ValueTypes["ConvertedNoteToIssueEvent"],
		["...on ConvertedToDiscussionEvent"] : ValueTypes["ConvertedToDiscussionEvent"],
		["...on CrossReferencedEvent"] : ValueTypes["CrossReferencedEvent"],
		["...on DemilestonedEvent"] : ValueTypes["DemilestonedEvent"],
		["...on DisconnectedEvent"] : ValueTypes["DisconnectedEvent"],
		["...on IssueComment"] : ValueTypes["IssueComment"],
		["...on LabeledEvent"] : ValueTypes["LabeledEvent"],
		["...on LockedEvent"] : ValueTypes["LockedEvent"],
		["...on MarkedAsDuplicateEvent"] : ValueTypes["MarkedAsDuplicateEvent"],
		["...on MentionedEvent"] : ValueTypes["MentionedEvent"],
		["...on MilestonedEvent"] : ValueTypes["MilestonedEvent"],
		["...on MovedColumnsInProjectEvent"] : ValueTypes["MovedColumnsInProjectEvent"],
		["...on PinnedEvent"] : ValueTypes["PinnedEvent"],
		["...on ReferencedEvent"] : ValueTypes["ReferencedEvent"],
		["...on RemovedFromProjectEvent"] : ValueTypes["RemovedFromProjectEvent"],
		["...on RenamedTitleEvent"] : ValueTypes["RenamedTitleEvent"],
		["...on ReopenedEvent"] : ValueTypes["ReopenedEvent"],
		["...on SubscribedEvent"] : ValueTypes["SubscribedEvent"],
		["...on TransferredEvent"] : ValueTypes["TransferredEvent"],
		["...on UnassignedEvent"] : ValueTypes["UnassignedEvent"],
		["...on UnlabeledEvent"] : ValueTypes["UnlabeledEvent"],
		["...on UnlockedEvent"] : ValueTypes["UnlockedEvent"],
		["...on UnmarkedAsDuplicateEvent"] : ValueTypes["UnmarkedAsDuplicateEvent"],
		["...on UnpinnedEvent"] : ValueTypes["UnpinnedEvent"],
		["...on UnsubscribedEvent"] : ValueTypes["UnsubscribedEvent"],
		["...on UserBlockedEvent"] : ValueTypes["UserBlockedEvent"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for IssueTimelineItems. */
["IssueTimelineItemsConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["IssueTimelineItemsEdge"],
	/** Identifies the count of items after applying `before` and `after` filters. */
	filteredCount?:boolean | `@${string}`,
	/** A list of nodes. */
	nodes?:ValueTypes["IssueTimelineItems"],
	/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
	pageCount?:boolean | `@${string}`,
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** Identifies the date and time when the timeline was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IssueTimelineItemsEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["IssueTimelineItems"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible item types found in a timeline. */
["IssueTimelineItemsItemType"]:IssueTimelineItemsItemType;
	/** Represents a user signing up for a GitHub account. */
["JoinedGitHubContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
["Label"]: AliasType<{
	/** Identifies the label color. */
	color?:boolean | `@${string}`,
	/** Identifies the date and time when the label was created. */
	createdAt?:boolean | `@${string}`,
	/** A brief description of this label. */
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Indicates whether or not this is a default label. */
	isDefault?:boolean | `@${string}`,
issues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Filtering options for issues returned from the connection. */
	filterBy?: ValueTypes["IssueFilters"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for issues returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the issues by. */
	states?: Array<ValueTypes["IssueState"]> | undefined | null | Variable<any, string>},ValueTypes["IssueConnection"]],
	/** Identifies the label name. */
	name?:boolean | `@${string}`,
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the pull requests by. */
	states?: Array<ValueTypes["PullRequestState"]> | undefined | null | Variable<any, string>},ValueTypes["PullRequestConnection"]],
	/** The repository associated with this label. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this label. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the label was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this label. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Label. */
["LabelConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["LabelEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Label"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["LabelEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Label"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of labels can be ordered upon return. */
["LabelOrder"]: {
	/** The direction in which to order labels by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order labels by. */
	field: ValueTypes["LabelOrderField"] | Variable<any, string>
};
	/** Properties by which label connections can be ordered. */
["LabelOrderField"]:LabelOrderField;
	/** An object that can have labels assigned to it. */
["Labelable"]:AliasType<{
	labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for labels returned from the connection. */
	orderBy?: ValueTypes["LabelOrder"] | undefined | null | Variable<any, string>},ValueTypes["LabelConnection"]];
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["Labelable"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["Labelable"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["Labelable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'labeled' event on a given issue or pull request. */
["LabeledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the label associated with the 'labeled' event. */
	label?:ValueTypes["Label"],
	/** Identifies the `Labelable` associated with the event. */
	labelable?:ValueTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a given language found in repositories. */
["Language"]: AliasType<{
	/** The color defined for the current language. */
	color?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the current language. */
	name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A list of languages associated with the parent. */
["LanguageConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["LanguageEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Language"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** The total size in bytes of files written in that language. */
	totalSize?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents the language of a repository. */
["LanguageEdge"]: AliasType<{
	cursor?:boolean | `@${string}`,
	node?:ValueTypes["Language"],
	/** The number of bytes of code written in the language. */
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for language connections. */
["LanguageOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order languages by. */
	field: ValueTypes["LanguageOrderField"] | Variable<any, string>
};
	/** Properties by which language connections can be ordered. */
["LanguageOrderField"]:LanguageOrderField;
	/** A repository's open source license */
["License"]: AliasType<{
	/** The full text of the license */
	body?:boolean | `@${string}`,
	/** The conditions set by the license */
	conditions?:ValueTypes["LicenseRule"],
	/** A human-readable description of the license */
	description?:boolean | `@${string}`,
	/** Whether the license should be featured */
	featured?:boolean | `@${string}`,
	/** Whether the license should be displayed in license pickers */
	hidden?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Instructions on how to implement the license */
	implementation?:boolean | `@${string}`,
	/** The lowercased SPDX ID of the license */
	key?:boolean | `@${string}`,
	/** The limitations set by the license */
	limitations?:ValueTypes["LicenseRule"],
	/** The license full name specified by <https://spdx.org/licenses> */
	name?:boolean | `@${string}`,
	/** Customary short name if applicable (e.g, GPLv3) */
	nickname?:boolean | `@${string}`,
	/** The permissions set by the license */
	permissions?:ValueTypes["LicenseRule"],
	/** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
	pseudoLicense?:boolean | `@${string}`,
	/** Short identifier specified by <https://spdx.org/licenses> */
	spdxId?:boolean | `@${string}`,
	/** URL to the license on <https://choosealicense.com> */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Describes a License's conditions, permissions, and limitations */
["LicenseRule"]: AliasType<{
	/** A description of the rule */
	description?:boolean | `@${string}`,
	/** The machine-readable rule key */
	key?:boolean | `@${string}`,
	/** The human-readable rule label */
	label?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of LinkRepositoryToProject */
["LinkRepositoryToProjectInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Project to link to a Repository */
	projectId: string | Variable<any, string>,
	/** The ID of the Repository to link to a Project. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of LinkRepositoryToProject */
["LinkRepositoryToProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The linked Project. */
	project?:ValueTypes["Project"],
	/** The linked Repository. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A branch linked to an issue. */
["LinkedBranch"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The branch's ref. */
	ref?:ValueTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for LinkedBranch. */
["LinkedBranchConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["LinkedBranchEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["LinkedBranch"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["LinkedBranchEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["LinkedBranch"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of LockLockable */
["LockLockableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** A reason for why the item will be locked. */
	lockReason?: ValueTypes["LockReason"] | undefined | null | Variable<any, string>,
	/** ID of the item to be locked. */
	lockableId: string | Variable<any, string>
};
	/** Autogenerated return type of LockLockable */
["LockLockablePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item that was locked. */
	lockedRecord?:ValueTypes["Lockable"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible reasons that an issue or pull request was locked. */
["LockReason"]:LockReason;
	/** An object that can be locked. */
["Lockable"]:AliasType<{
		/** Reason that the conversation was locked. */
	activeLockReason?:boolean | `@${string}`,
	/** `true` if the object is locked */
	locked?:boolean | `@${string}`;
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["Lockable"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["Lockable"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["Lockable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'locked' event on a given issue or pull request. */
["LockedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reason that the conversation was locked (optional). */
	lockReason?:boolean | `@${string}`,
	/** Object that was locked. */
	lockable?:ValueTypes["Lockable"],
		__typename?: boolean | `@${string}`
}>;
	/** A placeholder user for attribution of imported data on GitHub. */
["Mannequin"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The user that has claimed the data attributed to this mannequin. */
	claimant?:ValueTypes["User"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The mannequin's email on the source instance. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The username of the actor. */
	login?:boolean | `@${string}`,
	/** The HTML path to this resource. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The URL to this resource. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
["MarkDiscussionCommentAsAnswerInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the discussion comment to mark as an answer. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of MarkDiscussionCommentAsAnswer */
["MarkDiscussionCommentAsAnswerPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion that includes the chosen comment. */
	discussion?:ValueTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MarkFileAsViewed */
["MarkFileAsViewedInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The path of the file to mark as viewed */
	path: string | Variable<any, string>,
	/** The Node ID of the pull request. */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of MarkFileAsViewed */
["MarkFileAsViewedPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MarkPullRequestReadyForReview */
["MarkPullRequestReadyForReviewInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the pull request to be marked as ready for review. */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of MarkPullRequestReadyForReview */
["MarkPullRequestReadyForReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that is ready for review. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
["MarkedAsDuplicateEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** The authoritative issue or pull request which has been duplicated by another. */
	canonical?:ValueTypes["IssueOrPullRequest"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The issue or pull request which has been marked as a duplicate of another. */
	duplicate?:ValueTypes["IssueOrPullRequest"],
	id?:boolean | `@${string}`,
	/** Canonical and duplicate belong to different repositories. */
	isCrossRepository?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A public description of a Marketplace category. */
["MarketplaceCategory"]: AliasType<{
	/** The category's description. */
	description?:boolean | `@${string}`,
	/** The technical description of how apps listed in this category work with GitHub. */
	howItWorks?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The category's name. */
	name?:boolean | `@${string}`,
	/** How many Marketplace listings have this as their primary category. */
	primaryListingCount?:boolean | `@${string}`,
	/** The HTTP path for this Marketplace category. */
	resourcePath?:boolean | `@${string}`,
	/** How many Marketplace listings have this as their secondary category. */
	secondaryListingCount?:boolean | `@${string}`,
	/** The short name of the category used in its URL. */
	slug?:boolean | `@${string}`,
	/** The HTTP URL for this Marketplace category. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A listing in the GitHub integration marketplace. */
["MarketplaceListing"]: AliasType<{
	/** The GitHub App this listing represents. */
	app?:ValueTypes["App"],
	/** URL to the listing owner's company site. */
	companyUrl?:boolean | `@${string}`,
	/** The HTTP path for configuring access to the listing's integration or OAuth app */
	configurationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for configuring access to the listing's integration or OAuth app */
	configurationUrl?:boolean | `@${string}`,
	/** URL to the listing's documentation. */
	documentationUrl?:boolean | `@${string}`,
	/** The listing's detailed description. */
	extendedDescription?:boolean | `@${string}`,
	/** The listing's detailed description rendered to HTML. */
	extendedDescriptionHTML?:boolean | `@${string}`,
	/** The listing's introductory description. */
	fullDescription?:boolean | `@${string}`,
	/** The listing's introductory description rendered to HTML. */
	fullDescriptionHTML?:boolean | `@${string}`,
	/** Does this listing have any plans with a free trial? */
	hasPublishedFreeTrialPlans?:boolean | `@${string}`,
	/** Does this listing have a terms of service link? */
	hasTermsOfService?:boolean | `@${string}`,
	/** Whether the creator of the app is a verified org */
	hasVerifiedOwner?:boolean | `@${string}`,
	/** A technical description of how this app works with GitHub. */
	howItWorks?:boolean | `@${string}`,
	/** The listing's technical description rendered to HTML. */
	howItWorksHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** URL to install the product to the viewer's account or organization. */
	installationUrl?:boolean | `@${string}`,
	/** Whether this listing's app has been installed for the current viewer */
	installedForViewer?:boolean | `@${string}`,
	/** Whether this listing has been removed from the Marketplace. */
	isArchived?:boolean | `@${string}`,
	/** Whether this listing is still an editable draft that has not been submitted
for review and is not publicly visible in the Marketplace. */
	isDraft?:boolean | `@${string}`,
	/** Whether the product this listing represents is available as part of a paid plan. */
	isPaid?:boolean | `@${string}`,
	/** Whether this listing has been approved for display in the Marketplace. */
	isPublic?:boolean | `@${string}`,
	/** Whether this listing has been rejected by GitHub for display in the Marketplace. */
	isRejected?:boolean | `@${string}`,
	/** Whether this listing has been approved for unverified display in the Marketplace. */
	isUnverified?:boolean | `@${string}`,
	/** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
	isUnverifiedPending?:boolean | `@${string}`,
	/** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
	isVerificationPendingFromDraft?:boolean | `@${string}`,
	/** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
	isVerificationPendingFromUnverified?:boolean | `@${string}`,
	/** Whether this listing has been approved for verified display in the Marketplace. */
	isVerified?:boolean | `@${string}`,
	/** The hex color code, without the leading '#', for the logo background. */
	logoBackgroundColor?:boolean | `@${string}`,
logoUrl?: [{	/** The size in pixels of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The listing's full name. */
	name?:boolean | `@${string}`,
	/** The listing's very short description without a trailing period or ampersands. */
	normalizedShortDescription?:boolean | `@${string}`,
	/** URL to the listing's detailed pricing. */
	pricingUrl?:boolean | `@${string}`,
	/** The category that best describes the listing. */
	primaryCategory?:ValueTypes["MarketplaceCategory"],
	/** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
	privacyPolicyUrl?:boolean | `@${string}`,
	/** The HTTP path for the Marketplace listing. */
	resourcePath?:boolean | `@${string}`,
	/** The URLs for the listing's screenshots. */
	screenshotUrls?:boolean | `@${string}`,
	/** An alternate category that describes the listing. */
	secondaryCategory?:ValueTypes["MarketplaceCategory"],
	/** The listing's very short description. */
	shortDescription?:boolean | `@${string}`,
	/** The short name of the listing used in its URL. */
	slug?:boolean | `@${string}`,
	/** URL to the listing's status page. */
	statusUrl?:boolean | `@${string}`,
	/** An email address for support for this listing's app. */
	supportEmail?:boolean | `@${string}`,
	/** Either a URL or an email address for support for this listing's app, may
return an empty string for listings that do not require a support URL. */
	supportUrl?:boolean | `@${string}`,
	/** URL to the listing's terms of service. */
	termsOfServiceUrl?:boolean | `@${string}`,
	/** The HTTP URL for the Marketplace listing. */
	url?:boolean | `@${string}`,
	/** Can the current viewer add plans for this Marketplace listing. */
	viewerCanAddPlans?:boolean | `@${string}`,
	/** Can the current viewer approve this Marketplace listing. */
	viewerCanApprove?:boolean | `@${string}`,
	/** Can the current viewer delist this Marketplace listing. */
	viewerCanDelist?:boolean | `@${string}`,
	/** Can the current viewer edit this Marketplace listing. */
	viewerCanEdit?:boolean | `@${string}`,
	/** Can the current viewer edit the primary and secondary category of this
Marketplace listing. */
	viewerCanEditCategories?:boolean | `@${string}`,
	/** Can the current viewer edit the plans for this Marketplace listing. */
	viewerCanEditPlans?:boolean | `@${string}`,
	/** Can the current viewer return this Marketplace listing to draft state
so it becomes editable again. */
	viewerCanRedraft?:boolean | `@${string}`,
	/** Can the current viewer reject this Marketplace listing by returning it to
an editable draft state or rejecting it entirely. */
	viewerCanReject?:boolean | `@${string}`,
	/** Can the current viewer request this listing be reviewed for display in
the Marketplace as verified. */
	viewerCanRequestApproval?:boolean | `@${string}`,
	/** Indicates whether the current user has an active subscription to this Marketplace listing. */
	viewerHasPurchased?:boolean | `@${string}`,
	/** Indicates if the current user has purchased a subscription to this Marketplace listing
for all of the organizations the user owns. */
	viewerHasPurchasedForAllOrganizations?:boolean | `@${string}`,
	/** Does the current viewer role allow them to administer this Marketplace listing. */
	viewerIsListingAdmin?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Look up Marketplace Listings */
["MarketplaceListingConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["MarketplaceListingEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["MarketplaceListing"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["MarketplaceListingEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["MarketplaceListing"],
		__typename?: boolean | `@${string}`
}>;
	/** Entities that have members who can set status messages. */
["MemberStatusable"]:AliasType<{
	memberStatuses?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for user statuses returned from the connection. */
	orderBy?: ValueTypes["UserStatusOrder"] | undefined | null | Variable<any, string>},ValueTypes["UserStatusConnection"]];
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["MemberStatusable"]>;
		['...on Team']?: Omit<ValueTypes["Team"],keyof ValueTypes["MemberStatusable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a members_can_delete_repos.clear event. */
["MembersCanDeleteReposClearAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a members_can_delete_repos.disable event. */
["MembersCanDeleteReposDisableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a members_can_delete_repos.enable event. */
["MembersCanDeleteReposEnableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'mentioned' event on a given issue or pull request. */
["MentionedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MergeBranch */
["MergeBranchInput"]: {
	/** The email address to associate with this commit. */
	authorEmail?: string | undefined | null | Variable<any, string>,
	/** The name of the base branch that the provided head will be merged into. */
	base: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Message to use for the merge commit. If omitted, a default will be used. */
	commitMessage?: string | undefined | null | Variable<any, string>,
	/** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
	head: string | Variable<any, string>,
	/** The Node ID of the Repository containing the base branch that will be modified. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of MergeBranch */
["MergeBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The resulting merge Commit. */
	mergeCommit?:ValueTypes["Commit"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible default commit messages for merges. */
["MergeCommitMessage"]:MergeCommitMessage;
	/** The possible default commit titles for merges. */
["MergeCommitTitle"]:MergeCommitTitle;
	/** Autogenerated input type of MergePullRequest */
["MergePullRequestInput"]: {
	/** The email address to associate with this merge. */
	authorEmail?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Commit body to use for the merge commit; if omitted, a default message will be used */
	commitBody?: string | undefined | null | Variable<any, string>,
	/** Commit headline to use for the merge commit; if omitted, a default message will be used. */
	commitHeadline?: string | undefined | null | Variable<any, string>,
	/** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
	expectedHeadOid?: ValueTypes["GitObjectID"] | undefined | null | Variable<any, string>,
	/** The merge method to use. If omitted, defaults to 'MERGE' */
	mergeMethod?: ValueTypes["PullRequestMergeMethod"] | undefined | null | Variable<any, string>,
	/** ID of the pull request to be merged. */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of MergePullRequest */
["MergePullRequestPayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that was merged. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Detailed status information about a pull request merge. */
["MergeStateStatus"]:MergeStateStatus;
	/** Whether or not a PullRequest can be merged. */
["MergeableState"]:MergeableState;
	/** Represents a 'merged' event on a given pull request. */
["MergedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the commit associated with the `merge` event. */
	commit?:ValueTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the Ref associated with the `merge` event. */
	mergeRef?:ValueTypes["Ref"],
	/** Identifies the name of the Ref associated with the `merge` event. */
	mergeRefName?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
	/** The HTTP path for this merged event. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this merged event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents an Octoshift migration. */
["Migration"]:AliasType<{
		/** The Octoshift migration flag to continue on error. */
	continueOnError?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The reason the migration failed. */
	failureReason?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The URL for the migration log (expires 1 day after migration completes). */
	migrationLogUrl?:boolean | `@${string}`,
	/** The Octoshift migration source. */
	migrationSource?:ValueTypes["MigrationSource"],
	/** The target repository name. */
	repositoryName?:boolean | `@${string}`,
	/** The Octoshift migration source URL. */
	sourceUrl?:boolean | `@${string}`,
	/** The Octoshift migration state. */
	state?:boolean | `@${string}`;
		['...on RepositoryMigration']?: Omit<ValueTypes["RepositoryMigration"],keyof ValueTypes["Migration"]>;
		__typename?: boolean | `@${string}`
}>;
	/** An Octoshift migration source. */
["MigrationSource"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The Octoshift migration source name. */
	name?:boolean | `@${string}`,
	/** The Octoshift migration source type. */
	type?:boolean | `@${string}`,
	/** The Octoshift migration source URL. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents the different Octoshift migration sources. */
["MigrationSourceType"]:MigrationSourceType;
	/** The Octoshift migration state. */
["MigrationState"]:MigrationState;
	/** Represents a Milestone object on a given repository. */
["Milestone"]: AliasType<{
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the actor who created the milestone. */
	creator?:ValueTypes["Actor"],
	/** Identifies the description of the milestone. */
	description?:boolean | `@${string}`,
	/** Identifies the due date of the milestone. */
	dueOn?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
issues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Filtering options for issues returned from the connection. */
	filterBy?: ValueTypes["IssueFilters"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for issues returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the issues by. */
	states?: Array<ValueTypes["IssueState"]> | undefined | null | Variable<any, string>},ValueTypes["IssueConnection"]],
	/** Identifies the number of the milestone. */
	number?:boolean | `@${string}`,
	/** Identifies the percentage complete for the milestone */
	progressPercentage?:boolean | `@${string}`,
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the pull requests by. */
	states?: Array<ValueTypes["PullRequestState"]> | undefined | null | Variable<any, string>},ValueTypes["PullRequestConnection"]],
	/** The repository associated with this milestone. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this milestone */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the state of the milestone. */
	state?:boolean | `@${string}`,
	/** Identifies the title of the milestone. */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this milestone */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Milestone. */
["MilestoneConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["MilestoneEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Milestone"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["MilestoneEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Milestone"],
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be inside a Milestone. */
["MilestoneItem"]: AliasType<{		["...on Issue"] : ValueTypes["Issue"],
		["...on PullRequest"] : ValueTypes["PullRequest"]
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for milestone connections. */
["MilestoneOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order milestones by. */
	field: ValueTypes["MilestoneOrderField"] | Variable<any, string>
};
	/** Properties by which milestone connections can be ordered. */
["MilestoneOrderField"]:MilestoneOrderField;
	/** The possible states of a milestone. */
["MilestoneState"]:MilestoneState;
	/** Represents a 'milestoned' event on a given issue or pull request. */
["MilestonedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the milestone title associated with the 'milestoned' event. */
	milestoneTitle?:boolean | `@${string}`,
	/** Object referenced by event. */
	subject?:ValueTypes["MilestoneItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can be minimized. */
["Minimizable"]:AliasType<{
		/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ValueTypes["CommitComment"],keyof ValueTypes["Minimizable"]>;
		['...on DiscussionComment']?: Omit<ValueTypes["DiscussionComment"],keyof ValueTypes["Minimizable"]>;
		['...on GistComment']?: Omit<ValueTypes["GistComment"],keyof ValueTypes["Minimizable"]>;
		['...on IssueComment']?: Omit<ValueTypes["IssueComment"],keyof ValueTypes["Minimizable"]>;
		['...on PullRequestReviewComment']?: Omit<ValueTypes["PullRequestReviewComment"],keyof ValueTypes["Minimizable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MinimizeComment */
["MinimizeCommentInput"]: {
	/** The classification of comment */
	classifier: ValueTypes["ReportedContentClassifiers"] | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the subject to modify. */
	subjectId: string | Variable<any, string>
};
	/** Autogenerated return type of MinimizeComment */
["MinimizeCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The comment that was minimized. */
	minimizedComment?:ValueTypes["Minimizable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MoveProjectCard */
["MoveProjectCardInput"]: {
	/** Place the new card after the card with this id. Pass null to place it at the top. */
	afterCardId?: string | undefined | null | Variable<any, string>,
	/** The id of the card to move. */
	cardId: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The id of the column to move it into. */
	columnId: string | Variable<any, string>
};
	/** Autogenerated return type of MoveProjectCard */
["MoveProjectCardPayload"]: AliasType<{
	/** The new edge of the moved card. */
	cardEdge?:ValueTypes["ProjectCardEdge"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MoveProjectColumn */
["MoveProjectColumnInput"]: {
	/** Place the new column after the column with this id. Pass null to place it at the front. */
	afterColumnId?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The id of the column to move. */
	columnId: string | Variable<any, string>
};
	/** Autogenerated return type of MoveProjectColumn */
["MoveProjectColumnPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new edge of the moved column. */
	columnEdge?:ValueTypes["ProjectColumnEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
["MovedColumnsInProjectEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Column name the issue or pull request was moved from. */
	previousProjectColumnName?:boolean | `@${string}`,
	/** Project referenced by event. */
	project?:ValueTypes["Project"],
	/** Project card referenced by this project event. */
	projectCard?:ValueTypes["ProjectCard"],
	/** Column name the issue or pull request was moved to. */
	projectColumnName?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The root query for implementing GraphQL mutations. */
["Mutation"]: AliasType<{
abortQueuedMigrations?: [{	/** Parameters for AbortQueuedMigrations */
	input: ValueTypes["AbortQueuedMigrationsInput"] | Variable<any, string>},ValueTypes["AbortQueuedMigrationsPayload"]],
acceptEnterpriseAdministratorInvitation?: [{	/** Parameters for AcceptEnterpriseAdministratorInvitation */
	input: ValueTypes["AcceptEnterpriseAdministratorInvitationInput"] | Variable<any, string>},ValueTypes["AcceptEnterpriseAdministratorInvitationPayload"]],
acceptTopicSuggestion?: [{	/** Parameters for AcceptTopicSuggestion */
	input: ValueTypes["AcceptTopicSuggestionInput"] | Variable<any, string>},ValueTypes["AcceptTopicSuggestionPayload"]],
addAssigneesToAssignable?: [{	/** Parameters for AddAssigneesToAssignable */
	input: ValueTypes["AddAssigneesToAssignableInput"] | Variable<any, string>},ValueTypes["AddAssigneesToAssignablePayload"]],
addComment?: [{	/** Parameters for AddComment */
	input: ValueTypes["AddCommentInput"] | Variable<any, string>},ValueTypes["AddCommentPayload"]],
addDiscussionComment?: [{	/** Parameters for AddDiscussionComment */
	input: ValueTypes["AddDiscussionCommentInput"] | Variable<any, string>},ValueTypes["AddDiscussionCommentPayload"]],
addDiscussionPollVote?: [{	/** Parameters for AddDiscussionPollVote */
	input: ValueTypes["AddDiscussionPollVoteInput"] | Variable<any, string>},ValueTypes["AddDiscussionPollVotePayload"]],
addEnterpriseSupportEntitlement?: [{	/** Parameters for AddEnterpriseSupportEntitlement */
	input: ValueTypes["AddEnterpriseSupportEntitlementInput"] | Variable<any, string>},ValueTypes["AddEnterpriseSupportEntitlementPayload"]],
addLabelsToLabelable?: [{	/** Parameters for AddLabelsToLabelable */
	input: ValueTypes["AddLabelsToLabelableInput"] | Variable<any, string>},ValueTypes["AddLabelsToLabelablePayload"]],
addProjectCard?: [{	/** Parameters for AddProjectCard */
	input: ValueTypes["AddProjectCardInput"] | Variable<any, string>},ValueTypes["AddProjectCardPayload"]],
addProjectColumn?: [{	/** Parameters for AddProjectColumn */
	input: ValueTypes["AddProjectColumnInput"] | Variable<any, string>},ValueTypes["AddProjectColumnPayload"]],
addProjectDraftIssue?: [{	/** Parameters for AddProjectDraftIssue */
	input: ValueTypes["AddProjectDraftIssueInput"] | Variable<any, string>},ValueTypes["AddProjectDraftIssuePayload"]],
addProjectNextItem?: [{	/** Parameters for AddProjectNextItem */
	input: ValueTypes["AddProjectNextItemInput"] | Variable<any, string>},ValueTypes["AddProjectNextItemPayload"]],
addProjectV2DraftIssue?: [{	/** Parameters for AddProjectV2DraftIssue */
	input: ValueTypes["AddProjectV2DraftIssueInput"] | Variable<any, string>},ValueTypes["AddProjectV2DraftIssuePayload"]],
addProjectV2ItemById?: [{	/** Parameters for AddProjectV2ItemById */
	input: ValueTypes["AddProjectV2ItemByIdInput"] | Variable<any, string>},ValueTypes["AddProjectV2ItemByIdPayload"]],
addPullRequestReview?: [{	/** Parameters for AddPullRequestReview */
	input: ValueTypes["AddPullRequestReviewInput"] | Variable<any, string>},ValueTypes["AddPullRequestReviewPayload"]],
addPullRequestReviewComment?: [{	/** Parameters for AddPullRequestReviewComment */
	input: ValueTypes["AddPullRequestReviewCommentInput"] | Variable<any, string>},ValueTypes["AddPullRequestReviewCommentPayload"]],
addPullRequestReviewThread?: [{	/** Parameters for AddPullRequestReviewThread */
	input: ValueTypes["AddPullRequestReviewThreadInput"] | Variable<any, string>},ValueTypes["AddPullRequestReviewThreadPayload"]],
addReaction?: [{	/** Parameters for AddReaction */
	input: ValueTypes["AddReactionInput"] | Variable<any, string>},ValueTypes["AddReactionPayload"]],
addStar?: [{	/** Parameters for AddStar */
	input: ValueTypes["AddStarInput"] | Variable<any, string>},ValueTypes["AddStarPayload"]],
addUpvote?: [{	/** Parameters for AddUpvote */
	input: ValueTypes["AddUpvoteInput"] | Variable<any, string>},ValueTypes["AddUpvotePayload"]],
addVerifiableDomain?: [{	/** Parameters for AddVerifiableDomain */
	input: ValueTypes["AddVerifiableDomainInput"] | Variable<any, string>},ValueTypes["AddVerifiableDomainPayload"]],
approveDeployments?: [{	/** Parameters for ApproveDeployments */
	input: ValueTypes["ApproveDeploymentsInput"] | Variable<any, string>},ValueTypes["ApproveDeploymentsPayload"]],
approveVerifiableDomain?: [{	/** Parameters for ApproveVerifiableDomain */
	input: ValueTypes["ApproveVerifiableDomainInput"] | Variable<any, string>},ValueTypes["ApproveVerifiableDomainPayload"]],
archiveRepository?: [{	/** Parameters for ArchiveRepository */
	input: ValueTypes["ArchiveRepositoryInput"] | Variable<any, string>},ValueTypes["ArchiveRepositoryPayload"]],
cancelEnterpriseAdminInvitation?: [{	/** Parameters for CancelEnterpriseAdminInvitation */
	input: ValueTypes["CancelEnterpriseAdminInvitationInput"] | Variable<any, string>},ValueTypes["CancelEnterpriseAdminInvitationPayload"]],
cancelSponsorship?: [{	/** Parameters for CancelSponsorship */
	input: ValueTypes["CancelSponsorshipInput"] | Variable<any, string>},ValueTypes["CancelSponsorshipPayload"]],
changeUserStatus?: [{	/** Parameters for ChangeUserStatus */
	input: ValueTypes["ChangeUserStatusInput"] | Variable<any, string>},ValueTypes["ChangeUserStatusPayload"]],
clearLabelsFromLabelable?: [{	/** Parameters for ClearLabelsFromLabelable */
	input: ValueTypes["ClearLabelsFromLabelableInput"] | Variable<any, string>},ValueTypes["ClearLabelsFromLabelablePayload"]],
clearProjectV2ItemFieldValue?: [{	/** Parameters for ClearProjectV2ItemFieldValue */
	input: ValueTypes["ClearProjectV2ItemFieldValueInput"] | Variable<any, string>},ValueTypes["ClearProjectV2ItemFieldValuePayload"]],
cloneProject?: [{	/** Parameters for CloneProject */
	input: ValueTypes["CloneProjectInput"] | Variable<any, string>},ValueTypes["CloneProjectPayload"]],
cloneTemplateRepository?: [{	/** Parameters for CloneTemplateRepository */
	input: ValueTypes["CloneTemplateRepositoryInput"] | Variable<any, string>},ValueTypes["CloneTemplateRepositoryPayload"]],
closeIssue?: [{	/** Parameters for CloseIssue */
	input: ValueTypes["CloseIssueInput"] | Variable<any, string>},ValueTypes["CloseIssuePayload"]],
closePullRequest?: [{	/** Parameters for ClosePullRequest */
	input: ValueTypes["ClosePullRequestInput"] | Variable<any, string>},ValueTypes["ClosePullRequestPayload"]],
convertProjectCardNoteToIssue?: [{	/** Parameters for ConvertProjectCardNoteToIssue */
	input: ValueTypes["ConvertProjectCardNoteToIssueInput"] | Variable<any, string>},ValueTypes["ConvertProjectCardNoteToIssuePayload"]],
convertPullRequestToDraft?: [{	/** Parameters for ConvertPullRequestToDraft */
	input: ValueTypes["ConvertPullRequestToDraftInput"] | Variable<any, string>},ValueTypes["ConvertPullRequestToDraftPayload"]],
createBranchProtectionRule?: [{	/** Parameters for CreateBranchProtectionRule */
	input: ValueTypes["CreateBranchProtectionRuleInput"] | Variable<any, string>},ValueTypes["CreateBranchProtectionRulePayload"]],
createCheckRun?: [{	/** Parameters for CreateCheckRun */
	input: ValueTypes["CreateCheckRunInput"] | Variable<any, string>},ValueTypes["CreateCheckRunPayload"]],
createCheckSuite?: [{	/** Parameters for CreateCheckSuite */
	input: ValueTypes["CreateCheckSuiteInput"] | Variable<any, string>},ValueTypes["CreateCheckSuitePayload"]],
createCommitOnBranch?: [{	/** Parameters for CreateCommitOnBranch */
	input: ValueTypes["CreateCommitOnBranchInput"] | Variable<any, string>},ValueTypes["CreateCommitOnBranchPayload"]],
createDeployment?: [{	/** Parameters for CreateDeployment */
	input: ValueTypes["CreateDeploymentInput"] | Variable<any, string>},ValueTypes["CreateDeploymentPayload"]],
createDeploymentStatus?: [{	/** Parameters for CreateDeploymentStatus */
	input: ValueTypes["CreateDeploymentStatusInput"] | Variable<any, string>},ValueTypes["CreateDeploymentStatusPayload"]],
createDiscussion?: [{	/** Parameters for CreateDiscussion */
	input: ValueTypes["CreateDiscussionInput"] | Variable<any, string>},ValueTypes["CreateDiscussionPayload"]],
createEnterpriseOrganization?: [{	/** Parameters for CreateEnterpriseOrganization */
	input: ValueTypes["CreateEnterpriseOrganizationInput"] | Variable<any, string>},ValueTypes["CreateEnterpriseOrganizationPayload"]],
createEnvironment?: [{	/** Parameters for CreateEnvironment */
	input: ValueTypes["CreateEnvironmentInput"] | Variable<any, string>},ValueTypes["CreateEnvironmentPayload"]],
createIpAllowListEntry?: [{	/** Parameters for CreateIpAllowListEntry */
	input: ValueTypes["CreateIpAllowListEntryInput"] | Variable<any, string>},ValueTypes["CreateIpAllowListEntryPayload"]],
createIssue?: [{	/** Parameters for CreateIssue */
	input: ValueTypes["CreateIssueInput"] | Variable<any, string>},ValueTypes["CreateIssuePayload"]],
createLabel?: [{	/** Parameters for CreateLabel */
	input: ValueTypes["CreateLabelInput"] | Variable<any, string>},ValueTypes["CreateLabelPayload"]],
createLinkedBranch?: [{	/** Parameters for CreateLinkedBranch */
	input: ValueTypes["CreateLinkedBranchInput"] | Variable<any, string>},ValueTypes["CreateLinkedBranchPayload"]],
createMigrationSource?: [{	/** Parameters for CreateMigrationSource */
	input: ValueTypes["CreateMigrationSourceInput"] | Variable<any, string>},ValueTypes["CreateMigrationSourcePayload"]],
createProject?: [{	/** Parameters for CreateProject */
	input: ValueTypes["CreateProjectInput"] | Variable<any, string>},ValueTypes["CreateProjectPayload"]],
createProjectV2?: [{	/** Parameters for CreateProjectV2 */
	input: ValueTypes["CreateProjectV2Input"] | Variable<any, string>},ValueTypes["CreateProjectV2Payload"]],
createPullRequest?: [{	/** Parameters for CreatePullRequest */
	input: ValueTypes["CreatePullRequestInput"] | Variable<any, string>},ValueTypes["CreatePullRequestPayload"]],
createRef?: [{	/** Parameters for CreateRef */
	input: ValueTypes["CreateRefInput"] | Variable<any, string>},ValueTypes["CreateRefPayload"]],
createRepository?: [{	/** Parameters for CreateRepository */
	input: ValueTypes["CreateRepositoryInput"] | Variable<any, string>},ValueTypes["CreateRepositoryPayload"]],
createSponsorsTier?: [{	/** Parameters for CreateSponsorsTier */
	input: ValueTypes["CreateSponsorsTierInput"] | Variable<any, string>},ValueTypes["CreateSponsorsTierPayload"]],
createSponsorship?: [{	/** Parameters for CreateSponsorship */
	input: ValueTypes["CreateSponsorshipInput"] | Variable<any, string>},ValueTypes["CreateSponsorshipPayload"]],
createTeamDiscussion?: [{	/** Parameters for CreateTeamDiscussion */
	input: ValueTypes["CreateTeamDiscussionInput"] | Variable<any, string>},ValueTypes["CreateTeamDiscussionPayload"]],
createTeamDiscussionComment?: [{	/** Parameters for CreateTeamDiscussionComment */
	input: ValueTypes["CreateTeamDiscussionCommentInput"] | Variable<any, string>},ValueTypes["CreateTeamDiscussionCommentPayload"]],
declineTopicSuggestion?: [{	/** Parameters for DeclineTopicSuggestion */
	input: ValueTypes["DeclineTopicSuggestionInput"] | Variable<any, string>},ValueTypes["DeclineTopicSuggestionPayload"]],
deleteBranchProtectionRule?: [{	/** Parameters for DeleteBranchProtectionRule */
	input: ValueTypes["DeleteBranchProtectionRuleInput"] | Variable<any, string>},ValueTypes["DeleteBranchProtectionRulePayload"]],
deleteDeployment?: [{	/** Parameters for DeleteDeployment */
	input: ValueTypes["DeleteDeploymentInput"] | Variable<any, string>},ValueTypes["DeleteDeploymentPayload"]],
deleteDiscussion?: [{	/** Parameters for DeleteDiscussion */
	input: ValueTypes["DeleteDiscussionInput"] | Variable<any, string>},ValueTypes["DeleteDiscussionPayload"]],
deleteDiscussionComment?: [{	/** Parameters for DeleteDiscussionComment */
	input: ValueTypes["DeleteDiscussionCommentInput"] | Variable<any, string>},ValueTypes["DeleteDiscussionCommentPayload"]],
deleteEnvironment?: [{	/** Parameters for DeleteEnvironment */
	input: ValueTypes["DeleteEnvironmentInput"] | Variable<any, string>},ValueTypes["DeleteEnvironmentPayload"]],
deleteIpAllowListEntry?: [{	/** Parameters for DeleteIpAllowListEntry */
	input: ValueTypes["DeleteIpAllowListEntryInput"] | Variable<any, string>},ValueTypes["DeleteIpAllowListEntryPayload"]],
deleteIssue?: [{	/** Parameters for DeleteIssue */
	input: ValueTypes["DeleteIssueInput"] | Variable<any, string>},ValueTypes["DeleteIssuePayload"]],
deleteIssueComment?: [{	/** Parameters for DeleteIssueComment */
	input: ValueTypes["DeleteIssueCommentInput"] | Variable<any, string>},ValueTypes["DeleteIssueCommentPayload"]],
deleteLabel?: [{	/** Parameters for DeleteLabel */
	input: ValueTypes["DeleteLabelInput"] | Variable<any, string>},ValueTypes["DeleteLabelPayload"]],
deleteLinkedBranch?: [{	/** Parameters for DeleteLinkedBranch */
	input: ValueTypes["DeleteLinkedBranchInput"] | Variable<any, string>},ValueTypes["DeleteLinkedBranchPayload"]],
deletePackageVersion?: [{	/** Parameters for DeletePackageVersion */
	input: ValueTypes["DeletePackageVersionInput"] | Variable<any, string>},ValueTypes["DeletePackageVersionPayload"]],
deleteProject?: [{	/** Parameters for DeleteProject */
	input: ValueTypes["DeleteProjectInput"] | Variable<any, string>},ValueTypes["DeleteProjectPayload"]],
deleteProjectCard?: [{	/** Parameters for DeleteProjectCard */
	input: ValueTypes["DeleteProjectCardInput"] | Variable<any, string>},ValueTypes["DeleteProjectCardPayload"]],
deleteProjectColumn?: [{	/** Parameters for DeleteProjectColumn */
	input: ValueTypes["DeleteProjectColumnInput"] | Variable<any, string>},ValueTypes["DeleteProjectColumnPayload"]],
deleteProjectNextItem?: [{	/** Parameters for DeleteProjectNextItem */
	input: ValueTypes["DeleteProjectNextItemInput"] | Variable<any, string>},ValueTypes["DeleteProjectNextItemPayload"]],
deleteProjectV2Item?: [{	/** Parameters for DeleteProjectV2Item */
	input: ValueTypes["DeleteProjectV2ItemInput"] | Variable<any, string>},ValueTypes["DeleteProjectV2ItemPayload"]],
deletePullRequestReview?: [{	/** Parameters for DeletePullRequestReview */
	input: ValueTypes["DeletePullRequestReviewInput"] | Variable<any, string>},ValueTypes["DeletePullRequestReviewPayload"]],
deletePullRequestReviewComment?: [{	/** Parameters for DeletePullRequestReviewComment */
	input: ValueTypes["DeletePullRequestReviewCommentInput"] | Variable<any, string>},ValueTypes["DeletePullRequestReviewCommentPayload"]],
deleteRef?: [{	/** Parameters for DeleteRef */
	input: ValueTypes["DeleteRefInput"] | Variable<any, string>},ValueTypes["DeleteRefPayload"]],
deleteTeamDiscussion?: [{	/** Parameters for DeleteTeamDiscussion */
	input: ValueTypes["DeleteTeamDiscussionInput"] | Variable<any, string>},ValueTypes["DeleteTeamDiscussionPayload"]],
deleteTeamDiscussionComment?: [{	/** Parameters for DeleteTeamDiscussionComment */
	input: ValueTypes["DeleteTeamDiscussionCommentInput"] | Variable<any, string>},ValueTypes["DeleteTeamDiscussionCommentPayload"]],
deleteVerifiableDomain?: [{	/** Parameters for DeleteVerifiableDomain */
	input: ValueTypes["DeleteVerifiableDomainInput"] | Variable<any, string>},ValueTypes["DeleteVerifiableDomainPayload"]],
disablePullRequestAutoMerge?: [{	/** Parameters for DisablePullRequestAutoMerge */
	input: ValueTypes["DisablePullRequestAutoMergeInput"] | Variable<any, string>},ValueTypes["DisablePullRequestAutoMergePayload"]],
dismissPullRequestReview?: [{	/** Parameters for DismissPullRequestReview */
	input: ValueTypes["DismissPullRequestReviewInput"] | Variable<any, string>},ValueTypes["DismissPullRequestReviewPayload"]],
dismissRepositoryVulnerabilityAlert?: [{	/** Parameters for DismissRepositoryVulnerabilityAlert */
	input: ValueTypes["DismissRepositoryVulnerabilityAlertInput"] | Variable<any, string>},ValueTypes["DismissRepositoryVulnerabilityAlertPayload"]],
enablePullRequestAutoMerge?: [{	/** Parameters for EnablePullRequestAutoMerge */
	input: ValueTypes["EnablePullRequestAutoMergeInput"] | Variable<any, string>},ValueTypes["EnablePullRequestAutoMergePayload"]],
followOrganization?: [{	/** Parameters for FollowOrganization */
	input: ValueTypes["FollowOrganizationInput"] | Variable<any, string>},ValueTypes["FollowOrganizationPayload"]],
followUser?: [{	/** Parameters for FollowUser */
	input: ValueTypes["FollowUserInput"] | Variable<any, string>},ValueTypes["FollowUserPayload"]],
grantEnterpriseOrganizationsMigratorRole?: [{	/** Parameters for GrantEnterpriseOrganizationsMigratorRole */
	input: ValueTypes["GrantEnterpriseOrganizationsMigratorRoleInput"] | Variable<any, string>},ValueTypes["GrantEnterpriseOrganizationsMigratorRolePayload"]],
grantMigratorRole?: [{	/** Parameters for GrantMigratorRole */
	input: ValueTypes["GrantMigratorRoleInput"] | Variable<any, string>},ValueTypes["GrantMigratorRolePayload"]],
importProject?: [{	/** Parameters for ImportProject */
	input: ValueTypes["ImportProjectInput"] | Variable<any, string>},ValueTypes["ImportProjectPayload"]],
inviteEnterpriseAdmin?: [{	/** Parameters for InviteEnterpriseAdmin */
	input: ValueTypes["InviteEnterpriseAdminInput"] | Variable<any, string>},ValueTypes["InviteEnterpriseAdminPayload"]],
linkRepositoryToProject?: [{	/** Parameters for LinkRepositoryToProject */
	input: ValueTypes["LinkRepositoryToProjectInput"] | Variable<any, string>},ValueTypes["LinkRepositoryToProjectPayload"]],
lockLockable?: [{	/** Parameters for LockLockable */
	input: ValueTypes["LockLockableInput"] | Variable<any, string>},ValueTypes["LockLockablePayload"]],
markDiscussionCommentAsAnswer?: [{	/** Parameters for MarkDiscussionCommentAsAnswer */
	input: ValueTypes["MarkDiscussionCommentAsAnswerInput"] | Variable<any, string>},ValueTypes["MarkDiscussionCommentAsAnswerPayload"]],
markFileAsViewed?: [{	/** Parameters for MarkFileAsViewed */
	input: ValueTypes["MarkFileAsViewedInput"] | Variable<any, string>},ValueTypes["MarkFileAsViewedPayload"]],
markPullRequestReadyForReview?: [{	/** Parameters for MarkPullRequestReadyForReview */
	input: ValueTypes["MarkPullRequestReadyForReviewInput"] | Variable<any, string>},ValueTypes["MarkPullRequestReadyForReviewPayload"]],
mergeBranch?: [{	/** Parameters for MergeBranch */
	input: ValueTypes["MergeBranchInput"] | Variable<any, string>},ValueTypes["MergeBranchPayload"]],
mergePullRequest?: [{	/** Parameters for MergePullRequest */
	input: ValueTypes["MergePullRequestInput"] | Variable<any, string>},ValueTypes["MergePullRequestPayload"]],
minimizeComment?: [{	/** Parameters for MinimizeComment */
	input: ValueTypes["MinimizeCommentInput"] | Variable<any, string>},ValueTypes["MinimizeCommentPayload"]],
moveProjectCard?: [{	/** Parameters for MoveProjectCard */
	input: ValueTypes["MoveProjectCardInput"] | Variable<any, string>},ValueTypes["MoveProjectCardPayload"]],
moveProjectColumn?: [{	/** Parameters for MoveProjectColumn */
	input: ValueTypes["MoveProjectColumnInput"] | Variable<any, string>},ValueTypes["MoveProjectColumnPayload"]],
pinIssue?: [{	/** Parameters for PinIssue */
	input: ValueTypes["PinIssueInput"] | Variable<any, string>},ValueTypes["PinIssuePayload"]],
regenerateEnterpriseIdentityProviderRecoveryCodes?: [{	/** Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes */
	input: ValueTypes["RegenerateEnterpriseIdentityProviderRecoveryCodesInput"] | Variable<any, string>},ValueTypes["RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"]],
regenerateVerifiableDomainToken?: [{	/** Parameters for RegenerateVerifiableDomainToken */
	input: ValueTypes["RegenerateVerifiableDomainTokenInput"] | Variable<any, string>},ValueTypes["RegenerateVerifiableDomainTokenPayload"]],
rejectDeployments?: [{	/** Parameters for RejectDeployments */
	input: ValueTypes["RejectDeploymentsInput"] | Variable<any, string>},ValueTypes["RejectDeploymentsPayload"]],
removeAssigneesFromAssignable?: [{	/** Parameters for RemoveAssigneesFromAssignable */
	input: ValueTypes["RemoveAssigneesFromAssignableInput"] | Variable<any, string>},ValueTypes["RemoveAssigneesFromAssignablePayload"]],
removeEnterpriseAdmin?: [{	/** Parameters for RemoveEnterpriseAdmin */
	input: ValueTypes["RemoveEnterpriseAdminInput"] | Variable<any, string>},ValueTypes["RemoveEnterpriseAdminPayload"]],
removeEnterpriseIdentityProvider?: [{	/** Parameters for RemoveEnterpriseIdentityProvider */
	input: ValueTypes["RemoveEnterpriseIdentityProviderInput"] | Variable<any, string>},ValueTypes["RemoveEnterpriseIdentityProviderPayload"]],
removeEnterpriseOrganization?: [{	/** Parameters for RemoveEnterpriseOrganization */
	input: ValueTypes["RemoveEnterpriseOrganizationInput"] | Variable<any, string>},ValueTypes["RemoveEnterpriseOrganizationPayload"]],
removeEnterpriseSupportEntitlement?: [{	/** Parameters for RemoveEnterpriseSupportEntitlement */
	input: ValueTypes["RemoveEnterpriseSupportEntitlementInput"] | Variable<any, string>},ValueTypes["RemoveEnterpriseSupportEntitlementPayload"]],
removeLabelsFromLabelable?: [{	/** Parameters for RemoveLabelsFromLabelable */
	input: ValueTypes["RemoveLabelsFromLabelableInput"] | Variable<any, string>},ValueTypes["RemoveLabelsFromLabelablePayload"]],
removeOutsideCollaborator?: [{	/** Parameters for RemoveOutsideCollaborator */
	input: ValueTypes["RemoveOutsideCollaboratorInput"] | Variable<any, string>},ValueTypes["RemoveOutsideCollaboratorPayload"]],
removeReaction?: [{	/** Parameters for RemoveReaction */
	input: ValueTypes["RemoveReactionInput"] | Variable<any, string>},ValueTypes["RemoveReactionPayload"]],
removeStar?: [{	/** Parameters for RemoveStar */
	input: ValueTypes["RemoveStarInput"] | Variable<any, string>},ValueTypes["RemoveStarPayload"]],
removeUpvote?: [{	/** Parameters for RemoveUpvote */
	input: ValueTypes["RemoveUpvoteInput"] | Variable<any, string>},ValueTypes["RemoveUpvotePayload"]],
reopenIssue?: [{	/** Parameters for ReopenIssue */
	input: ValueTypes["ReopenIssueInput"] | Variable<any, string>},ValueTypes["ReopenIssuePayload"]],
reopenPullRequest?: [{	/** Parameters for ReopenPullRequest */
	input: ValueTypes["ReopenPullRequestInput"] | Variable<any, string>},ValueTypes["ReopenPullRequestPayload"]],
requestReviews?: [{	/** Parameters for RequestReviews */
	input: ValueTypes["RequestReviewsInput"] | Variable<any, string>},ValueTypes["RequestReviewsPayload"]],
rerequestCheckSuite?: [{	/** Parameters for RerequestCheckSuite */
	input: ValueTypes["RerequestCheckSuiteInput"] | Variable<any, string>},ValueTypes["RerequestCheckSuitePayload"]],
resolveReviewThread?: [{	/** Parameters for ResolveReviewThread */
	input: ValueTypes["ResolveReviewThreadInput"] | Variable<any, string>},ValueTypes["ResolveReviewThreadPayload"]],
revokeEnterpriseOrganizationsMigratorRole?: [{	/** Parameters for RevokeEnterpriseOrganizationsMigratorRole */
	input: ValueTypes["RevokeEnterpriseOrganizationsMigratorRoleInput"] | Variable<any, string>},ValueTypes["RevokeEnterpriseOrganizationsMigratorRolePayload"]],
revokeMigratorRole?: [{	/** Parameters for RevokeMigratorRole */
	input: ValueTypes["RevokeMigratorRoleInput"] | Variable<any, string>},ValueTypes["RevokeMigratorRolePayload"]],
setEnterpriseIdentityProvider?: [{	/** Parameters for SetEnterpriseIdentityProvider */
	input: ValueTypes["SetEnterpriseIdentityProviderInput"] | Variable<any, string>},ValueTypes["SetEnterpriseIdentityProviderPayload"]],
setOrganizationInteractionLimit?: [{	/** Parameters for SetOrganizationInteractionLimit */
	input: ValueTypes["SetOrganizationInteractionLimitInput"] | Variable<any, string>},ValueTypes["SetOrganizationInteractionLimitPayload"]],
setRepositoryInteractionLimit?: [{	/** Parameters for SetRepositoryInteractionLimit */
	input: ValueTypes["SetRepositoryInteractionLimitInput"] | Variable<any, string>},ValueTypes["SetRepositoryInteractionLimitPayload"]],
setUserInteractionLimit?: [{	/** Parameters for SetUserInteractionLimit */
	input: ValueTypes["SetUserInteractionLimitInput"] | Variable<any, string>},ValueTypes["SetUserInteractionLimitPayload"]],
startRepositoryMigration?: [{	/** Parameters for StartRepositoryMigration */
	input: ValueTypes["StartRepositoryMigrationInput"] | Variable<any, string>},ValueTypes["StartRepositoryMigrationPayload"]],
submitPullRequestReview?: [{	/** Parameters for SubmitPullRequestReview */
	input: ValueTypes["SubmitPullRequestReviewInput"] | Variable<any, string>},ValueTypes["SubmitPullRequestReviewPayload"]],
transferIssue?: [{	/** Parameters for TransferIssue */
	input: ValueTypes["TransferIssueInput"] | Variable<any, string>},ValueTypes["TransferIssuePayload"]],
unarchiveRepository?: [{	/** Parameters for UnarchiveRepository */
	input: ValueTypes["UnarchiveRepositoryInput"] | Variable<any, string>},ValueTypes["UnarchiveRepositoryPayload"]],
unfollowOrganization?: [{	/** Parameters for UnfollowOrganization */
	input: ValueTypes["UnfollowOrganizationInput"] | Variable<any, string>},ValueTypes["UnfollowOrganizationPayload"]],
unfollowUser?: [{	/** Parameters for UnfollowUser */
	input: ValueTypes["UnfollowUserInput"] | Variable<any, string>},ValueTypes["UnfollowUserPayload"]],
unlinkRepositoryFromProject?: [{	/** Parameters for UnlinkRepositoryFromProject */
	input: ValueTypes["UnlinkRepositoryFromProjectInput"] | Variable<any, string>},ValueTypes["UnlinkRepositoryFromProjectPayload"]],
unlockLockable?: [{	/** Parameters for UnlockLockable */
	input: ValueTypes["UnlockLockableInput"] | Variable<any, string>},ValueTypes["UnlockLockablePayload"]],
unmarkDiscussionCommentAsAnswer?: [{	/** Parameters for UnmarkDiscussionCommentAsAnswer */
	input: ValueTypes["UnmarkDiscussionCommentAsAnswerInput"] | Variable<any, string>},ValueTypes["UnmarkDiscussionCommentAsAnswerPayload"]],
unmarkFileAsViewed?: [{	/** Parameters for UnmarkFileAsViewed */
	input: ValueTypes["UnmarkFileAsViewedInput"] | Variable<any, string>},ValueTypes["UnmarkFileAsViewedPayload"]],
unmarkIssueAsDuplicate?: [{	/** Parameters for UnmarkIssueAsDuplicate */
	input: ValueTypes["UnmarkIssueAsDuplicateInput"] | Variable<any, string>},ValueTypes["UnmarkIssueAsDuplicatePayload"]],
unminimizeComment?: [{	/** Parameters for UnminimizeComment */
	input: ValueTypes["UnminimizeCommentInput"] | Variable<any, string>},ValueTypes["UnminimizeCommentPayload"]],
unpinIssue?: [{	/** Parameters for UnpinIssue */
	input: ValueTypes["UnpinIssueInput"] | Variable<any, string>},ValueTypes["UnpinIssuePayload"]],
unresolveReviewThread?: [{	/** Parameters for UnresolveReviewThread */
	input: ValueTypes["UnresolveReviewThreadInput"] | Variable<any, string>},ValueTypes["UnresolveReviewThreadPayload"]],
updateBranchProtectionRule?: [{	/** Parameters for UpdateBranchProtectionRule */
	input: ValueTypes["UpdateBranchProtectionRuleInput"] | Variable<any, string>},ValueTypes["UpdateBranchProtectionRulePayload"]],
updateCheckRun?: [{	/** Parameters for UpdateCheckRun */
	input: ValueTypes["UpdateCheckRunInput"] | Variable<any, string>},ValueTypes["UpdateCheckRunPayload"]],
updateCheckSuitePreferences?: [{	/** Parameters for UpdateCheckSuitePreferences */
	input: ValueTypes["UpdateCheckSuitePreferencesInput"] | Variable<any, string>},ValueTypes["UpdateCheckSuitePreferencesPayload"]],
updateDiscussion?: [{	/** Parameters for UpdateDiscussion */
	input: ValueTypes["UpdateDiscussionInput"] | Variable<any, string>},ValueTypes["UpdateDiscussionPayload"]],
updateDiscussionComment?: [{	/** Parameters for UpdateDiscussionComment */
	input: ValueTypes["UpdateDiscussionCommentInput"] | Variable<any, string>},ValueTypes["UpdateDiscussionCommentPayload"]],
updateEnterpriseAdministratorRole?: [{	/** Parameters for UpdateEnterpriseAdministratorRole */
	input: ValueTypes["UpdateEnterpriseAdministratorRoleInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseAdministratorRolePayload"]],
updateEnterpriseAllowPrivateRepositoryForkingSetting?: [{	/** Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
	input: ValueTypes["UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"]],
updateEnterpriseDefaultRepositoryPermissionSetting?: [{	/** Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting */
	input: ValueTypes["UpdateEnterpriseDefaultRepositoryPermissionSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"]],
updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: [{	/** Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
	input: ValueTypes["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"]],
updateEnterpriseMembersCanCreateRepositoriesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting */
	input: ValueTypes["UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"]],
updateEnterpriseMembersCanDeleteIssuesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting */
	input: ValueTypes["UpdateEnterpriseMembersCanDeleteIssuesSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"]],
updateEnterpriseMembersCanDeleteRepositoriesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
	input: ValueTypes["UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"]],
updateEnterpriseMembersCanInviteCollaboratorsSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
	input: ValueTypes["UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"]],
updateEnterpriseMembersCanMakePurchasesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting */
	input: ValueTypes["UpdateEnterpriseMembersCanMakePurchasesSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseMembersCanMakePurchasesSettingPayload"]],
updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
	input: ValueTypes["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"]],
updateEnterpriseMembersCanViewDependencyInsightsSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
	input: ValueTypes["UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"]],
updateEnterpriseOrganizationProjectsSetting?: [{	/** Parameters for UpdateEnterpriseOrganizationProjectsSetting */
	input: ValueTypes["UpdateEnterpriseOrganizationProjectsSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseOrganizationProjectsSettingPayload"]],
updateEnterpriseOwnerOrganizationRole?: [{	/** Parameters for UpdateEnterpriseOwnerOrganizationRole */
	input: ValueTypes["UpdateEnterpriseOwnerOrganizationRoleInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseOwnerOrganizationRolePayload"]],
updateEnterpriseProfile?: [{	/** Parameters for UpdateEnterpriseProfile */
	input: ValueTypes["UpdateEnterpriseProfileInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseProfilePayload"]],
updateEnterpriseRepositoryProjectsSetting?: [{	/** Parameters for UpdateEnterpriseRepositoryProjectsSetting */
	input: ValueTypes["UpdateEnterpriseRepositoryProjectsSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseRepositoryProjectsSettingPayload"]],
updateEnterpriseTeamDiscussionsSetting?: [{	/** Parameters for UpdateEnterpriseTeamDiscussionsSetting */
	input: ValueTypes["UpdateEnterpriseTeamDiscussionsSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseTeamDiscussionsSettingPayload"]],
updateEnterpriseTwoFactorAuthenticationRequiredSetting?: [{	/** Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
	input: ValueTypes["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"] | Variable<any, string>},ValueTypes["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"]],
updateEnvironment?: [{	/** Parameters for UpdateEnvironment */
	input: ValueTypes["UpdateEnvironmentInput"] | Variable<any, string>},ValueTypes["UpdateEnvironmentPayload"]],
updateIpAllowListEnabledSetting?: [{	/** Parameters for UpdateIpAllowListEnabledSetting */
	input: ValueTypes["UpdateIpAllowListEnabledSettingInput"] | Variable<any, string>},ValueTypes["UpdateIpAllowListEnabledSettingPayload"]],
updateIpAllowListEntry?: [{	/** Parameters for UpdateIpAllowListEntry */
	input: ValueTypes["UpdateIpAllowListEntryInput"] | Variable<any, string>},ValueTypes["UpdateIpAllowListEntryPayload"]],
updateIpAllowListForInstalledAppsEnabledSetting?: [{	/** Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting */
	input: ValueTypes["UpdateIpAllowListForInstalledAppsEnabledSettingInput"] | Variable<any, string>},ValueTypes["UpdateIpAllowListForInstalledAppsEnabledSettingPayload"]],
updateIssue?: [{	/** Parameters for UpdateIssue */
	input: ValueTypes["UpdateIssueInput"] | Variable<any, string>},ValueTypes["UpdateIssuePayload"]],
updateIssueComment?: [{	/** Parameters for UpdateIssueComment */
	input: ValueTypes["UpdateIssueCommentInput"] | Variable<any, string>},ValueTypes["UpdateIssueCommentPayload"]],
updateLabel?: [{	/** Parameters for UpdateLabel */
	input: ValueTypes["UpdateLabelInput"] | Variable<any, string>},ValueTypes["UpdateLabelPayload"]],
updateNotificationRestrictionSetting?: [{	/** Parameters for UpdateNotificationRestrictionSetting */
	input: ValueTypes["UpdateNotificationRestrictionSettingInput"] | Variable<any, string>},ValueTypes["UpdateNotificationRestrictionSettingPayload"]],
updateOrganizationAllowPrivateRepositoryForkingSetting?: [{	/** Parameters for UpdateOrganizationAllowPrivateRepositoryForkingSetting */
	input: ValueTypes["UpdateOrganizationAllowPrivateRepositoryForkingSettingInput"] | Variable<any, string>},ValueTypes["UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"]],
updateOrganizationWebCommitSignoffSetting?: [{	/** Parameters for UpdateOrganizationWebCommitSignoffSetting */
	input: ValueTypes["UpdateOrganizationWebCommitSignoffSettingInput"] | Variable<any, string>},ValueTypes["UpdateOrganizationWebCommitSignoffSettingPayload"]],
updateProject?: [{	/** Parameters for UpdateProject */
	input: ValueTypes["UpdateProjectInput"] | Variable<any, string>},ValueTypes["UpdateProjectPayload"]],
updateProjectCard?: [{	/** Parameters for UpdateProjectCard */
	input: ValueTypes["UpdateProjectCardInput"] | Variable<any, string>},ValueTypes["UpdateProjectCardPayload"]],
updateProjectColumn?: [{	/** Parameters for UpdateProjectColumn */
	input: ValueTypes["UpdateProjectColumnInput"] | Variable<any, string>},ValueTypes["UpdateProjectColumnPayload"]],
updateProjectDraftIssue?: [{	/** Parameters for UpdateProjectDraftIssue */
	input: ValueTypes["UpdateProjectDraftIssueInput"] | Variable<any, string>},ValueTypes["UpdateProjectDraftIssuePayload"]],
updateProjectNext?: [{	/** Parameters for UpdateProjectNext */
	input: ValueTypes["UpdateProjectNextInput"] | Variable<any, string>},ValueTypes["UpdateProjectNextPayload"]],
updateProjectNextItemField?: [{	/** Parameters for UpdateProjectNextItemField */
	input: ValueTypes["UpdateProjectNextItemFieldInput"] | Variable<any, string>},ValueTypes["UpdateProjectNextItemFieldPayload"]],
updateProjectV2?: [{	/** Parameters for UpdateProjectV2 */
	input: ValueTypes["UpdateProjectV2Input"] | Variable<any, string>},ValueTypes["UpdateProjectV2Payload"]],
updateProjectV2DraftIssue?: [{	/** Parameters for UpdateProjectV2DraftIssue */
	input: ValueTypes["UpdateProjectV2DraftIssueInput"] | Variable<any, string>},ValueTypes["UpdateProjectV2DraftIssuePayload"]],
updateProjectV2ItemFieldValue?: [{	/** Parameters for UpdateProjectV2ItemFieldValue */
	input: ValueTypes["UpdateProjectV2ItemFieldValueInput"] | Variable<any, string>},ValueTypes["UpdateProjectV2ItemFieldValuePayload"]],
updateProjectV2ItemPosition?: [{	/** Parameters for UpdateProjectV2ItemPosition */
	input: ValueTypes["UpdateProjectV2ItemPositionInput"] | Variable<any, string>},ValueTypes["UpdateProjectV2ItemPositionPayload"]],
updatePullRequest?: [{	/** Parameters for UpdatePullRequest */
	input: ValueTypes["UpdatePullRequestInput"] | Variable<any, string>},ValueTypes["UpdatePullRequestPayload"]],
updatePullRequestBranch?: [{	/** Parameters for UpdatePullRequestBranch */
	input: ValueTypes["UpdatePullRequestBranchInput"] | Variable<any, string>},ValueTypes["UpdatePullRequestBranchPayload"]],
updatePullRequestReview?: [{	/** Parameters for UpdatePullRequestReview */
	input: ValueTypes["UpdatePullRequestReviewInput"] | Variable<any, string>},ValueTypes["UpdatePullRequestReviewPayload"]],
updatePullRequestReviewComment?: [{	/** Parameters for UpdatePullRequestReviewComment */
	input: ValueTypes["UpdatePullRequestReviewCommentInput"] | Variable<any, string>},ValueTypes["UpdatePullRequestReviewCommentPayload"]],
updateRef?: [{	/** Parameters for UpdateRef */
	input: ValueTypes["UpdateRefInput"] | Variable<any, string>},ValueTypes["UpdateRefPayload"]],
updateRefs?: [{	/** Parameters for UpdateRefs */
	input: ValueTypes["UpdateRefsInput"] | Variable<any, string>},ValueTypes["UpdateRefsPayload"]],
updateRepository?: [{	/** Parameters for UpdateRepository */
	input: ValueTypes["UpdateRepositoryInput"] | Variable<any, string>},ValueTypes["UpdateRepositoryPayload"]],
updateRepositoryWebCommitSignoffSetting?: [{	/** Parameters for UpdateRepositoryWebCommitSignoffSetting */
	input: ValueTypes["UpdateRepositoryWebCommitSignoffSettingInput"] | Variable<any, string>},ValueTypes["UpdateRepositoryWebCommitSignoffSettingPayload"]],
updateSponsorshipPreferences?: [{	/** Parameters for UpdateSponsorshipPreferences */
	input: ValueTypes["UpdateSponsorshipPreferencesInput"] | Variable<any, string>},ValueTypes["UpdateSponsorshipPreferencesPayload"]],
updateSubscription?: [{	/** Parameters for UpdateSubscription */
	input: ValueTypes["UpdateSubscriptionInput"] | Variable<any, string>},ValueTypes["UpdateSubscriptionPayload"]],
updateTeamDiscussion?: [{	/** Parameters for UpdateTeamDiscussion */
	input: ValueTypes["UpdateTeamDiscussionInput"] | Variable<any, string>},ValueTypes["UpdateTeamDiscussionPayload"]],
updateTeamDiscussionComment?: [{	/** Parameters for UpdateTeamDiscussionComment */
	input: ValueTypes["UpdateTeamDiscussionCommentInput"] | Variable<any, string>},ValueTypes["UpdateTeamDiscussionCommentPayload"]],
updateTeamReviewAssignment?: [{	/** Parameters for UpdateTeamReviewAssignment */
	input: ValueTypes["UpdateTeamReviewAssignmentInput"] | Variable<any, string>},ValueTypes["UpdateTeamReviewAssignmentPayload"]],
updateTeamsRepository?: [{	/** Parameters for UpdateTeamsRepository */
	input: ValueTypes["UpdateTeamsRepositoryInput"] | Variable<any, string>},ValueTypes["UpdateTeamsRepositoryPayload"]],
updateTopics?: [{	/** Parameters for UpdateTopics */
	input: ValueTypes["UpdateTopicsInput"] | Variable<any, string>},ValueTypes["UpdateTopicsPayload"]],
verifyVerifiableDomain?: [{	/** Parameters for VerifyVerifiableDomain */
	input: ValueTypes["VerifyVerifiableDomainInput"] | Variable<any, string>},ValueTypes["VerifyVerifiableDomainPayload"]],
		__typename?: boolean | `@${string}`
}>;
	/** An object with an ID. */
["Node"]:AliasType<{
		/** ID of the object. */
	id?:boolean | `@${string}`;
		['...on AddedToProjectEvent']?: Omit<ValueTypes["AddedToProjectEvent"],keyof ValueTypes["Node"]>;
		['...on App']?: Omit<ValueTypes["App"],keyof ValueTypes["Node"]>;
		['...on AssignedEvent']?: Omit<ValueTypes["AssignedEvent"],keyof ValueTypes["Node"]>;
		['...on AutoMergeDisabledEvent']?: Omit<ValueTypes["AutoMergeDisabledEvent"],keyof ValueTypes["Node"]>;
		['...on AutoMergeEnabledEvent']?: Omit<ValueTypes["AutoMergeEnabledEvent"],keyof ValueTypes["Node"]>;
		['...on AutoRebaseEnabledEvent']?: Omit<ValueTypes["AutoRebaseEnabledEvent"],keyof ValueTypes["Node"]>;
		['...on AutoSquashEnabledEvent']?: Omit<ValueTypes["AutoSquashEnabledEvent"],keyof ValueTypes["Node"]>;
		['...on AutomaticBaseChangeFailedEvent']?: Omit<ValueTypes["AutomaticBaseChangeFailedEvent"],keyof ValueTypes["Node"]>;
		['...on AutomaticBaseChangeSucceededEvent']?: Omit<ValueTypes["AutomaticBaseChangeSucceededEvent"],keyof ValueTypes["Node"]>;
		['...on BaseRefChangedEvent']?: Omit<ValueTypes["BaseRefChangedEvent"],keyof ValueTypes["Node"]>;
		['...on BaseRefDeletedEvent']?: Omit<ValueTypes["BaseRefDeletedEvent"],keyof ValueTypes["Node"]>;
		['...on BaseRefForcePushedEvent']?: Omit<ValueTypes["BaseRefForcePushedEvent"],keyof ValueTypes["Node"]>;
		['...on Blob']?: Omit<ValueTypes["Blob"],keyof ValueTypes["Node"]>;
		['...on Bot']?: Omit<ValueTypes["Bot"],keyof ValueTypes["Node"]>;
		['...on BranchProtectionRule']?: Omit<ValueTypes["BranchProtectionRule"],keyof ValueTypes["Node"]>;
		['...on BypassForcePushAllowance']?: Omit<ValueTypes["BypassForcePushAllowance"],keyof ValueTypes["Node"]>;
		['...on BypassPullRequestAllowance']?: Omit<ValueTypes["BypassPullRequestAllowance"],keyof ValueTypes["Node"]>;
		['...on CWE']?: Omit<ValueTypes["CWE"],keyof ValueTypes["Node"]>;
		['...on CheckRun']?: Omit<ValueTypes["CheckRun"],keyof ValueTypes["Node"]>;
		['...on CheckSuite']?: Omit<ValueTypes["CheckSuite"],keyof ValueTypes["Node"]>;
		['...on ClosedEvent']?: Omit<ValueTypes["ClosedEvent"],keyof ValueTypes["Node"]>;
		['...on CodeOfConduct']?: Omit<ValueTypes["CodeOfConduct"],keyof ValueTypes["Node"]>;
		['...on CommentDeletedEvent']?: Omit<ValueTypes["CommentDeletedEvent"],keyof ValueTypes["Node"]>;
		['...on Commit']?: Omit<ValueTypes["Commit"],keyof ValueTypes["Node"]>;
		['...on CommitComment']?: Omit<ValueTypes["CommitComment"],keyof ValueTypes["Node"]>;
		['...on CommitCommentThread']?: Omit<ValueTypes["CommitCommentThread"],keyof ValueTypes["Node"]>;
		['...on Comparison']?: Omit<ValueTypes["Comparison"],keyof ValueTypes["Node"]>;
		['...on ConnectedEvent']?: Omit<ValueTypes["ConnectedEvent"],keyof ValueTypes["Node"]>;
		['...on ConvertToDraftEvent']?: Omit<ValueTypes["ConvertToDraftEvent"],keyof ValueTypes["Node"]>;
		['...on ConvertedNoteToIssueEvent']?: Omit<ValueTypes["ConvertedNoteToIssueEvent"],keyof ValueTypes["Node"]>;
		['...on ConvertedToDiscussionEvent']?: Omit<ValueTypes["ConvertedToDiscussionEvent"],keyof ValueTypes["Node"]>;
		['...on CrossReferencedEvent']?: Omit<ValueTypes["CrossReferencedEvent"],keyof ValueTypes["Node"]>;
		['...on DemilestonedEvent']?: Omit<ValueTypes["DemilestonedEvent"],keyof ValueTypes["Node"]>;
		['...on DependencyGraphManifest']?: Omit<ValueTypes["DependencyGraphManifest"],keyof ValueTypes["Node"]>;
		['...on DeployKey']?: Omit<ValueTypes["DeployKey"],keyof ValueTypes["Node"]>;
		['...on DeployedEvent']?: Omit<ValueTypes["DeployedEvent"],keyof ValueTypes["Node"]>;
		['...on Deployment']?: Omit<ValueTypes["Deployment"],keyof ValueTypes["Node"]>;
		['...on DeploymentEnvironmentChangedEvent']?: Omit<ValueTypes["DeploymentEnvironmentChangedEvent"],keyof ValueTypes["Node"]>;
		['...on DeploymentReview']?: Omit<ValueTypes["DeploymentReview"],keyof ValueTypes["Node"]>;
		['...on DeploymentStatus']?: Omit<ValueTypes["DeploymentStatus"],keyof ValueTypes["Node"]>;
		['...on DisconnectedEvent']?: Omit<ValueTypes["DisconnectedEvent"],keyof ValueTypes["Node"]>;
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["Node"]>;
		['...on DiscussionCategory']?: Omit<ValueTypes["DiscussionCategory"],keyof ValueTypes["Node"]>;
		['...on DiscussionComment']?: Omit<ValueTypes["DiscussionComment"],keyof ValueTypes["Node"]>;
		['...on DiscussionPoll']?: Omit<ValueTypes["DiscussionPoll"],keyof ValueTypes["Node"]>;
		['...on DiscussionPollOption']?: Omit<ValueTypes["DiscussionPollOption"],keyof ValueTypes["Node"]>;
		['...on DraftIssue']?: Omit<ValueTypes["DraftIssue"],keyof ValueTypes["Node"]>;
		['...on Enterprise']?: Omit<ValueTypes["Enterprise"],keyof ValueTypes["Node"]>;
		['...on EnterpriseAdministratorInvitation']?: Omit<ValueTypes["EnterpriseAdministratorInvitation"],keyof ValueTypes["Node"]>;
		['...on EnterpriseIdentityProvider']?: Omit<ValueTypes["EnterpriseIdentityProvider"],keyof ValueTypes["Node"]>;
		['...on EnterpriseRepositoryInfo']?: Omit<ValueTypes["EnterpriseRepositoryInfo"],keyof ValueTypes["Node"]>;
		['...on EnterpriseServerInstallation']?: Omit<ValueTypes["EnterpriseServerInstallation"],keyof ValueTypes["Node"]>;
		['...on EnterpriseServerUserAccount']?: Omit<ValueTypes["EnterpriseServerUserAccount"],keyof ValueTypes["Node"]>;
		['...on EnterpriseServerUserAccountEmail']?: Omit<ValueTypes["EnterpriseServerUserAccountEmail"],keyof ValueTypes["Node"]>;
		['...on EnterpriseServerUserAccountsUpload']?: Omit<ValueTypes["EnterpriseServerUserAccountsUpload"],keyof ValueTypes["Node"]>;
		['...on EnterpriseUserAccount']?: Omit<ValueTypes["EnterpriseUserAccount"],keyof ValueTypes["Node"]>;
		['...on Environment']?: Omit<ValueTypes["Environment"],keyof ValueTypes["Node"]>;
		['...on ExternalIdentity']?: Omit<ValueTypes["ExternalIdentity"],keyof ValueTypes["Node"]>;
		['...on Gist']?: Omit<ValueTypes["Gist"],keyof ValueTypes["Node"]>;
		['...on GistComment']?: Omit<ValueTypes["GistComment"],keyof ValueTypes["Node"]>;
		['...on HeadRefDeletedEvent']?: Omit<ValueTypes["HeadRefDeletedEvent"],keyof ValueTypes["Node"]>;
		['...on HeadRefForcePushedEvent']?: Omit<ValueTypes["HeadRefForcePushedEvent"],keyof ValueTypes["Node"]>;
		['...on HeadRefRestoredEvent']?: Omit<ValueTypes["HeadRefRestoredEvent"],keyof ValueTypes["Node"]>;
		['...on IpAllowListEntry']?: Omit<ValueTypes["IpAllowListEntry"],keyof ValueTypes["Node"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["Node"]>;
		['...on IssueComment']?: Omit<ValueTypes["IssueComment"],keyof ValueTypes["Node"]>;
		['...on Label']?: Omit<ValueTypes["Label"],keyof ValueTypes["Node"]>;
		['...on LabeledEvent']?: Omit<ValueTypes["LabeledEvent"],keyof ValueTypes["Node"]>;
		['...on Language']?: Omit<ValueTypes["Language"],keyof ValueTypes["Node"]>;
		['...on License']?: Omit<ValueTypes["License"],keyof ValueTypes["Node"]>;
		['...on LinkedBranch']?: Omit<ValueTypes["LinkedBranch"],keyof ValueTypes["Node"]>;
		['...on LockedEvent']?: Omit<ValueTypes["LockedEvent"],keyof ValueTypes["Node"]>;
		['...on Mannequin']?: Omit<ValueTypes["Mannequin"],keyof ValueTypes["Node"]>;
		['...on MarkedAsDuplicateEvent']?: Omit<ValueTypes["MarkedAsDuplicateEvent"],keyof ValueTypes["Node"]>;
		['...on MarketplaceCategory']?: Omit<ValueTypes["MarketplaceCategory"],keyof ValueTypes["Node"]>;
		['...on MarketplaceListing']?: Omit<ValueTypes["MarketplaceListing"],keyof ValueTypes["Node"]>;
		['...on MembersCanDeleteReposClearAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposClearAuditEntry"],keyof ValueTypes["Node"]>;
		['...on MembersCanDeleteReposDisableAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposDisableAuditEntry"],keyof ValueTypes["Node"]>;
		['...on MembersCanDeleteReposEnableAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposEnableAuditEntry"],keyof ValueTypes["Node"]>;
		['...on MentionedEvent']?: Omit<ValueTypes["MentionedEvent"],keyof ValueTypes["Node"]>;
		['...on MergedEvent']?: Omit<ValueTypes["MergedEvent"],keyof ValueTypes["Node"]>;
		['...on MigrationSource']?: Omit<ValueTypes["MigrationSource"],keyof ValueTypes["Node"]>;
		['...on Milestone']?: Omit<ValueTypes["Milestone"],keyof ValueTypes["Node"]>;
		['...on MilestonedEvent']?: Omit<ValueTypes["MilestonedEvent"],keyof ValueTypes["Node"]>;
		['...on MovedColumnsInProjectEvent']?: Omit<ValueTypes["MovedColumnsInProjectEvent"],keyof ValueTypes["Node"]>;
		['...on OIDCProvider']?: Omit<ValueTypes["OIDCProvider"],keyof ValueTypes["Node"]>;
		['...on OauthApplicationCreateAuditEntry']?: Omit<ValueTypes["OauthApplicationCreateAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgAddBillingManagerAuditEntry']?: Omit<ValueTypes["OrgAddBillingManagerAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgAddMemberAuditEntry']?: Omit<ValueTypes["OrgAddMemberAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgBlockUserAuditEntry']?: Omit<ValueTypes["OrgBlockUserAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgCreateAuditEntry']?: Omit<ValueTypes["OrgCreateAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgDisableOauthAppRestrictionsAuditEntry']?: Omit<ValueTypes["OrgDisableOauthAppRestrictionsAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgDisableSamlAuditEntry']?: Omit<ValueTypes["OrgDisableSamlAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgDisableTwoFactorRequirementAuditEntry']?: Omit<ValueTypes["OrgDisableTwoFactorRequirementAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgEnableOauthAppRestrictionsAuditEntry']?: Omit<ValueTypes["OrgEnableOauthAppRestrictionsAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgEnableSamlAuditEntry']?: Omit<ValueTypes["OrgEnableSamlAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgEnableTwoFactorRequirementAuditEntry']?: Omit<ValueTypes["OrgEnableTwoFactorRequirementAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgInviteMemberAuditEntry']?: Omit<ValueTypes["OrgInviteMemberAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgInviteToBusinessAuditEntry']?: Omit<ValueTypes["OrgInviteToBusinessAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgOauthAppAccessApprovedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessApprovedAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgOauthAppAccessDeniedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessDeniedAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgOauthAppAccessRequestedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessRequestedAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgRemoveBillingManagerAuditEntry']?: Omit<ValueTypes["OrgRemoveBillingManagerAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgRemoveMemberAuditEntry']?: Omit<ValueTypes["OrgRemoveMemberAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgRemoveOutsideCollaboratorAuditEntry']?: Omit<ValueTypes["OrgRemoveOutsideCollaboratorAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgRestoreMemberAuditEntry']?: Omit<ValueTypes["OrgRestoreMemberAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgUnblockUserAuditEntry']?: Omit<ValueTypes["OrgUnblockUserAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']?: Omit<ValueTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgUpdateMemberAuditEntry']?: Omit<ValueTypes["OrgUpdateMemberAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']?: Omit<ValueTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"],keyof ValueTypes["Node"]>;
		['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']?: Omit<ValueTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"],keyof ValueTypes["Node"]>;
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["Node"]>;
		['...on OrganizationIdentityProvider']?: Omit<ValueTypes["OrganizationIdentityProvider"],keyof ValueTypes["Node"]>;
		['...on OrganizationInvitation']?: Omit<ValueTypes["OrganizationInvitation"],keyof ValueTypes["Node"]>;
		['...on Package']?: Omit<ValueTypes["Package"],keyof ValueTypes["Node"]>;
		['...on PackageFile']?: Omit<ValueTypes["PackageFile"],keyof ValueTypes["Node"]>;
		['...on PackageTag']?: Omit<ValueTypes["PackageTag"],keyof ValueTypes["Node"]>;
		['...on PackageVersion']?: Omit<ValueTypes["PackageVersion"],keyof ValueTypes["Node"]>;
		['...on PinnedDiscussion']?: Omit<ValueTypes["PinnedDiscussion"],keyof ValueTypes["Node"]>;
		['...on PinnedEvent']?: Omit<ValueTypes["PinnedEvent"],keyof ValueTypes["Node"]>;
		['...on PinnedIssue']?: Omit<ValueTypes["PinnedIssue"],keyof ValueTypes["Node"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ValueTypes["Node"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ValueTypes["Node"]>;
		['...on Project']?: Omit<ValueTypes["Project"],keyof ValueTypes["Node"]>;
		['...on ProjectCard']?: Omit<ValueTypes["ProjectCard"],keyof ValueTypes["Node"]>;
		['...on ProjectColumn']?: Omit<ValueTypes["ProjectColumn"],keyof ValueTypes["Node"]>;
		['...on ProjectNext']?: Omit<ValueTypes["ProjectNext"],keyof ValueTypes["Node"]>;
		['...on ProjectNextField']?: Omit<ValueTypes["ProjectNextField"],keyof ValueTypes["Node"]>;
		['...on ProjectNextItem']?: Omit<ValueTypes["ProjectNextItem"],keyof ValueTypes["Node"]>;
		['...on ProjectNextItemFieldValue']?: Omit<ValueTypes["ProjectNextItemFieldValue"],keyof ValueTypes["Node"]>;
		['...on ProjectV2']?: Omit<ValueTypes["ProjectV2"],keyof ValueTypes["Node"]>;
		['...on ProjectV2Field']?: Omit<ValueTypes["ProjectV2Field"],keyof ValueTypes["Node"]>;
		['...on ProjectV2Item']?: Omit<ValueTypes["ProjectV2Item"],keyof ValueTypes["Node"]>;
		['...on ProjectV2ItemFieldDateValue']?: Omit<ValueTypes["ProjectV2ItemFieldDateValue"],keyof ValueTypes["Node"]>;
		['...on ProjectV2ItemFieldIterationValue']?: Omit<ValueTypes["ProjectV2ItemFieldIterationValue"],keyof ValueTypes["Node"]>;
		['...on ProjectV2ItemFieldNumberValue']?: Omit<ValueTypes["ProjectV2ItemFieldNumberValue"],keyof ValueTypes["Node"]>;
		['...on ProjectV2ItemFieldSingleSelectValue']?: Omit<ValueTypes["ProjectV2ItemFieldSingleSelectValue"],keyof ValueTypes["Node"]>;
		['...on ProjectV2ItemFieldTextValue']?: Omit<ValueTypes["ProjectV2ItemFieldTextValue"],keyof ValueTypes["Node"]>;
		['...on ProjectV2IterationField']?: Omit<ValueTypes["ProjectV2IterationField"],keyof ValueTypes["Node"]>;
		['...on ProjectV2SingleSelectField']?: Omit<ValueTypes["ProjectV2SingleSelectField"],keyof ValueTypes["Node"]>;
		['...on ProjectV2View']?: Omit<ValueTypes["ProjectV2View"],keyof ValueTypes["Node"]>;
		['...on ProjectView']?: Omit<ValueTypes["ProjectView"],keyof ValueTypes["Node"]>;
		['...on PublicKey']?: Omit<ValueTypes["PublicKey"],keyof ValueTypes["Node"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["Node"]>;
		['...on PullRequestCommit']?: Omit<ValueTypes["PullRequestCommit"],keyof ValueTypes["Node"]>;
		['...on PullRequestCommitCommentThread']?: Omit<ValueTypes["PullRequestCommitCommentThread"],keyof ValueTypes["Node"]>;
		['...on PullRequestReview']?: Omit<ValueTypes["PullRequestReview"],keyof ValueTypes["Node"]>;
		['...on PullRequestReviewComment']?: Omit<ValueTypes["PullRequestReviewComment"],keyof ValueTypes["Node"]>;
		['...on PullRequestReviewThread']?: Omit<ValueTypes["PullRequestReviewThread"],keyof ValueTypes["Node"]>;
		['...on PullRequestThread']?: Omit<ValueTypes["PullRequestThread"],keyof ValueTypes["Node"]>;
		['...on Push']?: Omit<ValueTypes["Push"],keyof ValueTypes["Node"]>;
		['...on PushAllowance']?: Omit<ValueTypes["PushAllowance"],keyof ValueTypes["Node"]>;
		['...on Reaction']?: Omit<ValueTypes["Reaction"],keyof ValueTypes["Node"]>;
		['...on ReadyForReviewEvent']?: Omit<ValueTypes["ReadyForReviewEvent"],keyof ValueTypes["Node"]>;
		['...on Ref']?: Omit<ValueTypes["Ref"],keyof ValueTypes["Node"]>;
		['...on ReferencedEvent']?: Omit<ValueTypes["ReferencedEvent"],keyof ValueTypes["Node"]>;
		['...on Release']?: Omit<ValueTypes["Release"],keyof ValueTypes["Node"]>;
		['...on ReleaseAsset']?: Omit<ValueTypes["ReleaseAsset"],keyof ValueTypes["Node"]>;
		['...on RemovedFromProjectEvent']?: Omit<ValueTypes["RemovedFromProjectEvent"],keyof ValueTypes["Node"]>;
		['...on RenamedTitleEvent']?: Omit<ValueTypes["RenamedTitleEvent"],keyof ValueTypes["Node"]>;
		['...on ReopenedEvent']?: Omit<ValueTypes["ReopenedEvent"],keyof ValueTypes["Node"]>;
		['...on RepoAccessAuditEntry']?: Omit<ValueTypes["RepoAccessAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoAddMemberAuditEntry']?: Omit<ValueTypes["RepoAddMemberAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoAddTopicAuditEntry']?: Omit<ValueTypes["RepoAddTopicAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoArchivedAuditEntry']?: Omit<ValueTypes["RepoArchivedAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoChangeMergeSettingAuditEntry']?: Omit<ValueTypes["RepoChangeMergeSettingAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigDisableAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigDisableContributorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigDisableContributorsOnlyAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']?: Omit<ValueTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigEnableAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigEnableContributorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigEnableContributorsOnlyAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']?: Omit<ValueTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigLockAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoCreateAuditEntry']?: Omit<ValueTypes["RepoCreateAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoDestroyAuditEntry']?: Omit<ValueTypes["RepoDestroyAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoRemoveMemberAuditEntry']?: Omit<ValueTypes["RepoRemoveMemberAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ValueTypes["RepoRemoveTopicAuditEntry"],keyof ValueTypes["Node"]>;
		['...on Repository']?: Omit<ValueTypes["Repository"],keyof ValueTypes["Node"]>;
		['...on RepositoryInvitation']?: Omit<ValueTypes["RepositoryInvitation"],keyof ValueTypes["Node"]>;
		['...on RepositoryMigration']?: Omit<ValueTypes["RepositoryMigration"],keyof ValueTypes["Node"]>;
		['...on RepositoryTopic']?: Omit<ValueTypes["RepositoryTopic"],keyof ValueTypes["Node"]>;
		['...on RepositoryVisibilityChangeDisableAuditEntry']?: Omit<ValueTypes["RepositoryVisibilityChangeDisableAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepositoryVisibilityChangeEnableAuditEntry']?: Omit<ValueTypes["RepositoryVisibilityChangeEnableAuditEntry"],keyof ValueTypes["Node"]>;
		['...on RepositoryVulnerabilityAlert']?: Omit<ValueTypes["RepositoryVulnerabilityAlert"],keyof ValueTypes["Node"]>;
		['...on ReviewDismissalAllowance']?: Omit<ValueTypes["ReviewDismissalAllowance"],keyof ValueTypes["Node"]>;
		['...on ReviewDismissedEvent']?: Omit<ValueTypes["ReviewDismissedEvent"],keyof ValueTypes["Node"]>;
		['...on ReviewRequest']?: Omit<ValueTypes["ReviewRequest"],keyof ValueTypes["Node"]>;
		['...on ReviewRequestRemovedEvent']?: Omit<ValueTypes["ReviewRequestRemovedEvent"],keyof ValueTypes["Node"]>;
		['...on ReviewRequestedEvent']?: Omit<ValueTypes["ReviewRequestedEvent"],keyof ValueTypes["Node"]>;
		['...on SavedReply']?: Omit<ValueTypes["SavedReply"],keyof ValueTypes["Node"]>;
		['...on SecurityAdvisory']?: Omit<ValueTypes["SecurityAdvisory"],keyof ValueTypes["Node"]>;
		['...on SponsorsActivity']?: Omit<ValueTypes["SponsorsActivity"],keyof ValueTypes["Node"]>;
		['...on SponsorsListing']?: Omit<ValueTypes["SponsorsListing"],keyof ValueTypes["Node"]>;
		['...on SponsorsTier']?: Omit<ValueTypes["SponsorsTier"],keyof ValueTypes["Node"]>;
		['...on Sponsorship']?: Omit<ValueTypes["Sponsorship"],keyof ValueTypes["Node"]>;
		['...on SponsorshipNewsletter']?: Omit<ValueTypes["SponsorshipNewsletter"],keyof ValueTypes["Node"]>;
		['...on Status']?: Omit<ValueTypes["Status"],keyof ValueTypes["Node"]>;
		['...on StatusCheckRollup']?: Omit<ValueTypes["StatusCheckRollup"],keyof ValueTypes["Node"]>;
		['...on StatusContext']?: Omit<ValueTypes["StatusContext"],keyof ValueTypes["Node"]>;
		['...on SubscribedEvent']?: Omit<ValueTypes["SubscribedEvent"],keyof ValueTypes["Node"]>;
		['...on Tag']?: Omit<ValueTypes["Tag"],keyof ValueTypes["Node"]>;
		['...on Team']?: Omit<ValueTypes["Team"],keyof ValueTypes["Node"]>;
		['...on TeamAddMemberAuditEntry']?: Omit<ValueTypes["TeamAddMemberAuditEntry"],keyof ValueTypes["Node"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ValueTypes["TeamAddRepositoryAuditEntry"],keyof ValueTypes["Node"]>;
		['...on TeamChangeParentTeamAuditEntry']?: Omit<ValueTypes["TeamChangeParentTeamAuditEntry"],keyof ValueTypes["Node"]>;
		['...on TeamDiscussion']?: Omit<ValueTypes["TeamDiscussion"],keyof ValueTypes["Node"]>;
		['...on TeamDiscussionComment']?: Omit<ValueTypes["TeamDiscussionComment"],keyof ValueTypes["Node"]>;
		['...on TeamRemoveMemberAuditEntry']?: Omit<ValueTypes["TeamRemoveMemberAuditEntry"],keyof ValueTypes["Node"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ValueTypes["TeamRemoveRepositoryAuditEntry"],keyof ValueTypes["Node"]>;
		['...on Topic']?: Omit<ValueTypes["Topic"],keyof ValueTypes["Node"]>;
		['...on TransferredEvent']?: Omit<ValueTypes["TransferredEvent"],keyof ValueTypes["Node"]>;
		['...on Tree']?: Omit<ValueTypes["Tree"],keyof ValueTypes["Node"]>;
		['...on UnassignedEvent']?: Omit<ValueTypes["UnassignedEvent"],keyof ValueTypes["Node"]>;
		['...on UnlabeledEvent']?: Omit<ValueTypes["UnlabeledEvent"],keyof ValueTypes["Node"]>;
		['...on UnlockedEvent']?: Omit<ValueTypes["UnlockedEvent"],keyof ValueTypes["Node"]>;
		['...on UnmarkedAsDuplicateEvent']?: Omit<ValueTypes["UnmarkedAsDuplicateEvent"],keyof ValueTypes["Node"]>;
		['...on UnpinnedEvent']?: Omit<ValueTypes["UnpinnedEvent"],keyof ValueTypes["Node"]>;
		['...on UnsubscribedEvent']?: Omit<ValueTypes["UnsubscribedEvent"],keyof ValueTypes["Node"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["Node"]>;
		['...on UserBlockedEvent']?: Omit<ValueTypes["UserBlockedEvent"],keyof ValueTypes["Node"]>;
		['...on UserContentEdit']?: Omit<ValueTypes["UserContentEdit"],keyof ValueTypes["Node"]>;
		['...on UserStatus']?: Omit<ValueTypes["UserStatus"],keyof ValueTypes["Node"]>;
		['...on VerifiableDomain']?: Omit<ValueTypes["VerifiableDomain"],keyof ValueTypes["Node"]>;
		['...on Workflow']?: Omit<ValueTypes["Workflow"],keyof ValueTypes["Node"]>;
		['...on WorkflowRun']?: Omit<ValueTypes["WorkflowRun"],keyof ValueTypes["Node"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The possible values for the notification restriction setting. */
["NotificationRestrictionSettingValue"]:NotificationRestrictionSettingValue;
	/** An OIDC identity provider configured to provision identities for an enterprise. */
["OIDCProvider"]: AliasType<{
	/** The enterprise this identity provider belongs to. */
	enterprise?:ValueTypes["Enterprise"],
externalIdentities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter to external identities with the users login */
	login?: string | undefined | null | Variable<any, string>,	/** Filter to external identities with valid org membership only */
	membersOnly?: boolean | undefined | null | Variable<any, string>,	/** Filter to external identities with the users userName/NameID attribute */
	userName?: string | undefined | null | Variable<any, string>},ValueTypes["ExternalIdentityConnection"]],
	id?:boolean | `@${string}`,
	/** The OIDC identity provider type */
	providerType?:boolean | `@${string}`,
	/** The id of the tenant this provider is attached to */
	tenantId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The OIDC identity provider type */
["OIDCProviderType"]:OIDCProviderType;
	/** Metadata for an audit entry with action oauth_application.* */
["OauthApplicationAuditEntryData"]:AliasType<{
		/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`;
		['...on OauthApplicationCreateAuditEntry']?: Omit<ValueTypes["OauthApplicationCreateAuditEntry"],keyof ValueTypes["OauthApplicationAuditEntryData"]>;
		['...on OrgOauthAppAccessApprovedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessApprovedAuditEntry"],keyof ValueTypes["OauthApplicationAuditEntryData"]>;
		['...on OrgOauthAppAccessDeniedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessDeniedAuditEntry"],keyof ValueTypes["OauthApplicationAuditEntryData"]>;
		['...on OrgOauthAppAccessRequestedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessRequestedAuditEntry"],keyof ValueTypes["OauthApplicationAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a oauth_application.create event. */
["OauthApplicationCreateAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The application URL of the OAuth Application. */
	applicationUrl?:boolean | `@${string}`,
	/** The callback URL of the OAuth Application. */
	callbackUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The rate limit of the OAuth Application. */
	rateLimit?:boolean | `@${string}`,
	/** The state of the OAuth Application. */
	state?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The state of an OAuth Application when it was created. */
["OauthApplicationCreateAuditEntryState"]:OauthApplicationCreateAuditEntryState;
	/** The corresponding operation type for the action */
["OperationType"]:OperationType;
	/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
["OrderDirection"]:OrderDirection;
	/** Audit log entry for a org.add_billing_manager */
["OrgAddBillingManagerAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The email address used to invite a billing manager for the organization. */
	invitationEmail?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.add_member */
["OrgAddMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The permission level of the member added to the organization. */
	permission?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The permissions available to members on an Organization. */
["OrgAddMemberAuditEntryPermission"]:OrgAddMemberAuditEntryPermission;
	/** Audit log entry for a org.block_user */
["OrgBlockUserAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The blocked user. */
	blockedUser?:ValueTypes["User"],
	/** The username of the blocked user. */
	blockedUserName?:boolean | `@${string}`,
	/** The HTTP path for the blocked user. */
	blockedUserResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the blocked user. */
	blockedUserUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.config.disable_collaborators_only event. */
["OrgConfigDisableCollaboratorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.config.enable_collaborators_only event. */
["OrgConfigEnableCollaboratorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.create event. */
["OrgCreateAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The billing plan for the Organization. */
	billingPlan?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The billing plans available for organizations. */
["OrgCreateAuditEntryBillingPlan"]:OrgCreateAuditEntryBillingPlan;
	/** Audit log entry for a org.disable_oauth_app_restrictions event. */
["OrgDisableOauthAppRestrictionsAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.disable_saml event. */
["OrgDisableSamlAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The SAML provider's digest algorithm URL. */
	digestMethodUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The SAML provider's issuer URL. */
	issuerUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The SAML provider's signature algorithm URL. */
	signatureMethodUrl?:boolean | `@${string}`,
	/** The SAML provider's single sign-on URL. */
	singleSignOnUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.disable_two_factor_requirement event. */
["OrgDisableTwoFactorRequirementAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.enable_oauth_app_restrictions event. */
["OrgEnableOauthAppRestrictionsAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.enable_saml event. */
["OrgEnableSamlAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The SAML provider's digest algorithm URL. */
	digestMethodUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The SAML provider's issuer URL. */
	issuerUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The SAML provider's signature algorithm URL. */
	signatureMethodUrl?:boolean | `@${string}`,
	/** The SAML provider's single sign-on URL. */
	singleSignOnUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.enable_two_factor_requirement event. */
["OrgEnableTwoFactorRequirementAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for an organization's enterprise owner connections. */
["OrgEnterpriseOwnerOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order enterprise owners by. */
	field: ValueTypes["OrgEnterpriseOwnerOrderField"] | Variable<any, string>
};
	/** Properties by which enterprise owners can be ordered. */
["OrgEnterpriseOwnerOrderField"]:OrgEnterpriseOwnerOrderField;
	/** Audit log entry for a org.invite_member event. */
["OrgInviteMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The email address of the organization invitation. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The organization invitation. */
	organizationInvitation?:ValueTypes["OrganizationInvitation"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.invite_to_business event. */
["OrgInviteToBusinessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.oauth_app_access_approved event. */
["OrgOauthAppAccessApprovedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.oauth_app_access_denied event. */
["OrgOauthAppAccessDeniedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.oauth_app_access_requested event. */
["OrgOauthAppAccessRequestedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.remove_billing_manager event. */
["OrgRemoveBillingManagerAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The reason for the billing manager being removed. */
	reason?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The reason a billing manager was removed from an Organization. */
["OrgRemoveBillingManagerAuditEntryReason"]:OrgRemoveBillingManagerAuditEntryReason;
	/** Audit log entry for a org.remove_member event. */
["OrgRemoveMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The types of membership the member has with the organization. */
	membershipTypes?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The reason for the member being removed. */
	reason?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The type of membership a user has with an Organization. */
["OrgRemoveMemberAuditEntryMembershipType"]:OrgRemoveMemberAuditEntryMembershipType;
	/** The reason a member was removed from an Organization. */
["OrgRemoveMemberAuditEntryReason"]:OrgRemoveMemberAuditEntryReason;
	/** Audit log entry for a org.remove_outside_collaborator event. */
["OrgRemoveOutsideCollaboratorAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The types of membership the outside collaborator has with the organization. */
	membershipTypes?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The reason for the outside collaborator being removed from the Organization. */
	reason?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The type of membership a user has with an Organization. */
["OrgRemoveOutsideCollaboratorAuditEntryMembershipType"]:OrgRemoveOutsideCollaboratorAuditEntryMembershipType;
	/** The reason an outside collaborator was removed from an Organization. */
["OrgRemoveOutsideCollaboratorAuditEntryReason"]:OrgRemoveOutsideCollaboratorAuditEntryReason;
	/** Audit log entry for a org.restore_member event. */
["OrgRestoreMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The number of custom email routings for the restored member. */
	restoredCustomEmailRoutingsCount?:boolean | `@${string}`,
	/** The number of issue assignments for the restored member. */
	restoredIssueAssignmentsCount?:boolean | `@${string}`,
	/** Restored organization membership objects. */
	restoredMemberships?:ValueTypes["OrgRestoreMemberAuditEntryMembership"],
	/** The number of restored memberships. */
	restoredMembershipsCount?:boolean | `@${string}`,
	/** The number of repositories of the restored member. */
	restoredRepositoriesCount?:boolean | `@${string}`,
	/** The number of starred repositories for the restored member. */
	restoredRepositoryStarsCount?:boolean | `@${string}`,
	/** The number of watched repositories for the restored member. */
	restoredRepositoryWatchesCount?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types of memberships that can be restored for an Organization member. */
["OrgRestoreMemberAuditEntryMembership"]: AliasType<{		["...on OrgRestoreMemberMembershipOrganizationAuditEntryData"] : ValueTypes["OrgRestoreMemberMembershipOrganizationAuditEntryData"],
		["...on OrgRestoreMemberMembershipRepositoryAuditEntryData"] : ValueTypes["OrgRestoreMemberMembershipRepositoryAuditEntryData"],
		["...on OrgRestoreMemberMembershipTeamAuditEntryData"] : ValueTypes["OrgRestoreMemberMembershipTeamAuditEntryData"]
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for an organization membership for org.restore_member actions */
["OrgRestoreMemberMembershipOrganizationAuditEntryData"]: AliasType<{
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for a repository membership for org.restore_member actions */
["OrgRestoreMemberMembershipRepositoryAuditEntryData"]: AliasType<{
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for a team membership for org.restore_member actions */
["OrgRestoreMemberMembershipTeamAuditEntryData"]: AliasType<{
	/** The team associated with the action */
	team?:ValueTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.unblock_user */
["OrgUnblockUserAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The user being unblocked by the organization. */
	blockedUser?:ValueTypes["User"],
	/** The username of the blocked user. */
	blockedUserName?:boolean | `@${string}`,
	/** The HTTP path for the blocked user. */
	blockedUserResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the blocked user. */
	blockedUserUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.update_default_repository_permission */
["OrgUpdateDefaultRepositoryPermissionAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The new base repository permission level for the organization. */
	permission?:boolean | `@${string}`,
	/** The former base repository permission level for the organization. */
	permissionWas?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The default permission a repository can have in an Organization. */
["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"]:OrgUpdateDefaultRepositoryPermissionAuditEntryPermission;
	/** Audit log entry for a org.update_member event. */
["OrgUpdateMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The new member permission level for the organization. */
	permission?:boolean | `@${string}`,
	/** The former member permission level for the organization. */
	permissionWas?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The permissions available to members on an Organization. */
["OrgUpdateMemberAuditEntryPermission"]:OrgUpdateMemberAuditEntryPermission;
	/** Audit log entry for a org.update_member_repository_creation_permission event. */
["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** Can members create repositories in the organization. */
	canCreateRepositories?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The permission for visibility level of repositories for this organization. */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The permissions available for repository creation on an Organization. */
["OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"]:OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility;
	/** Audit log entry for a org.update_member_repository_invitation_permission event. */
["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** Can outside collaborators be invited to repositories in the organization. */
	canInviteOutsideCollaboratorsToRepositories?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
["Organization"]: AliasType<{
anyPinnableItems?: [{	/** Filter to only a particular kind of pinnable item. */
	type?: ValueTypes["PinnableItemType"] | undefined | null | Variable<any, string>},boolean | `@${string}`],
auditLog?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the returned audit log entries. */
	orderBy?: ValueTypes["AuditLogOrder"] | undefined | null | Variable<any, string>,	/** The query string to filter audit entries */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["OrganizationAuditEntryConnection"]],
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The organization's public profile description. */
	description?:boolean | `@${string}`,
	/** The organization's public profile description rendered to HTML. */
	descriptionHTML?:boolean | `@${string}`,
domains?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Filter by if the domain is approved. */
	isApproved?: boolean | undefined | null | Variable<any, string>,	/** Filter by if the domain is verified. */
	isVerified?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for verifiable domains returned. */
	orderBy?: ValueTypes["VerifiableDomainOrder"] | undefined | null | Variable<any, string>},ValueTypes["VerifiableDomainConnection"]],
	/** The organization's public email. */
	email?:boolean | `@${string}`,
enterpriseOwners?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for enterprise owners returned from the connection. */
	orderBy?: ValueTypes["OrgEnterpriseOwnerOrder"] | undefined | null | Variable<any, string>,	/** The organization role to filter by. */
	organizationRole?: ValueTypes["RoleInOrganization"] | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["OrganizationEnterpriseOwnerConnection"]],
	/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents?:boolean | `@${string}`,
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The interaction ability settings for this organization. */
	interactionAbility?:ValueTypes["RepositoryInteractionAbility"],
	/** The setting value for whether the organization has an IP allow list enabled. */
	ipAllowListEnabledSetting?:boolean | `@${string}`,
ipAllowListEntries?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for IP allow list entries returned. */
	orderBy?: ValueTypes["IpAllowListEntryOrder"] | undefined | null | Variable<any, string>},ValueTypes["IpAllowListEntryConnection"]],
	/** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
	ipAllowListForInstalledAppsEnabledSetting?:boolean | `@${string}`,
isSponsoredBy?: [{	/** The target account's login. */
	accountLogin: string | Variable<any, string>},boolean | `@${string}`],
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer?:boolean | `@${string}`,
	/** Whether the organization has verified its profile email and website. */
	isVerified?:boolean | `@${string}`,
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase?:ValueTypes["ProfileItemShowcase"],
	/** The organization's public profile location. */
	location?:boolean | `@${string}`,
	/** The organization's login name. */
	login?:boolean | `@${string}`,
memberStatuses?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for user statuses returned from the connection. */
	orderBy?: ValueTypes["UserStatusOrder"] | undefined | null | Variable<any, string>},ValueTypes["UserStatusConnection"]],
	/** Members can fork private repositories in this organization */
	membersCanForkPrivateRepositories?:boolean | `@${string}`,
membersWithRole?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["OrganizationMemberConnection"]],
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents?:boolean | `@${string}`,
	/** The organization's public profile name. */
	name?:boolean | `@${string}`,
	/** The HTTP path creating a new team */
	newTeamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL creating a new team */
	newTeamUrl?:boolean | `@${string}`,
	/** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
	notificationDeliveryRestrictionEnabledSetting?:boolean | `@${string}`,
	/** The billing email for the organization. */
	organizationBillingEmail?:boolean | `@${string}`,
packages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Find packages by their names. */
	names?: Array<string | undefined | null> | undefined | null | Variable<any, string>,	/** Ordering of the returned packages. */
	orderBy?: ValueTypes["PackageOrder"] | undefined | null | Variable<any, string>,	/** Filter registry package by type. */
	packageType?: ValueTypes["PackageType"] | undefined | null | Variable<any, string>,	/** Find packages in a repository by ID. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["PackageConnection"]],
pendingMembers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
pinnableItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter the types of pinnable items that are returned. */
	types?: Array<ValueTypes["PinnableItemType"]> | undefined | null | Variable<any, string>},ValueTypes["PinnableItemConnection"]],
pinnedItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter the types of pinned items that are returned. */
	types?: Array<ValueTypes["PinnableItemType"]> | undefined | null | Variable<any, string>},ValueTypes["PinnableItemConnection"]],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining?:boolean | `@${string}`,
project?: [{	/** The project number to find. */
	number: number | Variable<any, string>},ValueTypes["Project"]],
projectNext?: [{	/** The project (beta) number. */
	number: number | Variable<any, string>},ValueTypes["ProjectNext"]],
projectV2?: [{	/** The project number. */
	number: number | Variable<any, string>},ValueTypes["ProjectV2"]],
projects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for projects returned from the connection */
	orderBy?: ValueTypes["ProjectOrder"] | undefined | null | Variable<any, string>,	/** Query to search projects by, currently only searching by name. */
	search?: string | undefined | null | Variable<any, string>,	/** A list of states to filter the projects by. */
	states?: Array<ValueTypes["ProjectState"]> | undefined | null | Variable<any, string>},ValueTypes["ProjectConnection"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>,	/** How to order the returned projects (beta). */
	sortBy?: ValueTypes["ProjectNextOrderField"] | undefined | null | Variable<any, string>},ValueTypes["ProjectNextConnection"]],
	/** The HTTP path listing organization's projects */
	projectsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing organization's projects */
	projectsUrl?:boolean | `@${string}`,
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** How to order the returned projects. */
	orderBy?: ValueTypes["ProjectV2Order"] | undefined | null | Variable<any, string>,	/** A project to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
recentProjects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
repositories?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they are forks of another repository */
	isFork?: boolean | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories returned from the connection */
	orderBy?: ValueTypes["RepositoryOrder"] | undefined | null | Variable<any, string>,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to privacy */
	privacy?: ValueTypes["RepositoryPrivacy"] | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
repository?: [{	/** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
	followRenames?: boolean | undefined | null | Variable<any, string>,	/** Name of Repository to find. */
	name: string | Variable<any, string>},ValueTypes["Repository"]],
repositoryDiscussionComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter discussion comments to only those that were marked as the answer */
	onlyAnswers?: boolean | undefined | null | Variable<any, string>,	/** Filter discussion comments to only those in a specific repository. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["DiscussionCommentConnection"]],
repositoryDiscussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Filter discussions to only those that have been answered or not. Defaults to
including both answered and unanswered discussions. */
	answered?: boolean | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for discussions returned from the connection. */
	orderBy?: ValueTypes["DiscussionOrder"] | undefined | null | Variable<any, string>,	/** Filter discussions to only those in a specific repository. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["DiscussionConnection"]],
repositoryMigrations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repository migrations returned. */
	orderBy?: ValueTypes["RepositoryMigrationOrder"] | undefined | null | Variable<any, string>,	/** Filter repository migrations by repository name. */
	repositoryName?: string | undefined | null | Variable<any, string>,	/** Filter repository migrations by state. */
	state?: ValueTypes["MigrationState"] | undefined | null | Variable<any, string>},ValueTypes["RepositoryMigrationConnection"]],
	/** When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication. */
	requiresTwoFactorAuthentication?:boolean | `@${string}`,
	/** The HTTP path for this organization. */
	resourcePath?:boolean | `@${string}`,
	/** The Organization's SAML identity providers */
	samlIdentityProvider?:ValueTypes["OrganizationIdentityProvider"],
sponsoring?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the users and organizations returned from the connection. */
	orderBy?: ValueTypes["SponsorOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorConnection"]],
sponsors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsors returned from the connection. */
	orderBy?: ValueTypes["SponsorOrder"] | undefined | null | Variable<any, string>,	/** If given, will filter for sponsors at the given tier. Will only return
sponsors whose tier the viewer is permitted to see. */
	tierId?: string | undefined | null | Variable<any, string>},ValueTypes["SponsorConnection"]],
sponsorsActivities?: [{	/** Filter activities to only the specified actions. */
	actions?: Array<ValueTypes["SponsorsActivityAction"]> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for activity returned from the connection. */
	orderBy?: ValueTypes["SponsorsActivityOrder"] | undefined | null | Variable<any, string>,	/** Filter activities returned to only those that occurred in the most recent
specified time period. Set to ALL to avoid filtering by when the activity occurred. */
	period?: ValueTypes["SponsorsActivityPeriod"] | undefined | null | Variable<any, string>},ValueTypes["SponsorsActivityConnection"]],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?:ValueTypes["SponsorsListing"],
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?:ValueTypes["Sponsorship"],
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?:ValueTypes["Sponsorship"],
sponsorshipNewsletters?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorship updates returned from the connection. */
	orderBy?: ValueTypes["SponsorshipNewsletterOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipNewsletterConnection"]],
sponsorshipsAsMaintainer?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Whether or not to include private sponsorships in the result set */
	includePrivate?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ValueTypes["SponsorshipOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipConnection"]],
sponsorshipsAsSponsor?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ValueTypes["SponsorshipOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipConnection"]],
team?: [{	/** The name or slug of the team to find. */
	slug: string | Variable<any, string>},ValueTypes["Team"]],
teams?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** If true, filters teams that are mapped to an LDAP Group (Enterprise only) */
	ldapMapped?: boolean | undefined | null | Variable<any, string>,	/** Ordering options for teams returned from the connection */
	orderBy?: ValueTypes["TeamOrder"] | undefined | null | Variable<any, string>,	/** If non-null, filters teams according to privacy */
	privacy?: ValueTypes["TeamPrivacy"] | undefined | null | Variable<any, string>,	/** If non-null, filters teams with query on team name and team slug */
	query?: string | undefined | null | Variable<any, string>,	/** If non-null, filters teams according to whether the viewer is an admin or member on team */
	role?: ValueTypes["TeamRole"] | undefined | null | Variable<any, string>,	/** If true, restrict to only root teams */
	rootTeamsOnly?: boolean | undefined | null | Variable<any, string>,	/** User logins to filter by */
	userLogins?: Array<string> | undefined | null | Variable<any, string>},ValueTypes["TeamConnection"]],
	/** The HTTP path listing organization's teams */
	teamsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing organization's teams */
	teamsUrl?:boolean | `@${string}`,
	/** The organization's Twitter username. */
	twitterUsername?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this organization. */
	url?:boolean | `@${string}`,
	/** Organization is adminable by the viewer. */
	viewerCanAdminister?:boolean | `@${string}`,
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems?:boolean | `@${string}`,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects?:boolean | `@${string}`,
	/** Viewer can create repositories on this organization */
	viewerCanCreateRepositories?:boolean | `@${string}`,
	/** Viewer can create teams on this organization. */
	viewerCanCreateTeams?:boolean | `@${string}`,
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor?:boolean | `@${string}`,
	/** Viewer is an active member of this organization. */
	viewerIsAMember?:boolean | `@${string}`,
	/** Whether or not this Organization is followed by the viewer. */
	viewerIsFollowing?:boolean | `@${string}`,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring?:boolean | `@${string}`,
	/** Whether contributors are required to sign off on web-based commits for repositories in this organization. */
	webCommitSignoffRequired?:boolean | `@${string}`,
	/** The organization's public profile URL. */
	websiteUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An audit entry in an organization audit log. */
["OrganizationAuditEntry"]: AliasType<{		["...on MembersCanDeleteReposClearAuditEntry"] : ValueTypes["MembersCanDeleteReposClearAuditEntry"],
		["...on MembersCanDeleteReposDisableAuditEntry"] : ValueTypes["MembersCanDeleteReposDisableAuditEntry"],
		["...on MembersCanDeleteReposEnableAuditEntry"] : ValueTypes["MembersCanDeleteReposEnableAuditEntry"],
		["...on OauthApplicationCreateAuditEntry"] : ValueTypes["OauthApplicationCreateAuditEntry"],
		["...on OrgAddBillingManagerAuditEntry"] : ValueTypes["OrgAddBillingManagerAuditEntry"],
		["...on OrgAddMemberAuditEntry"] : ValueTypes["OrgAddMemberAuditEntry"],
		["...on OrgBlockUserAuditEntry"] : ValueTypes["OrgBlockUserAuditEntry"],
		["...on OrgConfigDisableCollaboratorsOnlyAuditEntry"] : ValueTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"],
		["...on OrgConfigEnableCollaboratorsOnlyAuditEntry"] : ValueTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"],
		["...on OrgCreateAuditEntry"] : ValueTypes["OrgCreateAuditEntry"],
		["...on OrgDisableOauthAppRestrictionsAuditEntry"] : ValueTypes["OrgDisableOauthAppRestrictionsAuditEntry"],
		["...on OrgDisableSamlAuditEntry"] : ValueTypes["OrgDisableSamlAuditEntry"],
		["...on OrgDisableTwoFactorRequirementAuditEntry"] : ValueTypes["OrgDisableTwoFactorRequirementAuditEntry"],
		["...on OrgEnableOauthAppRestrictionsAuditEntry"] : ValueTypes["OrgEnableOauthAppRestrictionsAuditEntry"],
		["...on OrgEnableSamlAuditEntry"] : ValueTypes["OrgEnableSamlAuditEntry"],
		["...on OrgEnableTwoFactorRequirementAuditEntry"] : ValueTypes["OrgEnableTwoFactorRequirementAuditEntry"],
		["...on OrgInviteMemberAuditEntry"] : ValueTypes["OrgInviteMemberAuditEntry"],
		["...on OrgInviteToBusinessAuditEntry"] : ValueTypes["OrgInviteToBusinessAuditEntry"],
		["...on OrgOauthAppAccessApprovedAuditEntry"] : ValueTypes["OrgOauthAppAccessApprovedAuditEntry"],
		["...on OrgOauthAppAccessDeniedAuditEntry"] : ValueTypes["OrgOauthAppAccessDeniedAuditEntry"],
		["...on OrgOauthAppAccessRequestedAuditEntry"] : ValueTypes["OrgOauthAppAccessRequestedAuditEntry"],
		["...on OrgRemoveBillingManagerAuditEntry"] : ValueTypes["OrgRemoveBillingManagerAuditEntry"],
		["...on OrgRemoveMemberAuditEntry"] : ValueTypes["OrgRemoveMemberAuditEntry"],
		["...on OrgRemoveOutsideCollaboratorAuditEntry"] : ValueTypes["OrgRemoveOutsideCollaboratorAuditEntry"],
		["...on OrgRestoreMemberAuditEntry"] : ValueTypes["OrgRestoreMemberAuditEntry"],
		["...on OrgUnblockUserAuditEntry"] : ValueTypes["OrgUnblockUserAuditEntry"],
		["...on OrgUpdateDefaultRepositoryPermissionAuditEntry"] : ValueTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"],
		["...on OrgUpdateMemberAuditEntry"] : ValueTypes["OrgUpdateMemberAuditEntry"],
		["...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry"] : ValueTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"],
		["...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"] : ValueTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"],
		["...on PrivateRepositoryForkingDisableAuditEntry"] : ValueTypes["PrivateRepositoryForkingDisableAuditEntry"],
		["...on PrivateRepositoryForkingEnableAuditEntry"] : ValueTypes["PrivateRepositoryForkingEnableAuditEntry"],
		["...on RepoAccessAuditEntry"] : ValueTypes["RepoAccessAuditEntry"],
		["...on RepoAddMemberAuditEntry"] : ValueTypes["RepoAddMemberAuditEntry"],
		["...on RepoAddTopicAuditEntry"] : ValueTypes["RepoAddTopicAuditEntry"],
		["...on RepoArchivedAuditEntry"] : ValueTypes["RepoArchivedAuditEntry"],
		["...on RepoChangeMergeSettingAuditEntry"] : ValueTypes["RepoChangeMergeSettingAuditEntry"],
		["...on RepoConfigDisableAnonymousGitAccessAuditEntry"] : ValueTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],
		["...on RepoConfigDisableCollaboratorsOnlyAuditEntry"] : ValueTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],
		["...on RepoConfigDisableContributorsOnlyAuditEntry"] : ValueTypes["RepoConfigDisableContributorsOnlyAuditEntry"],
		["...on RepoConfigDisableSockpuppetDisallowedAuditEntry"] : ValueTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],
		["...on RepoConfigEnableAnonymousGitAccessAuditEntry"] : ValueTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],
		["...on RepoConfigEnableCollaboratorsOnlyAuditEntry"] : ValueTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],
		["...on RepoConfigEnableContributorsOnlyAuditEntry"] : ValueTypes["RepoConfigEnableContributorsOnlyAuditEntry"],
		["...on RepoConfigEnableSockpuppetDisallowedAuditEntry"] : ValueTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],
		["...on RepoConfigLockAnonymousGitAccessAuditEntry"] : ValueTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],
		["...on RepoConfigUnlockAnonymousGitAccessAuditEntry"] : ValueTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],
		["...on RepoCreateAuditEntry"] : ValueTypes["RepoCreateAuditEntry"],
		["...on RepoDestroyAuditEntry"] : ValueTypes["RepoDestroyAuditEntry"],
		["...on RepoRemoveMemberAuditEntry"] : ValueTypes["RepoRemoveMemberAuditEntry"],
		["...on RepoRemoveTopicAuditEntry"] : ValueTypes["RepoRemoveTopicAuditEntry"],
		["...on RepositoryVisibilityChangeDisableAuditEntry"] : ValueTypes["RepositoryVisibilityChangeDisableAuditEntry"],
		["...on RepositoryVisibilityChangeEnableAuditEntry"] : ValueTypes["RepositoryVisibilityChangeEnableAuditEntry"],
		["...on TeamAddMemberAuditEntry"] : ValueTypes["TeamAddMemberAuditEntry"],
		["...on TeamAddRepositoryAuditEntry"] : ValueTypes["TeamAddRepositoryAuditEntry"],
		["...on TeamChangeParentTeamAuditEntry"] : ValueTypes["TeamChangeParentTeamAuditEntry"],
		["...on TeamRemoveMemberAuditEntry"] : ValueTypes["TeamRemoveMemberAuditEntry"],
		["...on TeamRemoveRepositoryAuditEntry"] : ValueTypes["TeamRemoveRepositoryAuditEntry"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for OrganizationAuditEntry. */
["OrganizationAuditEntryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["OrganizationAuditEntryEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["OrganizationAuditEntry"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for an audit entry with action org.* */
["OrganizationAuditEntryData"]:AliasType<{
		/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`;
		['...on MembersCanDeleteReposClearAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposClearAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on MembersCanDeleteReposDisableAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposDisableAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on MembersCanDeleteReposEnableAuditEntry']?: Omit<ValueTypes["MembersCanDeleteReposEnableAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OauthApplicationCreateAuditEntry']?: Omit<ValueTypes["OauthApplicationCreateAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgAddBillingManagerAuditEntry']?: Omit<ValueTypes["OrgAddBillingManagerAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgAddMemberAuditEntry']?: Omit<ValueTypes["OrgAddMemberAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgBlockUserAuditEntry']?: Omit<ValueTypes["OrgBlockUserAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgCreateAuditEntry']?: Omit<ValueTypes["OrgCreateAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgDisableOauthAppRestrictionsAuditEntry']?: Omit<ValueTypes["OrgDisableOauthAppRestrictionsAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgDisableSamlAuditEntry']?: Omit<ValueTypes["OrgDisableSamlAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgDisableTwoFactorRequirementAuditEntry']?: Omit<ValueTypes["OrgDisableTwoFactorRequirementAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgEnableOauthAppRestrictionsAuditEntry']?: Omit<ValueTypes["OrgEnableOauthAppRestrictionsAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgEnableSamlAuditEntry']?: Omit<ValueTypes["OrgEnableSamlAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgEnableTwoFactorRequirementAuditEntry']?: Omit<ValueTypes["OrgEnableTwoFactorRequirementAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgInviteMemberAuditEntry']?: Omit<ValueTypes["OrgInviteMemberAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgInviteToBusinessAuditEntry']?: Omit<ValueTypes["OrgInviteToBusinessAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgOauthAppAccessApprovedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessApprovedAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgOauthAppAccessDeniedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessDeniedAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgOauthAppAccessRequestedAuditEntry']?: Omit<ValueTypes["OrgOauthAppAccessRequestedAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgRemoveBillingManagerAuditEntry']?: Omit<ValueTypes["OrgRemoveBillingManagerAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgRemoveMemberAuditEntry']?: Omit<ValueTypes["OrgRemoveMemberAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgRemoveOutsideCollaboratorAuditEntry']?: Omit<ValueTypes["OrgRemoveOutsideCollaboratorAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgRestoreMemberAuditEntry']?: Omit<ValueTypes["OrgRestoreMemberAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgRestoreMemberMembershipOrganizationAuditEntryData']?: Omit<ValueTypes["OrgRestoreMemberMembershipOrganizationAuditEntryData"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgUnblockUserAuditEntry']?: Omit<ValueTypes["OrgUnblockUserAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']?: Omit<ValueTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgUpdateMemberAuditEntry']?: Omit<ValueTypes["OrgUpdateMemberAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']?: Omit<ValueTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']?: Omit<ValueTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoAccessAuditEntry']?: Omit<ValueTypes["RepoAccessAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoAddMemberAuditEntry']?: Omit<ValueTypes["RepoAddMemberAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoAddTopicAuditEntry']?: Omit<ValueTypes["RepoAddTopicAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoArchivedAuditEntry']?: Omit<ValueTypes["RepoArchivedAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoChangeMergeSettingAuditEntry']?: Omit<ValueTypes["RepoChangeMergeSettingAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigDisableAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigDisableContributorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigDisableContributorsOnlyAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']?: Omit<ValueTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigEnableAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigEnableContributorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigEnableContributorsOnlyAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']?: Omit<ValueTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigLockAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoCreateAuditEntry']?: Omit<ValueTypes["RepoCreateAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoDestroyAuditEntry']?: Omit<ValueTypes["RepoDestroyAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoRemoveMemberAuditEntry']?: Omit<ValueTypes["RepoRemoveMemberAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ValueTypes["RepoRemoveTopicAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepositoryVisibilityChangeDisableAuditEntry']?: Omit<ValueTypes["RepositoryVisibilityChangeDisableAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on RepositoryVisibilityChangeEnableAuditEntry']?: Omit<ValueTypes["RepositoryVisibilityChangeEnableAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on TeamAddMemberAuditEntry']?: Omit<ValueTypes["TeamAddMemberAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ValueTypes["TeamAddRepositoryAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on TeamChangeParentTeamAuditEntry']?: Omit<ValueTypes["TeamChangeParentTeamAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on TeamRemoveMemberAuditEntry']?: Omit<ValueTypes["TeamRemoveMemberAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ValueTypes["TeamRemoveRepositoryAuditEntry"],keyof ValueTypes["OrganizationAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["OrganizationAuditEntryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["OrganizationAuditEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** A list of organizations managed by an enterprise. */
["OrganizationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["OrganizationEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Organization"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["OrganizationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["OrganizationEnterpriseOwnerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["OrganizationEnterpriseOwnerEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An enterprise owner in the context of an organization that is part of the enterprise. */
["OrganizationEnterpriseOwnerEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["User"],
	/** The role of the owner with respect to the organization. */
	organizationRole?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
["OrganizationIdentityProvider"]: AliasType<{
	/** The digest algorithm used to sign SAML requests for the Identity Provider. */
	digestMethod?:boolean | `@${string}`,
externalIdentities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter to external identities with the users login */
	login?: string | undefined | null | Variable<any, string>,	/** Filter to external identities with valid org membership only */
	membersOnly?: boolean | undefined | null | Variable<any, string>,	/** Filter to external identities with the users userName/NameID attribute */
	userName?: string | undefined | null | Variable<any, string>},ValueTypes["ExternalIdentityConnection"]],
	id?:boolean | `@${string}`,
	/** The x509 certificate used by the Identity Provider to sign assertions and responses. */
	idpCertificate?:boolean | `@${string}`,
	/** The Issuer Entity ID for the SAML Identity Provider */
	issuer?:boolean | `@${string}`,
	/** Organization this Identity Provider belongs to */
	organization?:ValueTypes["Organization"],
	/** The signature algorithm used to sign SAML requests for the Identity Provider. */
	signatureMethod?:boolean | `@${string}`,
	/** The URL endpoint for the Identity Provider's SAML SSO. */
	ssoUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An Invitation for a user to an organization. */
["OrganizationInvitation"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The email address of the user invited to the organization. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The type of invitation that was sent (e.g. email, user). */
	invitationType?:boolean | `@${string}`,
	/** The user who was invited to the organization. */
	invitee?:ValueTypes["User"],
	/** The user who created the invitation. */
	inviter?:ValueTypes["User"],
	/** The organization the invite is for */
	organization?:ValueTypes["Organization"],
	/** The user's pending role in the organization (e.g. member, owner). */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for OrganizationInvitation. */
["OrganizationInvitationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["OrganizationInvitationEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["OrganizationInvitation"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["OrganizationInvitationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["OrganizationInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible organization invitation roles. */
["OrganizationInvitationRole"]:OrganizationInvitationRole;
	/** The possible organization invitation types. */
["OrganizationInvitationType"]:OrganizationInvitationType;
	/** The connection type for User. */
["OrganizationMemberConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["OrganizationMemberEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user within an organization. */
["OrganizationMemberEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
	hasTwoFactorEnabled?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["User"],
	/** The role this user has in the organization. */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible roles within an organization for its members. */
["OrganizationMemberRole"]:OrganizationMemberRole;
	/** The possible values for the members can create repositories setting on an organization. */
["OrganizationMembersCanCreateRepositoriesSettingValue"]:OrganizationMembersCanCreateRepositoriesSettingValue;
	/** Used for argument of CreateProjectV2 mutation. */
["OrganizationOrUser"]: AliasType<{		["...on Organization"] : ValueTypes["Organization"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for organization connections. */
["OrganizationOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order organizations by. */
	field: ValueTypes["OrganizationOrderField"] | Variable<any, string>
};
	/** Properties by which organization connections can be ordered. */
["OrganizationOrderField"]:OrganizationOrderField;
	/** An organization teams hovercard context */
["OrganizationTeamsHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
relevantTeams?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["TeamConnection"]],
	/** The path for the full team list for this user */
	teamsResourcePath?:boolean | `@${string}`,
	/** The URL for the full team list for this user */
	teamsUrl?:boolean | `@${string}`,
	/** The total number of teams the user is on in the organization */
	totalTeamCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An organization list hovercard context */
["OrganizationsHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
relevantOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["OrganizationConnection"]],
	/** The total number of organizations this user is in */
	totalOrganizationCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Information for an uploaded package. */
["Package"]: AliasType<{
	id?:boolean | `@${string}`,
	/** Find the latest version for the package. */
	latestVersion?:ValueTypes["PackageVersion"],
	/** Identifies the name of the package. */
	name?:boolean | `@${string}`,
	/** Identifies the type of the package. */
	packageType?:boolean | `@${string}`,
	/** The repository this package belongs to. */
	repository?:ValueTypes["Repository"],
	/** Statistics about package activity. */
	statistics?:ValueTypes["PackageStatistics"],
version?: [{	/** The package version. */
	version: string | Variable<any, string>},ValueTypes["PackageVersion"]],
versions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering of the returned packages. */
	orderBy?: ValueTypes["PackageVersionOrder"] | undefined | null | Variable<any, string>},ValueTypes["PackageVersionConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Package. */
["PackageConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PackageEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Package"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PackageEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Package"],
		__typename?: boolean | `@${string}`
}>;
	/** A file in a package version. */
["PackageFile"]: AliasType<{
	id?:boolean | `@${string}`,
	/** MD5 hash of the file. */
	md5?:boolean | `@${string}`,
	/** Name of the file. */
	name?:boolean | `@${string}`,
	/** The package version this file belongs to. */
	packageVersion?:ValueTypes["PackageVersion"],
	/** SHA1 hash of the file. */
	sha1?:boolean | `@${string}`,
	/** SHA256 hash of the file. */
	sha256?:boolean | `@${string}`,
	/** Size of the file in bytes. */
	size?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** URL to download the asset. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PackageFile. */
["PackageFileConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PackageFileEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PackageFile"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PackageFileEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PackageFile"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of package files can be ordered upon return. */
["PackageFileOrder"]: {
	/** The direction in which to order package files by the specified field. */
	direction?: ValueTypes["OrderDirection"] | undefined | null | Variable<any, string>,
	/** The field in which to order package files by. */
	field?: ValueTypes["PackageFileOrderField"] | undefined | null | Variable<any, string>
};
	/** Properties by which package file connections can be ordered. */
["PackageFileOrderField"]:PackageFileOrderField;
	/** Ways in which lists of packages can be ordered upon return. */
["PackageOrder"]: {
	/** The direction in which to order packages by the specified field. */
	direction?: ValueTypes["OrderDirection"] | undefined | null | Variable<any, string>,
	/** The field in which to order packages by. */
	field?: ValueTypes["PackageOrderField"] | undefined | null | Variable<any, string>
};
	/** Properties by which package connections can be ordered. */
["PackageOrderField"]:PackageOrderField;
	/** Represents an owner of a package. */
["PackageOwner"]:AliasType<{
		id?:boolean | `@${string}`,
packages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Find packages by their names. */
	names?: Array<string | undefined | null> | undefined | null | Variable<any, string>,	/** Ordering of the returned packages. */
	orderBy?: ValueTypes["PackageOrder"] | undefined | null | Variable<any, string>,	/** Filter registry package by type. */
	packageType?: ValueTypes["PackageType"] | undefined | null | Variable<any, string>,	/** Find packages in a repository by ID. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["PackageConnection"]];
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["PackageOwner"]>;
		['...on Repository']?: Omit<ValueTypes["Repository"],keyof ValueTypes["PackageOwner"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["PackageOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a object that contains package activity statistics such as downloads. */
["PackageStatistics"]: AliasType<{
	/** Number of times the package was downloaded since it was created. */
	downloadsTotalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A version tag contains the mapping between a tag name and a version. */
["PackageTag"]: AliasType<{
	id?:boolean | `@${string}`,
	/** Identifies the tag name of the version. */
	name?:boolean | `@${string}`,
	/** Version that the tag is associated with. */
	version?:ValueTypes["PackageVersion"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible types of a package. */
["PackageType"]:PackageType;
	/** Information about a specific package version. */
["PackageVersion"]: AliasType<{
files?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering of the returned package files. */
	orderBy?: ValueTypes["PackageFileOrder"] | undefined | null | Variable<any, string>},ValueTypes["PackageFileConnection"]],
	id?:boolean | `@${string}`,
	/** The package associated with this version. */
	package?:ValueTypes["Package"],
	/** The platform this version was built for. */
	platform?:boolean | `@${string}`,
	/** Whether or not this version is a pre-release. */
	preRelease?:boolean | `@${string}`,
	/** The README of this package version. */
	readme?:boolean | `@${string}`,
	/** The release associated with this package version. */
	release?:ValueTypes["Release"],
	/** Statistics about package activity. */
	statistics?:ValueTypes["PackageVersionStatistics"],
	/** The package version summary. */
	summary?:boolean | `@${string}`,
	/** The version string. */
	version?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PackageVersion. */
["PackageVersionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PackageVersionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PackageVersion"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PackageVersionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PackageVersion"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of package versions can be ordered upon return. */
["PackageVersionOrder"]: {
	/** The direction in which to order package versions by the specified field. */
	direction?: ValueTypes["OrderDirection"] | undefined | null | Variable<any, string>,
	/** The field in which to order package versions by. */
	field?: ValueTypes["PackageVersionOrderField"] | undefined | null | Variable<any, string>
};
	/** Properties by which package version connections can be ordered. */
["PackageVersionOrderField"]:PackageVersionOrderField;
	/** Represents a object that contains package version activity statistics such as downloads. */
["PackageVersionStatistics"]: AliasType<{
	/** Number of times the package was downloaded since it was created. */
	downloadsTotalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Information about pagination in a connection. */
["PageInfo"]: AliasType<{
	/** When paginating forwards, the cursor to continue. */
	endCursor?:boolean | `@${string}`,
	/** When paginating forwards, are there more items? */
	hasNextPage?:boolean | `@${string}`,
	/** When paginating backwards, are there more items? */
	hasPreviousPage?:boolean | `@${string}`,
	/** When paginating backwards, the cursor to continue. */
	startCursor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible types of patch statuses. */
["PatchStatus"]:PatchStatus;
	/** Types that can grant permissions on a repository to a user */
["PermissionGranter"]: AliasType<{		["...on Organization"] : ValueTypes["Organization"],
		["...on Repository"] : ValueTypes["Repository"],
		["...on Team"] : ValueTypes["Team"]
		__typename?: boolean | `@${string}`
}>;
	/** A level of permission and source for a user's access to a repository. */
["PermissionSource"]: AliasType<{
	/** The organization the repository belongs to. */
	organization?:ValueTypes["Organization"],
	/** The level of access this source has granted to the user. */
	permission?:boolean | `@${string}`,
	/** The source of this permission. */
	source?:ValueTypes["PermissionGranter"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of PinIssue */
["PinIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the issue to be pinned */
	issueId: string | Variable<any, string>
};
	/** Autogenerated return type of PinIssue */
["PinIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was pinned */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be pinned to a profile page. */
["PinnableItem"]: AliasType<{		["...on Gist"] : ValueTypes["Gist"],
		["...on Repository"] : ValueTypes["Repository"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PinnableItem. */
["PinnableItemConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PinnableItemEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PinnableItem"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PinnableItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PinnableItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents items that can be pinned to a profile page or dashboard. */
["PinnableItemType"]:PinnableItemType;
	/** A Pinned Discussion is a discussion pinned to a repository's index page. */
["PinnedDiscussion"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The discussion that was pinned. */
	discussion?:ValueTypes["Discussion"],
	/** Color stops of the chosen gradient */
	gradientStopColors?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Background texture pattern */
	pattern?:boolean | `@${string}`,
	/** The actor that pinned this discussion. */
	pinnedBy?:ValueTypes["Actor"],
	/** Preconfigured background gradient option */
	preconfiguredGradient?:boolean | `@${string}`,
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PinnedDiscussion. */
["PinnedDiscussionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PinnedDiscussionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PinnedDiscussion"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PinnedDiscussionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PinnedDiscussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
["PinnedDiscussionGradient"]:PinnedDiscussionGradient;
	/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
["PinnedDiscussionPattern"]:PinnedDiscussionPattern;
	/** Represents a 'pinned' event on a given issue or pull request. */
["PinnedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the issue associated with the event. */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** A Pinned Issue is a issue pinned to a repository's index page. */
["PinnedIssue"]: AliasType<{
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The issue that was pinned. */
	issue?:ValueTypes["Issue"],
	/** The actor that pinned this issue. */
	pinnedBy?:ValueTypes["Actor"],
	/** The repository that this issue was pinned to. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PinnedIssue. */
["PinnedIssueConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PinnedIssueEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PinnedIssue"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PinnedIssueEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PinnedIssue"],
		__typename?: boolean | `@${string}`
}>;
	/** An ISO-8601 encoded UTC date string with millisecond precision. */
["PreciseDateTime"]:unknown;
	/** Audit log entry for a private_repository_forking.disable event. */
["PrivateRepositoryForkingDisableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a private_repository_forking.enable event. */
["PrivateRepositoryForkingEnableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own. */
["ProfileItemShowcase"]: AliasType<{
	/** Whether or not the owner has pinned any repositories or gists. */
	hasPinnedItems?:boolean | `@${string}`,
items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PinnableItemConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Represents any entity on GitHub that has a profile page. */
["ProfileOwner"]:AliasType<{
	anyPinnableItems?: [{	/** Filter to only a particular kind of pinnable item. */
	type?: ValueTypes["PinnableItemType"] | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The public profile email. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase?:ValueTypes["ProfileItemShowcase"],
	/** The public profile location. */
	location?:boolean | `@${string}`,
	/** The username used to login. */
	login?:boolean | `@${string}`,
	/** The public profile name. */
	name?:boolean | `@${string}`,
pinnableItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter the types of pinnable items that are returned. */
	types?: Array<ValueTypes["PinnableItemType"]> | undefined | null | Variable<any, string>},ValueTypes["PinnableItemConnection"]],
pinnedItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter the types of pinned items that are returned. */
	types?: Array<ValueTypes["PinnableItemType"]> | undefined | null | Variable<any, string>},ValueTypes["PinnableItemConnection"]],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining?:boolean | `@${string}`,
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems?:boolean | `@${string}`,
	/** The public profile website URL. */
	websiteUrl?:boolean | `@${string}`;
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["ProfileOwner"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["ProfileOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Projects manage issues, pull requests and notes within a project owner. */
["Project"]: AliasType<{
	/** The project's description body. */
	body?:boolean | `@${string}`,
	/** The projects description body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
columns?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectColumnConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who originally created the project. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project's name. */
	name?:boolean | `@${string}`,
	/** The project's number. */
	number?:boolean | `@${string}`,
	/** The project's owner. Currently limited to repositories, organizations, and users. */
	owner?:ValueTypes["ProjectOwner"],
pendingCards?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** A list of archived states to filter the cards by */
	archivedStates?: Array<ValueTypes["ProjectCardArchivedState"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectCardConnection"]],
	/** Project progress details. */
	progress?:ValueTypes["ProjectProgress"],
	/** The HTTP path for this project */
	resourcePath?:boolean | `@${string}`,
	/** Whether the project is open or closed. */
	state?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this project */
	url?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A card in a project. */
["ProjectCard"]: AliasType<{
	/** The project column this card is associated under. A card may only belong to one
project column at a time. The column field will be null if the card is created
in a pending state and has yet to be associated with a column. Once cards are
associated with a column, they will not become pending in the future. */
	column?:ValueTypes["ProjectColumn"],
	/** The card content item */
	content?:ValueTypes["ProjectCardItem"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created this card */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the card is archived */
	isArchived?:boolean | `@${string}`,
	/** The card note */
	note?:boolean | `@${string}`,
	/** The project that contains this card. */
	project?:ValueTypes["Project"],
	/** The HTTP path for this card */
	resourcePath?:boolean | `@${string}`,
	/** The state of ProjectCard */
	state?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this card */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible archived states of a project card. */
["ProjectCardArchivedState"]:ProjectCardArchivedState;
	/** The connection type for ProjectCard. */
["ProjectCardConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectCardEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectCard"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectCardEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectCard"],
		__typename?: boolean | `@${string}`
}>;
	/** An issue or PR and its owning repository to be used in a project card. */
["ProjectCardImport"]: {
	/** The issue or pull request number. */
	number: number | Variable<any, string>,
	/** Repository name with owner (owner/repository). */
	repository: string | Variable<any, string>
};
	/** Types that can be inside Project Cards. */
["ProjectCardItem"]: AliasType<{		["...on Issue"] : ValueTypes["Issue"],
		["...on PullRequest"] : ValueTypes["PullRequest"]
		__typename?: boolean | `@${string}`
}>;
	/** Various content states of a ProjectCard */
["ProjectCardState"]:ProjectCardState;
	/** A column inside a project. */
["ProjectColumn"]: AliasType<{
cards?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** A list of archived states to filter the cards by */
	archivedStates?: Array<ValueTypes["ProjectCardArchivedState"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectCardConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project column's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this column. */
	project?:ValueTypes["Project"],
	/** The semantic purpose of the column */
	purpose?:boolean | `@${string}`,
	/** The HTTP path for this project column */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this project column */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectColumn. */
["ProjectColumnConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectColumnEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectColumn"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectColumnEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectColumn"],
		__typename?: boolean | `@${string}`
}>;
	/** A project column and a list of its issues and PRs. */
["ProjectColumnImport"]: {
	/** The name of the column. */
	columnName: string | Variable<any, string>,
	/** A list of issues and pull requests in the column. */
	issues?: Array<ValueTypes["ProjectCardImport"]> | undefined | null | Variable<any, string>,
	/** The position of the column, starting from 0. */
	position: number | Variable<any, string>
};
	/** The semantic purpose of the column - todo, in progress, or done. */
["ProjectColumnPurpose"]:ProjectColumnPurpose;
	/** A list of projects associated with the owner. */
["ProjectConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Project"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** The type of a project item. */
["ProjectItemType"]:ProjectItemType;
	/** New projects that manage issues, pull requests and drafts using tables and boards. */
["ProjectNext"]: AliasType<{
	/** Returns true if the project is closed. */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who originally created the project. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project's description. */
	description?:boolean | `@${string}`,
fields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectNextFieldConnection"]],
	id?:boolean | `@${string}`,
items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectNextItemConnection"]],
	/** The project's number. */
	number?:boolean | `@${string}`,
	/** The project's owner. Currently limited to organizations and users. */
	owner?:ValueTypes["ProjectNextOwner"],
	/** Returns true if the project is public. */
	public?:boolean | `@${string}`,
repositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
	/** The HTTP path for this project */
	resourcePath?:boolean | `@${string}`,
	/** The project's short description. */
	shortDescription?:boolean | `@${string}`,
	/** The project's name. */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this project */
	url?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
views?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectViewConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectNext. */
["ProjectNextConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectNextEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectNext"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectNextEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectNext"],
		__typename?: boolean | `@${string}`
}>;
	/** A field inside a project. */
["ProjectNextField"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ValueTypes["ProjectNext"],
	/** The field's settings. */
	settings?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Common fields across different field types */
["ProjectNextFieldCommon"]:AliasType<{
		/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ValueTypes["ProjectNext"],
	/** The field's settings. */
	settings?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`;
		['...on ProjectNextField']?: Omit<ValueTypes["ProjectNextField"],keyof ValueTypes["ProjectNextFieldCommon"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectNextField. */
["ProjectNextFieldConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectNextFieldEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectNextField"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectNextFieldEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectNextField"],
		__typename?: boolean | `@${string}`
}>;
	/** The type of a project next field. */
["ProjectNextFieldType"]:ProjectNextFieldType;
	/** An item within a new Project. */
["ProjectNextItem"]: AliasType<{
	/** The content of the referenced draft issue, issue, or pull request */
	content?:ValueTypes["ProjectNextItemContent"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
fieldValues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectNextItemFieldValueConnection"]],
	id?:boolean | `@${string}`,
	/** Whether the item is archived. */
	isArchived?:boolean | `@${string}`,
	/** The project that contains this item. */
	project?:ValueTypes["ProjectNext"],
	/** The title of the item */
	title?:boolean | `@${string}`,
	/** The type of the item. */
	type?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectNextItem. */
["ProjectNextItemConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectNextItemEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectNextItem"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be inside Project Items. */
["ProjectNextItemContent"]: AliasType<{		["...on DraftIssue"] : ValueTypes["DraftIssue"],
		["...on Issue"] : ValueTypes["Issue"],
		["...on PullRequest"] : ValueTypes["PullRequest"]
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectNextItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectNextItem"],
		__typename?: boolean | `@${string}`
}>;
	/** An value of a field in an item of a new Project. */
["ProjectNextItemFieldValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field that contains this value. */
	projectField?:ValueTypes["ProjectNextField"],
	/** The project item that contains this value. */
	projectItem?:ValueTypes["ProjectNextItem"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The value of a field */
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectNextItemFieldValue. */
["ProjectNextItemFieldValueConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectNextItemFieldValueEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectNextItemFieldValue"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectNextItemFieldValueEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectNextItemFieldValue"],
		__typename?: boolean | `@${string}`
}>;
	/** Properties by which the return project can be ordered. */
["ProjectNextOrderField"]:ProjectNextOrderField;
	/** Represents an owner of a project (beta). */
["ProjectNextOwner"]:AliasType<{
		id?:boolean | `@${string}`,
projectNext?: [{	/** The project (beta) number. */
	number: number | Variable<any, string>},ValueTypes["ProjectNext"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>,	/** How to order the returned projects (beta). */
	sortBy?: ValueTypes["ProjectNextOrderField"] | undefined | null | Variable<any, string>},ValueTypes["ProjectNextConnection"]];
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["ProjectNextOwner"]>;
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["ProjectNextOwner"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["ProjectNextOwner"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["ProjectNextOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of projects can be ordered upon return. */
["ProjectOrder"]: {
	/** The direction in which to order projects by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order projects by. */
	field: ValueTypes["ProjectOrderField"] | Variable<any, string>
};
	/** Properties by which project connections can be ordered. */
["ProjectOrderField"]:ProjectOrderField;
	/** Represents an owner of a Project. */
["ProjectOwner"]:AliasType<{
		id?:boolean | `@${string}`,
project?: [{	/** The project number to find. */
	number: number | Variable<any, string>},ValueTypes["Project"]],
projects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for projects returned from the connection */
	orderBy?: ValueTypes["ProjectOrder"] | undefined | null | Variable<any, string>,	/** Query to search projects by, currently only searching by name. */
	search?: string | undefined | null | Variable<any, string>,	/** A list of states to filter the projects by. */
	states?: Array<ValueTypes["ProjectState"]> | undefined | null | Variable<any, string>},ValueTypes["ProjectConnection"]],
	/** The HTTP path listing owners projects */
	projectsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing owners projects */
	projectsUrl?:boolean | `@${string}`,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects?:boolean | `@${string}`;
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["ProjectOwner"]>;
		['...on Repository']?: Omit<ValueTypes["Repository"],keyof ValueTypes["ProjectOwner"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["ProjectOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Project progress stats. */
["ProjectProgress"]: AliasType<{
	/** The number of done cards. */
	doneCount?:boolean | `@${string}`,
	/** The percentage of done cards. */
	donePercentage?:boolean | `@${string}`,
	/** Whether progress tracking is enabled and cards with purpose exist for this project */
	enabled?:boolean | `@${string}`,
	/** The number of in-progress cards. */
	inProgressCount?:boolean | `@${string}`,
	/** The percentage of in-progress cards. */
	inProgressPercentage?:boolean | `@${string}`,
	/** The number of to do cards. */
	todoCount?:boolean | `@${string}`,
	/** The percentage of to do cards. */
	todoPercentage?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** State of the project; either 'open' or 'closed' */
["ProjectState"]:ProjectState;
	/** GitHub-provided templates for Projects */
["ProjectTemplate"]:ProjectTemplate;
	/** New projects that manage issues, pull requests and drafts using tables and boards. */
["ProjectV2"]: AliasType<{
	/** Returns true if the project is closed. */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who originally created the project. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
field?: [{	/** The name of the field */
	name: string | Variable<any, string>},ValueTypes["ProjectV2FieldConfiguration"]],
fields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for project v2 fields returned from the connection */
	orderBy?: ValueTypes["ProjectV2FieldOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2FieldConfigurationConnection"]],
	id?:boolean | `@${string}`,
items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for project v2 items returned from the connection */
	orderBy?: ValueTypes["ProjectV2ItemOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2ItemConnection"]],
	/** The project's number. */
	number?:boolean | `@${string}`,
	/** The project's owner. Currently limited to organizations and users. */
	owner?:ValueTypes["ProjectV2Owner"],
	/** Returns true if the project is public. */
	public?:boolean | `@${string}`,
	/** The project's readme. */
	readme?:boolean | `@${string}`,
repositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories returned from the connection */
	orderBy?: ValueTypes["RepositoryOrder"] | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
	/** The HTTP path for this project */
	resourcePath?:boolean | `@${string}`,
	/** The project's short description. */
	shortDescription?:boolean | `@${string}`,
teams?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for teams returned from this connection. */
	orderBy?: ValueTypes["TeamOrder"] | undefined | null | Variable<any, string>},ValueTypes["TeamConnection"]],
	/** The project's name. */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this project */
	url?:boolean | `@${string}`,
view?: [{	/** The number of a view belonging to the project */
	number: number | Variable<any, string>},ValueTypes["ProjectV2View"]],
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
views?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for project v2 views returned from the connection */
	orderBy?: ValueTypes["ProjectV2ViewOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2ViewConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2. */
["ProjectV2Connection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectV2Edge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectV2"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2Edge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectV2"],
		__typename?: boolean | `@${string}`
}>;
	/** A field inside a project. */
["ProjectV2Field"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ValueTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Common fields across different project field types */
["ProjectV2FieldCommon"]:AliasType<{
		/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ValueTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`;
		['...on ProjectV2Field']?: Omit<ValueTypes["ProjectV2Field"],keyof ValueTypes["ProjectV2FieldCommon"]>;
		['...on ProjectV2IterationField']?: Omit<ValueTypes["ProjectV2IterationField"],keyof ValueTypes["ProjectV2FieldCommon"]>;
		['...on ProjectV2SingleSelectField']?: Omit<ValueTypes["ProjectV2SingleSelectField"],keyof ValueTypes["ProjectV2FieldCommon"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Configurations for project fields. */
["ProjectV2FieldConfiguration"]: AliasType<{		["...on ProjectV2Field"] : ValueTypes["ProjectV2Field"],
		["...on ProjectV2IterationField"] : ValueTypes["ProjectV2IterationField"],
		["...on ProjectV2SingleSelectField"] : ValueTypes["ProjectV2SingleSelectField"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2FieldConfiguration. */
["ProjectV2FieldConfigurationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectV2FieldConfigurationEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectV2FieldConfiguration"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2FieldConfigurationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectV2FieldConfiguration"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2Field. */
["ProjectV2FieldConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectV2FieldEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectV2Field"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2FieldEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectV2Field"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for project v2 field connections */
["ProjectV2FieldOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order the project v2 fields by. */
	field: ValueTypes["ProjectV2FieldOrderField"] | Variable<any, string>
};
	/** Properties by which project v2 field connections can be ordered. */
["ProjectV2FieldOrderField"]:ProjectV2FieldOrderField;
	/** The type of a project field. */
["ProjectV2FieldType"]:ProjectV2FieldType;
	/** The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time. */
["ProjectV2FieldValue"]: {
	/** The ISO 8601 date to set on the field. */
	date?: ValueTypes["Date"] | undefined | null | Variable<any, string>,
	/** The id of the iteration to set on the field. */
	iterationId?: string | undefined | null | Variable<any, string>,
	/** The number to set on the field. */
	number?: number | undefined | null | Variable<any, string>,
	/** The id of the single select option to set on the field. */
	singleSelectOptionId?: string | undefined | null | Variable<any, string>,
	/** The text to set on the field. */
	text?: string | undefined | null | Variable<any, string>
};
	/** An item within a Project. */
["ProjectV2Item"]: AliasType<{
	/** The content of the referenced draft issue, issue, or pull request */
	content?:ValueTypes["ProjectV2ItemContent"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
fieldValueByName?: [{	/** The name of the field to return the field value of */
	name: string | Variable<any, string>},ValueTypes["ProjectV2ItemFieldValue"]],
fieldValues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for project v2 item field values returned from the connection */
	orderBy?: ValueTypes["ProjectV2ItemFieldValueOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2ItemFieldValueConnection"]],
	id?:boolean | `@${string}`,
	/** Whether the item is archived. */
	isArchived?:boolean | `@${string}`,
	/** The project that contains this item. */
	project?:ValueTypes["ProjectV2"],
	/** The type of the item. */
	type?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2Item. */
["ProjectV2ItemConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectV2ItemEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectV2Item"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be inside Project Items. */
["ProjectV2ItemContent"]: AliasType<{		["...on DraftIssue"] : ValueTypes["DraftIssue"],
		["...on Issue"] : ValueTypes["Issue"],
		["...on PullRequest"] : ValueTypes["PullRequest"]
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2ItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a date field in a Project item. */
["ProjectV2ItemFieldDateValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** Date value for the field */
	date?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ValueTypes["ProjectV2Item"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of an iteration field in a Project item. */
["ProjectV2ItemFieldIterationValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The duration of the iteration in days. */
	duration?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ValueTypes["ProjectV2Item"],
	/** The ID of the iteration. */
	iterationId?:boolean | `@${string}`,
	/** The start date of the iteration. */
	startDate?:boolean | `@${string}`,
	/** The title of the iteration. */
	title?:boolean | `@${string}`,
	/** The title of the iteration, with HTML. */
	titleHTML?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of the labels field in a Project item. */
["ProjectV2ItemFieldLabelValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["LabelConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a milestone field in a Project item. */
["ProjectV2ItemFieldMilestoneValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
	/** Milestone value of a field */
	milestone?:ValueTypes["Milestone"],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a number field in a Project item. */
["ProjectV2ItemFieldNumberValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ValueTypes["ProjectV2Item"],
	/** Number as a float(8) */
	number?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of a pull request field in a Project item. */
["ProjectV2ItemFieldPullRequestValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pull requests. */
	orderBy?: ValueTypes["PullRequestOrder"] | undefined | null | Variable<any, string>},ValueTypes["PullRequestConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a repository field in a Project item. */
["ProjectV2ItemFieldRepositoryValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
	/** The repository for this field. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a reviewers field in a Project item. */
["ProjectV2ItemFieldReviewerValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
reviewers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["RequestedReviewerConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a single select field in a Project item. */
["ProjectV2ItemFieldSingleSelectValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ValueTypes["ProjectV2Item"],
	/** The name of the selected single select option. */
	name?:boolean | `@${string}`,
	/** The html name of the selected single select option. */
	nameHTML?:boolean | `@${string}`,
	/** The id of the selected single select option. */
	optionId?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of a text field in a Project item. */
["ProjectV2ItemFieldTextValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ValueTypes["ProjectV2Item"],
	/** Text value of a field */
	text?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of a user field in a Project item. */
["ProjectV2ItemFieldUserValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
users?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Project field values */
["ProjectV2ItemFieldValue"]: AliasType<{		["...on ProjectV2ItemFieldDateValue"] : ValueTypes["ProjectV2ItemFieldDateValue"],
		["...on ProjectV2ItemFieldIterationValue"] : ValueTypes["ProjectV2ItemFieldIterationValue"],
		["...on ProjectV2ItemFieldLabelValue"] : ValueTypes["ProjectV2ItemFieldLabelValue"],
		["...on ProjectV2ItemFieldMilestoneValue"] : ValueTypes["ProjectV2ItemFieldMilestoneValue"],
		["...on ProjectV2ItemFieldNumberValue"] : ValueTypes["ProjectV2ItemFieldNumberValue"],
		["...on ProjectV2ItemFieldPullRequestValue"] : ValueTypes["ProjectV2ItemFieldPullRequestValue"],
		["...on ProjectV2ItemFieldRepositoryValue"] : ValueTypes["ProjectV2ItemFieldRepositoryValue"],
		["...on ProjectV2ItemFieldReviewerValue"] : ValueTypes["ProjectV2ItemFieldReviewerValue"],
		["...on ProjectV2ItemFieldSingleSelectValue"] : ValueTypes["ProjectV2ItemFieldSingleSelectValue"],
		["...on ProjectV2ItemFieldTextValue"] : ValueTypes["ProjectV2ItemFieldTextValue"],
		["...on ProjectV2ItemFieldUserValue"] : ValueTypes["ProjectV2ItemFieldUserValue"]
		__typename?: boolean | `@${string}`
}>;
	/** Common fields across different project field value types */
["ProjectV2ItemFieldValueCommon"]:AliasType<{
		/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ValueTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ValueTypes["ProjectV2Item"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`;
		['...on ProjectV2ItemFieldDateValue']?: Omit<ValueTypes["ProjectV2ItemFieldDateValue"],keyof ValueTypes["ProjectV2ItemFieldValueCommon"]>;
		['...on ProjectV2ItemFieldIterationValue']?: Omit<ValueTypes["ProjectV2ItemFieldIterationValue"],keyof ValueTypes["ProjectV2ItemFieldValueCommon"]>;
		['...on ProjectV2ItemFieldNumberValue']?: Omit<ValueTypes["ProjectV2ItemFieldNumberValue"],keyof ValueTypes["ProjectV2ItemFieldValueCommon"]>;
		['...on ProjectV2ItemFieldSingleSelectValue']?: Omit<ValueTypes["ProjectV2ItemFieldSingleSelectValue"],keyof ValueTypes["ProjectV2ItemFieldValueCommon"]>;
		['...on ProjectV2ItemFieldTextValue']?: Omit<ValueTypes["ProjectV2ItemFieldTextValue"],keyof ValueTypes["ProjectV2ItemFieldValueCommon"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2ItemFieldValue. */
["ProjectV2ItemFieldValueConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectV2ItemFieldValueEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectV2ItemFieldValue"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2ItemFieldValueEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectV2ItemFieldValue"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for project v2 item field value connections */
["ProjectV2ItemFieldValueOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order the project v2 item field values by. */
	field: ValueTypes["ProjectV2ItemFieldValueOrderField"] | Variable<any, string>
};
	/** Properties by which project v2 item field value connections can be ordered. */
["ProjectV2ItemFieldValueOrderField"]:ProjectV2ItemFieldValueOrderField;
	/** Ordering options for project v2 item connections */
["ProjectV2ItemOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order the project v2 items by. */
	field: ValueTypes["ProjectV2ItemOrderField"] | Variable<any, string>
};
	/** Properties by which project v2 item connections can be ordered. */
["ProjectV2ItemOrderField"]:ProjectV2ItemOrderField;
	/** The type of a project item. */
["ProjectV2ItemType"]:ProjectV2ItemType;
	/** An iteration field inside a project. */
["ProjectV2IterationField"]: AliasType<{
	/** Iteration configuration settings */
	configuration?:ValueTypes["ProjectV2IterationFieldConfiguration"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ValueTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Iteration field configuration for a project. */
["ProjectV2IterationFieldConfiguration"]: AliasType<{
	/** The iteration's completed iterations */
	completedIterations?:ValueTypes["ProjectV2IterationFieldIteration"],
	/** The iteration's duration in days */
	duration?:boolean | `@${string}`,
	/** The iteration's iterations */
	iterations?:ValueTypes["ProjectV2IterationFieldIteration"],
	/** The iteration's start day of the week */
	startDay?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Iteration field iteration settings for a project. */
["ProjectV2IterationFieldIteration"]: AliasType<{
	/** The iteration's duration in days */
	duration?:boolean | `@${string}`,
	/** The iteration's ID. */
	id?:boolean | `@${string}`,
	/** The iteration's start date */
	startDate?:boolean | `@${string}`,
	/** The iteration's title. */
	title?:boolean | `@${string}`,
	/** The iteration's html title. */
	titleHTML?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of projects can be ordered upon return. */
["ProjectV2Order"]: {
	/** The direction in which to order projects by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order projects by. */
	field: ValueTypes["ProjectV2OrderField"] | Variable<any, string>
};
	/** Properties by which projects can be ordered. */
["ProjectV2OrderField"]:ProjectV2OrderField;
	/** Represents an owner of a project (beta). */
["ProjectV2Owner"]:AliasType<{
		id?:boolean | `@${string}`,
projectV2?: [{	/** The project number. */
	number: number | Variable<any, string>},ValueTypes["ProjectV2"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** How to order the returned projects. */
	orderBy?: ValueTypes["ProjectV2Order"] | undefined | null | Variable<any, string>,	/** A project to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]];
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["ProjectV2Owner"]>;
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["ProjectV2Owner"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["ProjectV2Owner"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["ProjectV2Owner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Recent projects for the owner. */
["ProjectV2Recent"]:AliasType<{
	recentProjects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]];
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["ProjectV2Recent"]>;
		['...on Repository']?: Omit<ValueTypes["Repository"],keyof ValueTypes["ProjectV2Recent"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["ProjectV2Recent"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A single select field inside a project. */
["ProjectV2SingleSelectField"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** Options for the single select field */
	options?:ValueTypes["ProjectV2SingleSelectFieldOption"],
	/** The project that contains this field. */
	project?:ValueTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Single select field option for a configuration for a project. */
["ProjectV2SingleSelectFieldOption"]: AliasType<{
	/** The option's ID. */
	id?:boolean | `@${string}`,
	/** The option's name. */
	name?:boolean | `@${string}`,
	/** The option's html name. */
	nameHTML?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a sort by field and direction. */
["ProjectV2SortBy"]: AliasType<{
	/** The direction of the sorting. Possible values are ASC and DESC. */
	direction?:boolean | `@${string}`,
	/** The field by which items are sorted. */
	field?:ValueTypes["ProjectV2Field"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2SortBy. */
["ProjectV2SortByConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectV2SortByEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectV2SortBy"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2SortByEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectV2SortBy"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a sort by field and direction. */
["ProjectV2SortByField"]: AliasType<{
	/** The direction of the sorting. Possible values are ASC and DESC. */
	direction?:boolean | `@${string}`,
	/** The field by which items are sorted. */
	field?:ValueTypes["ProjectV2FieldConfiguration"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2SortByField. */
["ProjectV2SortByFieldConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectV2SortByFieldEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectV2SortByField"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2SortByFieldEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectV2SortByField"],
		__typename?: boolean | `@${string}`
}>;
	/** A view within a ProjectV2. */
["ProjectV2View"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
fields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ValueTypes["ProjectV2FieldOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2FieldConfigurationConnection"]],
	/** The project view's filter. */
	filter?:boolean | `@${string}`,
groupBy?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ValueTypes["ProjectV2FieldOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2FieldConnection"]],
groupByFields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ValueTypes["ProjectV2FieldOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2FieldConfigurationConnection"]],
	id?:boolean | `@${string}`,
	/** The project view's layout. */
	layout?:boolean | `@${string}`,
	/** The project view's name. */
	name?:boolean | `@${string}`,
	/** The project view's number. */
	number?:boolean | `@${string}`,
	/** The project that contains this view. */
	project?:ValueTypes["ProjectV2"],
sortBy?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2SortByConnection"]],
sortByFields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2SortByFieldConnection"]],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
verticalGroupBy?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ValueTypes["ProjectV2FieldOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2FieldConnection"]],
verticalGroupByFields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ValueTypes["ProjectV2FieldOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2FieldConfigurationConnection"]],
visibleFields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ValueTypes["ProjectV2FieldOrder"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2FieldConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2View. */
["ProjectV2ViewConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectV2ViewEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectV2View"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2ViewEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectV2View"],
		__typename?: boolean | `@${string}`
}>;
	/** The layout of a project v2 view. */
["ProjectV2ViewLayout"]:ProjectV2ViewLayout;
	/** Ordering options for project v2 view connections */
["ProjectV2ViewOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order the project v2 views by. */
	field: ValueTypes["ProjectV2ViewOrderField"] | Variable<any, string>
};
	/** Properties by which project v2 view connections can be ordered. */
["ProjectV2ViewOrderField"]:ProjectV2ViewOrderField;
	/** A view within a Project. */
["ProjectView"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project view's filter. */
	filter?:boolean | `@${string}`,
	/** The view's group-by field. */
	groupBy?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project view's layout. */
	layout?:boolean | `@${string}`,
	/** The project view's name. */
	name?:boolean | `@${string}`,
	/** The project view's number. */
	number?:boolean | `@${string}`,
	/** The project that contains this view. */
	project?:ValueTypes["ProjectNext"],
	/** The view's sort-by config. */
	sortBy?:ValueTypes["SortBy"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The view's vertical-group-by field. */
	verticalGroupBy?:boolean | `@${string}`,
	/** The view's visible fields. */
	visibleFields?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectView. */
["ProjectViewConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ProjectViewEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ProjectView"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectViewEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ProjectView"],
		__typename?: boolean | `@${string}`
}>;
	/** The layout of a project view. */
["ProjectViewLayout"]:ProjectViewLayout;
	/** A user's public key. */
["PublicKey"]: AliasType<{
	/** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
	accessedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the key was created. Keys created before
March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
	createdAt?:boolean | `@${string}`,
	/** The fingerprint for this PublicKey. */
	fingerprint?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
	isReadOnly?:boolean | `@${string}`,
	/** The public key string. */
	key?:boolean | `@${string}`,
	/** Identifies the date and time when the key was updated. Keys created before
March 5th, 2014 may have inaccurate values. Values will be null for keys not
owned by the user. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PublicKey. */
["PublicKeyConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PublicKeyEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PublicKey"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PublicKeyEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PublicKey"],
		__typename?: boolean | `@${string}`
}>;
	/** A repository pull request. */
["PullRequest"]: AliasType<{
	/** Reason that the conversation was locked. */
	activeLockReason?:boolean | `@${string}`,
	/** The number of additions in this pull request. */
	additions?:boolean | `@${string}`,
assignees?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** Returns the auto-merge request object if one exists for this pull request. */
	autoMergeRequest?:ValueTypes["AutoMergeRequest"],
	/** Identifies the base Ref associated with the pull request. */
	baseRef?:ValueTypes["Ref"],
	/** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
	baseRefName?:boolean | `@${string}`,
	/** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
	baseRefOid?:boolean | `@${string}`,
	/** The repository associated with this pull request's base Ref. */
	baseRepository?:ValueTypes["Repository"],
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Whether or not the pull request is rebaseable. */
	canBeRebased?:boolean | `@${string}`,
	/** The number of changed files in this pull request. */
	changedFiles?:boolean | `@${string}`,
	/** The HTTP path for the checks of this pull request. */
	checksResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the checks of this pull request. */
	checksUrl?:boolean | `@${string}`,
	/** `true` if the pull request is closed */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
closingIssuesReferences?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for issues returned from the connection */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** Return only manually linked Issues */
	userLinkedOnly?: boolean | undefined | null | Variable<any, string>},ValueTypes["IssueConnection"]],
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for issue comments returned from the connection. */
	orderBy?: ValueTypes["IssueCommentOrder"] | undefined | null | Variable<any, string>},ValueTypes["IssueCommentConnection"]],
commits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestCommitConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The number of deletions in this pull request. */
	deletions?:boolean | `@${string}`,
	/** The actor who edited this pull request's body. */
	editor?:ValueTypes["Actor"],
files?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestChangedFileConnection"]],
	/** Identifies the head Ref associated with the pull request. */
	headRef?:ValueTypes["Ref"],
	/** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
	headRefName?:boolean | `@${string}`,
	/** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
	headRefOid?:boolean | `@${string}`,
	/** The repository associated with this pull request's head Ref. */
	headRepository?:ValueTypes["Repository"],
	/** The owner of the repository associated with this pull request's head Ref. */
	headRepositoryOwner?:ValueTypes["RepositoryOwner"],
hovercard?: [{	/** Whether or not to include notification contexts */
	includeNotificationContexts?: boolean | undefined | null | Variable<any, string>},ValueTypes["Hovercard"]],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** The head and base repositories are different. */
	isCrossRepository?:boolean | `@${string}`,
	/** Identifies if the pull request is a draft. */
	isDraft?:boolean | `@${string}`,
	/** Is this pull request read by the viewer */
	isReadByViewer?:boolean | `@${string}`,
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for labels returned from the connection. */
	orderBy?: ValueTypes["LabelOrder"] | undefined | null | Variable<any, string>},ValueTypes["LabelConnection"]],
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
latestOpinionatedReviews?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Only return reviews from user who have write access to the repository */
	writersOnly?: boolean | undefined | null | Variable<any, string>},ValueTypes["PullRequestReviewConnection"]],
latestReviews?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestReviewConnection"]],
	/** `true` if the pull request is locked */
	locked?:boolean | `@${string}`,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?:boolean | `@${string}`,
	/** The commit that was created when this pull request was merged. */
	mergeCommit?:ValueTypes["Commit"],
	/** Detailed information about the current pull request merge state status. */
	mergeStateStatus?:boolean | `@${string}`,
	/** Whether or not the pull request can be merged based on the existence of merge conflicts. */
	mergeable?:boolean | `@${string}`,
	/** Whether or not the pull request was merged. */
	merged?:boolean | `@${string}`,
	/** The date and time that the pull request was merged. */
	mergedAt?:boolean | `@${string}`,
	/** The actor who merged the pull request. */
	mergedBy?:ValueTypes["Actor"],
	/** Identifies the milestone associated with the pull request. */
	milestone?:ValueTypes["Milestone"],
	/** Identifies the pull request number. */
	number?:boolean | `@${string}`,
participants?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
	/** The permalink to the pull request. */
	permalink?:boolean | `@${string}`,
	/** The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request. */
	potentialMergeCommit?:ValueTypes["Commit"],
projectCards?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** A list of archived states to filter the cards by */
	archivedStates?: Array<ValueTypes["ProjectCardArchivedState"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectCardConnection"]],
projectItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Include archived items. */
	includeArchived?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2ItemConnection"]],
projectNext?: [{	/** The project (beta) number. */
	number: number | Variable<any, string>},ValueTypes["ProjectNext"]],
projectNextItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Include archived items. */
	includeArchived?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectNextItemConnection"]],
projectV2?: [{	/** The project number. */
	number: number | Variable<any, string>},ValueTypes["ProjectV2"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>,	/** How to order the returned projects (beta). */
	sortBy?: ValueTypes["ProjectNextOrderField"] | undefined | null | Variable<any, string>},ValueTypes["ProjectNextConnection"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** How to order the returned projects. */
	orderBy?: ValueTypes["ProjectV2Order"] | undefined | null | Variable<any, string>,	/** A project to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this pull request. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP path for reverting this pull request. */
	revertResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for reverting this pull request. */
	revertUrl?:boolean | `@${string}`,
	/** The current status of this pull request with respect to code review. */
	reviewDecision?:boolean | `@${string}`,
reviewRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ReviewRequestConnection"]],
reviewThreads?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestReviewThreadConnection"]],
reviews?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Filter by author of the review. */
	author?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** A list of states to filter the reviews. */
	states?: Array<ValueTypes["PullRequestReviewState"]> | undefined | null | Variable<any, string>},ValueTypes["PullRequestReviewConnection"]],
	/** Identifies the state of the pull request. */
	state?:boolean | `@${string}`,
	/** A list of reviewer suggestions based on commit history and past review comments. */
	suggestedReviewers?:ValueTypes["SuggestedReviewer"],
timeline?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows filtering timeline events by a `since` timestamp. */
	since?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>},ValueTypes["PullRequestTimelineConnection"]],
timelineItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Filter timeline items by type. */
	itemTypes?: Array<ValueTypes["PullRequestTimelineItemsItemType"]> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter timeline items by a `since` timestamp. */
	since?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,	/** Skips the first _n_ elements in the list. */
	skip?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestTimelineItemsConnection"]],
	/** Identifies the pull request title. */
	title?:boolean | `@${string}`,
	/** Identifies the pull request title rendered to HTML. */
	titleHTML?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this pull request. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Whether or not the viewer can apply suggestion. */
	viewerCanApplySuggestion?:boolean | `@${string}`,
	/** Check if the viewer can restore the deleted head ref. */
	viewerCanDeleteHeadRef?:boolean | `@${string}`,
	/** Whether or not the viewer can disable auto-merge */
	viewerCanDisableAutoMerge?:boolean | `@${string}`,
	/** Can the viewer edit files within this pull request. */
	viewerCanEditFiles?:boolean | `@${string}`,
	/** Whether or not the viewer can enable auto-merge */
	viewerCanEnableAutoMerge?:boolean | `@${string}`,
	/** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
	viewerCanMergeAsAdmin?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** The latest review given from the viewer. */
	viewerLatestReview?:ValueTypes["PullRequestReview"],
	/** The person who has requested the viewer for review on this pull request. */
	viewerLatestReviewRequest?:ValueTypes["ReviewRequest"],
viewerMergeBodyText?: [{	/** The merge method for the message. */
	mergeType?: ValueTypes["PullRequestMergeMethod"] | undefined | null | Variable<any, string>},boolean | `@${string}`],
viewerMergeHeadlineText?: [{	/** The merge method for the message. */
	mergeType?: ValueTypes["PullRequestMergeMethod"] | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A file changed in a pull request. */
["PullRequestChangedFile"]: AliasType<{
	/** The number of additions to the file. */
	additions?:boolean | `@${string}`,
	/** How the file was changed in this PullRequest */
	changeType?:boolean | `@${string}`,
	/** The number of deletions to the file. */
	deletions?:boolean | `@${string}`,
	/** The path of the file. */
	path?:boolean | `@${string}`,
	/** The state of the file for the viewer. */
	viewerViewedState?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestChangedFile. */
["PullRequestChangedFileConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PullRequestChangedFileEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PullRequestChangedFile"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestChangedFileEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PullRequestChangedFile"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git commit part of a pull request. */
["PullRequestCommit"]: AliasType<{
	/** The Git commit object */
	commit?:ValueTypes["Commit"],
	id?:boolean | `@${string}`,
	/** The pull request this commit belongs to */
	pullRequest?:ValueTypes["PullRequest"],
	/** The HTTP path for this pull request commit */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this pull request commit */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a commit comment thread part of a pull request. */
["PullRequestCommitCommentThread"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CommitCommentConnection"]],
	/** The commit the comments were made on. */
	commit?:ValueTypes["Commit"],
	id?:boolean | `@${string}`,
	/** The file the comments were made on. */
	path?:boolean | `@${string}`,
	/** The position in the diff for the commit that the comment was made on. */
	position?:boolean | `@${string}`,
	/** The pull request this commit comment thread belongs to */
	pullRequest?:ValueTypes["PullRequest"],
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestCommit. */
["PullRequestCommitConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PullRequestCommitEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PullRequestCommit"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestCommitEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PullRequestCommit"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequest. */
["PullRequestConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PullRequestEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PullRequest"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** This aggregates pull requests opened by a user within one repository. */
["PullRequestContributionsByRepository"]: AliasType<{
contributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ValueTypes["ContributionOrder"] | undefined | null | Variable<any, string>},ValueTypes["CreatedPullRequestContributionConnection"]],
	/** The repository in which the pull requests were opened. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents available types of methods to use when merging a pull request. */
["PullRequestMergeMethod"]:PullRequestMergeMethod;
	/** Ways in which lists of issues can be ordered upon return. */
["PullRequestOrder"]: {
	/** The direction in which to order pull requests by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order pull requests by. */
	field: ValueTypes["PullRequestOrderField"] | Variable<any, string>
};
	/** Properties by which pull_requests connections can be ordered. */
["PullRequestOrderField"]:PullRequestOrderField;
	/** A review object for a given pull request. */
["PullRequestReview"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** Indicates whether the author of this review has push access to the repository. */
	authorCanPushToRepository?:boolean | `@${string}`,
	/** Identifies the pull request review body. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body of this review rendered as plain text. */
	bodyText?:boolean | `@${string}`,
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestReviewCommentConnection"]],
	/** Identifies the commit associated with this pull request review. */
	commit?:ValueTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
onBehalfOf?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["TeamConnection"]],
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** Identifies the pull request associated with this pull request review. */
	pullRequest?:ValueTypes["PullRequest"],
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path permalink for this PullRequestReview. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the current state of the pull request review. */
	state?:boolean | `@${string}`,
	/** Identifies when the Pull Request Review was submitted */
	submittedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL permalink for this PullRequestReview. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A review comment associated with a given repository pull request. */
["PullRequestReviewComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The comment body of this review comment. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The comment body of this review comment rendered as plain text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the commit associated with the comment. */
	commit?:ValueTypes["Commit"],
	/** Identifies when the comment was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The diff hunk to which the comment applies. */
	diffHunk?:boolean | `@${string}`,
	/** Identifies when the comment was created in a draft state. */
	draftedAt?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies the original commit associated with the comment. */
	originalCommit?:ValueTypes["Commit"],
	/** The original line index in the diff to which the comment applies. */
	originalPosition?:boolean | `@${string}`,
	/** Identifies when the comment body is outdated */
	outdated?:boolean | `@${string}`,
	/** The path to which the comment applies. */
	path?:boolean | `@${string}`,
	/** The line index in the diff to which the comment applies. */
	position?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** The pull request associated with this review comment. */
	pullRequest?:ValueTypes["PullRequest"],
	/** The pull request review associated with this review comment. */
	pullRequestReview?:ValueTypes["PullRequestReview"],
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** The comment this is a reply to. */
	replyTo?:ValueTypes["PullRequestReviewComment"],
	/** The repository associated with this node. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path permalink for this review comment. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the state of the comment. */
	state?:boolean | `@${string}`,
	/** Identifies when the comment was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL permalink for this review comment. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestReviewComment. */
["PullRequestReviewCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PullRequestReviewCommentEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PullRequestReviewComment"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestReviewCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PullRequestReviewComment"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states of a pull request review comment. */
["PullRequestReviewCommentState"]:PullRequestReviewCommentState;
	/** The connection type for PullRequestReview. */
["PullRequestReviewConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PullRequestReviewEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PullRequestReview"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** This aggregates pull request reviews made by a user within one repository. */
["PullRequestReviewContributionsByRepository"]: AliasType<{
contributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ValueTypes["ContributionOrder"] | undefined | null | Variable<any, string>},ValueTypes["CreatedPullRequestReviewContributionConnection"]],
	/** The repository in which the pull request reviews were made. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The review status of a pull request. */
["PullRequestReviewDecision"]:PullRequestReviewDecision;
	/** An edge in a connection. */
["PullRequestReviewEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible events to perform on a pull request review. */
["PullRequestReviewEvent"]:PullRequestReviewEvent;
	/** The possible states of a pull request review. */
["PullRequestReviewState"]:PullRequestReviewState;
	/** A threaded list of comments for a given pull request. */
["PullRequestReviewThread"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Skips the first _n_ elements in the list. */
	skip?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestReviewCommentConnection"]],
	/** The side of the diff on which this thread was placed. */
	diffSide?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the thread has been collapsed (resolved) */
	isCollapsed?:boolean | `@${string}`,
	/** Indicates whether this thread was outdated by newer changes. */
	isOutdated?:boolean | `@${string}`,
	/** Whether this thread has been resolved */
	isResolved?:boolean | `@${string}`,
	/** The line in the file to which this thread refers */
	line?:boolean | `@${string}`,
	/** The original line in the file to which this thread refers. */
	originalLine?:boolean | `@${string}`,
	/** The original start line in the file to which this thread refers (multi-line only). */
	originalStartLine?:boolean | `@${string}`,
	/** Identifies the file path of this thread. */
	path?:boolean | `@${string}`,
	/** Identifies the pull request associated with this thread. */
	pullRequest?:ValueTypes["PullRequest"],
	/** Identifies the repository associated with this thread. */
	repository?:ValueTypes["Repository"],
	/** The user who resolved this thread */
	resolvedBy?:ValueTypes["User"],
	/** The side of the diff that the first line of the thread starts on (multi-line only) */
	startDiffSide?:boolean | `@${string}`,
	/** The start line in the file to which this thread refers (multi-line only) */
	startLine?:boolean | `@${string}`,
	/** Indicates whether the current viewer can reply to this thread. */
	viewerCanReply?:boolean | `@${string}`,
	/** Whether or not the viewer can resolve this thread */
	viewerCanResolve?:boolean | `@${string}`,
	/** Whether or not the viewer can unresolve this thread */
	viewerCanUnresolve?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Review comment threads for a pull request review. */
["PullRequestReviewThreadConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PullRequestReviewThreadEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PullRequestReviewThread"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestReviewThreadEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PullRequestReviewThread"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
["PullRequestRevisionMarker"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The last commit the viewer has seen. */
	lastSeenCommit?:ValueTypes["Commit"],
	/** The pull request to which the marker belongs. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states of a pull request. */
["PullRequestState"]:PullRequestState;
	/** A repository pull request template. */
["PullRequestTemplate"]: AliasType<{
	/** The body of the template */
	body?:boolean | `@${string}`,
	/** The filename of the template */
	filename?:boolean | `@${string}`,
	/** The repository the template belongs to */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A threaded list of comments for a given pull request. */
["PullRequestThread"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Skips the first _n_ elements in the list. */
	skip?: number | undefined | null | Variable<any, string>},ValueTypes["PullRequestReviewCommentConnection"]],
	/** The side of the diff on which this thread was placed. */
	diffSide?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the thread has been collapsed (resolved) */
	isCollapsed?:boolean | `@${string}`,
	/** Indicates whether this thread was outdated by newer changes. */
	isOutdated?:boolean | `@${string}`,
	/** Whether this thread has been resolved */
	isResolved?:boolean | `@${string}`,
	/** The line in the file to which this thread refers */
	line?:boolean | `@${string}`,
	/** Identifies the pull request associated with this thread. */
	pullRequest?:ValueTypes["PullRequest"],
	/** Identifies the repository associated with this thread. */
	repository?:ValueTypes["Repository"],
	/** The user who resolved this thread */
	resolvedBy?:ValueTypes["User"],
	/** The side of the diff that the first line of the thread starts on (multi-line only) */
	startDiffSide?:boolean | `@${string}`,
	/** The line of the first file diff in the thread. */
	startLine?:boolean | `@${string}`,
	/** Indicates whether the current viewer can reply to this thread. */
	viewerCanReply?:boolean | `@${string}`,
	/** Whether or not the viewer can resolve this thread */
	viewerCanResolve?:boolean | `@${string}`,
	/** Whether or not the viewer can unresolve this thread */
	viewerCanUnresolve?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestTimelineItem. */
["PullRequestTimelineConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PullRequestTimelineItemEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PullRequestTimelineItem"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An item in a pull request timeline */
["PullRequestTimelineItem"]: AliasType<{		["...on AssignedEvent"] : ValueTypes["AssignedEvent"],
		["...on BaseRefDeletedEvent"] : ValueTypes["BaseRefDeletedEvent"],
		["...on BaseRefForcePushedEvent"] : ValueTypes["BaseRefForcePushedEvent"],
		["...on ClosedEvent"] : ValueTypes["ClosedEvent"],
		["...on Commit"] : ValueTypes["Commit"],
		["...on CommitCommentThread"] : ValueTypes["CommitCommentThread"],
		["...on CrossReferencedEvent"] : ValueTypes["CrossReferencedEvent"],
		["...on DemilestonedEvent"] : ValueTypes["DemilestonedEvent"],
		["...on DeployedEvent"] : ValueTypes["DeployedEvent"],
		["...on DeploymentEnvironmentChangedEvent"] : ValueTypes["DeploymentEnvironmentChangedEvent"],
		["...on HeadRefDeletedEvent"] : ValueTypes["HeadRefDeletedEvent"],
		["...on HeadRefForcePushedEvent"] : ValueTypes["HeadRefForcePushedEvent"],
		["...on HeadRefRestoredEvent"] : ValueTypes["HeadRefRestoredEvent"],
		["...on IssueComment"] : ValueTypes["IssueComment"],
		["...on LabeledEvent"] : ValueTypes["LabeledEvent"],
		["...on LockedEvent"] : ValueTypes["LockedEvent"],
		["...on MergedEvent"] : ValueTypes["MergedEvent"],
		["...on MilestonedEvent"] : ValueTypes["MilestonedEvent"],
		["...on PullRequestReview"] : ValueTypes["PullRequestReview"],
		["...on PullRequestReviewComment"] : ValueTypes["PullRequestReviewComment"],
		["...on PullRequestReviewThread"] : ValueTypes["PullRequestReviewThread"],
		["...on ReferencedEvent"] : ValueTypes["ReferencedEvent"],
		["...on RenamedTitleEvent"] : ValueTypes["RenamedTitleEvent"],
		["...on ReopenedEvent"] : ValueTypes["ReopenedEvent"],
		["...on ReviewDismissedEvent"] : ValueTypes["ReviewDismissedEvent"],
		["...on ReviewRequestRemovedEvent"] : ValueTypes["ReviewRequestRemovedEvent"],
		["...on ReviewRequestedEvent"] : ValueTypes["ReviewRequestedEvent"],
		["...on SubscribedEvent"] : ValueTypes["SubscribedEvent"],
		["...on UnassignedEvent"] : ValueTypes["UnassignedEvent"],
		["...on UnlabeledEvent"] : ValueTypes["UnlabeledEvent"],
		["...on UnlockedEvent"] : ValueTypes["UnlockedEvent"],
		["...on UnsubscribedEvent"] : ValueTypes["UnsubscribedEvent"],
		["...on UserBlockedEvent"] : ValueTypes["UserBlockedEvent"]
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestTimelineItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PullRequestTimelineItem"],
		__typename?: boolean | `@${string}`
}>;
	/** An item in a pull request timeline */
["PullRequestTimelineItems"]: AliasType<{		["...on AddedToProjectEvent"] : ValueTypes["AddedToProjectEvent"],
		["...on AssignedEvent"] : ValueTypes["AssignedEvent"],
		["...on AutoMergeDisabledEvent"] : ValueTypes["AutoMergeDisabledEvent"],
		["...on AutoMergeEnabledEvent"] : ValueTypes["AutoMergeEnabledEvent"],
		["...on AutoRebaseEnabledEvent"] : ValueTypes["AutoRebaseEnabledEvent"],
		["...on AutoSquashEnabledEvent"] : ValueTypes["AutoSquashEnabledEvent"],
		["...on AutomaticBaseChangeFailedEvent"] : ValueTypes["AutomaticBaseChangeFailedEvent"],
		["...on AutomaticBaseChangeSucceededEvent"] : ValueTypes["AutomaticBaseChangeSucceededEvent"],
		["...on BaseRefChangedEvent"] : ValueTypes["BaseRefChangedEvent"],
		["...on BaseRefDeletedEvent"] : ValueTypes["BaseRefDeletedEvent"],
		["...on BaseRefForcePushedEvent"] : ValueTypes["BaseRefForcePushedEvent"],
		["...on ClosedEvent"] : ValueTypes["ClosedEvent"],
		["...on CommentDeletedEvent"] : ValueTypes["CommentDeletedEvent"],
		["...on ConnectedEvent"] : ValueTypes["ConnectedEvent"],
		["...on ConvertToDraftEvent"] : ValueTypes["ConvertToDraftEvent"],
		["...on ConvertedNoteToIssueEvent"] : ValueTypes["ConvertedNoteToIssueEvent"],
		["...on ConvertedToDiscussionEvent"] : ValueTypes["ConvertedToDiscussionEvent"],
		["...on CrossReferencedEvent"] : ValueTypes["CrossReferencedEvent"],
		["...on DemilestonedEvent"] : ValueTypes["DemilestonedEvent"],
		["...on DeployedEvent"] : ValueTypes["DeployedEvent"],
		["...on DeploymentEnvironmentChangedEvent"] : ValueTypes["DeploymentEnvironmentChangedEvent"],
		["...on DisconnectedEvent"] : ValueTypes["DisconnectedEvent"],
		["...on HeadRefDeletedEvent"] : ValueTypes["HeadRefDeletedEvent"],
		["...on HeadRefForcePushedEvent"] : ValueTypes["HeadRefForcePushedEvent"],
		["...on HeadRefRestoredEvent"] : ValueTypes["HeadRefRestoredEvent"],
		["...on IssueComment"] : ValueTypes["IssueComment"],
		["...on LabeledEvent"] : ValueTypes["LabeledEvent"],
		["...on LockedEvent"] : ValueTypes["LockedEvent"],
		["...on MarkedAsDuplicateEvent"] : ValueTypes["MarkedAsDuplicateEvent"],
		["...on MentionedEvent"] : ValueTypes["MentionedEvent"],
		["...on MergedEvent"] : ValueTypes["MergedEvent"],
		["...on MilestonedEvent"] : ValueTypes["MilestonedEvent"],
		["...on MovedColumnsInProjectEvent"] : ValueTypes["MovedColumnsInProjectEvent"],
		["...on PinnedEvent"] : ValueTypes["PinnedEvent"],
		["...on PullRequestCommit"] : ValueTypes["PullRequestCommit"],
		["...on PullRequestCommitCommentThread"] : ValueTypes["PullRequestCommitCommentThread"],
		["...on PullRequestReview"] : ValueTypes["PullRequestReview"],
		["...on PullRequestReviewThread"] : ValueTypes["PullRequestReviewThread"],
		["...on PullRequestRevisionMarker"] : ValueTypes["PullRequestRevisionMarker"],
		["...on ReadyForReviewEvent"] : ValueTypes["ReadyForReviewEvent"],
		["...on ReferencedEvent"] : ValueTypes["ReferencedEvent"],
		["...on RemovedFromProjectEvent"] : ValueTypes["RemovedFromProjectEvent"],
		["...on RenamedTitleEvent"] : ValueTypes["RenamedTitleEvent"],
		["...on ReopenedEvent"] : ValueTypes["ReopenedEvent"],
		["...on ReviewDismissedEvent"] : ValueTypes["ReviewDismissedEvent"],
		["...on ReviewRequestRemovedEvent"] : ValueTypes["ReviewRequestRemovedEvent"],
		["...on ReviewRequestedEvent"] : ValueTypes["ReviewRequestedEvent"],
		["...on SubscribedEvent"] : ValueTypes["SubscribedEvent"],
		["...on TransferredEvent"] : ValueTypes["TransferredEvent"],
		["...on UnassignedEvent"] : ValueTypes["UnassignedEvent"],
		["...on UnlabeledEvent"] : ValueTypes["UnlabeledEvent"],
		["...on UnlockedEvent"] : ValueTypes["UnlockedEvent"],
		["...on UnmarkedAsDuplicateEvent"] : ValueTypes["UnmarkedAsDuplicateEvent"],
		["...on UnpinnedEvent"] : ValueTypes["UnpinnedEvent"],
		["...on UnsubscribedEvent"] : ValueTypes["UnsubscribedEvent"],
		["...on UserBlockedEvent"] : ValueTypes["UserBlockedEvent"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestTimelineItems. */
["PullRequestTimelineItemsConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PullRequestTimelineItemsEdge"],
	/** Identifies the count of items after applying `before` and `after` filters. */
	filteredCount?:boolean | `@${string}`,
	/** A list of nodes. */
	nodes?:ValueTypes["PullRequestTimelineItems"],
	/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
	pageCount?:boolean | `@${string}`,
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** Identifies the date and time when the timeline was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestTimelineItemsEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PullRequestTimelineItems"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible item types found in a timeline. */
["PullRequestTimelineItemsItemType"]:PullRequestTimelineItemsItemType;
	/** The possible target states when updating a pull request. */
["PullRequestUpdateState"]:PullRequestUpdateState;
	/** A Git push. */
["Push"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The SHA after the push */
	nextSha?:boolean | `@${string}`,
	/** The permalink for this push. */
	permalink?:boolean | `@${string}`,
	/** The SHA before the push */
	previousSha?:boolean | `@${string}`,
	/** The actor who pushed */
	pusher?:ValueTypes["Actor"],
	/** The repository that was pushed to */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A team, user, or app who has the ability to push to a protected branch. */
["PushAllowance"]: AliasType<{
	/** The actor that can push. */
	actor?:ValueTypes["PushAllowanceActor"],
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?:ValueTypes["BranchProtectionRule"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be an actor. */
["PushAllowanceActor"]: AliasType<{		["...on App"] : ValueTypes["App"],
		["...on Team"] : ValueTypes["Team"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PushAllowance. */
["PushAllowanceConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["PushAllowanceEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["PushAllowance"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PushAllowanceEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["PushAllowance"],
		__typename?: boolean | `@${string}`
}>;
	/** The query root of GitHub's GraphQL interface. */
["Query"]: AliasType<{
codeOfConduct?: [{	/** The code of conduct's key */
	key: string | Variable<any, string>},ValueTypes["CodeOfConduct"]],
	/** Look up a code of conduct by its key */
	codesOfConduct?:ValueTypes["CodeOfConduct"],
enterprise?: [{	/** The enterprise invitation token. */
	invitationToken?: string | undefined | null | Variable<any, string>,	/** The enterprise URL slug. */
	slug: string | Variable<any, string>},ValueTypes["Enterprise"]],
enterpriseAdministratorInvitation?: [{	/** The slug of the enterprise the user was invited to join. */
	enterpriseSlug: string | Variable<any, string>,	/** The role for the business member invitation. */
	role: ValueTypes["EnterpriseAdministratorRole"] | Variable<any, string>,	/** The login of the user invited to join the business. */
	userLogin: string | Variable<any, string>},ValueTypes["EnterpriseAdministratorInvitation"]],
enterpriseAdministratorInvitationByToken?: [{	/** The invitation token sent with the invitation email. */
	invitationToken: string | Variable<any, string>},ValueTypes["EnterpriseAdministratorInvitation"]],
license?: [{	/** The license's downcased SPDX ID */
	key: string | Variable<any, string>},ValueTypes["License"]],
	/** Return a list of known open source licenses */
	licenses?:ValueTypes["License"],
marketplaceCategories?: [{	/** Exclude categories with no listings. */
	excludeEmpty?: boolean | undefined | null | Variable<any, string>,	/** Returns top level categories only, excluding any subcategories. */
	excludeSubcategories?: boolean | undefined | null | Variable<any, string>,	/** Return only the specified categories. */
	includeCategories?: Array<string> | undefined | null | Variable<any, string>},ValueTypes["MarketplaceCategory"]],
marketplaceCategory?: [{	/** The URL slug of the category. */
	slug: string | Variable<any, string>,	/** Also check topic aliases for the category slug */
	useTopicAliases?: boolean | undefined | null | Variable<any, string>},ValueTypes["MarketplaceCategory"]],
marketplaceListing?: [{	/** Select the listing that matches this slug. It's the short name of the listing used in its URL. */
	slug: string | Variable<any, string>},ValueTypes["MarketplaceListing"]],
marketplaceListings?: [{	/** Select listings that can be administered by the specified user. */
	adminId?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Select listings visible to the viewer even if they are not approved. If omitted or
false, only approved listings will be returned. */
	allStates?: boolean | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Select only listings with the given category. */
	categorySlug?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Select listings for products owned by the specified organization. */
	organizationId?: string | undefined | null | Variable<any, string>,	/** Select only listings where the primary category matches the given category slug. */
	primaryCategoryOnly?: boolean | undefined | null | Variable<any, string>,	/** Select the listings with these slugs, if they are visible to the viewer. */
	slugs?: Array<string | undefined | null> | undefined | null | Variable<any, string>,	/** Also check topic aliases for the category slug */
	useTopicAliases?: boolean | undefined | null | Variable<any, string>,	/** Select listings to which user has admin access. If omitted, listings visible to the
viewer are returned. */
	viewerCanAdmin?: boolean | undefined | null | Variable<any, string>,	/** Select only listings that offer a free trial. */
	withFreeTrialsOnly?: boolean | undefined | null | Variable<any, string>},ValueTypes["MarketplaceListingConnection"]],
	/** Return information about the GitHub instance */
	meta?:ValueTypes["GitHubMetadata"],
node?: [{	/** ID of the object. */
	id: string | Variable<any, string>},ValueTypes["Node"]],
nodes?: [{	/** The list of node IDs. */
	ids: Array<string> | Variable<any, string>},ValueTypes["Node"]],
organization?: [{	/** The organization's login. */
	login: string | Variable<any, string>},ValueTypes["Organization"]],
rateLimit?: [{	/** If true, calculate the cost for the query without evaluating it */
	dryRun?: boolean | undefined | null | Variable<any, string>},ValueTypes["RateLimit"]],
	/** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
	relay?:ValueTypes["Query"],
repository?: [{	/** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
	followRenames?: boolean | undefined | null | Variable<any, string>,	/** The name of the repository */
	name: string | Variable<any, string>,	/** The login field of a user or organization */
	owner: string | Variable<any, string>},ValueTypes["Repository"]],
repositoryOwner?: [{	/** The username to lookup the owner by. */
	login: string | Variable<any, string>},ValueTypes["RepositoryOwner"]],
resource?: [{	/** The URL. */
	url: ValueTypes["URI"] | Variable<any, string>},ValueTypes["UniformResourceLocatable"]],
search?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query: string | Variable<any, string>,	/** The types of search items to search within. */
	type: ValueTypes["SearchType"] | Variable<any, string>},ValueTypes["SearchResultItemConnection"]],
securityAdvisories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** A list of classifications to filter advisories by. */
	classifications?: Array<ValueTypes["SecurityAdvisoryClassification"]> | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Filter advisories by identifier, e.g. GHSA or CVE. */
	identifier?: ValueTypes["SecurityAdvisoryIdentifierFilter"] | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the returned topics. */
	orderBy?: ValueTypes["SecurityAdvisoryOrder"] | undefined | null | Variable<any, string>,	/** Filter advisories to those published since a time in the past. */
	publishedSince?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,	/** Filter advisories to those updated since a time in the past. */
	updatedSince?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>},ValueTypes["SecurityAdvisoryConnection"]],
securityAdvisory?: [{	/** GitHub Security Advisory ID. */
	ghsaId: string | Variable<any, string>},ValueTypes["SecurityAdvisory"]],
securityVulnerabilities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** A list of advisory classifications to filter vulnerabilities by. */
	classifications?: Array<ValueTypes["SecurityAdvisoryClassification"]> | undefined | null | Variable<any, string>,	/** An ecosystem to filter vulnerabilities by. */
	ecosystem?: ValueTypes["SecurityAdvisoryEcosystem"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the returned topics. */
	orderBy?: ValueTypes["SecurityVulnerabilityOrder"] | undefined | null | Variable<any, string>,	/** A package name to filter vulnerabilities by. */
	package?: string | undefined | null | Variable<any, string>,	/** A list of severities to filter vulnerabilities by. */
	severities?: Array<ValueTypes["SecurityAdvisorySeverity"]> | undefined | null | Variable<any, string>},ValueTypes["SecurityVulnerabilityConnection"]],
sponsorables?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Optional filter for which dependencies should be checked for sponsorable
owners. Only sponsorable owners of dependencies in this ecosystem will be
included. Used when onlyDependencies = true.

**Upcoming Change on 2022-07-01 UTC**
**Description:** `dependencyEcosystem` will be removed. Use the ecosystem argument instead.
**Reason:** The type is switching from SecurityAdvisoryEcosystem to DependencyGraphEcosystem. */
	dependencyEcosystem?: ValueTypes["SecurityAdvisoryEcosystem"] | undefined | null | Variable<any, string>,	/** Optional filter for which dependencies should be checked for sponsorable
owners. Only sponsorable owners of dependencies in this ecosystem will be
included. Used when onlyDependencies = true. */
	ecosystem?: ValueTypes["DependencyGraphEcosystem"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Whether only sponsorables who own the viewer's dependencies will be
returned. Must be authenticated to use. Can check an organization instead
for their dependencies owned by sponsorables by passing
orgLoginForDependencies. */
	onlyDependencies?: boolean | undefined | null | Variable<any, string>,	/** Ordering options for users and organizations returned from the connection. */
	orderBy?: ValueTypes["SponsorableOrder"] | undefined | null | Variable<any, string>,	/** Optional organization username for whose dependencies should be checked.
Used when onlyDependencies = true. Omit to check your own dependencies. If
you are not an administrator of the organization, only dependencies from its
public repositories will be considered. */
	orgLoginForDependencies?: string | undefined | null | Variable<any, string>},ValueTypes["SponsorableItemConnection"]],
topic?: [{	/** The topic's name. */
	name: string | Variable<any, string>},ValueTypes["Topic"]],
user?: [{	/** The user's login. */
	login: string | Variable<any, string>},ValueTypes["User"]],
	/** The currently authenticated user. */
	viewer?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the client's rate limit. */
["RateLimit"]: AliasType<{
	/** The point cost for the current query counting against the rate limit. */
	cost?:boolean | `@${string}`,
	/** The maximum number of points the client is permitted to consume in a 60 minute window. */
	limit?:boolean | `@${string}`,
	/** The maximum number of nodes this query may return */
	nodeCount?:boolean | `@${string}`,
	/** The number of points remaining in the current rate limit window. */
	remaining?:boolean | `@${string}`,
	/** The time at which the current rate limit window resets in UTC epoch seconds. */
	resetAt?:boolean | `@${string}`,
	/** The number of points used in the current rate limit window. */
	used?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a subject that can be reacted on. */
["Reactable"]:AliasType<{
		/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ValueTypes["CommitComment"],keyof ValueTypes["Reactable"]>;
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["Reactable"]>;
		['...on DiscussionComment']?: Omit<ValueTypes["DiscussionComment"],keyof ValueTypes["Reactable"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["Reactable"]>;
		['...on IssueComment']?: Omit<ValueTypes["IssueComment"],keyof ValueTypes["Reactable"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["Reactable"]>;
		['...on PullRequestReview']?: Omit<ValueTypes["PullRequestReview"],keyof ValueTypes["Reactable"]>;
		['...on PullRequestReviewComment']?: Omit<ValueTypes["PullRequestReviewComment"],keyof ValueTypes["Reactable"]>;
		['...on Release']?: Omit<ValueTypes["Release"],keyof ValueTypes["Reactable"]>;
		['...on TeamDiscussion']?: Omit<ValueTypes["TeamDiscussion"],keyof ValueTypes["Reactable"]>;
		['...on TeamDiscussionComment']?: Omit<ValueTypes["TeamDiscussionComment"],keyof ValueTypes["Reactable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["ReactingUserConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ReactingUserEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user that's made a reaction. */
["ReactingUserEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ValueTypes["User"],
	/** The moment when the user made the reaction. */
	reactedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An emoji reaction to a particular piece of content. */
["Reaction"]: AliasType<{
	/** Identifies the emoji reaction. */
	content?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The reactable piece of content */
	reactable?:ValueTypes["Reactable"],
	/** Identifies the user who created this reaction. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A list of reactions that have been left on the subject. */
["ReactionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ReactionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Reaction"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** Whether or not the authenticated user has left a reaction on the subject. */
	viewerHasReacted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Emojis that can be attached to Issues, Pull Requests and Comments. */
["ReactionContent"]:ReactionContent;
	/** An edge in a connection. */
["ReactionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Reaction"],
		__typename?: boolean | `@${string}`
}>;
	/** A group of emoji reactions to a particular piece of content. */
["ReactionGroup"]: AliasType<{
	/** Identifies the emoji reaction. */
	content?:boolean | `@${string}`,
	/** Identifies when the reaction was created. */
	createdAt?:boolean | `@${string}`,
reactors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ReactorConnection"]],
	/** The subject that was reacted to. */
	subject?:ValueTypes["Reactable"],
users?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ReactingUserConnection"]],
	/** Whether or not the authenticated user has left a reaction on the subject. */
	viewerHasReacted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of reactions can be ordered upon return. */
["ReactionOrder"]: {
	/** The direction in which to order reactions by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order reactions by. */
	field: ValueTypes["ReactionOrderField"] | Variable<any, string>
};
	/** A list of fields that reactions can be ordered by. */
["ReactionOrderField"]:ReactionOrderField;
	/** Types that can be assigned to reactions. */
["Reactor"]: AliasType<{		["...on Bot"] : ValueTypes["Bot"],
		["...on Mannequin"] : ValueTypes["Mannequin"],
		["...on Organization"] : ValueTypes["Organization"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Reactor. */
["ReactorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ReactorEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Reactor"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents an author of a reaction. */
["ReactorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The author of the reaction. */
	node?:ValueTypes["Reactor"],
	/** The moment when the user made the reaction. */
	reactedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'ready_for_review' event on a given pull request. */
["ReadyForReviewEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
	/** The HTTP path for this ready for review event. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this ready for review event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git reference. */
["Ref"]: AliasType<{
associatedPullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the pull requests by. */
	states?: Array<ValueTypes["PullRequestState"]> | undefined | null | Variable<any, string>},ValueTypes["PullRequestConnection"]],
	/** Branch protection rules for this ref */
	branchProtectionRule?:ValueTypes["BranchProtectionRule"],
compare?: [{	/** The head ref to compare against. */
	headRef: string | Variable<any, string>},ValueTypes["Comparison"]],
	id?:boolean | `@${string}`,
	/** The ref name. */
	name?:boolean | `@${string}`,
	/** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
	prefix?:boolean | `@${string}`,
	/** Branch protection rules that are viewable by non-admins */
	refUpdateRule?:ValueTypes["RefUpdateRule"],
	/** The repository the ref belongs to. */
	repository?:ValueTypes["Repository"],
	/** The object the ref points to. Returns null when object does not exist. */
	target?:ValueTypes["GitObject"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Ref. */
["RefConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["RefEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Ref"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RefEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of git refs can be ordered upon return. */
["RefOrder"]: {
	/** The direction in which to order refs by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order refs by. */
	field: ValueTypes["RefOrderField"] | Variable<any, string>
};
	/** Properties by which ref connections can be ordered. */
["RefOrderField"]:RefOrderField;
	/** A ref update */
["RefUpdate"]: {
	/** The value this ref should be updated to. */
	afterOid: ValueTypes["GitObjectID"] | Variable<any, string>,
	/** The value this ref needs to point to before the update. */
	beforeOid?: ValueTypes["GitObjectID"] | undefined | null | Variable<any, string>,
	/** Force a non fast-forward update. */
	force?: boolean | undefined | null | Variable<any, string>,
	/** The fully qualified name of the ref to be update. For example `refs/heads/branch-name` */
	name: ValueTypes["GitRefname"] | Variable<any, string>
};
	/** A ref update rules for a viewer. */
["RefUpdateRule"]: AliasType<{
	/** Can this branch be deleted. */
	allowsDeletions?:boolean | `@${string}`,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?:boolean | `@${string}`,
	/** Can matching branches be created. */
	blocksCreations?:boolean | `@${string}`,
	/** Identifies the protection rule pattern. */
	pattern?:boolean | `@${string}`,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?:boolean | `@${string}`,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?:boolean | `@${string}`,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?:boolean | `@${string}`,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?:boolean | `@${string}`,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?:boolean | `@${string}`,
	/** Are commits required to be signed. */
	requiresSignatures?:boolean | `@${string}`,
	/** Is the viewer allowed to dismiss reviews. */
	viewerAllowedToDismissReviews?:boolean | `@${string}`,
	/** Can the viewer push to the branch */
	viewerCanPush?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'referenced' event on a given `ReferencedSubject`. */
["ReferencedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the commit associated with the 'referenced' event. */
	commit?:ValueTypes["Commit"],
	/** Identifies the repository associated with the 'referenced' event. */
	commitRepository?:ValueTypes["Repository"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reference originated in a different repository. */
	isCrossRepository?:boolean | `@${string}`,
	/** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
	isDirectReference?:boolean | `@${string}`,
	/** Object referenced by event. */
	subject?:ValueTypes["ReferencedSubject"],
		__typename?: boolean | `@${string}`
}>;
	/** Any referencable object */
["ReferencedSubject"]: AliasType<{		["...on Issue"] : ValueTypes["Issue"],
		["...on PullRequest"] : ValueTypes["PullRequest"]
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
["RegenerateEnterpriseIdentityProviderRecoveryCodesInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set an identity provider. */
	enterpriseId: string | Variable<any, string>
};
	/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
["RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The identity provider for the enterprise. */
	identityProvider?:ValueTypes["EnterpriseIdentityProvider"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RegenerateVerifiableDomainToken */
["RegenerateVerifiableDomainTokenInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the verifiable domain to regenerate the verification token of. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of RegenerateVerifiableDomainToken */
["RegenerateVerifiableDomainTokenPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The verification token that was generated. */
	verificationToken?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RejectDeployments */
["RejectDeploymentsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Optional comment for rejecting deployments */
	comment?: string | undefined | null | Variable<any, string>,
	/** The ids of environments to reject deployments */
	environmentIds: Array<string> | Variable<any, string>,
	/** The node ID of the workflow run containing the pending deployments. */
	workflowRunId: string | Variable<any, string>
};
	/** Autogenerated return type of RejectDeployments */
["RejectDeploymentsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The affected deployments. */
	deployments?:ValueTypes["Deployment"],
		__typename?: boolean | `@${string}`
}>;
	/** A release contains the content for a release. */
["Release"]: AliasType<{
	/** The author of the release */
	author?:ValueTypes["User"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The description of the release. */
	description?:boolean | `@${string}`,
	/** The description of this release rendered to HTML. */
	descriptionHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the release is a draft */
	isDraft?:boolean | `@${string}`,
	/** Whether or not the release is the latest releast */
	isLatest?:boolean | `@${string}`,
	/** Whether or not the release is a prerelease */
	isPrerelease?:boolean | `@${string}`,
mentions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
	/** The title of the release. */
	name?:boolean | `@${string}`,
	/** Identifies the date and time when the release was created. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
releaseAssets?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** A list of names to filter the assets by. */
	name?: string | undefined | null | Variable<any, string>},ValueTypes["ReleaseAssetConnection"]],
	/** The repository that the release belongs to. */
	repository?:ValueTypes["Repository"],
	/** The HTTP path for this issue */
	resourcePath?:boolean | `@${string}`,
shortDescriptionHTML?: [{	/** How many characters to return. */
	limit?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The Git tag the release points to */
	tag?:ValueTypes["Ref"],
	/** The tag commit for this release. */
	tagCommit?:ValueTypes["Commit"],
	/** The name of the release's Git tag */
	tagName?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this issue */
	url?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A release asset contains the content for a release asset. */
["ReleaseAsset"]: AliasType<{
	/** The asset's content-type */
	contentType?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The number of times this asset was downloaded */
	downloadCount?:boolean | `@${string}`,
	/** Identifies the URL where you can download the release asset via the browser. */
	downloadUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the title of the release asset. */
	name?:boolean | `@${string}`,
	/** Release that the asset is associated with */
	release?:ValueTypes["Release"],
	/** The size (in bytes) of the asset */
	size?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The user that performed the upload */
	uploadedBy?:ValueTypes["User"],
	/** Identifies the URL of the release asset. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ReleaseAsset. */
["ReleaseAssetConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ReleaseAssetEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ReleaseAsset"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ReleaseAssetEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ReleaseAsset"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Release. */
["ReleaseConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ReleaseEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Release"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ReleaseEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Release"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of releases can be ordered upon return. */
["ReleaseOrder"]: {
	/** The direction in which to order releases by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order releases by. */
	field: ValueTypes["ReleaseOrderField"] | Variable<any, string>
};
	/** Properties by which release connections can be ordered. */
["ReleaseOrderField"]:ReleaseOrderField;
	/** Autogenerated input type of RemoveAssigneesFromAssignable */
["RemoveAssigneesFromAssignableInput"]: {
	/** The id of the assignable object to remove assignees from. */
	assignableId: string | Variable<any, string>,
	/** The id of users to remove as assignees. */
	assigneeIds: Array<string> | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of RemoveAssigneesFromAssignable */
["RemoveAssigneesFromAssignablePayload"]: AliasType<{
	/** The item that was unassigned. */
	assignable?:ValueTypes["Assignable"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveEnterpriseAdmin */
["RemoveEnterpriseAdminInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Enterprise ID from which to remove the administrator. */
	enterpriseId: string | Variable<any, string>,
	/** The login of the user to remove as an administrator. */
	login: string | Variable<any, string>
};
	/** Autogenerated return type of RemoveEnterpriseAdmin */
["RemoveEnterpriseAdminPayload"]: AliasType<{
	/** The user who was removed as an administrator. */
	admin?:ValueTypes["User"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated enterprise. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of removing an administrator. */
	message?:boolean | `@${string}`,
	/** The viewer performing the mutation. */
	viewer?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
["RemoveEnterpriseIdentityProviderInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise from which to remove the identity provider. */
	enterpriseId: string | Variable<any, string>
};
	/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
["RemoveEnterpriseIdentityProviderPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The identity provider that was removed from the enterprise. */
	identityProvider?:ValueTypes["EnterpriseIdentityProvider"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveEnterpriseOrganization */
["RemoveEnterpriseOrganizationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise from which the organization should be removed. */
	enterpriseId: string | Variable<any, string>,
	/** The ID of the organization to remove from the enterprise. */
	organizationId: string | Variable<any, string>
};
	/** Autogenerated return type of RemoveEnterpriseOrganization */
["RemoveEnterpriseOrganizationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated enterprise. */
	enterprise?:ValueTypes["Enterprise"],
	/** The organization that was removed from the enterprise. */
	organization?:ValueTypes["Organization"],
	/** The viewer performing the mutation. */
	viewer?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
["RemoveEnterpriseSupportEntitlementInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string | Variable<any, string>,
	/** The login of a member who will lose the support entitlement. */
	login: string | Variable<any, string>
};
	/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */
["RemoveEnterpriseSupportEntitlementPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of removing the support entitlement. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveLabelsFromLabelable */
["RemoveLabelsFromLabelableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ids of labels to remove. */
	labelIds: Array<string> | Variable<any, string>,
	/** The id of the Labelable to remove labels from. */
	labelableId: string | Variable<any, string>
};
	/** Autogenerated return type of RemoveLabelsFromLabelable */
["RemoveLabelsFromLabelablePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The Labelable the labels were removed from. */
	labelable?:ValueTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveOutsideCollaborator */
["RemoveOutsideCollaboratorInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the organization to remove the outside collaborator from. */
	organizationId: string | Variable<any, string>,
	/** The ID of the outside collaborator to remove. */
	userId: string | Variable<any, string>
};
	/** Autogenerated return type of RemoveOutsideCollaborator */
["RemoveOutsideCollaboratorPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The user that was removed as an outside collaborator. */
	removedUser?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveReaction */
["RemoveReactionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of the emoji reaction to remove. */
	content: ValueTypes["ReactionContent"] | Variable<any, string>,
	/** The Node ID of the subject to modify. */
	subjectId: string | Variable<any, string>
};
	/** Autogenerated return type of RemoveReaction */
["RemoveReactionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The reaction object. */
	reaction?:ValueTypes["Reaction"],
	/** The reactable subject. */
	subject?:ValueTypes["Reactable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveStar */
["RemoveStarInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Starrable ID to unstar. */
	starrableId: string | Variable<any, string>
};
	/** Autogenerated return type of RemoveStar */
["RemoveStarPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The starrable. */
	starrable?:ValueTypes["Starrable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveUpvote */
["RemoveUpvoteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the discussion or comment to remove upvote. */
	subjectId: string | Variable<any, string>
};
	/** Autogenerated return type of RemoveUpvote */
["RemoveUpvotePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The votable subject. */
	subject?:ValueTypes["Votable"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'removed_from_project' event on a given issue or pull request. */
["RemovedFromProjectEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Project referenced by event. */
	project?:ValueTypes["Project"],
	/** Column name referenced by this project event. */
	projectColumnName?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'renamed' event on a given issue or pull request */
["RenamedTitleEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the current title of the issue or pull request. */
	currentTitle?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the previous title of the issue or pull request. */
	previousTitle?:boolean | `@${string}`,
	/** Subject that was renamed. */
	subject?:ValueTypes["RenamedTitleSubject"],
		__typename?: boolean | `@${string}`
}>;
	/** An object which has a renamable title */
["RenamedTitleSubject"]: AliasType<{		["...on Issue"] : ValueTypes["Issue"],
		["...on PullRequest"] : ValueTypes["PullRequest"]
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ReopenIssue */
["ReopenIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the issue to be opened. */
	issueId: string | Variable<any, string>
};
	/** Autogenerated return type of ReopenIssue */
["ReopenIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was opened. */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ReopenPullRequest */
["ReopenPullRequestInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the pull request to be reopened. */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of ReopenPullRequest */
["ReopenPullRequestPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that was reopened. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'reopened' event on any `Closable`. */
["ReopenedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Object that was reopened. */
	closable?:ValueTypes["Closable"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The reason the issue state was changed to open. */
	stateReason?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.access event. */
["RepoAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoAccessAuditEntryVisibility"]:RepoAccessAuditEntryVisibility;
	/** Audit log entry for a repo.add_member event. */
["RepoAddMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoAddMemberAuditEntryVisibility"]:RepoAddMemberAuditEntryVisibility;
	/** Audit log entry for a repo.add_topic event. */
["RepoAddTopicAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The name of the topic added to the repository */
	topic?:ValueTypes["Topic"],
	/** The name of the topic added to the repository */
	topicName?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.archived event. */
["RepoArchivedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoArchivedAuditEntryVisibility"]:RepoArchivedAuditEntryVisibility;
	/** Audit log entry for a repo.change_merge_setting event. */
["RepoChangeMergeSettingAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the change was to enable (true) or disable (false) the merge type */
	isEnabled?:boolean | `@${string}`,
	/** The merge method affected by the change */
	mergeType?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The merge options available for pull requests to this repository. */
["RepoChangeMergeSettingAuditEntryMergeType"]:RepoChangeMergeSettingAuditEntryMergeType;
	/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
["RepoConfigDisableAnonymousGitAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.disable_collaborators_only event. */
["RepoConfigDisableCollaboratorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.disable_contributors_only event. */
["RepoConfigDisableContributorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
["RepoConfigDisableSockpuppetDisallowedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
["RepoConfigEnableAnonymousGitAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.enable_collaborators_only event. */
["RepoConfigEnableCollaboratorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.enable_contributors_only event. */
["RepoConfigEnableContributorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
["RepoConfigEnableSockpuppetDisallowedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
["RepoConfigLockAnonymousGitAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
["RepoConfigUnlockAnonymousGitAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.create event. */
["RepoCreateAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The name of the parent repository for this forked repository. */
	forkParentName?:boolean | `@${string}`,
	/** The name of the root repository for this network. */
	forkSourceName?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoCreateAuditEntryVisibility"]:RepoCreateAuditEntryVisibility;
	/** Audit log entry for a repo.destroy event. */
["RepoDestroyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoDestroyAuditEntryVisibility"]:RepoDestroyAuditEntryVisibility;
	/** Audit log entry for a repo.remove_member event. */
["RepoRemoveMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoRemoveMemberAuditEntryVisibility"]:RepoRemoveMemberAuditEntryVisibility;
	/** Audit log entry for a repo.remove_topic event. */
["RepoRemoveTopicAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The name of the topic added to the repository */
	topic?:ValueTypes["Topic"],
	/** The name of the topic added to the repository */
	topicName?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The reasons a piece of content can be reported or minimized. */
["ReportedContentClassifiers"]:ReportedContentClassifiers;
	/** A repository contains the content for a project. */
["Repository"]: AliasType<{
	/** Whether or not a pull request head branch that is behind its base branch can
always be updated even if it is not required to be up to date before merging. */
	allowUpdateBranch?:boolean | `@${string}`,
assignableUsers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filters users with query on user name and login */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
	/** Whether or not Auto-merge can be enabled on pull requests in this repository. */
	autoMergeAllowed?:boolean | `@${string}`,
branchProtectionRules?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["BranchProtectionRuleConnection"]],
	/** Returns the code of conduct for this repository */
	codeOfConduct?:ValueTypes["CodeOfConduct"],
codeowners?: [{	/** The ref name used to return the associated `CODEOWNERS` file. */
	refName?: string | undefined | null | Variable<any, string>},ValueTypes["RepositoryCodeowners"]],
collaborators?: [{	/** Collaborators affiliation level with a repository. */
	affiliation?: ValueTypes["CollaboratorAffiliation"] | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filters users with query on user name and login */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["RepositoryCollaboratorConnection"]],
commitComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CommitCommentConnection"]],
	/** Returns a list of contact links associated to the repository */
	contactLinks?:ValueTypes["RepositoryContactLink"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The Ref associated with the repository's default branch. */
	defaultBranchRef?:ValueTypes["Ref"],
	/** Whether or not branches are automatically deleted when merged in this repository. */
	deleteBranchOnMerge?:boolean | `@${string}`,
dependencyGraphManifests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Cursor to paginate dependencies */
	dependenciesAfter?: string | undefined | null | Variable<any, string>,	/** Number of dependencies to fetch */
	dependenciesFirst?: number | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Flag to scope to only manifests with dependencies */
	withDependencies?: boolean | undefined | null | Variable<any, string>},ValueTypes["DependencyGraphManifestConnection"]],
deployKeys?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DeployKeyConnection"]],
deployments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Environments to list deployments for */
	environments?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for deployments returned from the connection. */
	orderBy?: ValueTypes["DeploymentOrder"] | undefined | null | Variable<any, string>},ValueTypes["DeploymentConnection"]],
	/** The description of the repository. */
	description?:boolean | `@${string}`,
	/** The description of the repository rendered to HTML. */
	descriptionHTML?:boolean | `@${string}`,
discussion?: [{	/** The number for the discussion to be returned. */
	number: number | Variable<any, string>},ValueTypes["Discussion"]],
discussionCategories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Filter by categories that are assignable by the viewer. */
	filterByAssignable?: boolean | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DiscussionCategoryConnection"]],
discussionCategory?: [{	/** The slug of the discussion category to be returned. */
	slug: string | Variable<any, string>},ValueTypes["DiscussionCategory"]],
discussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Only include discussions that belong to the category with this ID. */
	categoryId?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for discussions returned from the connection. */
	orderBy?: ValueTypes["DiscussionOrder"] | undefined | null | Variable<any, string>},ValueTypes["DiscussionConnection"]],
	/** The number of kilobytes this repository occupies on disk. */
	diskUsage?:boolean | `@${string}`,
environment?: [{	/** The name of the environment to be returned. */
	name: string | Variable<any, string>},ValueTypes["Environment"]],
environments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["EnvironmentConnection"]],
	/** Returns how many forks there are of this repository in the whole network. */
	forkCount?:boolean | `@${string}`,
	/** Whether this repository allows forks. */
	forkingAllowed?:boolean | `@${string}`,
forks?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories returned from the connection */
	orderBy?: ValueTypes["RepositoryOrder"] | undefined | null | Variable<any, string>,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to privacy */
	privacy?: ValueTypes["RepositoryPrivacy"] | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
	/** The funding links for this repository */
	fundingLinks?:ValueTypes["FundingLink"],
	/** Indicates if the repository has issues feature enabled. */
	hasIssuesEnabled?:boolean | `@${string}`,
	/** Indicates if the repository has the Projects feature enabled. */
	hasProjectsEnabled?:boolean | `@${string}`,
	/** Indicates if the repository has wiki feature enabled. */
	hasWikiEnabled?:boolean | `@${string}`,
	/** The repository's URL. */
	homepageUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The interaction ability settings for this repository. */
	interactionAbility?:ValueTypes["RepositoryInteractionAbility"],
	/** Indicates if the repository is unmaintained. */
	isArchived?:boolean | `@${string}`,
	/** Returns true if blank issue creation is allowed */
	isBlankIssuesEnabled?:boolean | `@${string}`,
	/** Returns whether or not this repository disabled. */
	isDisabled?:boolean | `@${string}`,
	/** Returns whether or not this repository is empty. */
	isEmpty?:boolean | `@${string}`,
	/** Identifies if the repository is a fork. */
	isFork?:boolean | `@${string}`,
	/** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
	isInOrganization?:boolean | `@${string}`,
	/** Indicates if the repository has been locked or not. */
	isLocked?:boolean | `@${string}`,
	/** Identifies if the repository is a mirror. */
	isMirror?:boolean | `@${string}`,
	/** Identifies if the repository is private or internal. */
	isPrivate?:boolean | `@${string}`,
	/** Returns true if this repository has a security policy */
	isSecurityPolicyEnabled?:boolean | `@${string}`,
	/** Identifies if the repository is a template that can be used to generate new repositories. */
	isTemplate?:boolean | `@${string}`,
	/** Is this repository a user configuration repository? */
	isUserConfigurationRepository?:boolean | `@${string}`,
issue?: [{	/** The number for the issue to be returned. */
	number: number | Variable<any, string>},ValueTypes["Issue"]],
issueOrPullRequest?: [{	/** The number for the issue to be returned. */
	number: number | Variable<any, string>},ValueTypes["IssueOrPullRequest"]],
	/** Returns a list of issue templates associated to the repository */
	issueTemplates?:ValueTypes["IssueTemplate"],
issues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Filtering options for issues returned from the connection. */
	filterBy?: ValueTypes["IssueFilters"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for issues returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the issues by. */
	states?: Array<ValueTypes["IssueState"]> | undefined | null | Variable<any, string>},ValueTypes["IssueConnection"]],
label?: [{	/** Label name */
	name: string | Variable<any, string>},ValueTypes["Label"]],
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for labels returned from the connection. */
	orderBy?: ValueTypes["LabelOrder"] | undefined | null | Variable<any, string>,	/** If provided, searches labels by name and description. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["LabelConnection"]],
languages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["LanguageOrder"] | undefined | null | Variable<any, string>},ValueTypes["LanguageConnection"]],
	/** Get the latest release for the repository if one exists. */
	latestRelease?:ValueTypes["Release"],
	/** The license associated with the repository */
	licenseInfo?:ValueTypes["License"],
	/** The reason the repository has been locked. */
	lockReason?:boolean | `@${string}`,
mentionableUsers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filters users with query on user name and login */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
	/** Whether or not PRs are merged with a merge commit on this repository. */
	mergeCommitAllowed?:boolean | `@${string}`,
	/** How the default commit message will be generated when merging a pull request. */
	mergeCommitMessage?:boolean | `@${string}`,
	/** How the default commit title will be generated when merging a pull request. */
	mergeCommitTitle?:boolean | `@${string}`,
milestone?: [{	/** The number for the milestone to be returned. */
	number: number | Variable<any, string>},ValueTypes["Milestone"]],
milestones?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for milestones. */
	orderBy?: ValueTypes["MilestoneOrder"] | undefined | null | Variable<any, string>,	/** Filters milestones with a query on the title */
	query?: string | undefined | null | Variable<any, string>,	/** Filter by the state of the milestones. */
	states?: Array<ValueTypes["MilestoneState"]> | undefined | null | Variable<any, string>},ValueTypes["MilestoneConnection"]],
	/** The repository's original mirror URL. */
	mirrorUrl?:boolean | `@${string}`,
	/** The name of the repository. */
	name?:boolean | `@${string}`,
	/** The repository's name with owner. */
	nameWithOwner?:boolean | `@${string}`,
object?: [{	/** A Git revision expression suitable for rev-parse */
	expression?: string | undefined | null | Variable<any, string>,	/** The Git object ID */
	oid?: ValueTypes["GitObjectID"] | undefined | null | Variable<any, string>},ValueTypes["GitObject"]],
	/** The image used to represent this repository in Open Graph data. */
	openGraphImageUrl?:boolean | `@${string}`,
	/** The User owner of the repository. */
	owner?:ValueTypes["RepositoryOwner"],
packages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Find packages by their names. */
	names?: Array<string | undefined | null> | undefined | null | Variable<any, string>,	/** Ordering of the returned packages. */
	orderBy?: ValueTypes["PackageOrder"] | undefined | null | Variable<any, string>,	/** Filter registry package by type. */
	packageType?: ValueTypes["PackageType"] | undefined | null | Variable<any, string>,	/** Find packages in a repository by ID. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["PackageConnection"]],
	/** The repository parent, if this is a fork. */
	parent?:ValueTypes["Repository"],
pinnedDiscussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PinnedDiscussionConnection"]],
pinnedIssues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PinnedIssueConnection"]],
	/** The primary language of the repository's code. */
	primaryLanguage?:ValueTypes["Language"],
project?: [{	/** The project number to find. */
	number: number | Variable<any, string>},ValueTypes["Project"]],
projectNext?: [{	/** The ProjectNext number. */
	number: number | Variable<any, string>},ValueTypes["ProjectNext"]],
projectV2?: [{	/** The Project number. */
	number: number | Variable<any, string>},ValueTypes["ProjectV2"]],
projects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for projects returned from the connection */
	orderBy?: ValueTypes["ProjectOrder"] | undefined | null | Variable<any, string>,	/** Query to search projects by, currently only searching by name. */
	search?: string | undefined | null | Variable<any, string>,	/** A list of states to filter the projects by. */
	states?: Array<ValueTypes["ProjectState"]> | undefined | null | Variable<any, string>},ValueTypes["ProjectConnection"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** A project (beta) to search for linked to the repo. */
	query?: string | undefined | null | Variable<any, string>,	/** How to order the returned project (beta) objects. */
	sortBy?: ValueTypes["ProjectNextOrderField"] | undefined | null | Variable<any, string>},ValueTypes["ProjectNextConnection"]],
	/** The HTTP path listing the repository's projects */
	projectsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing the repository's projects */
	projectsUrl?:boolean | `@${string}`,
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** How to order the returned projects. */
	orderBy?: ValueTypes["ProjectV2Order"] | undefined | null | Variable<any, string>,	/** A project to search for linked to the repo. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
pullRequest?: [{	/** The number for the pull request to be returned. */
	number: number | Variable<any, string>},ValueTypes["PullRequest"]],
	/** Returns a list of pull request templates associated to the repository */
	pullRequestTemplates?:ValueTypes["PullRequestTemplate"],
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the pull requests by. */
	states?: Array<ValueTypes["PullRequestState"]> | undefined | null | Variable<any, string>},ValueTypes["PullRequestConnection"]],
	/** Identifies when the repository was last pushed to. */
	pushedAt?:boolean | `@${string}`,
	/** Whether or not rebase-merging is enabled on this repository. */
	rebaseMergeAllowed?:boolean | `@${string}`,
recentProjects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
ref?: [{	/** The ref to retrieve. Fully qualified matches are checked in order
(`refs/heads/master`) before falling back onto checks for short name matches (`master`). */
	qualifiedName: string | Variable<any, string>},ValueTypes["Ref"]],
refs?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** DEPRECATED: use orderBy. The ordering direction. */
	direction?: ValueTypes["OrderDirection"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for refs returned from the connection. */
	orderBy?: ValueTypes["RefOrder"] | undefined | null | Variable<any, string>,	/** Filters refs with query on name */
	query?: string | undefined | null | Variable<any, string>,	/** A ref name prefix like `refs/heads/`, `refs/tags/`, etc. */
	refPrefix: string | Variable<any, string>},ValueTypes["RefConnection"]],
release?: [{	/** The name of the Tag the Release was created from */
	tagName: string | Variable<any, string>},ValueTypes["Release"]],
releases?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["ReleaseOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReleaseConnection"]],
repositoryTopics?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["RepositoryTopicConnection"]],
	/** The HTTP path for this repository */
	resourcePath?:boolean | `@${string}`,
	/** The security policy URL. */
	securityPolicyUrl?:boolean | `@${string}`,
shortDescriptionHTML?: [{	/** How many characters to return. */
	limit?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** Whether or not squash-merging is enabled on this repository. */
	squashMergeAllowed?:boolean | `@${string}`,
	/** How the default commit message will be generated when squash merging a pull request. */
	squashMergeCommitMessage?:boolean | `@${string}`,
	/** How the default commit title will be generated when squash merging a pull request. */
	squashMergeCommitTitle?:boolean | `@${string}`,
	/** Whether a squash merge commit can use the pull request title as default. */
	squashPrTitleUsedAsDefault?:boolean | `@${string}`,
	/** The SSH URL to clone this repository */
	sshUrl?:boolean | `@${string}`,
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount?:boolean | `@${string}`,
stargazers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["StarOrder"] | undefined | null | Variable<any, string>},ValueTypes["StargazerConnection"]],
submodules?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["SubmoduleConnection"]],
	/** Temporary authentication token for cloning this repository. */
	tempCloneToken?:boolean | `@${string}`,
	/** The repository from which this repository was generated, if any. */
	templateRepository?:ValueTypes["Repository"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this repository */
	url?:boolean | `@${string}`,
	/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
	usesCustomOpenGraphImage?:boolean | `@${string}`,
	/** Indicates whether the viewer has admin permissions on this repository. */
	viewerCanAdminister?:boolean | `@${string}`,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Indicates whether the viewer can update the topics of this repository. */
	viewerCanUpdateTopics?:boolean | `@${string}`,
	/** The last commit email for the viewer. */
	viewerDefaultCommitEmail?:boolean | `@${string}`,
	/** The last used merge method by the viewer or the default for the repository. */
	viewerDefaultMergeMethod?:boolean | `@${string}`,
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred?:boolean | `@${string}`,
	/** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
	viewerPermission?:boolean | `@${string}`,
	/** A list of emails this viewer can commit with. */
	viewerPossibleCommitEmails?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
	/** Indicates the repository's visibility level. */
	visibility?:boolean | `@${string}`,
vulnerabilityAlerts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Filter by the scope of the alert's dependency */
	dependencyScopes?: Array<ValueTypes["RepositoryVulnerabilityAlertDependencyScope"]> | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter by the state of the alert */
	states?: Array<ValueTypes["RepositoryVulnerabilityAlertState"]> | undefined | null | Variable<any, string>},ValueTypes["RepositoryVulnerabilityAlertConnection"]],
watchers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserConnection"]],
	/** Whether contributors are required to sign off on web-based commits in this repository. */
	webCommitSignoffRequired?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The affiliation of a user to a repository */
["RepositoryAffiliation"]:RepositoryAffiliation;
	/** Metadata for an audit entry with action repo.* */
["RepositoryAuditEntryData"]:AliasType<{
		/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`;
		['...on OrgRestoreMemberMembershipRepositoryAuditEntryData']?: Omit<ValueTypes["OrgRestoreMemberMembershipRepositoryAuditEntryData"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ValueTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoAccessAuditEntry']?: Omit<ValueTypes["RepoAccessAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoAddMemberAuditEntry']?: Omit<ValueTypes["RepoAddMemberAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoAddTopicAuditEntry']?: Omit<ValueTypes["RepoAddTopicAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoArchivedAuditEntry']?: Omit<ValueTypes["RepoArchivedAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoChangeMergeSettingAuditEntry']?: Omit<ValueTypes["RepoChangeMergeSettingAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigDisableAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigDisableContributorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigDisableContributorsOnlyAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']?: Omit<ValueTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigEnableAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigEnableContributorsOnlyAuditEntry']?: Omit<ValueTypes["RepoConfigEnableContributorsOnlyAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']?: Omit<ValueTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigLockAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']?: Omit<ValueTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoCreateAuditEntry']?: Omit<ValueTypes["RepoCreateAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoDestroyAuditEntry']?: Omit<ValueTypes["RepoDestroyAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoRemoveMemberAuditEntry']?: Omit<ValueTypes["RepoRemoveMemberAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ValueTypes["RepoRemoveTopicAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ValueTypes["TeamAddRepositoryAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ValueTypes["TeamRemoveRepositoryAuditEntry"],keyof ValueTypes["RepositoryAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Information extracted from a repository's `CODEOWNERS` file. */
["RepositoryCodeowners"]: AliasType<{
	/** Any problems that were encountered while parsing the `CODEOWNERS` file. */
	errors?:ValueTypes["RepositoryCodeownersError"],
		__typename?: boolean | `@${string}`
}>;
	/** An error in a `CODEOWNERS` file. */
["RepositoryCodeownersError"]: AliasType<{
	/** The column number where the error occurs. */
	column?:boolean | `@${string}`,
	/** A short string describing the type of error. */
	kind?:boolean | `@${string}`,
	/** The line number where the error occurs. */
	line?:boolean | `@${string}`,
	/** A complete description of the error, combining information from other fields. */
	message?:boolean | `@${string}`,
	/** The path to the file when the error occurs. */
	path?:boolean | `@${string}`,
	/** The content of the line where the error occurs. */
	source?:boolean | `@${string}`,
	/** A suggestion of how to fix the error. */
	suggestion?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["RepositoryCollaboratorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["RepositoryCollaboratorEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user who is a collaborator of a repository. */
["RepositoryCollaboratorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ValueTypes["User"],
	/** The permission the user has on the repository. */
	permission?:boolean | `@${string}`,
	/** A list of sources for the user's access to the repository. */
	permissionSources?:ValueTypes["PermissionSource"],
		__typename?: boolean | `@${string}`
}>;
	/** A list of repositories owned by the subject. */
["RepositoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["RepositoryEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Repository"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** The total size in kilobytes of all repositories in the connection. */
	totalDiskUsage?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A repository contact link. */
["RepositoryContactLink"]: AliasType<{
	/** The contact link purpose. */
	about?:boolean | `@${string}`,
	/** The contact link name. */
	name?:boolean | `@${string}`,
	/** The contact link URL. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The reason a repository is listed as 'contributed'. */
["RepositoryContributionType"]:RepositoryContributionType;
	/** Represents an author of discussions in repositories. */
["RepositoryDiscussionAuthor"]:AliasType<{
	repositoryDiscussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Filter discussions to only those that have been answered or not. Defaults to
including both answered and unanswered discussions. */
	answered?: boolean | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for discussions returned from the connection. */
	orderBy?: ValueTypes["DiscussionOrder"] | undefined | null | Variable<any, string>,	/** Filter discussions to only those in a specific repository. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["DiscussionConnection"]];
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["RepositoryDiscussionAuthor"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["RepositoryDiscussionAuthor"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents an author of discussion comments in repositories. */
["RepositoryDiscussionCommentAuthor"]:AliasType<{
	repositoryDiscussionComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter discussion comments to only those that were marked as the answer */
	onlyAnswers?: boolean | undefined | null | Variable<any, string>,	/** Filter discussion comments to only those in a specific repository. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["DiscussionCommentConnection"]];
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["RepositoryDiscussionCommentAuthor"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["RepositoryDiscussionCommentAuthor"]>;
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RepositoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A subset of repository info. */
["RepositoryInfo"]:AliasType<{
		/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The description of the repository. */
	description?:boolean | `@${string}`,
	/** The description of the repository rendered to HTML. */
	descriptionHTML?:boolean | `@${string}`,
	/** Returns how many forks there are of this repository in the whole network. */
	forkCount?:boolean | `@${string}`,
	/** Indicates if the repository has issues feature enabled. */
	hasIssuesEnabled?:boolean | `@${string}`,
	/** Indicates if the repository has the Projects feature enabled. */
	hasProjectsEnabled?:boolean | `@${string}`,
	/** Indicates if the repository has wiki feature enabled. */
	hasWikiEnabled?:boolean | `@${string}`,
	/** The repository's URL. */
	homepageUrl?:boolean | `@${string}`,
	/** Indicates if the repository is unmaintained. */
	isArchived?:boolean | `@${string}`,
	/** Identifies if the repository is a fork. */
	isFork?:boolean | `@${string}`,
	/** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
	isInOrganization?:boolean | `@${string}`,
	/** Indicates if the repository has been locked or not. */
	isLocked?:boolean | `@${string}`,
	/** Identifies if the repository is a mirror. */
	isMirror?:boolean | `@${string}`,
	/** Identifies if the repository is private or internal. */
	isPrivate?:boolean | `@${string}`,
	/** Identifies if the repository is a template that can be used to generate new repositories. */
	isTemplate?:boolean | `@${string}`,
	/** The license associated with the repository */
	licenseInfo?:ValueTypes["License"],
	/** The reason the repository has been locked. */
	lockReason?:boolean | `@${string}`,
	/** The repository's original mirror URL. */
	mirrorUrl?:boolean | `@${string}`,
	/** The name of the repository. */
	name?:boolean | `@${string}`,
	/** The repository's name with owner. */
	nameWithOwner?:boolean | `@${string}`,
	/** The image used to represent this repository in Open Graph data. */
	openGraphImageUrl?:boolean | `@${string}`,
	/** The User owner of the repository. */
	owner?:ValueTypes["RepositoryOwner"],
	/** Identifies when the repository was last pushed to. */
	pushedAt?:boolean | `@${string}`,
	/** The HTTP path for this repository */
	resourcePath?:boolean | `@${string}`,
shortDescriptionHTML?: [{	/** How many characters to return. */
	limit?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this repository */
	url?:boolean | `@${string}`,
	/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
	usesCustomOpenGraphImage?:boolean | `@${string}`,
	/** Indicates the repository's visibility level. */
	visibility?:boolean | `@${string}`;
		['...on Repository']?: Omit<ValueTypes["Repository"],keyof ValueTypes["RepositoryInfo"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Repository interaction limit that applies to this object. */
["RepositoryInteractionAbility"]: AliasType<{
	/** The time the currently active limit expires. */
	expiresAt?:boolean | `@${string}`,
	/** The current limit that is enabled on this object. */
	limit?:boolean | `@${string}`,
	/** The origin of the currently active interaction limit. */
	origin?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A repository interaction limit. */
["RepositoryInteractionLimit"]:RepositoryInteractionLimit;
	/** The length for a repository interaction limit to be enabled for. */
["RepositoryInteractionLimitExpiry"]:RepositoryInteractionLimitExpiry;
	/** Indicates where an interaction limit is configured. */
["RepositoryInteractionLimitOrigin"]:RepositoryInteractionLimitOrigin;
	/** An invitation for a user to be added to a repository. */
["RepositoryInvitation"]: AliasType<{
	/** The email address that received the invitation. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The user who received the invitation. */
	invitee?:ValueTypes["User"],
	/** The user who created the invitation. */
	inviter?:ValueTypes["User"],
	/** The permalink for this repository invitation. */
	permalink?:boolean | `@${string}`,
	/** The permission granted on this repository by this invitation. */
	permission?:boolean | `@${string}`,
	/** The Repository the user is invited to. */
	repository?:ValueTypes["RepositoryInfo"],
		__typename?: boolean | `@${string}`
}>;
	/** A list of repository invitations. */
["RepositoryInvitationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["RepositoryInvitationEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["RepositoryInvitation"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RepositoryInvitationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["RepositoryInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for repository invitation connections. */
["RepositoryInvitationOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order repository invitations by. */
	field: ValueTypes["RepositoryInvitationOrderField"] | Variable<any, string>
};
	/** Properties by which repository invitation connections can be ordered. */
["RepositoryInvitationOrderField"]:RepositoryInvitationOrderField;
	/** The possible reasons a given repository could be in a locked state. */
["RepositoryLockReason"]:RepositoryLockReason;
	/** An Octoshift repository migration. */
["RepositoryMigration"]: AliasType<{
	/** The Octoshift migration flag to continue on error. */
	continueOnError?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The reason the migration failed. */
	failureReason?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The URL for the migration log (expires 1 day after migration completes). */
	migrationLogUrl?:boolean | `@${string}`,
	/** The Octoshift migration source. */
	migrationSource?:ValueTypes["MigrationSource"],
	/** The target repository name. */
	repositoryName?:boolean | `@${string}`,
	/** The Octoshift migration source URL. */
	sourceUrl?:boolean | `@${string}`,
	/** The Octoshift migration state. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for RepositoryMigration. */
["RepositoryMigrationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["RepositoryMigrationEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["RepositoryMigration"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a repository migration. */
["RepositoryMigrationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["RepositoryMigration"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for repository migrations. */
["RepositoryMigrationOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["RepositoryMigrationOrderDirection"] | Variable<any, string>,
	/** The field to order repository migrations by. */
	field: ValueTypes["RepositoryMigrationOrderField"] | Variable<any, string>
};
	/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
["RepositoryMigrationOrderDirection"]:RepositoryMigrationOrderDirection;
	/** Properties by which repository migrations can be ordered. */
["RepositoryMigrationOrderField"]:RepositoryMigrationOrderField;
	/** Represents a object that belongs to a repository. */
["RepositoryNode"]:AliasType<{
		/** The repository associated with this node. */
	repository?:ValueTypes["Repository"];
		['...on CommitComment']?: Omit<ValueTypes["CommitComment"],keyof ValueTypes["RepositoryNode"]>;
		['...on CommitCommentThread']?: Omit<ValueTypes["CommitCommentThread"],keyof ValueTypes["RepositoryNode"]>;
		['...on DependabotUpdate']?: Omit<ValueTypes["DependabotUpdate"],keyof ValueTypes["RepositoryNode"]>;
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["RepositoryNode"]>;
		['...on DiscussionCategory']?: Omit<ValueTypes["DiscussionCategory"],keyof ValueTypes["RepositoryNode"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["RepositoryNode"]>;
		['...on IssueComment']?: Omit<ValueTypes["IssueComment"],keyof ValueTypes["RepositoryNode"]>;
		['...on PinnedDiscussion']?: Omit<ValueTypes["PinnedDiscussion"],keyof ValueTypes["RepositoryNode"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["RepositoryNode"]>;
		['...on PullRequestCommitCommentThread']?: Omit<ValueTypes["PullRequestCommitCommentThread"],keyof ValueTypes["RepositoryNode"]>;
		['...on PullRequestReview']?: Omit<ValueTypes["PullRequestReview"],keyof ValueTypes["RepositoryNode"]>;
		['...on PullRequestReviewComment']?: Omit<ValueTypes["PullRequestReviewComment"],keyof ValueTypes["RepositoryNode"]>;
		['...on RepositoryVulnerabilityAlert']?: Omit<ValueTypes["RepositoryVulnerabilityAlert"],keyof ValueTypes["RepositoryNode"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for repository connections */
["RepositoryOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order repositories by. */
	field: ValueTypes["RepositoryOrderField"] | Variable<any, string>
};
	/** Properties by which repository connections can be ordered. */
["RepositoryOrderField"]:RepositoryOrderField;
	/** Represents an owner of a Repository. */
["RepositoryOwner"]:AliasType<{
	avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	id?:boolean | `@${string}`,
	/** The username used to login. */
	login?:boolean | `@${string}`,
repositories?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they are forks of another repository */
	isFork?: boolean | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories returned from the connection */
	orderBy?: ValueTypes["RepositoryOrder"] | undefined | null | Variable<any, string>,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to privacy */
	privacy?: ValueTypes["RepositoryPrivacy"] | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
repository?: [{	/** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
	followRenames?: boolean | undefined | null | Variable<any, string>,	/** Name of Repository to find. */
	name: string | Variable<any, string>},ValueTypes["Repository"]],
	/** The HTTP URL for the owner. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the owner. */
	url?:boolean | `@${string}`;
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["RepositoryOwner"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["RepositoryOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The access level to a repository */
["RepositoryPermission"]:RepositoryPermission;
	/** The privacy of a repository */
["RepositoryPrivacy"]:RepositoryPrivacy;
	/** A repository-topic connects a repository to a topic. */
["RepositoryTopic"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The HTTP path for this repository-topic. */
	resourcePath?:boolean | `@${string}`,
	/** The topic. */
	topic?:ValueTypes["Topic"],
	/** The HTTP URL for this repository-topic. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for RepositoryTopic. */
["RepositoryTopicConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["RepositoryTopicEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["RepositoryTopic"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RepositoryTopicEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["RepositoryTopic"],
		__typename?: boolean | `@${string}`
}>;
	/** The repository's visibility level. */
["RepositoryVisibility"]:RepositoryVisibility;
	/** Audit log entry for a repository_visibility_change.disable event. */
["RepositoryVisibilityChangeDisableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repository_visibility_change.enable event. */
["RepositoryVisibilityChangeEnableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
["RepositoryVulnerabilityAlert"]: AliasType<{
	/** When was the alert created? */
	createdAt?:boolean | `@${string}`,
	/** The associated Dependabot update */
	dependabotUpdate?:ValueTypes["DependabotUpdate"],
	/** The scope of an alert's dependency */
	dependencyScope?:boolean | `@${string}`,
	/** Comment explaining the reason the alert was dismissed */
	dismissComment?:boolean | `@${string}`,
	/** The reason the alert was dismissed */
	dismissReason?:boolean | `@${string}`,
	/** When was the alert dismissed? */
	dismissedAt?:boolean | `@${string}`,
	/** The user who dismissed the alert */
	dismisser?:ValueTypes["User"],
	/** The reason the alert was marked as fixed. */
	fixReason?:boolean | `@${string}`,
	/** When was the alert fixed? */
	fixedAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the alert number. */
	number?:boolean | `@${string}`,
	/** The associated repository */
	repository?:ValueTypes["Repository"],
	/** The associated security advisory */
	securityAdvisory?:ValueTypes["SecurityAdvisory"],
	/** The associated security vulnerability */
	securityVulnerability?:ValueTypes["SecurityVulnerability"],
	/** Identifies the state of the alert. */
	state?:boolean | `@${string}`,
	/** The vulnerable manifest filename */
	vulnerableManifestFilename?:boolean | `@${string}`,
	/** The vulnerable manifest path */
	vulnerableManifestPath?:boolean | `@${string}`,
	/** The vulnerable requirements */
	vulnerableRequirements?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for RepositoryVulnerabilityAlert. */
["RepositoryVulnerabilityAlertConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["RepositoryVulnerabilityAlertEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["RepositoryVulnerabilityAlert"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible scopes of an alert's dependency. */
["RepositoryVulnerabilityAlertDependencyScope"]:RepositoryVulnerabilityAlertDependencyScope;
	/** An edge in a connection. */
["RepositoryVulnerabilityAlertEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["RepositoryVulnerabilityAlert"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states of an alert */
["RepositoryVulnerabilityAlertState"]:RepositoryVulnerabilityAlertState;
	/** Autogenerated input type of RequestReviews */
["RequestReviewsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the pull request to modify. */
	pullRequestId: string | Variable<any, string>,
	/** The Node IDs of the team to request. */
	teamIds?: Array<string> | undefined | null | Variable<any, string>,
	/** Add users to the set rather than replace. */
	union?: boolean | undefined | null | Variable<any, string>,
	/** The Node IDs of the user to request. */
	userIds?: Array<string> | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of RequestReviews */
["RequestReviewsPayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that is getting requests. */
	pullRequest?:ValueTypes["PullRequest"],
	/** The edge from the pull request to the requested reviewers. */
	requestedReviewersEdge?:ValueTypes["UserEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states that can be requested when creating a check run. */
["RequestableCheckStatusState"]:RequestableCheckStatusState;
	/** Types that can be requested reviewers. */
["RequestedReviewer"]: AliasType<{		["...on Mannequin"] : ValueTypes["Mannequin"],
		["...on Team"] : ValueTypes["Team"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for RequestedReviewer. */
["RequestedReviewerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["RequestedReviewerEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["RequestedReviewer"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RequestedReviewerEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["RequestedReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a type that can be required by a pull request for merging. */
["RequirableByPullRequest"]:AliasType<{
	isRequired?: [{	/** The id of the pull request this is required for */
	pullRequestId?: string | undefined | null | Variable<any, string>,	/** The number of the pull request this is required for */
	pullRequestNumber?: number | undefined | null | Variable<any, string>},boolean | `@${string}`];
		['...on CheckRun']?: Omit<ValueTypes["CheckRun"],keyof ValueTypes["RequirableByPullRequest"]>;
		['...on StatusContext']?: Omit<ValueTypes["StatusContext"],keyof ValueTypes["RequirableByPullRequest"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a required status check for a protected branch, but not any specific run of that check. */
["RequiredStatusCheckDescription"]: AliasType<{
	/** The App that must provide this status in order for it to be accepted. */
	app?:ValueTypes["App"],
	/** The name of this status. */
	context?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Specifies the attributes for a new or updated required status check. */
["RequiredStatusCheckInput"]: {
	/** The ID of the App that must set the status in order for it to be accepted.
Omit this value to use whichever app has recently been setting this status, or
use "any" to allow any app to set the status. */
	appId?: string | undefined | null | Variable<any, string>,
	/** Status check context that must pass for commits to be accepted to the matching branch. */
	context: string | Variable<any, string>
};
	/** Autogenerated input type of RerequestCheckSuite */
["RerequestCheckSuiteInput"]: {
	/** The Node ID of the check suite. */
	checkSuiteId: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of RerequestCheckSuite */
["RerequestCheckSuitePayload"]: AliasType<{
	/** The requested check suite. */
	checkSuite?:ValueTypes["CheckSuite"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ResolveReviewThread */
["ResolveReviewThreadInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the thread to resolve */
	threadId: string | Variable<any, string>
};
	/** Autogenerated return type of ResolveReviewThread */
["ResolveReviewThreadPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The thread to resolve. */
	thread?:ValueTypes["PullRequestReviewThread"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a private contribution a user made on GitHub. */
["RestrictedContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A user, team, or app who has the ability to dismiss a review on a protected branch. */
["ReviewDismissalAllowance"]: AliasType<{
	/** The actor that can dismiss. */
	actor?:ValueTypes["ReviewDismissalAllowanceActor"],
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?:ValueTypes["BranchProtectionRule"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be an actor. */
["ReviewDismissalAllowanceActor"]: AliasType<{		["...on App"] : ValueTypes["App"],
		["...on Team"] : ValueTypes["Team"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ReviewDismissalAllowance. */
["ReviewDismissalAllowanceConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ReviewDismissalAllowanceEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ReviewDismissalAllowance"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ReviewDismissalAllowanceEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ReviewDismissalAllowance"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'review_dismissed' event on a given issue or pull request. */
["ReviewDismissedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** Identifies the optional message associated with the 'review_dismissed' event. */
	dismissalMessage?:boolean | `@${string}`,
	/** Identifies the optional message associated with the event, rendered to HTML. */
	dismissalMessageHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the previous state of the review with the 'review_dismissed' event. */
	previousReviewState?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
	/** Identifies the commit which caused the review to become stale. */
	pullRequestCommit?:ValueTypes["PullRequestCommit"],
	/** The HTTP path for this review dismissed event. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the review associated with the 'review_dismissed' event. */
	review?:ValueTypes["PullRequestReview"],
	/** The HTTP URL for this review dismissed event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A request for a user to review a pull request. */
["ReviewRequest"]: AliasType<{
	/** Whether this request was created for a code owner */
	asCodeOwner?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the pull request associated with this review request. */
	pullRequest?:ValueTypes["PullRequest"],
	/** The reviewer that is requested. */
	requestedReviewer?:ValueTypes["RequestedReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ReviewRequest. */
["ReviewRequestConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["ReviewRequestEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["ReviewRequest"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ReviewRequestEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["ReviewRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'review_request_removed' event on a given pull request. */
["ReviewRequestRemovedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
	/** Identifies the reviewer whose review request was removed. */
	requestedReviewer?:ValueTypes["RequestedReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'review_requested' event on a given pull request. */
["ReviewRequestedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ValueTypes["PullRequest"],
	/** Identifies the reviewer whose review was requested. */
	requestedReviewer?:ValueTypes["RequestedReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** A hovercard context with a message describing the current code review state of the pull
request. */
["ReviewStatusHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
	/** The current status of the pull request with respect to code review. */
	reviewDecision?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
["RevokeEnterpriseOrganizationsMigratorRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
	enterpriseId: string | Variable<any, string>,
	/** The login of the user to revoke the migrator role */
	login: string | Variable<any, string>
};
	/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
["RevokeEnterpriseOrganizationsMigratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["OrganizationConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RevokeMigratorRole */
["RevokeMigratorRoleInput"]: {
	/** The user login or Team slug to revoke the migrator role from. */
	actor: string | Variable<any, string>,
	/** Specifies the type of the actor, can be either USER or TEAM. */
	actorType: ValueTypes["ActorType"] | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the organization that the user/team belongs to. */
	organizationId: string | Variable<any, string>
};
	/** Autogenerated return type of RevokeMigratorRole */
["RevokeMigratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Did the operation succeed? */
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Possible roles a user may have in relation to an organization. */
["RoleInOrganization"]:RoleInOrganization;
	/** The possible digest algorithms used to sign SAML requests for an identity provider. */
["SamlDigestAlgorithm"]:SamlDigestAlgorithm;
	/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
["SamlSignatureAlgorithm"]:SamlSignatureAlgorithm;
	/** A Saved Reply is text a user can use to reply quickly. */
["SavedReply"]: AliasType<{
	/** The body of the saved reply. */
	body?:boolean | `@${string}`,
	/** The saved reply body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The title of the saved reply. */
	title?:boolean | `@${string}`,
	/** The user that saved this reply. */
	user?:ValueTypes["Actor"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SavedReply. */
["SavedReplyConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SavedReplyEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["SavedReply"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SavedReplyEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["SavedReply"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for saved reply connections. */
["SavedReplyOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order saved replies by. */
	field: ValueTypes["SavedReplyOrderField"] | Variable<any, string>
};
	/** Properties by which saved reply connections can be ordered. */
["SavedReplyOrderField"]:SavedReplyOrderField;
	/** The results of a search. */
["SearchResultItem"]: AliasType<{		["...on App"] : ValueTypes["App"],
		["...on Discussion"] : ValueTypes["Discussion"],
		["...on Issue"] : ValueTypes["Issue"],
		["...on MarketplaceListing"] : ValueTypes["MarketplaceListing"],
		["...on Organization"] : ValueTypes["Organization"],
		["...on PullRequest"] : ValueTypes["PullRequest"],
		["...on Repository"] : ValueTypes["Repository"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages. */
["SearchResultItemConnection"]: AliasType<{
	/** The total number of pieces of code that matched the search query. Regardless
of the total number of matches, a maximum of 1,000 results will be available
across all types. */
	codeCount?:boolean | `@${string}`,
	/** The total number of discussions that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	discussionCount?:boolean | `@${string}`,
	/** A list of edges. */
	edges?:ValueTypes["SearchResultItemEdge"],
	/** The total number of issues that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types. */
	issueCount?:boolean | `@${string}`,
	/** A list of nodes. */
	nodes?:ValueTypes["SearchResultItem"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** The total number of repositories that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	repositoryCount?:boolean | `@${string}`,
	/** The total number of users that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types. */
	userCount?:boolean | `@${string}`,
	/** The total number of wiki pages that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	wikiCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SearchResultItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["SearchResultItem"],
	/** Text matches on the result found. */
	textMatches?:ValueTypes["TextMatch"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the individual results of a search. */
["SearchType"]:SearchType;
	/** A GitHub Security Advisory */
["SecurityAdvisory"]: AliasType<{
	/** The classification of the advisory */
	classification?:boolean | `@${string}`,
	/** The CVSS associated with this advisory */
	cvss?:ValueTypes["CVSS"],
cwes?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CWEConnection"]],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** This is a long plaintext description of the advisory */
	description?:boolean | `@${string}`,
	/** The GitHub Security Advisory ID */
	ghsaId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** A list of identifiers for this advisory */
	identifiers?:ValueTypes["SecurityAdvisoryIdentifier"],
	/** The permalink for the advisory's dependabot alerts page */
	notificationsPermalink?:boolean | `@${string}`,
	/** The organization that originated the advisory */
	origin?:boolean | `@${string}`,
	/** The permalink for the advisory */
	permalink?:boolean | `@${string}`,
	/** When the advisory was published */
	publishedAt?:boolean | `@${string}`,
	/** A list of references for this advisory */
	references?:ValueTypes["SecurityAdvisoryReference"],
	/** The severity of the advisory */
	severity?:boolean | `@${string}`,
	/** A short plaintext summary of the advisory */
	summary?:boolean | `@${string}`,
	/** When the advisory was last updated */
	updatedAt?:boolean | `@${string}`,
vulnerabilities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** A list of advisory classifications to filter vulnerabilities by. */
	classifications?: Array<ValueTypes["SecurityAdvisoryClassification"]> | undefined | null | Variable<any, string>,	/** An ecosystem to filter vulnerabilities by. */
	ecosystem?: ValueTypes["SecurityAdvisoryEcosystem"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the returned topics. */
	orderBy?: ValueTypes["SecurityVulnerabilityOrder"] | undefined | null | Variable<any, string>,	/** A package name to filter vulnerabilities by. */
	package?: string | undefined | null | Variable<any, string>,	/** A list of severities to filter vulnerabilities by. */
	severities?: Array<ValueTypes["SecurityAdvisorySeverity"]> | undefined | null | Variable<any, string>},ValueTypes["SecurityVulnerabilityConnection"]],
	/** When the advisory was withdrawn, if it has been withdrawn */
	withdrawnAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Classification of the advisory. */
["SecurityAdvisoryClassification"]:SecurityAdvisoryClassification;
	/** The connection type for SecurityAdvisory. */
["SecurityAdvisoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SecurityAdvisoryEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["SecurityAdvisory"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible ecosystems of a security vulnerability's package. */
["SecurityAdvisoryEcosystem"]:SecurityAdvisoryEcosystem;
	/** An edge in a connection. */
["SecurityAdvisoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["SecurityAdvisory"],
		__typename?: boolean | `@${string}`
}>;
	/** A GitHub Security Advisory Identifier */
["SecurityAdvisoryIdentifier"]: AliasType<{
	/** The identifier type, e.g. GHSA, CVE */
	type?:boolean | `@${string}`,
	/** The identifier */
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An advisory identifier to filter results on. */
["SecurityAdvisoryIdentifierFilter"]: {
	/** The identifier type. */
	type: ValueTypes["SecurityAdvisoryIdentifierType"] | Variable<any, string>,
	/** The identifier string. Supports exact or partial matching. */
	value: string | Variable<any, string>
};
	/** Identifier formats available for advisories. */
["SecurityAdvisoryIdentifierType"]:SecurityAdvisoryIdentifierType;
	/** Ordering options for security advisory connections */
["SecurityAdvisoryOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order security advisories by. */
	field: ValueTypes["SecurityAdvisoryOrderField"] | Variable<any, string>
};
	/** Properties by which security advisory connections can be ordered. */
["SecurityAdvisoryOrderField"]:SecurityAdvisoryOrderField;
	/** An individual package */
["SecurityAdvisoryPackage"]: AliasType<{
	/** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
	ecosystem?:boolean | `@${string}`,
	/** The package name */
	name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An individual package version */
["SecurityAdvisoryPackageVersion"]: AliasType<{
	/** The package name or version */
	identifier?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A GitHub Security Advisory Reference */
["SecurityAdvisoryReference"]: AliasType<{
	/** A publicly accessible reference */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Severity of the vulnerability. */
["SecurityAdvisorySeverity"]:SecurityAdvisorySeverity;
	/** An individual vulnerability within an Advisory */
["SecurityVulnerability"]: AliasType<{
	/** The Advisory associated with this Vulnerability */
	advisory?:ValueTypes["SecurityAdvisory"],
	/** The first version containing a fix for the vulnerability */
	firstPatchedVersion?:ValueTypes["SecurityAdvisoryPackageVersion"],
	/** A description of the vulnerable package */
	package?:ValueTypes["SecurityAdvisoryPackage"],
	/** The severity of the vulnerability within this package */
	severity?:boolean | `@${string}`,
	/** When the vulnerability was last updated */
	updatedAt?:boolean | `@${string}`,
	/** A string that describes the vulnerable package versions.
This string follows a basic syntax with a few forms.
+ `= 0.2.0` denotes a single vulnerable version.
+ `<= 1.0.8` denotes a version range up to and including the specified version
+ `< 0.1.11` denotes a version range up to, but excluding, the specified version
+ `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
+ `>= 0.0.1` denotes a version range with a known minimum, but no known maximum */
	vulnerableVersionRange?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SecurityVulnerability. */
["SecurityVulnerabilityConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SecurityVulnerabilityEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["SecurityVulnerability"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SecurityVulnerabilityEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["SecurityVulnerability"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for security vulnerability connections */
["SecurityVulnerabilityOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order security vulnerabilities by. */
	field: ValueTypes["SecurityVulnerabilityOrderField"] | Variable<any, string>
};
	/** Properties by which security vulnerability connections can be ordered. */
["SecurityVulnerabilityOrderField"]:SecurityVulnerabilityOrderField;
	/** Autogenerated input type of SetEnterpriseIdentityProvider */
["SetEnterpriseIdentityProviderInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The digest algorithm used to sign SAML requests for the identity provider. */
	digestMethod: ValueTypes["SamlDigestAlgorithm"] | Variable<any, string>,
	/** The ID of the enterprise on which to set an identity provider. */
	enterpriseId: string | Variable<any, string>,
	/** The x509 certificate used by the identity provider to sign assertions and responses. */
	idpCertificate: string | Variable<any, string>,
	/** The Issuer Entity ID for the SAML identity provider */
	issuer?: string | undefined | null | Variable<any, string>,
	/** The signature algorithm used to sign SAML requests for the identity provider. */
	signatureMethod: ValueTypes["SamlSignatureAlgorithm"] | Variable<any, string>,
	/** The URL endpoint for the identity provider's SAML SSO. */
	ssoUrl: ValueTypes["URI"] | Variable<any, string>
};
	/** Autogenerated return type of SetEnterpriseIdentityProvider */
["SetEnterpriseIdentityProviderPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The identity provider for the enterprise. */
	identityProvider?:ValueTypes["EnterpriseIdentityProvider"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of SetOrganizationInteractionLimit */
["SetOrganizationInteractionLimitInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** When this limit should expire. */
	expiry?: ValueTypes["RepositoryInteractionLimitExpiry"] | undefined | null | Variable<any, string>,
	/** The limit to set. */
	limit: ValueTypes["RepositoryInteractionLimit"] | Variable<any, string>,
	/** The ID of the organization to set a limit for. */
	organizationId: string | Variable<any, string>
};
	/** Autogenerated return type of SetOrganizationInteractionLimit */
["SetOrganizationInteractionLimitPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The organization that the interaction limit was set for. */
	organization?:ValueTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of SetRepositoryInteractionLimit */
["SetRepositoryInteractionLimitInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** When this limit should expire. */
	expiry?: ValueTypes["RepositoryInteractionLimitExpiry"] | undefined | null | Variable<any, string>,
	/** The limit to set. */
	limit: ValueTypes["RepositoryInteractionLimit"] | Variable<any, string>,
	/** The ID of the repository to set a limit for. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of SetRepositoryInteractionLimit */
["SetRepositoryInteractionLimitPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository that the interaction limit was set for. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of SetUserInteractionLimit */
["SetUserInteractionLimitInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** When this limit should expire. */
	expiry?: ValueTypes["RepositoryInteractionLimitExpiry"] | undefined | null | Variable<any, string>,
	/** The limit to set. */
	limit: ValueTypes["RepositoryInteractionLimit"] | Variable<any, string>,
	/** The ID of the user to set a limit for. */
	userId: string | Variable<any, string>
};
	/** Autogenerated return type of SetUserInteractionLimit */
["SetUserInteractionLimitPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The user that the interaction limit was set for. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an S/MIME signature on a Commit or Tag. */
["SmimeSignature"]: AliasType<{
	/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ValueTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a sort by field and direction. */
["SortBy"]: AliasType<{
	/** The direction of the sorting. Possible values are ASC and DESC. */
	direction?:boolean | `@${string}`,
	/** The id of the field by which the column is sorted. */
	field?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can sponsor others via GitHub Sponsors */
["Sponsor"]: AliasType<{		["...on Organization"] : ValueTypes["Organization"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Sponsor. */
["SponsorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SponsorEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Sponsor"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
["SponsorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Sponsor"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
["SponsorOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order sponsor entities by. */
	field: ValueTypes["SponsorOrderField"] | Variable<any, string>
};
	/** Properties by which sponsor connections can be ordered. */
["SponsorOrderField"]:SponsorOrderField;
	/** Entities that can be sponsored through GitHub Sponsors */
["Sponsorable"]:AliasType<{
		/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents?:boolean | `@${string}`,
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing?:boolean | `@${string}`,
isSponsoredBy?: [{	/** The target account's login. */
	accountLogin: string | Variable<any, string>},boolean | `@${string}`],
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer?:boolean | `@${string}`,
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents?:boolean | `@${string}`,
sponsoring?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the users and organizations returned from the connection. */
	orderBy?: ValueTypes["SponsorOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorConnection"]],
sponsors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsors returned from the connection. */
	orderBy?: ValueTypes["SponsorOrder"] | undefined | null | Variable<any, string>,	/** If given, will filter for sponsors at the given tier. Will only return
sponsors whose tier the viewer is permitted to see. */
	tierId?: string | undefined | null | Variable<any, string>},ValueTypes["SponsorConnection"]],
sponsorsActivities?: [{	/** Filter activities to only the specified actions. */
	actions?: Array<ValueTypes["SponsorsActivityAction"]> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for activity returned from the connection. */
	orderBy?: ValueTypes["SponsorsActivityOrder"] | undefined | null | Variable<any, string>,	/** Filter activities returned to only those that occurred in the most recent
specified time period. Set to ALL to avoid filtering by when the activity occurred. */
	period?: ValueTypes["SponsorsActivityPeriod"] | undefined | null | Variable<any, string>},ValueTypes["SponsorsActivityConnection"]],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?:ValueTypes["SponsorsListing"],
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?:ValueTypes["Sponsorship"],
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?:ValueTypes["Sponsorship"],
sponsorshipNewsletters?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorship updates returned from the connection. */
	orderBy?: ValueTypes["SponsorshipNewsletterOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipNewsletterConnection"]],
sponsorshipsAsMaintainer?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Whether or not to include private sponsorships in the result set */
	includePrivate?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ValueTypes["SponsorshipOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipConnection"]],
sponsorshipsAsSponsor?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ValueTypes["SponsorshipOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipConnection"]],
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor?:boolean | `@${string}`,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring?:boolean | `@${string}`;
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["Sponsorable"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["Sponsorable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can be sponsored via GitHub Sponsors */
["SponsorableItem"]: AliasType<{		["...on Organization"] : ValueTypes["Organization"],
		["...on User"] : ValueTypes["User"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SponsorableItem. */
["SponsorableItemConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SponsorableItemEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["SponsorableItem"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorableItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["SponsorableItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
["SponsorableOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order sponsorable entities by. */
	field: ValueTypes["SponsorableOrderField"] | Variable<any, string>
};
	/** Properties by which sponsorable connections can be ordered. */
["SponsorableOrderField"]:SponsorableOrderField;
	/** An event related to sponsorship activity. */
["SponsorsActivity"]: AliasType<{
	/** What action this activity indicates took place. */
	action?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The tier that the sponsorship used to use, for tier change events. */
	previousSponsorsTier?:ValueTypes["SponsorsTier"],
	/** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
	sponsor?:ValueTypes["Sponsor"],
	/** The user or organization that is being sponsored, the maintainer. */
	sponsorable?:ValueTypes["Sponsorable"],
	/** The associated sponsorship tier. */
	sponsorsTier?:ValueTypes["SponsorsTier"],
	/** The timestamp of this event. */
	timestamp?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible actions that GitHub Sponsors activities can represent. */
["SponsorsActivityAction"]:SponsorsActivityAction;
	/** The connection type for SponsorsActivity. */
["SponsorsActivityConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SponsorsActivityEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["SponsorsActivity"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorsActivityEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["SponsorsActivity"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for GitHub Sponsors activity connections. */
["SponsorsActivityOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order activity by. */
	field: ValueTypes["SponsorsActivityOrderField"] | Variable<any, string>
};
	/** Properties by which GitHub Sponsors activity connections can be ordered. */
["SponsorsActivityOrderField"]:SponsorsActivityOrderField;
	/** The possible time periods for which Sponsors activities can be requested. */
["SponsorsActivityPeriod"]:SponsorsActivityPeriod;
	/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
["SponsorsGoal"]: AliasType<{
	/** A description of the goal from the maintainer. */
	description?:boolean | `@${string}`,
	/** What the objective of this goal is. */
	kind?:boolean | `@${string}`,
	/** The percentage representing how complete this goal is, between 0-100. */
	percentComplete?:boolean | `@${string}`,
	/** What the goal amount is. Represents an amount in USD for monthly sponsorship
amount goals. Represents a count of unique sponsors for total sponsors count goals. */
	targetValue?:boolean | `@${string}`,
	/** A brief summary of the kind and target value of this goal. */
	title?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The different kinds of goals a GitHub Sponsors member can have. */
["SponsorsGoalKind"]:SponsorsGoalKind;
	/** A GitHub Sponsors listing. */
["SponsorsListing"]: AliasType<{
	/** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
	activeGoal?:ValueTypes["SponsorsGoal"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for the Sponsors dashboard for this Sponsors listing. */
	dashboardResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the Sponsors dashboard for this Sponsors listing. */
	dashboardUrl?:boolean | `@${string}`,
	/** The full description of the listing. */
	fullDescription?:boolean | `@${string}`,
	/** The full description of the listing rendered to HTML. */
	fullDescriptionHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this listing is publicly visible. */
	isPublic?:boolean | `@${string}`,
	/** The listing's full name. */
	name?:boolean | `@${string}`,
	/** A future date on which this listing is eligible to receive a payout. */
	nextPayoutDate?:boolean | `@${string}`,
	/** The HTTP path for this Sponsors listing. */
	resourcePath?:boolean | `@${string}`,
	/** The short description of the listing. */
	shortDescription?:boolean | `@${string}`,
	/** The short name of the listing. */
	slug?:boolean | `@${string}`,
	/** The entity this listing represents who can be sponsored on GitHub Sponsors. */
	sponsorable?:ValueTypes["Sponsorable"],
tiers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for Sponsors tiers returned from the connection. */
	orderBy?: ValueTypes["SponsorsTierOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorsTierConnection"]],
	/** The HTTP URL for this Sponsors listing. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
["SponsorsTier"]: AliasType<{
	/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
	adminInfo?:ValueTypes["SponsorsTierAdminInfo"],
	/** Get a different tier for this tier's maintainer that is at the same frequency
as this tier but with an equal or lesser cost. Returns the published tier with
the monthly price closest to this tier's without going over. */
	closestLesserValueTier?:ValueTypes["SponsorsTier"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The description of the tier. */
	description?:boolean | `@${string}`,
	/** The tier description rendered to HTML */
	descriptionHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this tier was chosen at checkout time by the sponsor rather than
defined ahead of time by the maintainer who manages the Sponsors listing. */
	isCustomAmount?:boolean | `@${string}`,
	/** Whether this tier is only for use with one-time sponsorships. */
	isOneTime?:boolean | `@${string}`,
	/** How much this tier costs per month in cents. */
	monthlyPriceInCents?:boolean | `@${string}`,
	/** How much this tier costs per month in USD. */
	monthlyPriceInDollars?:boolean | `@${string}`,
	/** The name of the tier. */
	name?:boolean | `@${string}`,
	/** The sponsors listing that this tier belongs to. */
	sponsorsListing?:ValueTypes["SponsorsListing"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
["SponsorsTierAdminInfo"]: AliasType<{
sponsorships?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Whether or not to include private sponsorships in the result set */
	includePrivate?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ValueTypes["SponsorshipOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SponsorsTier. */
["SponsorsTierConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SponsorsTierEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["SponsorsTier"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorsTierEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["SponsorsTier"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Sponsors tiers connections. */
["SponsorsTierOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order tiers by. */
	field: ValueTypes["SponsorsTierOrderField"] | Variable<any, string>
};
	/** Properties by which Sponsors tiers connections can be ordered. */
["SponsorsTierOrderField"]:SponsorsTierOrderField;
	/** A sponsorship relationship between a sponsor and a maintainer */
["Sponsorship"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
	isOneTimePayment?:boolean | `@${string}`,
	/** Check if the sponsor has chosen to receive sponsorship update emails sent from
the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
	isSponsorOptedIntoEmail?:boolean | `@${string}`,
	/** The entity that is being sponsored */
	maintainer?:ValueTypes["User"],
	/** The privacy level for this sponsorship. */
	privacyLevel?:boolean | `@${string}`,
	/** The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user. */
	sponsor?:ValueTypes["User"],
	/** The user or organization that is sponsoring, if you have permission to view them. */
	sponsorEntity?:ValueTypes["Sponsor"],
	/** The entity that is being sponsored */
	sponsorable?:ValueTypes["Sponsorable"],
	/** The associated sponsorship tier */
	tier?:ValueTypes["SponsorsTier"],
	/** Identifies the date and time when the current tier was chosen for this sponsorship. */
	tierSelectedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Sponsorship. */
["SponsorshipConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SponsorshipEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Sponsorship"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** The total amount in cents of all recurring sponsorships in the connection
whose amount you can view. Does not include one-time sponsorships. */
	totalRecurringMonthlyPriceInCents?:boolean | `@${string}`,
	/** The total amount in USD of all recurring sponsorships in the connection whose
amount you can view. Does not include one-time sponsorships. */
	totalRecurringMonthlyPriceInDollars?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorshipEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Sponsorship"],
		__typename?: boolean | `@${string}`
}>;
	/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
["SponsorshipNewsletter"]: AliasType<{
	/** The contents of the newsletter, the message the sponsorable wanted to give. */
	body?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Indicates if the newsletter has been made available to sponsors. */
	isPublished?:boolean | `@${string}`,
	/** The user or organization this newsletter is from. */
	sponsorable?:ValueTypes["Sponsorable"],
	/** The subject of the newsletter, what it's about. */
	subject?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SponsorshipNewsletter. */
["SponsorshipNewsletterConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SponsorshipNewsletterEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["SponsorshipNewsletter"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorshipNewsletterEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["SponsorshipNewsletter"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for sponsorship newsletter connections. */
["SponsorshipNewsletterOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order sponsorship newsletters by. */
	field: ValueTypes["SponsorshipNewsletterOrderField"] | Variable<any, string>
};
	/** Properties by which sponsorship update connections can be ordered. */
["SponsorshipNewsletterOrderField"]:SponsorshipNewsletterOrderField;
	/** Ordering options for sponsorship connections. */
["SponsorshipOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order sponsorship by. */
	field: ValueTypes["SponsorshipOrderField"] | Variable<any, string>
};
	/** Properties by which sponsorship connections can be ordered. */
["SponsorshipOrderField"]:SponsorshipOrderField;
	/** The privacy of a sponsorship */
["SponsorshipPrivacy"]:SponsorshipPrivacy;
	/** The possible default commit messages for squash merges. */
["SquashMergeCommitMessage"]:SquashMergeCommitMessage;
	/** The possible default commit titles for squash merges. */
["SquashMergeCommitTitle"]:SquashMergeCommitTitle;
	/** Represents an SSH signature on a Commit or Tag. */
["SshSignature"]: AliasType<{
	/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Hex-encoded fingerprint of the key that signed this object. */
	keyFingerprint?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ValueTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which star connections can be ordered. */
["StarOrder"]: {
	/** The direction in which to order nodes. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order nodes by. */
	field: ValueTypes["StarOrderField"] | Variable<any, string>
};
	/** Properties by which star connections can be ordered. */
["StarOrderField"]:StarOrderField;
	/** The connection type for User. */
["StargazerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["StargazerEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user that's starred a repository. */
["StargazerEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ValueTypes["User"],
	/** Identifies when the item was starred. */
	starredAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Things that can be starred. */
["Starrable"]:AliasType<{
		id?:boolean | `@${string}`,
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount?:boolean | `@${string}`,
stargazers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["StarOrder"] | undefined | null | Variable<any, string>},ValueTypes["StargazerConnection"]],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred?:boolean | `@${string}`;
		['...on Gist']?: Omit<ValueTypes["Gist"],keyof ValueTypes["Starrable"]>;
		['...on Repository']?: Omit<ValueTypes["Repository"],keyof ValueTypes["Starrable"]>;
		['...on Topic']?: Omit<ValueTypes["Topic"],keyof ValueTypes["Starrable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Repository. */
["StarredRepositoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["StarredRepositoryEdge"],
	/** Is the list of stars for this user truncated? This is true for users that have many stars. */
	isOverLimit?:boolean | `@${string}`,
	/** A list of nodes. */
	nodes?:ValueTypes["Repository"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a starred repository. */
["StarredRepositoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ValueTypes["Repository"],
	/** Identifies when the item was starred. */
	starredAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of StartRepositoryMigration */
["StartRepositoryMigrationInput"]: {
	/** The Octoshift migration source access token. */
	accessToken: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Whether to continue the migration on error */
	continueOnError?: boolean | undefined | null | Variable<any, string>,
	/** The signed URL to access the user-uploaded git archive */
	gitArchiveUrl?: string | undefined | null | Variable<any, string>,
	/** The GitHub personal access token of the user importing to the target repository. */
	githubPat?: string | undefined | null | Variable<any, string>,
	/** Whether to lock the source repository. */
	lockSource?: boolean | undefined | null | Variable<any, string>,
	/** The signed URL to access the user-uploaded metadata archive */
	metadataArchiveUrl?: string | undefined | null | Variable<any, string>,
	/** The ID of the organization that will own the imported repository. */
	ownerId: string | Variable<any, string>,
	/** The name of the imported repository. */
	repositoryName: string | Variable<any, string>,
	/** Whether to skip migrating releases for the repository. */
	skipReleases?: boolean | undefined | null | Variable<any, string>,
	/** The ID of the Octoshift migration source. */
	sourceId: string | Variable<any, string>,
	/** The Octoshift migration source repository URL. */
	sourceRepositoryUrl: ValueTypes["URI"] | Variable<any, string>,
	/** The visibility of the imported repository. */
	targetRepoVisibility?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of StartRepositoryMigration */
["StartRepositoryMigrationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new Octoshift repository migration. */
	repositoryMigration?:ValueTypes["RepositoryMigration"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a commit status. */
["Status"]: AliasType<{
combinedContexts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["StatusCheckRollupContextConnection"]],
	/** The commit this status is attached to. */
	commit?:ValueTypes["Commit"],
context?: [{	/** The context name. */
	name: string | Variable<any, string>},ValueTypes["StatusContext"]],
	/** The individual status contexts for this commit. */
	contexts?:ValueTypes["StatusContext"],
	id?:boolean | `@${string}`,
	/** The combined commit status. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents the rollup for both the check runs and status for a commit. */
["StatusCheckRollup"]: AliasType<{
	/** The commit the status and check runs are attached to. */
	commit?:ValueTypes["Commit"],
contexts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["StatusCheckRollupContextConnection"]],
	id?:boolean | `@${string}`,
	/** The combined status for the commit. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be inside a StatusCheckRollup context. */
["StatusCheckRollupContext"]: AliasType<{		["...on CheckRun"] : ValueTypes["CheckRun"],
		["...on StatusContext"] : ValueTypes["StatusContext"]
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for StatusCheckRollupContext. */
["StatusCheckRollupContextConnection"]: AliasType<{
	/** The number of check runs in this rollup. */
	checkRunCount?:boolean | `@${string}`,
	/** Counts of check runs by state. */
	checkRunCountsByState?:ValueTypes["CheckRunStateCount"],
	/** A list of edges. */
	edges?:ValueTypes["StatusCheckRollupContextEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["StatusCheckRollupContext"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** The number of status contexts in this rollup. */
	statusContextCount?:boolean | `@${string}`,
	/** Counts of status contexts by state. */
	statusContextCountsByState?:ValueTypes["StatusContextStateCount"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["StatusCheckRollupContextEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["StatusCheckRollupContext"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an individual commit status context */
["StatusContext"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** This commit this status context is attached to. */
	commit?:ValueTypes["Commit"],
	/** The name of this status context. */
	context?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created this status context. */
	creator?:ValueTypes["Actor"],
	/** The description for this status context. */
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
isRequired?: [{	/** The id of the pull request this is required for */
	pullRequestId?: string | undefined | null | Variable<any, string>,	/** The number of the pull request this is required for */
	pullRequestNumber?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The state of this status context. */
	state?:boolean | `@${string}`,
	/** The URL for this status context. */
	targetUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a count of the state of a status context. */
["StatusContextStateCount"]: AliasType<{
	/** The number of statuses with this state. */
	count?:boolean | `@${string}`,
	/** The state of a status context. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible commit status states. */
["StatusState"]:StatusState;
	/** Autogenerated input type of SubmitPullRequestReview */
["SubmitPullRequestReviewInput"]: {
	/** The text field to set on the Pull Request Review. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The event to send to the Pull Request Review. */
	event: ValueTypes["PullRequestReviewEvent"] | Variable<any, string>,
	/** The Pull Request ID to submit any pending reviews. */
	pullRequestId?: string | undefined | null | Variable<any, string>,
	/** The Pull Request Review ID to submit. */
	pullRequestReviewId?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of SubmitPullRequestReview */
["SubmitPullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The submitted pull request review. */
	pullRequestReview?:ValueTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** A pointer to a repository at a specific revision embedded inside another repository. */
["Submodule"]: AliasType<{
	/** The branch of the upstream submodule for tracking updates */
	branch?:boolean | `@${string}`,
	/** The git URL of the submodule repository */
	gitUrl?:boolean | `@${string}`,
	/** The name of the submodule in .gitmodules */
	name?:boolean | `@${string}`,
	/** The path in the superproject that this submodule is located in */
	path?:boolean | `@${string}`,
	/** The commit revision of the subproject repository being tracked by the submodule */
	subprojectCommitOid?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Submodule. */
["SubmoduleConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["SubmoduleEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Submodule"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SubmoduleEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Submodule"],
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can be subscribed to for web and email notifications. */
["Subscribable"]:AliasType<{
		id?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`;
		['...on Commit']?: Omit<ValueTypes["Commit"],keyof ValueTypes["Subscribable"]>;
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["Subscribable"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["Subscribable"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["Subscribable"]>;
		['...on Repository']?: Omit<ValueTypes["Repository"],keyof ValueTypes["Subscribable"]>;
		['...on Team']?: Omit<ValueTypes["Team"],keyof ValueTypes["Subscribable"]>;
		['...on TeamDiscussion']?: Omit<ValueTypes["TeamDiscussion"],keyof ValueTypes["Subscribable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'subscribed' event on a given `Subscribable`. */
["SubscribedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Object referenced by event. */
	subscribable?:ValueTypes["Subscribable"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states of a subscription. */
["SubscriptionState"]:SubscriptionState;
	/** A suggestion to review a pull request based on a user's commit history and review comments. */
["SuggestedReviewer"]: AliasType<{
	/** Is this suggestion based on past commits? */
	isAuthor?:boolean | `@${string}`,
	/** Is this suggestion based on past review comments? */
	isCommenter?:boolean | `@${string}`,
	/** Identifies the user suggested to review the pull request. */
	reviewer?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git tag. */
["Tag"]: AliasType<{
	/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The Git tag message. */
	message?:boolean | `@${string}`,
	/** The Git tag name. */
	name?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The Repository the Git object belongs to */
	repository?:ValueTypes["Repository"],
	/** Details about the tag author. */
	tagger?:ValueTypes["GitActor"],
	/** The Git object the tag points to. */
	target?:ValueTypes["GitObject"],
		__typename?: boolean | `@${string}`
}>;
	/** A team of users in an organization. */
["Team"]: AliasType<{
ancestors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["TeamConnection"]],
avatarUrl?: [{	/** The size in pixels of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
childTeams?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Whether to list immediate child teams or all descendant child teams. */
	immediateOnly?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["TeamOrder"] | undefined | null | Variable<any, string>,	/** User logins to filter by */
	userLogins?: Array<string> | undefined | null | Variable<any, string>},ValueTypes["TeamConnection"]],
	/** The slug corresponding to the organization and team. */
	combinedSlug?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The description of the team. */
	description?:boolean | `@${string}`,
discussion?: [{	/** The sequence number of the discussion to find. */
	number: number | Variable<any, string>},ValueTypes["TeamDiscussion"]],
discussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** If provided, filters discussions according to whether or not they are pinned. */
	isPinned?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["TeamDiscussionOrder"] | undefined | null | Variable<any, string>},ValueTypes["TeamDiscussionConnection"]],
	/** The HTTP path for team discussions */
	discussionsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for team discussions */
	discussionsUrl?:boolean | `@${string}`,
	/** The HTTP path for editing this team */
	editTeamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for editing this team */
	editTeamUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
invitations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["OrganizationInvitationConnection"]],
memberStatuses?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for user statuses returned from the connection. */
	orderBy?: ValueTypes["UserStatusOrder"] | undefined | null | Variable<any, string>},ValueTypes["UserStatusConnection"]],
members?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter by membership type */
	membership?: ValueTypes["TeamMembershipType"] | undefined | null | Variable<any, string>,	/** Order for the connection. */
	orderBy?: ValueTypes["TeamMemberOrder"] | undefined | null | Variable<any, string>,	/** The search string to look for. */
	query?: string | undefined | null | Variable<any, string>,	/** Filter by team member role */
	role?: ValueTypes["TeamMemberRole"] | undefined | null | Variable<any, string>},ValueTypes["TeamMemberConnection"]],
	/** The HTTP path for the team' members */
	membersResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the team' members */
	membersUrl?:boolean | `@${string}`,
	/** The name of the team. */
	name?:boolean | `@${string}`,
	/** The HTTP path creating a new team */
	newTeamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL creating a new team */
	newTeamUrl?:boolean | `@${string}`,
	/** The organization that owns this team. */
	organization?:ValueTypes["Organization"],
	/** The parent team of the team. */
	parentTeam?:ValueTypes["Team"],
	/** The level of privacy the team has. */
	privacy?:boolean | `@${string}`,
projectV2?: [{	/** The Project number. */
	number: number | Variable<any, string>},ValueTypes["ProjectV2"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** How to order the returned projects. */
	orderBy?: ValueTypes["ProjectV2Order"] | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
repositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for the connection. */
	orderBy?: ValueTypes["TeamRepositoryOrder"] | undefined | null | Variable<any, string>,	/** The search string to look for. Repositories will be returned where the name contains your search string. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["TeamRepositoryConnection"]],
	/** The HTTP path for this team's repositories */
	repositoriesResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team's repositories */
	repositoriesUrl?:boolean | `@${string}`,
	/** The HTTP path for this team */
	resourcePath?:boolean | `@${string}`,
	/** What algorithm is used for review assignment for this team */
	reviewRequestDelegationAlgorithm?:boolean | `@${string}`,
	/** True if review assignment is enabled for this team */
	reviewRequestDelegationEnabled?:boolean | `@${string}`,
	/** How many team members are required for review assignment for this team */
	reviewRequestDelegationMemberCount?:boolean | `@${string}`,
	/** When assigning team members via delegation, whether the entire team should be notified as well. */
	reviewRequestDelegationNotifyTeam?:boolean | `@${string}`,
	/** The slug corresponding to the team. */
	slug?:boolean | `@${string}`,
	/** The HTTP path for this team's teams */
	teamsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team's teams */
	teamsUrl?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	url?:boolean | `@${string}`,
	/** Team is adminable by the viewer. */
	viewerCanAdminister?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a team.add_member event. */
["TeamAddMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ValueTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a team.add_repository event. */
["TeamAddRepositoryAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ValueTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for an audit entry with action team.* */
["TeamAuditEntryData"]:AliasType<{
		/** The team associated with the action */
	team?:ValueTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`;
		['...on OrgRestoreMemberMembershipTeamAuditEntryData']?: Omit<ValueTypes["OrgRestoreMemberMembershipTeamAuditEntryData"],keyof ValueTypes["TeamAuditEntryData"]>;
		['...on TeamAddMemberAuditEntry']?: Omit<ValueTypes["TeamAddMemberAuditEntry"],keyof ValueTypes["TeamAuditEntryData"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ValueTypes["TeamAddRepositoryAuditEntry"],keyof ValueTypes["TeamAuditEntryData"]>;
		['...on TeamChangeParentTeamAuditEntry']?: Omit<ValueTypes["TeamChangeParentTeamAuditEntry"],keyof ValueTypes["TeamAuditEntryData"]>;
		['...on TeamRemoveMemberAuditEntry']?: Omit<ValueTypes["TeamRemoveMemberAuditEntry"],keyof ValueTypes["TeamAuditEntryData"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ValueTypes["TeamRemoveRepositoryAuditEntry"],keyof ValueTypes["TeamAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a team.change_parent_team event. */
["TeamChangeParentTeamAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The new parent team. */
	parentTeam?:ValueTypes["Team"],
	/** The name of the new parent team */
	parentTeamName?:boolean | `@${string}`,
	/** The name of the former parent team */
	parentTeamNameWas?:boolean | `@${string}`,
	/** The HTTP path for the parent team */
	parentTeamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the parent team */
	parentTeamUrl?:boolean | `@${string}`,
	/** The former parent team. */
	parentTeamWas?:ValueTypes["Team"],
	/** The HTTP path for the previous parent team */
	parentTeamWasResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the previous parent team */
	parentTeamWasUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ValueTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Team. */
["TeamConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["TeamEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Team"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A team discussion. */
["TeamDiscussion"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the discussion's team. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the discussion body hash. */
	bodyVersion?:boolean | `@${string}`,
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** When provided, filters the connection such that results begin with the comment with this number. */
	fromComment?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["TeamDiscussionCommentOrder"] | undefined | null | Variable<any, string>},ValueTypes["TeamDiscussionCommentConnection"]],
	/** The HTTP path for discussion comments */
	commentsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for discussion comments */
	commentsUrl?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Whether or not the discussion is pinned. */
	isPinned?:boolean | `@${string}`,
	/** Whether or not the discussion is only visible to team members and org admins. */
	isPrivate?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Identifies the discussion within its team. */
	number?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** The HTTP path for this discussion */
	resourcePath?:boolean | `@${string}`,
	/** The team that defines the context of this discussion. */
	team?:ValueTypes["Team"],
	/** The title of the discussion */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this discussion */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Whether or not the current viewer can pin this discussion. */
	viewerCanPin?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A comment on a team discussion. */
["TeamDiscussionComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ValueTypes["Actor"],
	/** Author's association with the comment's team. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** The current version of the body content. */
	bodyVersion?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The discussion this comment is about. */
	discussion?:ValueTypes["TeamDiscussion"],
	/** The actor who edited the comment. */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Identifies the comment number. */
	number?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ValueTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Allows filtering Reactions by emoji. */
	content?: ValueTypes["ReactionContent"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ValueTypes["ReactionOrder"] | undefined | null | Variable<any, string>},ValueTypes["ReactionConnection"]],
	/** The HTTP path for this comment */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this comment */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for TeamDiscussionComment. */
["TeamDiscussionCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["TeamDiscussionCommentEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["TeamDiscussionComment"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["TeamDiscussionCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["TeamDiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which team discussion comment connections can be ordered. */
["TeamDiscussionCommentOrder"]: {
	/** The direction in which to order nodes. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field by which to order nodes. */
	field: ValueTypes["TeamDiscussionCommentOrderField"] | Variable<any, string>
};
	/** Properties by which team discussion comment connections can be ordered. */
["TeamDiscussionCommentOrderField"]:TeamDiscussionCommentOrderField;
	/** The connection type for TeamDiscussion. */
["TeamDiscussionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["TeamDiscussionEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["TeamDiscussion"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["TeamDiscussionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["TeamDiscussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which team discussion connections can be ordered. */
["TeamDiscussionOrder"]: {
	/** The direction in which to order nodes. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field by which to order nodes. */
	field: ValueTypes["TeamDiscussionOrderField"] | Variable<any, string>
};
	/** Properties by which team discussion connections can be ordered. */
["TeamDiscussionOrderField"]:TeamDiscussionOrderField;
	/** An edge in a connection. */
["TeamEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["Team"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["TeamMemberConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["TeamMemberEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user who is a member of a team. */
["TeamMemberEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The HTTP path to the organization's member access page. */
	memberAccessResourcePath?:boolean | `@${string}`,
	/** The HTTP URL to the organization's member access page. */
	memberAccessUrl?:boolean | `@${string}`,
	node?:ValueTypes["User"],
	/** The role the member has on the team. */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for team member connections */
["TeamMemberOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order team members by. */
	field: ValueTypes["TeamMemberOrderField"] | Variable<any, string>
};
	/** Properties by which team member connections can be ordered. */
["TeamMemberOrderField"]:TeamMemberOrderField;
	/** The possible team member roles; either 'maintainer' or 'member'. */
["TeamMemberRole"]:TeamMemberRole;
	/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
["TeamMembershipType"]:TeamMembershipType;
	/** Ways in which team connections can be ordered. */
["TeamOrder"]: {
	/** The direction in which to order nodes. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field in which to order nodes by. */
	field: ValueTypes["TeamOrderField"] | Variable<any, string>
};
	/** Properties by which team connections can be ordered. */
["TeamOrderField"]:TeamOrderField;
	/** The possible team privacy values. */
["TeamPrivacy"]:TeamPrivacy;
	/** Audit log entry for a team.remove_member event. */
["TeamRemoveMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ValueTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a team.remove_repository event. */
["TeamRemoveRepositoryAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ValueTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ValueTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ValueTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ValueTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ValueTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ValueTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Repository. */
["TeamRepositoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["TeamRepositoryEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["Repository"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a team repository. */
["TeamRepositoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ValueTypes["Repository"],
	/** The permission level the team has on the repository */
	permission?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for team repository connections */
["TeamRepositoryOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order repositories by. */
	field: ValueTypes["TeamRepositoryOrderField"] | Variable<any, string>
};
	/** Properties by which team repository connections can be ordered. */
["TeamRepositoryOrderField"]:TeamRepositoryOrderField;
	/** The possible team review assignment algorithms */
["TeamReviewAssignmentAlgorithm"]:TeamReviewAssignmentAlgorithm;
	/** The role of a user on a team. */
["TeamRole"]:TeamRole;
	/** A text match within a search result. */
["TextMatch"]: AliasType<{
	/** The specific text fragment within the property matched on. */
	fragment?:boolean | `@${string}`,
	/** Highlights within the matched fragment. */
	highlights?:ValueTypes["TextMatchHighlight"],
	/** The property matched on. */
	property?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a single highlight in a search result match. */
["TextMatchHighlight"]: AliasType<{
	/** The indice in the fragment where the matched text begins. */
	beginIndice?:boolean | `@${string}`,
	/** The indice in the fragment where the matched text ends. */
	endIndice?:boolean | `@${string}`,
	/** The text matched. */
	text?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A topic aggregates entities that are related to a subject. */
["Topic"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The topic's name. */
	name?:boolean | `@${string}`,
relatedTopics?: [{	/** How many topics to return. */
	first?: number | undefined | null | Variable<any, string>},ValueTypes["Topic"]],
repositories?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories returned from the connection */
	orderBy?: ValueTypes["RepositoryOrder"] | undefined | null | Variable<any, string>,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to privacy */
	privacy?: ValueTypes["RepositoryPrivacy"] | undefined | null | Variable<any, string>,	/** If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned. */
	sponsorableOnly?: boolean | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount?:boolean | `@${string}`,
stargazers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["StarOrder"] | undefined | null | Variable<any, string>},ValueTypes["StargazerConnection"]],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for an audit entry with a topic. */
["TopicAuditEntryData"]:AliasType<{
		/** The name of the topic added to the repository */
	topic?:ValueTypes["Topic"],
	/** The name of the topic added to the repository */
	topicName?:boolean | `@${string}`;
		['...on RepoAddTopicAuditEntry']?: Omit<ValueTypes["RepoAddTopicAuditEntry"],keyof ValueTypes["TopicAuditEntryData"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ValueTypes["RepoRemoveTopicAuditEntry"],keyof ValueTypes["TopicAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Reason that the suggested topic is declined. */
["TopicSuggestionDeclineReason"]:TopicSuggestionDeclineReason;
	/** The possible states of a tracked issue. */
["TrackedIssueStates"]:TrackedIssueStates;
	/** Autogenerated input type of TransferIssue */
["TransferIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Whether to create labels if they don't exist in the target repository (matched by name) */
	createLabelsIfMissing?: boolean | undefined | null | Variable<any, string>,
	/** The Node ID of the issue to be transferred */
	issueId: string | Variable<any, string>,
	/** The Node ID of the repository the issue should be transferred to */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of TransferIssue */
["TransferIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was transferred */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'transferred' event on a given issue or pull request. */
["TransferredEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The repository this came from */
	fromRepository?:ValueTypes["Repository"],
	id?:boolean | `@${string}`,
	/** Identifies the issue associated with the event. */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git tree. */
["Tree"]: AliasType<{
	/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	/** A list of tree entries. */
	entries?:ValueTypes["TreeEntry"],
	id?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The Repository the Git object belongs to */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git tree entry. */
["TreeEntry"]: AliasType<{
	/** The extension of the file */
	extension?:boolean | `@${string}`,
	/** Whether or not this tree entry is generated */
	isGenerated?:boolean | `@${string}`,
	/** The programming language this file is written in. */
	language?:ValueTypes["Language"],
	/** Number of lines in the file. */
	lineCount?:boolean | `@${string}`,
	/** Entry file mode. */
	mode?:boolean | `@${string}`,
	/** Entry file name. */
	name?:boolean | `@${string}`,
	/** Entry file object. */
	object?:ValueTypes["GitObject"],
	/** Entry file Git object ID. */
	oid?:boolean | `@${string}`,
	/** The full path of the file. */
	path?:boolean | `@${string}`,
	/** The Repository the tree entry belongs to */
	repository?:ValueTypes["Repository"],
	/** Entry byte size */
	size?:boolean | `@${string}`,
	/** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
	submodule?:ValueTypes["Submodule"],
	/** Entry file type. */
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
["URI"]:unknown;
	/** Autogenerated input type of UnarchiveRepository */
["UnarchiveRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the repository to unarchive. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of UnarchiveRepository */
["UnarchiveRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository that was unarchived. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unassigned' event on any assignable object. */
["UnassignedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the assignable associated with the event. */
	assignable?:ValueTypes["Assignable"],
	/** Identifies the user or mannequin that was unassigned. */
	assignee?:ValueTypes["Assignee"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the subject (user) who was unassigned. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnfollowOrganization */
["UnfollowOrganizationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the organization to unfollow. */
	organizationId: string | Variable<any, string>
};
	/** Autogenerated return type of UnfollowOrganization */
["UnfollowOrganizationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The organization that was unfollowed. */
	organization?:ValueTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnfollowUser */
["UnfollowUserInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the user to unfollow. */
	userId: string | Variable<any, string>
};
	/** Autogenerated return type of UnfollowUser */
["UnfollowUserPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The user that was unfollowed. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a type that can be retrieved by a URL. */
["UniformResourceLocatable"]:AliasType<{
		/** The HTML path to this resource. */
	resourcePath?:boolean | `@${string}`,
	/** The URL to this resource. */
	url?:boolean | `@${string}`;
		['...on Bot']?: Omit<ValueTypes["Bot"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on CheckRun']?: Omit<ValueTypes["CheckRun"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on ClosedEvent']?: Omit<ValueTypes["ClosedEvent"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on Commit']?: Omit<ValueTypes["Commit"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on ConvertToDraftEvent']?: Omit<ValueTypes["ConvertToDraftEvent"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on CrossReferencedEvent']?: Omit<ValueTypes["CrossReferencedEvent"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on Gist']?: Omit<ValueTypes["Gist"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on Mannequin']?: Omit<ValueTypes["Mannequin"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on MergedEvent']?: Omit<ValueTypes["MergedEvent"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on Milestone']?: Omit<ValueTypes["Milestone"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on Organization']?: Omit<ValueTypes["Organization"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on PullRequestCommit']?: Omit<ValueTypes["PullRequestCommit"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on ReadyForReviewEvent']?: Omit<ValueTypes["ReadyForReviewEvent"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on Release']?: Omit<ValueTypes["Release"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on Repository']?: Omit<ValueTypes["Repository"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on RepositoryTopic']?: Omit<ValueTypes["RepositoryTopic"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on ReviewDismissedEvent']?: Omit<ValueTypes["ReviewDismissedEvent"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on TeamDiscussion']?: Omit<ValueTypes["TeamDiscussion"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on TeamDiscussionComment']?: Omit<ValueTypes["TeamDiscussionComment"],keyof ValueTypes["UniformResourceLocatable"]>;
		['...on User']?: Omit<ValueTypes["User"],keyof ValueTypes["UniformResourceLocatable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents an unknown signature on a Commit or Tag. */
["UnknownSignature"]: AliasType<{
	/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ValueTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unlabeled' event on a given issue or pull request. */
["UnlabeledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the label associated with the 'unlabeled' event. */
	label?:ValueTypes["Label"],
	/** Identifies the `Labelable` associated with the event. */
	labelable?:ValueTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnlinkRepositoryFromProject */
["UnlinkRepositoryFromProjectInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Project linked to the Repository. */
	projectId: string | Variable<any, string>,
	/** The ID of the Repository linked to the Project. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of UnlinkRepositoryFromProject */
["UnlinkRepositoryFromProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The linked Project. */
	project?:ValueTypes["Project"],
	/** The linked Repository. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnlockLockable */
["UnlockLockableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the item to be unlocked. */
	lockableId: string | Variable<any, string>
};
	/** Autogenerated return type of UnlockLockable */
["UnlockLockablePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item that was unlocked. */
	unlockedRecord?:ValueTypes["Lockable"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unlocked' event on a given issue or pull request. */
["UnlockedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Object that was unlocked. */
	lockable?:ValueTypes["Lockable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
["UnmarkDiscussionCommentAsAnswerInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the discussion comment to unmark as an answer. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */
["UnmarkDiscussionCommentAsAnswerPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion that includes the comment. */
	discussion?:ValueTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnmarkFileAsViewed */
["UnmarkFileAsViewedInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The path of the file to mark as unviewed */
	path: string | Variable<any, string>,
	/** The Node ID of the pull request. */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of UnmarkFileAsViewed */
["UnmarkFileAsViewedPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnmarkIssueAsDuplicate */
["UnmarkIssueAsDuplicateInput"]: {
	/** ID of the issue or pull request currently considered canonical/authoritative/original. */
	canonicalId: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** ID of the issue or pull request currently marked as a duplicate. */
	duplicateId: string | Variable<any, string>
};
	/** Autogenerated return type of UnmarkIssueAsDuplicate */
["UnmarkIssueAsDuplicatePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue or pull request that was marked as a duplicate. */
	duplicate?:ValueTypes["IssueOrPullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
["UnmarkedAsDuplicateEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** The authoritative issue or pull request which has been duplicated by another. */
	canonical?:ValueTypes["IssueOrPullRequest"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The issue or pull request which has been marked as a duplicate of another. */
	duplicate?:ValueTypes["IssueOrPullRequest"],
	id?:boolean | `@${string}`,
	/** Canonical and duplicate belong to different repositories. */
	isCrossRepository?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnminimizeComment */
["UnminimizeCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the subject to modify. */
	subjectId: string | Variable<any, string>
};
	/** Autogenerated return type of UnminimizeComment */
["UnminimizeCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The comment that was unminimized. */
	unminimizedComment?:ValueTypes["Minimizable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnpinIssue */
["UnpinIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the issue to be unpinned */
	issueId: string | Variable<any, string>
};
	/** Autogenerated return type of UnpinIssue */
["UnpinIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was unpinned */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unpinned' event on a given issue or pull request. */
["UnpinnedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the issue associated with the event. */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnresolveReviewThread */
["UnresolveReviewThreadInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the thread to unresolve */
	threadId: string | Variable<any, string>
};
	/** Autogenerated return type of UnresolveReviewThread */
["UnresolveReviewThreadPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The thread to resolve. */
	thread?:ValueTypes["PullRequestReviewThread"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unsubscribed' event on a given `Subscribable`. */
["UnsubscribedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Object referenced by event. */
	subscribable?:ValueTypes["Subscribable"],
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can be updated. */
["Updatable"]:AliasType<{
		/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ValueTypes["CommitComment"],keyof ValueTypes["Updatable"]>;
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["Updatable"]>;
		['...on DiscussionComment']?: Omit<ValueTypes["DiscussionComment"],keyof ValueTypes["Updatable"]>;
		['...on GistComment']?: Omit<ValueTypes["GistComment"],keyof ValueTypes["Updatable"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["Updatable"]>;
		['...on IssueComment']?: Omit<ValueTypes["IssueComment"],keyof ValueTypes["Updatable"]>;
		['...on Project']?: Omit<ValueTypes["Project"],keyof ValueTypes["Updatable"]>;
		['...on ProjectNext']?: Omit<ValueTypes["ProjectNext"],keyof ValueTypes["Updatable"]>;
		['...on ProjectV2']?: Omit<ValueTypes["ProjectV2"],keyof ValueTypes["Updatable"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["Updatable"]>;
		['...on PullRequestReview']?: Omit<ValueTypes["PullRequestReview"],keyof ValueTypes["Updatable"]>;
		['...on PullRequestReviewComment']?: Omit<ValueTypes["PullRequestReviewComment"],keyof ValueTypes["Updatable"]>;
		['...on TeamDiscussion']?: Omit<ValueTypes["TeamDiscussion"],keyof ValueTypes["Updatable"]>;
		['...on TeamDiscussionComment']?: Omit<ValueTypes["TeamDiscussionComment"],keyof ValueTypes["Updatable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Comments that can be updated. */
["UpdatableComment"]:AliasType<{
		/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ValueTypes["CommitComment"],keyof ValueTypes["UpdatableComment"]>;
		['...on DiscussionComment']?: Omit<ValueTypes["DiscussionComment"],keyof ValueTypes["UpdatableComment"]>;
		['...on GistComment']?: Omit<ValueTypes["GistComment"],keyof ValueTypes["UpdatableComment"]>;
		['...on Issue']?: Omit<ValueTypes["Issue"],keyof ValueTypes["UpdatableComment"]>;
		['...on IssueComment']?: Omit<ValueTypes["IssueComment"],keyof ValueTypes["UpdatableComment"]>;
		['...on PullRequest']?: Omit<ValueTypes["PullRequest"],keyof ValueTypes["UpdatableComment"]>;
		['...on PullRequestReview']?: Omit<ValueTypes["PullRequestReview"],keyof ValueTypes["UpdatableComment"]>;
		['...on PullRequestReviewComment']?: Omit<ValueTypes["PullRequestReviewComment"],keyof ValueTypes["UpdatableComment"]>;
		['...on TeamDiscussion']?: Omit<ValueTypes["TeamDiscussion"],keyof ValueTypes["UpdatableComment"]>;
		['...on TeamDiscussionComment']?: Omit<ValueTypes["TeamDiscussionComment"],keyof ValueTypes["UpdatableComment"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateBranchProtectionRule */
["UpdateBranchProtectionRuleInput"]: {
	/** Can this branch be deleted. */
	allowsDeletions?: boolean | undefined | null | Variable<any, string>,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?: boolean | undefined | null | Variable<any, string>,
	/** Is branch creation a protected operation. */
	blocksCreations?: boolean | undefined | null | Variable<any, string>,
	/** The global relay id of the branch protection rule to be updated. */
	branchProtectionRuleId: string | Variable<any, string>,
	/** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
	bypassForcePushActorIds?: Array<string> | undefined | null | Variable<any, string>,
	/** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
	bypassPullRequestActorIds?: Array<string> | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?: boolean | undefined | null | Variable<any, string>,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?: boolean | undefined | null | Variable<any, string>,
	/** The glob-like pattern used to determine matching branches. */
	pattern?: string | undefined | null | Variable<any, string>,
	/** A list of User, Team, or App IDs allowed to push to matching branches. */
	pushActorIds?: Array<string> | undefined | null | Variable<any, string>,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined | null | Variable<any, string>,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string> | undefined | null | Variable<any, string>,
	/** The list of required status checks */
	requiredStatusChecks?: Array<ValueTypes["RequiredStatusCheckInput"]> | undefined | null | Variable<any, string>,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?: boolean | undefined | null | Variable<any, string>,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?: boolean | undefined | null | Variable<any, string>,
	/** Are commits required to be signed. */
	requiresCommitSignatures?: boolean | undefined | null | Variable<any, string>,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?: boolean | undefined | null | Variable<any, string>,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?: boolean | undefined | null | Variable<any, string>,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?: boolean | undefined | null | Variable<any, string>,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?: boolean | undefined | null | Variable<any, string>,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?: boolean | undefined | null | Variable<any, string>,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?: boolean | undefined | null | Variable<any, string>,
	/** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
	reviewDismissalActorIds?: Array<string> | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateBranchProtectionRule */
["UpdateBranchProtectionRulePayload"]: AliasType<{
	/** The newly created BranchProtectionRule. */
	branchProtectionRule?:ValueTypes["BranchProtectionRule"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateCheckRun */
["UpdateCheckRunInput"]: {
	/** Possible further actions the integrator can perform, which a user may trigger. */
	actions?: Array<ValueTypes["CheckRunAction"]> | undefined | null | Variable<any, string>,
	/** The node of the check. */
	checkRunId: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The time that the check run finished. */
	completedAt?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,
	/** The final conclusion of the check. */
	conclusion?: ValueTypes["CheckConclusionState"] | undefined | null | Variable<any, string>,
	/** The URL of the integrator's site that has the full details of the check. */
	detailsUrl?: ValueTypes["URI"] | undefined | null | Variable<any, string>,
	/** A reference for the run on the integrator's system. */
	externalId?: string | undefined | null | Variable<any, string>,
	/** The name of the check. */
	name?: string | undefined | null | Variable<any, string>,
	/** Descriptive details about the run. */
	output?: ValueTypes["CheckRunOutput"] | undefined | null | Variable<any, string>,
	/** The node ID of the repository. */
	repositoryId: string | Variable<any, string>,
	/** The time that the check run began. */
	startedAt?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,
	/** The current status. */
	status?: ValueTypes["RequestableCheckStatusState"] | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateCheckRun */
["UpdateCheckRunPayload"]: AliasType<{
	/** The updated check run. */
	checkRun?:ValueTypes["CheckRun"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateCheckSuitePreferences */
["UpdateCheckSuitePreferencesInput"]: {
	/** The check suite preferences to modify. */
	autoTriggerPreferences: Array<ValueTypes["CheckSuiteAutoTriggerPreference"]> | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateCheckSuitePreferences */
["UpdateCheckSuitePreferencesPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated repository. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateDiscussionComment */
["UpdateDiscussionCommentInput"]: {
	/** The new contents of the comment body. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the discussion comment to update. */
	commentId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateDiscussionComment */
["UpdateDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The modified discussion comment. */
	comment?:ValueTypes["DiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateDiscussion */
["UpdateDiscussionInput"]: {
	/** The new contents of the discussion body. */
	body?: string | undefined | null | Variable<any, string>,
	/** The Node ID of a discussion category within the same repository to change this discussion to. */
	categoryId?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the discussion to update. */
	discussionId: string | Variable<any, string>,
	/** The new discussion title. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateDiscussion */
["UpdateDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The modified discussion. */
	discussion?:ValueTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
["UpdateEnterpriseAdministratorRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string | Variable<any, string>,
	/** The login of a administrator whose role is being changed. */
	login: string | Variable<any, string>,
	/** The new role for the Enterprise administrator. */
	role: ValueTypes["EnterpriseAdministratorRole"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
["UpdateEnterpriseAdministratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of changing the administrator's role. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
["UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the allow private repository forking setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the allow private repository forking policy on the enterprise. */
	policyValue?: ValueTypes["EnterpriseAllowPrivateRepositoryForkingPolicyValue"] | undefined | null | Variable<any, string>,
	/** The value for the allow private repository forking setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
["UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated allow private repository forking setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the allow private repository forking setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
["UpdateEnterpriseDefaultRepositoryPermissionSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the base repository permission setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the base repository permission setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseDefaultRepositoryPermissionSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
["UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated base repository permission setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the base repository permission setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the members can change repository visibility setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the members can change repository visibility setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can change repository visibility setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the members can change repository visibility setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
["UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the members can create repositories setting. */
	enterpriseId: string | Variable<any, string>,
	/** Allow members to create internal repositories. Defaults to current value. */
	membersCanCreateInternalRepositories?: boolean | undefined | null | Variable<any, string>,
	/** Allow members to create private repositories. Defaults to current value. */
	membersCanCreatePrivateRepositories?: boolean | undefined | null | Variable<any, string>,
	/** Allow members to create public repositories. Defaults to current value. */
	membersCanCreatePublicRepositories?: boolean | undefined | null | Variable<any, string>,
	/** When false, allow member organizations to set their own repository creation member privileges. */
	membersCanCreateRepositoriesPolicyEnabled?: boolean | undefined | null | Variable<any, string>,
	/** Value for the members can create repositories setting on the enterprise. This
or the granular public/private/internal allowed fields (but not both) must be provided. */
	settingValue?: ValueTypes["EnterpriseMembersCanCreateRepositoriesSettingValue"] | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
["UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can create repositories setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the members can create repositories setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
["UpdateEnterpriseMembersCanDeleteIssuesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the members can delete issues setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the members can delete issues setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
["UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can delete issues setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the members can delete issues setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
["UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the members can delete repositories setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the members can delete repositories setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
["UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can delete repositories setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the members can delete repositories setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
["UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the members can invite collaborators setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the members can invite collaborators setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
["UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can invite collaborators setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the members can invite collaborators setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
["UpdateEnterpriseMembersCanMakePurchasesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the members can make purchases setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the members can make purchases setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseMembersCanMakePurchasesSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
["UpdateEnterpriseMembersCanMakePurchasesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can make purchases setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the members can make purchases setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the members can update protected branches setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the members can update protected branches setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can update protected branches setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the members can update protected branches setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
["UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the members can view dependency insights setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the members can view dependency insights setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
["UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can view dependency insights setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the members can view dependency insights setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
["UpdateEnterpriseOrganizationProjectsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the organization projects setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the organization projects setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
["UpdateEnterpriseOrganizationProjectsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated organization projects setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the organization projects setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
["UpdateEnterpriseOwnerOrganizationRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Enterprise which the owner belongs to. */
	enterpriseId: string | Variable<any, string>,
	/** The ID of the organization for membership change. */
	organizationId: string | Variable<any, string>,
	/** The role to assume in the organization. */
	organizationRole: ValueTypes["RoleInOrganization"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */
["UpdateEnterpriseOwnerOrganizationRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of changing the owner's organization role. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseProfile */
["UpdateEnterpriseProfileInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The description of the enterprise. */
	description?: string | undefined | null | Variable<any, string>,
	/** The Enterprise ID to update. */
	enterpriseId: string | Variable<any, string>,
	/** The location of the enterprise. */
	location?: string | undefined | null | Variable<any, string>,
	/** The name of the enterprise. */
	name?: string | undefined | null | Variable<any, string>,
	/** The URL of the enterprise's website. */
	websiteUrl?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseProfile */
["UpdateEnterpriseProfilePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated enterprise. */
	enterprise?:ValueTypes["Enterprise"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
["UpdateEnterpriseRepositoryProjectsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the repository projects setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the repository projects setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
["UpdateEnterpriseRepositoryProjectsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated repository projects setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the repository projects setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
["UpdateEnterpriseTeamDiscussionsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the team discussions setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the team discussions setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledDisabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
["UpdateEnterpriseTeamDiscussionsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated team discussions setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the team discussions setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the enterprise on which to set the two factor authentication required setting. */
	enterpriseId: string | Variable<any, string>,
	/** The value for the two factor authentication required setting on the enterprise. */
	settingValue: ValueTypes["EnterpriseEnabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated two factor authentication required setting. */
	enterprise?:ValueTypes["Enterprise"],
	/** A message confirming the result of updating the two factor authentication required setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnvironment */
["UpdateEnvironmentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The node ID of the environment. */
	environmentId: string | Variable<any, string>,
	/** The ids of users or teams that can approve deployments to this environment */
	reviewers?: Array<string> | undefined | null | Variable<any, string>,
	/** The wait timer in minutes. */
	waitTimer?: number | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateEnvironment */
["UpdateEnvironmentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated environment. */
	environment?:ValueTypes["Environment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
["UpdateIpAllowListEnabledSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the owner on which to set the IP allow list enabled setting. */
	ownerId: string | Variable<any, string>,
	/** The value for the IP allow list enabled setting. */
	settingValue: ValueTypes["IpAllowListEnabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
["UpdateIpAllowListEnabledSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list owner on which the setting was updated. */
	owner?:ValueTypes["IpAllowListOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIpAllowListEntry */
["UpdateIpAllowListEntryInput"]: {
	/** An IP address or range of addresses in CIDR notation. */
	allowListValue: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the IP allow list entry to update. */
	ipAllowListEntryId: string | Variable<any, string>,
	/** Whether the IP allow list entry is active when an IP allow list is enabled. */
	isActive: boolean | Variable<any, string>,
	/** An optional name for the IP allow list entry. */
	name?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateIpAllowListEntry */
["UpdateIpAllowListEntryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list entry that was updated. */
	ipAllowListEntry?:ValueTypes["IpAllowListEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
["UpdateIpAllowListForInstalledAppsEnabledSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the owner. */
	ownerId: string | Variable<any, string>,
	/** The value for the IP allow list configuration for installed GitHub Apps setting. */
	settingValue: ValueTypes["IpAllowListForInstalledAppsEnabledSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */
["UpdateIpAllowListForInstalledAppsEnabledSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list owner on which the setting was updated. */
	owner?:ValueTypes["IpAllowListOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIssueComment */
["UpdateIssueCommentInput"]: {
	/** The updated text of the comment. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the IssueComment to modify. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateIssueComment */
["UpdateIssueCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated comment. */
	issueComment?:ValueTypes["IssueComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIssue */
["UpdateIssueInput"]: {
	/** An array of Node IDs of users for this issue. */
	assigneeIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The body for the issue description. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Issue to modify. */
	id: string | Variable<any, string>,
	/** An array of Node IDs of labels for this issue. */
	labelIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The Node ID of the milestone for this issue. */
	milestoneId?: string | undefined | null | Variable<any, string>,
	/** An array of Node IDs for projects associated with this issue. */
	projectIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The desired issue state. */
	state?: ValueTypes["IssueState"] | undefined | null | Variable<any, string>,
	/** The title for the issue. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateIssue */
["UpdateIssuePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue. */
	issue?:ValueTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateLabel */
["UpdateLabelInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** A 6 character hex code, without the leading #, identifying the updated color of the label. */
	color?: string | undefined | null | Variable<any, string>,
	/** A brief description of the label, such as its purpose. */
	description?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the label to be updated. */
	id: string | Variable<any, string>,
	/** The updated name of the label. */
	name?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateLabel */
["UpdateLabelPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated label. */
	label?:ValueTypes["Label"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateNotificationRestrictionSetting */
["UpdateNotificationRestrictionSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the owner on which to set the restrict notifications setting. */
	ownerId: string | Variable<any, string>,
	/** The value for the restrict notifications setting. */
	settingValue: ValueTypes["NotificationRestrictionSettingValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateNotificationRestrictionSetting */
["UpdateNotificationRestrictionSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The owner on which the setting was updated. */
	owner?:ValueTypes["VerifiableDomainOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
["UpdateOrganizationAllowPrivateRepositoryForkingSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Enable forking of private repositories in the organization? */
	forkingEnabled: boolean | Variable<any, string>,
	/** The ID of the organization on which to set the allow private repository forking setting. */
	organizationId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
["UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of updating the allow private repository forking setting. */
	message?:boolean | `@${string}`,
	/** The organization with the updated allow private repository forking setting. */
	organization?:ValueTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting */
["UpdateOrganizationWebCommitSignoffSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the organization on which to set the web commit signoff setting. */
	organizationId: string | Variable<any, string>,
	/** Enable signoff on web-based commits for repositories in the organization? */
	webCommitSignoffRequired: boolean | Variable<any, string>
};
	/** Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting */
["UpdateOrganizationWebCommitSignoffSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of updating the web commit signoff setting. */
	message?:boolean | `@${string}`,
	/** The organization with the updated web commit signoff setting. */
	organization?:ValueTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectCard */
["UpdateProjectCardInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Whether or not the ProjectCard should be archived */
	isArchived?: boolean | undefined | null | Variable<any, string>,
	/** The note of ProjectCard. */
	note?: string | undefined | null | Variable<any, string>,
	/** The ProjectCard ID to update. */
	projectCardId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateProjectCard */
["UpdateProjectCardPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated ProjectCard. */
	projectCard?:ValueTypes["ProjectCard"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectColumn */
["UpdateProjectColumnInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of project column. */
	name: string | Variable<any, string>,
	/** The ProjectColumn ID to update. */
	projectColumnId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateProjectColumn */
["UpdateProjectColumnPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated project column. */
	projectColumn?:ValueTypes["ProjectColumn"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectDraftIssue */
["UpdateProjectDraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The body of the draft issue. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the draft issue to update. */
	draftIssueId: string | Variable<any, string>,
	/** The title of the draft issue. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateProjectDraftIssue */
["UpdateProjectDraftIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The draft issue updated in the project. */
	draftIssue?:ValueTypes["DraftIssue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProject */
["UpdateProjectInput"]: {
	/** The description of project. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The name of project. */
	name?: string | undefined | null | Variable<any, string>,
	/** The Project ID to update. */
	projectId: string | Variable<any, string>,
	/** Whether the project is public or not. */
	public?: boolean | undefined | null | Variable<any, string>,
	/** Whether the project is open or closed. */
	state?: ValueTypes["ProjectState"] | undefined | null | Variable<any, string>
};
	/** Autogenerated input type of UpdateProjectNext */
["UpdateProjectNextInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Set the project to closed or open.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `closed` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	closed?: boolean | undefined | null | Variable<any, string>,
	/** Set the readme description of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `description` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	description?: string | undefined | null | Variable<any, string>,
	/** The ID of the Project to update. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined | null | Variable<any, string>,
	/** Set the project to public or private.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `public` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	public?: boolean | undefined | null | Variable<any, string>,
	/** Set the short description of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `shortDescription` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	shortDescription?: string | undefined | null | Variable<any, string>,
	/** Set the title of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated input type of UpdateProjectNextItemField */
["UpdateProjectNextItemFieldInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The id of the field to be updated.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `fieldId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	fieldId?: string | undefined | null | Variable<any, string>,
	/** The id of the item to be updated. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	itemId?: string | undefined | null | Variable<any, string>,
	/** The ID of the Project. This field is required. */
	projectId?: string | undefined | null | Variable<any, string>,
	/** The value which will be set on the field. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `value` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	value?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateProjectNextItemField */
["UpdateProjectNextItemFieldPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated item. */
	projectNextItem?:ValueTypes["ProjectNextItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated return type of UpdateProjectNext */
["UpdateProjectNextPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated Project. */
	projectNext?:ValueTypes["ProjectNext"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated return type of UpdateProject */
["UpdateProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated project. */
	project?:ValueTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectV2DraftIssue */
["UpdateProjectV2DraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The body of the draft issue. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the draft issue to update. */
	draftIssueId: string | Variable<any, string>,
	/** The title of the draft issue. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateProjectV2DraftIssue */
["UpdateProjectV2DraftIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The draft issue updated in the project. */
	draftIssue?:ValueTypes["DraftIssue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectV2 */
["UpdateProjectV2Input"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Set the project to closed or open. */
	closed?: boolean | undefined | null | Variable<any, string>,
	/** The ID of the Project to update. */
	projectId: string | Variable<any, string>,
	/** Set the project to public or private. */
	public?: boolean | undefined | null | Variable<any, string>,
	/** Set the readme description of the project. */
	readme?: string | undefined | null | Variable<any, string>,
	/** Set the short description of the project. */
	shortDescription?: string | undefined | null | Variable<any, string>,
	/** Set the title of the project. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated input type of UpdateProjectV2ItemFieldValue */
["UpdateProjectV2ItemFieldValueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the field to be updated. */
	fieldId: string | Variable<any, string>,
	/** The ID of the item to be updated. */
	itemId: string | Variable<any, string>,
	/** The ID of the Project. */
	projectId: string | Variable<any, string>,
	/** The value which will be set on the field. */
	value: ValueTypes["ProjectV2FieldValue"] | Variable<any, string>
};
	/** Autogenerated return type of UpdateProjectV2ItemFieldValue */
["UpdateProjectV2ItemFieldValuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated item. */
	projectV2Item?:ValueTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectV2ItemPosition */
["UpdateProjectV2ItemPositionInput"]: {
	/** The ID of the item to position this item after. If omitted or set to null the item will be moved to top. */
	afterId?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the item to be moved. */
	itemId: string | Variable<any, string>,
	/** The ID of the Project. */
	projectId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateProjectV2ItemPosition */
["UpdateProjectV2ItemPositionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2ItemConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated return type of UpdateProjectV2 */
["UpdateProjectV2Payload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated Project. */
	projectV2?:ValueTypes["ProjectV2"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdatePullRequestBranch */
["UpdatePullRequestBranchInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The head ref oid for the upstream branch. */
	expectedHeadOid?: ValueTypes["GitObjectID"] | undefined | null | Variable<any, string>,
	/** The Node ID of the pull request. */
	pullRequestId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdatePullRequestBranch */
["UpdatePullRequestBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdatePullRequest */
["UpdatePullRequestInput"]: {
	/** An array of Node IDs of users for this pull request. */
	assigneeIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository. */
	baseRefName?: string | undefined | null | Variable<any, string>,
	/** The contents of the pull request. */
	body?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** An array of Node IDs of labels for this pull request. */
	labelIds?: Array<string> | undefined | null | Variable<any, string>,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?: boolean | undefined | null | Variable<any, string>,
	/** The Node ID of the milestone for this pull request. */
	milestoneId?: string | undefined | null | Variable<any, string>,
	/** An array of Node IDs for projects associated with this pull request. */
	projectIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The Node ID of the pull request. */
	pullRequestId: string | Variable<any, string>,
	/** The target state of the pull request. */
	state?: ValueTypes["PullRequestUpdateState"] | undefined | null | Variable<any, string>,
	/** The title of the pull request. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdatePullRequest */
["UpdatePullRequestPayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request. */
	pullRequest?:ValueTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdatePullRequestReviewComment */
["UpdatePullRequestReviewCommentInput"]: {
	/** The text of the comment. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the comment to modify. */
	pullRequestReviewCommentId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdatePullRequestReviewComment */
["UpdatePullRequestReviewCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated comment. */
	pullRequestReviewComment?:ValueTypes["PullRequestReviewComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdatePullRequestReview */
["UpdatePullRequestReviewInput"]: {
	/** The contents of the pull request review body. */
	body: string | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the pull request review to modify. */
	pullRequestReviewId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdatePullRequestReview */
["UpdatePullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request review. */
	pullRequestReview?:ValueTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateRef */
["UpdateRefInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Permit updates of branch Refs that are not fast-forwards? */
	force?: boolean | undefined | null | Variable<any, string>,
	/** The GitObjectID that the Ref shall be updated to target. */
	oid: ValueTypes["GitObjectID"] | Variable<any, string>,
	/** The Node ID of the Ref to be updated. */
	refId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateRef */
["UpdateRefPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated Ref. */
	ref?:ValueTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateRefs */
["UpdateRefsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** A list of ref updates. */
	refUpdates: Array<ValueTypes["RefUpdate"]> | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateRefs */
["UpdateRefsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateRepository */
["UpdateRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** A new description for the repository. Pass an empty string to erase the existing description. */
	description?: string | undefined | null | Variable<any, string>,
	/** Indicates if the repository should have the issues feature enabled. */
	hasIssuesEnabled?: boolean | undefined | null | Variable<any, string>,
	/** Indicates if the repository should have the project boards feature enabled. */
	hasProjectsEnabled?: boolean | undefined | null | Variable<any, string>,
	/** Indicates if the repository should have the wiki feature enabled. */
	hasWikiEnabled?: boolean | undefined | null | Variable<any, string>,
	/** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
	homepageUrl?: ValueTypes["URI"] | undefined | null | Variable<any, string>,
	/** The new name of the repository. */
	name?: string | undefined | null | Variable<any, string>,
	/** The ID of the repository to update. */
	repositoryId: string | Variable<any, string>,
	/** Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure. */
	template?: boolean | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateRepository */
["UpdateRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated repository. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting */
["UpdateRepositoryWebCommitSignoffSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the repository to update. */
	repositoryId: string | Variable<any, string>,
	/** Indicates if the repository should require signoff on web-based commits. */
	webCommitSignoffRequired: boolean | Variable<any, string>
};
	/** Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting */
["UpdateRepositoryWebCommitSignoffSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of updating the web commit signoff setting. */
	message?:boolean | `@${string}`,
	/** The updated repository. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateSponsorshipPreferences */
["UpdateSponsorshipPreferencesInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Specify whether others should be able to see that the sponsor is sponsoring
the sponsorable. Public visibility still does not reveal which tier is used. */
	privacyLevel?: ValueTypes["SponsorshipPrivacy"] | undefined | null | Variable<any, string>,
	/** Whether the sponsor should receive email updates from the sponsorable. */
	receiveEmails?: boolean | undefined | null | Variable<any, string>,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined | null | Variable<any, string>,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined | null | Variable<any, string>,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined | null | Variable<any, string>,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateSponsorshipPreferences */
["UpdateSponsorshipPreferencesPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The sponsorship that was updated. */
	sponsorship?:ValueTypes["Sponsorship"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateSubscription */
["UpdateSubscriptionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The new state of the subscription. */
	state: ValueTypes["SubscriptionState"] | Variable<any, string>,
	/** The Node ID of the subscribable object to modify. */
	subscribableId: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateSubscription */
["UpdateSubscriptionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The input subscribable entity. */
	subscribable?:ValueTypes["Subscribable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTeamDiscussionComment */
["UpdateTeamDiscussionCommentInput"]: {
	/** The updated text of the comment. */
	body: string | Variable<any, string>,
	/** The current version of the body content. */
	bodyVersion?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the comment to modify. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of UpdateTeamDiscussionComment */
["UpdateTeamDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated comment. */
	teamDiscussionComment?:ValueTypes["TeamDiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTeamDiscussion */
["UpdateTeamDiscussionInput"]: {
	/** The updated text of the discussion. */
	body?: string | undefined | null | Variable<any, string>,
	/** The current version of the body content. If provided, this update operation
will be rejected if the given version does not match the latest version on the server. */
	bodyVersion?: string | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the discussion to modify. */
	id: string | Variable<any, string>,
	/** If provided, sets the pinned state of the updated discussion. */
	pinned?: boolean | undefined | null | Variable<any, string>,
	/** The updated title of the discussion. */
	title?: string | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateTeamDiscussion */
["UpdateTeamDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated discussion. */
	teamDiscussion?:ValueTypes["TeamDiscussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTeamReviewAssignment */
["UpdateTeamReviewAssignmentInput"]: {
	/** The algorithm to use for review assignment */
	algorithm?: ValueTypes["TeamReviewAssignmentAlgorithm"] | undefined | null | Variable<any, string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Turn on or off review assignment */
	enabled: boolean | Variable<any, string>,
	/** An array of team member IDs to exclude */
	excludedTeamMemberIds?: Array<string> | undefined | null | Variable<any, string>,
	/** The Node ID of the team to update review assignments of */
	id: string | Variable<any, string>,
	/** Notify the entire team of the PR if it is delegated */
	notifyTeam?: boolean | undefined | null | Variable<any, string>,
	/** The number of team members to assign */
	teamMemberCount?: number | undefined | null | Variable<any, string>
};
	/** Autogenerated return type of UpdateTeamReviewAssignment */
["UpdateTeamReviewAssignmentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The team that was modified */
	team?:ValueTypes["Team"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTeamsRepository */
["UpdateTeamsRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** Permission that should be granted to the teams. */
	permission: ValueTypes["RepositoryPermission"] | Variable<any, string>,
	/** Repository ID being granted access to. */
	repositoryId: string | Variable<any, string>,
	/** A list of teams being granted access. Limit: 10 */
	teamIds: Array<string> | Variable<any, string>
};
	/** Autogenerated return type of UpdateTeamsRepository */
["UpdateTeamsRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository that was updated. */
	repository?:ValueTypes["Repository"],
	/** The teams granted permission on the repository. */
	teams?:ValueTypes["Team"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTopics */
["UpdateTopicsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The Node ID of the repository. */
	repositoryId: string | Variable<any, string>,
	/** An array of topic names. */
	topicNames: Array<string> | Variable<any, string>
};
	/** Autogenerated return type of UpdateTopics */
["UpdateTopicsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Names of the provided topics that are not valid. */
	invalidTopicNames?:boolean | `@${string}`,
	/** The updated repository. */
	repository?:ValueTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A user is an individual's account on GitHub that owns repositories and can make new content. */
["User"]: AliasType<{
anyPinnableItems?: [{	/** Filter to only a particular kind of pinnable item. */
	type?: ValueTypes["PinnableItemType"] | undefined | null | Variable<any, string>},boolean | `@${string}`],
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null | Variable<any, string>},boolean | `@${string}`],
	/** The user's public profile bio. */
	bio?:boolean | `@${string}`,
	/** The user's public profile bio as HTML. */
	bioHTML?:boolean | `@${string}`,
canReceiveOrganizationEmailsWhenNotificationsRestricted?: [{	/** The login of the organization to check. */
	login: string | Variable<any, string>},boolean | `@${string}`],
commitComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["CommitCommentConnection"]],
	/** The user's public profile company. */
	company?:boolean | `@${string}`,
	/** The user's public profile company as HTML. */
	companyHTML?:boolean | `@${string}`,
contributionsCollection?: [{	/** Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. */
	from?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>,	/** The ID of the organization used to filter contributions. */
	organizationID?: string | undefined | null | Variable<any, string>,	/** Only contributions made before and up to (including) this time will be
counted. If omitted, defaults to the current time or one year from the
provided from argument. */
	to?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>},ValueTypes["ContributionsCollection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The user's publicly visible profile email. */
	email?:boolean | `@${string}`,
	/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents?:boolean | `@${string}`,
followers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["FollowerConnection"]],
following?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["FollowingConnection"]],
gist?: [{	/** The gist name to find. */
	name: string | Variable<any, string>},ValueTypes["Gist"]],
gistComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["GistCommentConnection"]],
gists?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for gists returned from the connection */
	orderBy?: ValueTypes["GistOrder"] | undefined | null | Variable<any, string>,	/** Filters Gists according to privacy. */
	privacy?: ValueTypes["GistPrivacy"] | undefined | null | Variable<any, string>},ValueTypes["GistConnection"]],
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing?:boolean | `@${string}`,
hovercard?: [{	/** The ID of the subject to get the hovercard in the context of */
	primarySubjectId?: string | undefined | null | Variable<any, string>},ValueTypes["Hovercard"]],
	id?:boolean | `@${string}`,
	/** The interaction ability settings for this user. */
	interactionAbility?:ValueTypes["RepositoryInteractionAbility"],
	/** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
	isBountyHunter?:boolean | `@${string}`,
	/** Whether or not this user is a participant in the GitHub Campus Experts Program. */
	isCampusExpert?:boolean | `@${string}`,
	/** Whether or not this user is a GitHub Developer Program member. */
	isDeveloperProgramMember?:boolean | `@${string}`,
	/** Whether or not this user is a GitHub employee. */
	isEmployee?:boolean | `@${string}`,
	/** Whether or not this user is following the viewer. Inverse of viewer_is_following */
	isFollowingViewer?:boolean | `@${string}`,
	/** Whether or not this user is a member of the GitHub Stars Program. */
	isGitHubStar?:boolean | `@${string}`,
	/** Whether or not the user has marked themselves as for hire. */
	isHireable?:boolean | `@${string}`,
	/** Whether or not this user is a site administrator. */
	isSiteAdmin?:boolean | `@${string}`,
isSponsoredBy?: [{	/** The target account's login. */
	accountLogin: string | Variable<any, string>},boolean | `@${string}`],
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer?:boolean | `@${string}`,
	/** Whether or not this user is the viewing user. */
	isViewer?:boolean | `@${string}`,
issueComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for issue comments returned from the connection. */
	orderBy?: ValueTypes["IssueCommentOrder"] | undefined | null | Variable<any, string>},ValueTypes["IssueCommentConnection"]],
issues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Filtering options for issues returned from the connection. */
	filterBy?: ValueTypes["IssueFilters"] | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for issues returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the issues by. */
	states?: Array<ValueTypes["IssueState"]> | undefined | null | Variable<any, string>},ValueTypes["IssueConnection"]],
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase?:ValueTypes["ProfileItemShowcase"],
	/** The user's public profile location. */
	location?:boolean | `@${string}`,
	/** The username used to login. */
	login?:boolean | `@${string}`,
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents?:boolean | `@${string}`,
	/** The user's public profile name. */
	name?:boolean | `@${string}`,
organization?: [{	/** The login of the organization to find. */
	login: string | Variable<any, string>},ValueTypes["Organization"]],
organizationVerifiedDomainEmails?: [{	/** The login of the organization to match verified domains from. */
	login: string | Variable<any, string>},boolean | `@${string}`],
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["OrganizationConnection"]],
packages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Find packages by their names. */
	names?: Array<string | undefined | null> | undefined | null | Variable<any, string>,	/** Ordering of the returned packages. */
	orderBy?: ValueTypes["PackageOrder"] | undefined | null | Variable<any, string>,	/** Filter registry package by type. */
	packageType?: ValueTypes["PackageType"] | undefined | null | Variable<any, string>,	/** Find packages in a repository by ID. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["PackageConnection"]],
pinnableItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter the types of pinnable items that are returned. */
	types?: Array<ValueTypes["PinnableItemType"]> | undefined | null | Variable<any, string>},ValueTypes["PinnableItemConnection"]],
pinnedItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter the types of pinned items that are returned. */
	types?: Array<ValueTypes["PinnableItemType"]> | undefined | null | Variable<any, string>},ValueTypes["PinnableItemConnection"]],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining?:boolean | `@${string}`,
project?: [{	/** The project number to find. */
	number: number | Variable<any, string>},ValueTypes["Project"]],
projectNext?: [{	/** The project (beta) number. */
	number: number | Variable<any, string>},ValueTypes["ProjectNext"]],
projectV2?: [{	/** The project number. */
	number: number | Variable<any, string>},ValueTypes["ProjectV2"]],
projects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for projects returned from the connection */
	orderBy?: ValueTypes["ProjectOrder"] | undefined | null | Variable<any, string>,	/** Query to search projects by, currently only searching by name. */
	search?: string | undefined | null | Variable<any, string>,	/** A list of states to filter the projects by. */
	states?: Array<ValueTypes["ProjectState"]> | undefined | null | Variable<any, string>},ValueTypes["ProjectConnection"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>,	/** How to order the returned projects (beta). */
	sortBy?: ValueTypes["ProjectNextOrderField"] | undefined | null | Variable<any, string>},ValueTypes["ProjectNextConnection"]],
	/** The HTTP path listing user's projects */
	projectsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing user's projects */
	projectsUrl?:boolean | `@${string}`,
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** How to order the returned projects. */
	orderBy?: ValueTypes["ProjectV2Order"] | undefined | null | Variable<any, string>,	/** A project to search for under the the owner. */
	query?: string | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
publicKeys?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["PublicKeyConnection"]],
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null | Variable<any, string>,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ValueTypes["IssueOrder"] | undefined | null | Variable<any, string>,	/** A list of states to filter the pull requests by. */
	states?: Array<ValueTypes["PullRequestState"]> | undefined | null | Variable<any, string>},ValueTypes["PullRequestConnection"]],
recentProjects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["ProjectV2Connection"]],
repositories?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they are forks of another repository */
	isFork?: boolean | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories returned from the connection */
	orderBy?: ValueTypes["RepositoryOrder"] | undefined | null | Variable<any, string>,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to privacy */
	privacy?: ValueTypes["RepositoryPrivacy"] | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
repositoriesContributedTo?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** If non-null, include only the specified types of contributions. The
GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY] */
	contributionTypes?: Array<ValueTypes["RepositoryContributionType"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** If true, include user repositories */
	includeUserRepositories?: boolean | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories returned from the connection */
	orderBy?: ValueTypes["RepositoryOrder"] | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to privacy */
	privacy?: ValueTypes["RepositoryPrivacy"] | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
repository?: [{	/** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
	followRenames?: boolean | undefined | null | Variable<any, string>,	/** Name of Repository to find. */
	name: string | Variable<any, string>},ValueTypes["Repository"]],
repositoryDiscussionComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Filter discussion comments to only those that were marked as the answer */
	onlyAnswers?: boolean | undefined | null | Variable<any, string>,	/** Filter discussion comments to only those in a specific repository. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["DiscussionCommentConnection"]],
repositoryDiscussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Filter discussions to only those that have been answered or not. Defaults to
including both answered and unanswered discussions. */
	answered?: boolean | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for discussions returned from the connection. */
	orderBy?: ValueTypes["DiscussionOrder"] | undefined | null | Variable<any, string>,	/** Filter discussions to only those in a specific repository. */
	repositoryId?: string | undefined | null | Variable<any, string>},ValueTypes["DiscussionConnection"]],
	/** The HTTP path for this user */
	resourcePath?:boolean | `@${string}`,
savedReplies?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** The field to order saved replies by. */
	orderBy?: ValueTypes["SavedReplyOrder"] | undefined | null | Variable<any, string>},ValueTypes["SavedReplyConnection"]],
sponsoring?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the users and organizations returned from the connection. */
	orderBy?: ValueTypes["SponsorOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorConnection"]],
sponsors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsors returned from the connection. */
	orderBy?: ValueTypes["SponsorOrder"] | undefined | null | Variable<any, string>,	/** If given, will filter for sponsors at the given tier. Will only return
sponsors whose tier the viewer is permitted to see. */
	tierId?: string | undefined | null | Variable<any, string>},ValueTypes["SponsorConnection"]],
sponsorsActivities?: [{	/** Filter activities to only the specified actions. */
	actions?: Array<ValueTypes["SponsorsActivityAction"]> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for activity returned from the connection. */
	orderBy?: ValueTypes["SponsorsActivityOrder"] | undefined | null | Variable<any, string>,	/** Filter activities returned to only those that occurred in the most recent
specified time period. Set to ALL to avoid filtering by when the activity occurred. */
	period?: ValueTypes["SponsorsActivityPeriod"] | undefined | null | Variable<any, string>},ValueTypes["SponsorsActivityConnection"]],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?:ValueTypes["SponsorsListing"],
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?:ValueTypes["Sponsorship"],
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?:ValueTypes["Sponsorship"],
sponsorshipNewsletters?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorship updates returned from the connection. */
	orderBy?: ValueTypes["SponsorshipNewsletterOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipNewsletterConnection"]],
sponsorshipsAsMaintainer?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Whether or not to include private sponsorships in the result set */
	includePrivate?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ValueTypes["SponsorshipOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipConnection"]],
sponsorshipsAsSponsor?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ValueTypes["SponsorshipOrder"] | undefined | null | Variable<any, string>},ValueTypes["SponsorshipConnection"]],
starredRepositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Order for connection */
	orderBy?: ValueTypes["StarOrder"] | undefined | null | Variable<any, string>,	/** Filters starred repositories to only return repositories owned by the viewer. */
	ownedByViewer?: boolean | undefined | null | Variable<any, string>},ValueTypes["StarredRepositoryConnection"]],
	/** The user's description of what they're currently doing. */
	status?:ValueTypes["UserStatus"],
topRepositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories returned from the connection */
	orderBy: ValueTypes["RepositoryOrder"] | Variable<any, string>,	/** How far back in time to fetch contributed repositories */
	since?: ValueTypes["DateTime"] | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
	/** The user's Twitter username. */
	twitterUsername?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this user */
	url?:boolean | `@${string}`,
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems?:boolean | `@${string}`,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects?:boolean | `@${string}`,
	/** Whether or not the viewer is able to follow the user. */
	viewerCanFollow?:boolean | `@${string}`,
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor?:boolean | `@${string}`,
	/** Whether or not this user is followed by the viewer. Inverse of is_following_viewer. */
	viewerIsFollowing?:boolean | `@${string}`,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring?:boolean | `@${string}`,
watching?: [{	/** Affiliation options for repositories returned from the connection. If none
specified, the results will include repositories for which the current
viewer is an owner or collaborator, or member. */
	affiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for repositories returned from the connection */
	orderBy?: ValueTypes["RepositoryOrder"] | undefined | null | Variable<any, string>,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ValueTypes["RepositoryAffiliation"] | undefined | null> | undefined | null | Variable<any, string>,	/** If non-null, filters repositories according to privacy */
	privacy?: ValueTypes["RepositoryPrivacy"] | undefined | null | Variable<any, string>},ValueTypes["RepositoryConnection"]],
	/** A URL pointing to the user's public website/blog. */
	websiteUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible durations that a user can be blocked for. */
["UserBlockDuration"]:UserBlockDuration;
	/** Represents a 'user_blocked' event on a given user. */
["UserBlockedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ValueTypes["Actor"],
	/** Number of days that the user was blocked for. */
	blockDuration?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The user who was blocked. */
	subject?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["UserConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["UserEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edit on user content */
["UserContentEdit"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was deleted. */
	deletedAt?:boolean | `@${string}`,
	/** The actor who deleted this content */
	deletedBy?:ValueTypes["Actor"],
	/** A summary of the changes for this edit */
	diff?:boolean | `@${string}`,
	/** When this content was edited */
	editedAt?:boolean | `@${string}`,
	/** The actor who edited this content */
	editor?:ValueTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A list of edits to content. */
["UserContentEditConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["UserContentEditEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["UserContentEdit"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["UserContentEditEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["UserContentEdit"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user. */
["UserEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Email attributes from External Identity */
["UserEmailMetadata"]: AliasType<{
	/** Boolean to identify primary emails */
	primary?:boolean | `@${string}`,
	/** Type of email */
	type?:boolean | `@${string}`,
	/** Email id */
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The user's description of what they're currently doing. */
["UserStatus"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** An emoji summarizing the user's status. */
	emoji?:boolean | `@${string}`,
	/** The status emoji as HTML. */
	emojiHTML?:boolean | `@${string}`,
	/** If set, the status will not be shown after this date. */
	expiresAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this status indicates the user is not fully available on GitHub. */
	indicatesLimitedAvailability?:boolean | `@${string}`,
	/** A brief message describing what the user is doing. */
	message?:boolean | `@${string}`,
	/** The organization whose members can see this status. If null, this status is publicly visible. */
	organization?:ValueTypes["Organization"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The user who has this status. */
	user?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for UserStatus. */
["UserStatusConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["UserStatusEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["UserStatus"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["UserStatusEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["UserStatus"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for user status connections. */
["UserStatusOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order user statuses by. */
	field: ValueTypes["UserStatusOrderField"] | Variable<any, string>
};
	/** Properties by which user status connections can be ordered. */
["UserStatusOrderField"]:UserStatusOrderField;
	/** A domain that can be verified or approved for an organization or an enterprise. */
["VerifiableDomain"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The DNS host name that should be used for verification. */
	dnsHostName?:boolean | `@${string}`,
	/** The unicode encoded domain. */
	domain?:boolean | `@${string}`,
	/** Whether a TXT record for verification with the expected host name was found. */
	hasFoundHostName?:boolean | `@${string}`,
	/** Whether a TXT record for verification with the expected verification token was found. */
	hasFoundVerificationToken?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the domain is approved. */
	isApproved?:boolean | `@${string}`,
	/** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
	isRequiredForPolicyEnforcement?:boolean | `@${string}`,
	/** Whether or not the domain is verified. */
	isVerified?:boolean | `@${string}`,
	/** The owner of the domain. */
	owner?:ValueTypes["VerifiableDomainOwner"],
	/** The punycode encoded domain. */
	punycodeEncodedDomain?:boolean | `@${string}`,
	/** The time that the current verification token will expire. */
	tokenExpirationTime?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The current verification token for the domain. */
	verificationToken?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for VerifiableDomain. */
["VerifiableDomainConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["VerifiableDomainEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["VerifiableDomain"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["VerifiableDomainEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["VerifiableDomain"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for verifiable domain connections. */
["VerifiableDomainOrder"]: {
	/** The ordering direction. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field to order verifiable domains by. */
	field: ValueTypes["VerifiableDomainOrderField"] | Variable<any, string>
};
	/** Properties by which verifiable domain connections can be ordered. */
["VerifiableDomainOrderField"]:VerifiableDomainOrderField;
	/** Types that can own a verifiable domain. */
["VerifiableDomainOwner"]: AliasType<{		["...on Enterprise"] : ValueTypes["Enterprise"],
		["...on Organization"] : ValueTypes["Organization"]
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of VerifyVerifiableDomain */
["VerifyVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null | Variable<any, string>,
	/** The ID of the verifiable domain to verify. */
	id: string | Variable<any, string>
};
	/** Autogenerated return type of VerifyVerifiableDomain */
["VerifyVerifiableDomainPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The verifiable domain that was verified. */
	domain?:ValueTypes["VerifiableDomain"],
		__typename?: boolean | `@${string}`
}>;
	/** A hovercard context with a message describing how the viewer is related. */
["ViewerHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
	/** Identifies the user who is related to this context. */
	viewer?:ValueTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A subject that may be upvoted. */
["Votable"]:AliasType<{
		/** Number of upvotes that this subject has received. */
	upvoteCount?:boolean | `@${string}`,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote?:boolean | `@${string}`,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted?:boolean | `@${string}`;
		['...on Discussion']?: Omit<ValueTypes["Discussion"],keyof ValueTypes["Votable"]>;
		['...on DiscussionComment']?: Omit<ValueTypes["DiscussionComment"],keyof ValueTypes["Votable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A workflow contains meta information about an Actions workflow file. */
["Workflow"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the workflow. */
	name?:boolean | `@${string}`,
runs?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>,	/** Ordering options for the connection */
	orderBy?: ValueTypes["WorkflowRunOrder"] | undefined | null | Variable<any, string>},ValueTypes["WorkflowRunConnection"]],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A workflow run. */
["WorkflowRun"]: AliasType<{
	/** The check suite this workflow run belongs to. */
	checkSuite?:ValueTypes["CheckSuite"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
deploymentReviews?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DeploymentReviewConnection"]],
	id?:boolean | `@${string}`,
pendingDeploymentRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null | Variable<any, string>,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null | Variable<any, string>,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null | Variable<any, string>,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null | Variable<any, string>},ValueTypes["DeploymentRequestConnection"]],
	/** The HTTP path for this workflow run */
	resourcePath?:boolean | `@${string}`,
	/** A number that uniquely identifies this workflow run in its parent workflow. */
	runNumber?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this workflow run */
	url?:boolean | `@${string}`,
	/** The workflow executed in this workflow run. */
	workflow?:ValueTypes["Workflow"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for WorkflowRun. */
["WorkflowRunConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ValueTypes["WorkflowRunEdge"],
	/** A list of nodes. */
	nodes?:ValueTypes["WorkflowRun"],
	/** Information to aid in pagination. */
	pageInfo?:ValueTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["WorkflowRunEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ValueTypes["WorkflowRun"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of workflow runs can be ordered upon return. */
["WorkflowRunOrder"]: {
	/** The direction in which to order workflow runs by the specified field. */
	direction: ValueTypes["OrderDirection"] | Variable<any, string>,
	/** The field by which to order workflows. */
	field: ValueTypes["WorkflowRunOrderField"] | Variable<any, string>
};
	/** Properties by which workflow run connections can be ordered. */
["WorkflowRunOrderField"]:WorkflowRunOrderField;
	/** A valid x509 certificate string */
["X509Certificate"]:unknown
  }

export type ResolverInputTypes = {
    /** Autogenerated input type of AbortQueuedMigrations */
["AbortQueuedMigrationsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the organization that is running the migrations. */
	ownerId: string
};
	/** Autogenerated return type of AbortQueuedMigrations */
["AbortQueuedMigrationsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Did the operation succeed? */
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
["AcceptEnterpriseAdministratorInvitationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The id of the invitation being accepted */
	invitationId: string
};
	/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
["AcceptEnterpriseAdministratorInvitationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The invitation that was accepted. */
	invitation?:ResolverInputTypes["EnterpriseAdministratorInvitation"],
	/** A message confirming the result of accepting an administrator invitation. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AcceptTopicSuggestion */
["AcceptTopicSuggestionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of the suggested topic. */
	name: string,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of AcceptTopicSuggestion */
["AcceptTopicSuggestionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The accepted topic. */
	topic?:ResolverInputTypes["Topic"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
["Actor"]:AliasType<{
	avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** The username of the actor. */
	login?:boolean | `@${string}`,
	/** The HTTP path for this actor. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this actor. */
	url?:boolean | `@${string}`;
		['...on Bot']?: Omit<ResolverInputTypes["Bot"],keyof ResolverInputTypes["Actor"]>;
		['...on EnterpriseUserAccount']?: Omit<ResolverInputTypes["EnterpriseUserAccount"],keyof ResolverInputTypes["Actor"]>;
		['...on Mannequin']?: Omit<ResolverInputTypes["Mannequin"],keyof ResolverInputTypes["Actor"]>;
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["Actor"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["Actor"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Location information for an actor */
["ActorLocation"]: AliasType<{
	/** City */
	city?:boolean | `@${string}`,
	/** Country name */
	country?:boolean | `@${string}`,
	/** Country code */
	countryCode?:boolean | `@${string}`,
	/** Region name */
	region?:boolean | `@${string}`,
	/** Region or state code */
	regionCode?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The actor's type. */
["ActorType"]:ActorType;
	/** Autogenerated input type of AddAssigneesToAssignable */
["AddAssigneesToAssignableInput"]: {
	/** The id of the assignable object to add assignees to. */
	assignableId: string,
	/** The id of users to add as assignees. */
	assigneeIds: Array<string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null
};
	/** Autogenerated return type of AddAssigneesToAssignable */
["AddAssigneesToAssignablePayload"]: AliasType<{
	/** The item that was assigned. */
	assignable?:ResolverInputTypes["Assignable"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddComment */
["AddCommentInput"]: {
	/** The contents of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of AddComment */
["AddCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The edge from the subject's comment connection. */
	commentEdge?:ResolverInputTypes["IssueCommentEdge"],
	/** The subject */
	subject?:ResolverInputTypes["Node"],
	/** The edge from the subject's timeline connection. */
	timelineEdge?:ResolverInputTypes["IssueTimelineItemEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddDiscussionComment */
["AddDiscussionCommentInput"]: {
	/** The contents of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the discussion to comment on. */
	discussionId: string,
	/** The Node ID of the discussion comment within this discussion to reply to. */
	replyToId?: string | undefined | null
};
	/** Autogenerated return type of AddDiscussionComment */
["AddDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created discussion comment. */
	comment?:ResolverInputTypes["DiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddDiscussionPollVote */
["AddDiscussionPollVoteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the discussion poll option to vote for. */
	pollOptionId: string
};
	/** Autogenerated return type of AddDiscussionPollVote */
["AddDiscussionPollVotePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The poll option that a vote was added to. */
	pollOption?:ResolverInputTypes["DiscussionPollOption"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddEnterpriseSupportEntitlement */
["AddEnterpriseSupportEntitlementInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string,
	/** The login of a member who will receive the support entitlement. */
	login: string
};
	/** Autogenerated return type of AddEnterpriseSupportEntitlement */
["AddEnterpriseSupportEntitlementPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of adding the support entitlement. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddLabelsToLabelable */
["AddLabelsToLabelableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ids of the labels to add. */
	labelIds: Array<string>,
	/** The id of the labelable object to add labels to. */
	labelableId: string
};
	/** Autogenerated return type of AddLabelsToLabelable */
["AddLabelsToLabelablePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item that was labeled. */
	labelable?:ResolverInputTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectCard */
["AddProjectCardInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The content of the card. Must be a member of the ProjectCardItem union */
	contentId?: string | undefined | null,
	/** The note on the card. */
	note?: string | undefined | null,
	/** The Node ID of the ProjectColumn. */
	projectColumnId: string
};
	/** Autogenerated return type of AddProjectCard */
["AddProjectCardPayload"]: AliasType<{
	/** The edge from the ProjectColumn's card connection. */
	cardEdge?:ResolverInputTypes["ProjectCardEdge"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The ProjectColumn */
	projectColumn?:ResolverInputTypes["ProjectColumn"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectColumn */
["AddProjectColumnInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of the column. */
	name: string,
	/** The Node ID of the project. */
	projectId: string
};
	/** Autogenerated return type of AddProjectColumn */
["AddProjectColumnPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The edge from the project's column connection. */
	columnEdge?:ResolverInputTypes["ProjectColumnEdge"],
	/** The project */
	project?:ResolverInputTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectDraftIssue */
["AddProjectDraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `assigneeIds` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	assigneeIds?: Array<string> | undefined | null,
	/** The body of the draft issue.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `body` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the Project to add the draft issue to. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined | null,
	/** The title of the draft issue. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	title?: string | undefined | null
};
	/** Autogenerated return type of AddProjectDraftIssue */
["AddProjectDraftIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The draft issue added to the project. */
	projectNextItem?:ResolverInputTypes["ProjectNextItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectNextItem */
["AddProjectNextItemInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The content id of the item (Issue or PullRequest). This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `contentId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	contentId?: string | undefined | null,
	/** The ID of the Project to add the item to. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined | null
};
	/** Autogenerated return type of AddProjectNextItem */
["AddProjectNextItemPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item added to the project. */
	projectNextItem?:ResolverInputTypes["ProjectNextItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectV2DraftIssue */
["AddProjectV2DraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined | null,
	/** The body of the draft issue. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the Project to add the draft issue to. */
	projectId: string,
	/** The title of the draft issue. */
	title: string
};
	/** Autogenerated return type of AddProjectV2DraftIssue */
["AddProjectV2DraftIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The draft issue added to the project. */
	projectItem?:ResolverInputTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddProjectV2ItemById */
["AddProjectV2ItemByIdInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The id of the Issue or Pull Request to add. */
	contentId: string,
	/** The ID of the Project to add the item to. */
	projectId: string
};
	/** Autogenerated return type of AddProjectV2ItemById */
["AddProjectV2ItemByIdPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item added to the project. */
	item?:ResolverInputTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddPullRequestReviewComment */
["AddPullRequestReviewCommentInput"]: {
	/** The text of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The SHA of the commit to comment on. */
	commitOID?: ResolverInputTypes["GitObjectID"] | undefined | null,
	/** The comment id to reply to. */
	inReplyTo?: string | undefined | null,
	/** The relative path of the file to comment on. */
	path?: string | undefined | null,
	/** The line index in the diff to comment on. */
	position?: number | undefined | null,
	/** The node ID of the pull request reviewing */
	pullRequestId?: string | undefined | null,
	/** The Node ID of the review to modify. */
	pullRequestReviewId?: string | undefined | null
};
	/** Autogenerated return type of AddPullRequestReviewComment */
["AddPullRequestReviewCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created comment. */
	comment?:ResolverInputTypes["PullRequestReviewComment"],
	/** The edge from the review's comment connection. */
	commentEdge?:ResolverInputTypes["PullRequestReviewCommentEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddPullRequestReview */
["AddPullRequestReviewInput"]: {
	/** The contents of the review body comment. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The review line comments. */
	comments?: Array<ResolverInputTypes["DraftPullRequestReviewComment"] | undefined | null> | undefined | null,
	/** The commit OID the review pertains to. */
	commitOID?: ResolverInputTypes["GitObjectID"] | undefined | null,
	/** The event to perform on the pull request review. */
	event?: ResolverInputTypes["PullRequestReviewEvent"] | undefined | null,
	/** The Node ID of the pull request to modify. */
	pullRequestId: string,
	/** The review line comment threads. */
	threads?: Array<ResolverInputTypes["DraftPullRequestReviewThread"] | undefined | null> | undefined | null
};
	/** Autogenerated return type of AddPullRequestReview */
["AddPullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created pull request review. */
	pullRequestReview?:ResolverInputTypes["PullRequestReview"],
	/** The edge from the pull request's review connection. */
	reviewEdge?:ResolverInputTypes["PullRequestReviewEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddPullRequestReviewThread */
["AddPullRequestReviewThreadInput"]: {
	/** Body of the thread's first comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
	line: number,
	/** Path to the file being commented on. */
	path: string,
	/** The node ID of the pull request reviewing */
	pullRequestId?: string | undefined | null,
	/** The Node ID of the review to modify. */
	pullRequestReviewId?: string | undefined | null,
	/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
	side?: ResolverInputTypes["DiffSide"] | undefined | null,
	/** The first line of the range to which the comment refers. */
	startLine?: number | undefined | null,
	/** The side of the diff on which the start line resides. */
	startSide?: ResolverInputTypes["DiffSide"] | undefined | null
};
	/** Autogenerated return type of AddPullRequestReviewThread */
["AddPullRequestReviewThreadPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created thread. */
	thread?:ResolverInputTypes["PullRequestReviewThread"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddReaction */
["AddReactionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of the emoji to react with. */
	content: ResolverInputTypes["ReactionContent"],
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of AddReaction */
["AddReactionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The reaction object. */
	reaction?:ResolverInputTypes["Reaction"],
	/** The reactable subject. */
	subject?:ResolverInputTypes["Reactable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddStar */
["AddStarInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Starrable ID to star. */
	starrableId: string
};
	/** Autogenerated return type of AddStar */
["AddStarPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The starrable. */
	starrable?:ResolverInputTypes["Starrable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddUpvote */
["AddUpvoteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the discussion or comment to upvote. */
	subjectId: string
};
	/** Autogenerated return type of AddUpvote */
["AddUpvotePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The votable subject. */
	subject?:ResolverInputTypes["Votable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of AddVerifiableDomain */
["AddVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The URL of the domain */
	domain: ResolverInputTypes["URI"],
	/** The ID of the owner to add the domain to */
	ownerId: string
};
	/** Autogenerated return type of AddVerifiableDomain */
["AddVerifiableDomainPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The verifiable domain that was added. */
	domain?:ResolverInputTypes["VerifiableDomain"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'added_to_project' event on a given issue or pull request. */
["AddedToProjectEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Project referenced by event. */
	project?:ResolverInputTypes["Project"],
	/** Project card referenced by this project event. */
	projectCard?:ResolverInputTypes["ProjectCard"],
	/** Column name referenced by this project event. */
	projectColumnName?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A GitHub App. */
["App"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The description of the app. */
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
ipAllowListEntries?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for IP allow list entries returned. */
	orderBy?: ResolverInputTypes["IpAllowListEntryOrder"] | undefined | null},ResolverInputTypes["IpAllowListEntryConnection"]],
	/** The hex color code, without the leading '#', for the logo background. */
	logoBackgroundColor?:boolean | `@${string}`,
logoUrl?: [{	/** The size of the resulting image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** The name of the app. */
	name?:boolean | `@${string}`,
	/** A slug based on the name of the app for use in URLs. */
	slug?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The URL to the app's homepage. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ApproveDeployments */
["ApproveDeploymentsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Optional comment for approving deployments */
	comment?: string | undefined | null,
	/** The ids of environments to reject deployments */
	environmentIds: Array<string>,
	/** The node ID of the workflow run containing the pending deployments. */
	workflowRunId: string
};
	/** Autogenerated return type of ApproveDeployments */
["ApproveDeploymentsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The affected deployments. */
	deployments?:ResolverInputTypes["Deployment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ApproveVerifiableDomain */
["ApproveVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the verifiable domain to approve. */
	id: string
};
	/** Autogenerated return type of ApproveVerifiableDomain */
["ApproveVerifiableDomainPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The verifiable domain that was approved. */
	domain?:ResolverInputTypes["VerifiableDomain"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ArchiveRepository */
["ArchiveRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the repository to mark as archived. */
	repositoryId: string
};
	/** Autogenerated return type of ArchiveRepository */
["ArchiveRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository that was marked as archived. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An object that can have users assigned to it. */
["Assignable"]:AliasType<{
	assignees?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]];
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["Assignable"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["Assignable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'assigned' event on any assignable object. */
["AssignedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the assignable associated with the event. */
	assignable?:ResolverInputTypes["Assignable"],
	/** Identifies the user or mannequin that was assigned. */
	assignee?:ResolverInputTypes["Assignee"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the user who was assigned. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be assigned to issues. */
["Assignee"]: AliasType<{
	Bot?:ResolverInputTypes["Bot"],
	Mannequin?:ResolverInputTypes["Mannequin"],
	Organization?:ResolverInputTypes["Organization"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** An entry in the audit log. */
["AuditEntry"]:AliasType<{
		/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`;
		['...on MembersCanDeleteReposClearAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposClearAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on MembersCanDeleteReposDisableAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposDisableAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on MembersCanDeleteReposEnableAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposEnableAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OauthApplicationCreateAuditEntry']?: Omit<ResolverInputTypes["OauthApplicationCreateAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgAddBillingManagerAuditEntry']?: Omit<ResolverInputTypes["OrgAddBillingManagerAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgAddMemberAuditEntry']?: Omit<ResolverInputTypes["OrgAddMemberAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgBlockUserAuditEntry']?: Omit<ResolverInputTypes["OrgBlockUserAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgCreateAuditEntry']?: Omit<ResolverInputTypes["OrgCreateAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgDisableOauthAppRestrictionsAuditEntry']?: Omit<ResolverInputTypes["OrgDisableOauthAppRestrictionsAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgDisableSamlAuditEntry']?: Omit<ResolverInputTypes["OrgDisableSamlAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgDisableTwoFactorRequirementAuditEntry']?: Omit<ResolverInputTypes["OrgDisableTwoFactorRequirementAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgEnableOauthAppRestrictionsAuditEntry']?: Omit<ResolverInputTypes["OrgEnableOauthAppRestrictionsAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgEnableSamlAuditEntry']?: Omit<ResolverInputTypes["OrgEnableSamlAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgEnableTwoFactorRequirementAuditEntry']?: Omit<ResolverInputTypes["OrgEnableTwoFactorRequirementAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgInviteMemberAuditEntry']?: Omit<ResolverInputTypes["OrgInviteMemberAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgInviteToBusinessAuditEntry']?: Omit<ResolverInputTypes["OrgInviteToBusinessAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgOauthAppAccessApprovedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessApprovedAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgOauthAppAccessDeniedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessDeniedAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgOauthAppAccessRequestedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessRequestedAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgRemoveBillingManagerAuditEntry']?: Omit<ResolverInputTypes["OrgRemoveBillingManagerAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["OrgRemoveMemberAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgRemoveOutsideCollaboratorAuditEntry']?: Omit<ResolverInputTypes["OrgRemoveOutsideCollaboratorAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgRestoreMemberAuditEntry']?: Omit<ResolverInputTypes["OrgRestoreMemberAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgUnblockUserAuditEntry']?: Omit<ResolverInputTypes["OrgUnblockUserAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgUpdateMemberAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateMemberAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoAccessAuditEntry']?: Omit<ResolverInputTypes["RepoAccessAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoAddMemberAuditEntry']?: Omit<ResolverInputTypes["RepoAddMemberAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoAddTopicAuditEntry']?: Omit<ResolverInputTypes["RepoAddTopicAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoArchivedAuditEntry']?: Omit<ResolverInputTypes["RepoArchivedAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoChangeMergeSettingAuditEntry']?: Omit<ResolverInputTypes["RepoChangeMergeSettingAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigDisableAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigDisableContributorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableContributorsOnlyAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigEnableAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigEnableContributorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableContributorsOnlyAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigLockAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoCreateAuditEntry']?: Omit<ResolverInputTypes["RepoCreateAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoDestroyAuditEntry']?: Omit<ResolverInputTypes["RepoDestroyAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["RepoRemoveMemberAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ResolverInputTypes["RepoRemoveTopicAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepositoryVisibilityChangeDisableAuditEntry']?: Omit<ResolverInputTypes["RepositoryVisibilityChangeDisableAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on RepositoryVisibilityChangeEnableAuditEntry']?: Omit<ResolverInputTypes["RepositoryVisibilityChangeEnableAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on TeamAddMemberAuditEntry']?: Omit<ResolverInputTypes["TeamAddMemberAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamAddRepositoryAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on TeamChangeParentTeamAuditEntry']?: Omit<ResolverInputTypes["TeamChangeParentTeamAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on TeamRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["TeamRemoveMemberAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamRemoveRepositoryAuditEntry"],keyof ResolverInputTypes["AuditEntry"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Types that can initiate an audit log event. */
["AuditEntryActor"]: AliasType<{
	Bot?:ResolverInputTypes["Bot"],
	Organization?:ResolverInputTypes["Organization"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Audit Log connections. */
["AuditLogOrder"]: {
	/** The ordering direction. */
	direction?: ResolverInputTypes["OrderDirection"] | undefined | null,
	/** The field to order Audit Logs by. */
	field?: ResolverInputTypes["AuditLogOrderField"] | undefined | null
};
	/** Properties by which Audit Log connections can be ordered. */
["AuditLogOrderField"]:AuditLogOrderField;
	/** Represents a 'auto_merge_disabled' event on a given pull request. */
["AutoMergeDisabledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who disabled auto-merge for this Pull Request */
	disabler?:ResolverInputTypes["User"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The reason auto-merge was disabled */
	reason?:boolean | `@${string}`,
	/** The reason_code relating to why auto-merge was disabled */
	reasonCode?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'auto_merge_enabled' event on a given pull request. */
["AutoMergeEnabledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who enabled auto-merge for this Pull Request */
	enabler?:ResolverInputTypes["User"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an auto-merge request for a pull request */
["AutoMergeRequest"]: AliasType<{
	/** The email address of the author of this auto-merge request. */
	authorEmail?:boolean | `@${string}`,
	/** The commit message of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging. */
	commitBody?:boolean | `@${string}`,
	/** The commit title of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging */
	commitHeadline?:boolean | `@${string}`,
	/** When was this auto-merge request was enabled. */
	enabledAt?:boolean | `@${string}`,
	/** The actor who created the auto-merge request. */
	enabledBy?:ResolverInputTypes["Actor"],
	/** The merge method of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging. */
	mergeMethod?:boolean | `@${string}`,
	/** The pull request that this auto-merge request is set against. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'auto_rebase_enabled' event on a given pull request. */
["AutoRebaseEnabledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who enabled auto-merge (rebase) for this Pull Request */
	enabler?:ResolverInputTypes["User"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'auto_squash_enabled' event on a given pull request. */
["AutoSquashEnabledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who enabled auto-merge (squash) for this Pull Request */
	enabler?:ResolverInputTypes["User"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'automatic_base_change_failed' event on a given pull request. */
["AutomaticBaseChangeFailedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The new base for this PR */
	newBase?:boolean | `@${string}`,
	/** The old base for this PR */
	oldBase?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
["AutomaticBaseChangeSucceededEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The new base for this PR */
	newBase?:boolean | `@${string}`,
	/** The old base for this PR */
	oldBase?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** A (potentially binary) string encoded using base64. */
["Base64String"]:unknown;
	/** Represents a 'base_ref_changed' event on a given issue or pull request. */
["BaseRefChangedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the name of the base ref for the pull request after it was changed. */
	currentRefName?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the name of the base ref for the pull request before it was changed. */
	previousRefName?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'base_ref_deleted' event on a given pull request. */
["BaseRefDeletedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
	baseRefName?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'base_ref_force_pushed' event on a given pull request. */
["BaseRefForcePushedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
	afterCommit?:ResolverInputTypes["Commit"],
	/** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
	beforeCommit?:ResolverInputTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
	ref?:ResolverInputTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git blame. */
["Blame"]: AliasType<{
	/** The list of ranges from a Git blame. */
	ranges?:ResolverInputTypes["BlameRange"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a range of information from a Git blame. */
["BlameRange"]: AliasType<{
	/** Identifies the recency of the change, from 1 (new) to 10 (old). This is
calculated as a 2-quantile and determines the length of distance between the
median age of all the changes in the file and the recency of the current
range's change. */
	age?:boolean | `@${string}`,
	/** Identifies the line author */
	commit?:ResolverInputTypes["Commit"],
	/** The ending line for the range */
	endingLine?:boolean | `@${string}`,
	/** The starting line for the range */
	startingLine?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git blob. */
["Blob"]: AliasType<{
	/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** Byte size of Blob object */
	byteSize?:boolean | `@${string}`,
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
	isBinary?:boolean | `@${string}`,
	/** Indicates whether the contents is truncated */
	isTruncated?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The Repository the Git object belongs to */
	repository?:ResolverInputTypes["Repository"],
	/** UTF8 text data or null if the Blob is binary */
	text?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A special type of user which takes actions on behalf of GitHub Apps. */
["Bot"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The username of the actor. */
	login?:boolean | `@${string}`,
	/** The HTTP path for this bot */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this bot */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types which can be actors for `BranchActorAllowance` objects. */
["BranchActorAllowanceActor"]: AliasType<{
	App?:ResolverInputTypes["App"],
	Team?:ResolverInputTypes["Team"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A branch protection rule. */
["BranchProtectionRule"]: AliasType<{
	/** Can this branch be deleted. */
	allowsDeletions?:boolean | `@${string}`,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?:boolean | `@${string}`,
	/** Is branch creation a protected operation. */
	blocksCreations?:boolean | `@${string}`,
branchProtectionRuleConflicts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["BranchProtectionRuleConflictConnection"]],
bypassForcePushAllowances?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["BypassForcePushAllowanceConnection"]],
bypassPullRequestAllowances?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["BypassPullRequestAllowanceConnection"]],
	/** The actor who created this branch protection rule. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?:boolean | `@${string}`,
matchingRefs?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filters refs with query on name */
	query?: string | undefined | null},ResolverInputTypes["RefConnection"]],
	/** Identifies the protection rule pattern. */
	pattern?:boolean | `@${string}`,
pushAllowances?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PushAllowanceConnection"]],
	/** The repository associated with this branch protection rule. */
	repository?:ResolverInputTypes["Repository"],
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?:boolean | `@${string}`,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?:boolean | `@${string}`,
	/** List of required status checks that must pass for commits to be accepted to matching branches. */
	requiredStatusChecks?:ResolverInputTypes["RequiredStatusCheckDescription"],
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?:boolean | `@${string}`,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?:boolean | `@${string}`,
	/** Are commits required to be signed. */
	requiresCommitSignatures?:boolean | `@${string}`,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?:boolean | `@${string}`,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?:boolean | `@${string}`,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?:boolean | `@${string}`,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?:boolean | `@${string}`,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?:boolean | `@${string}`,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?:boolean | `@${string}`,
reviewDismissalAllowances?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ReviewDismissalAllowanceConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** A conflict between two branch protection rules. */
["BranchProtectionRuleConflict"]: AliasType<{
	/** Identifies the branch protection rule. */
	branchProtectionRule?:ResolverInputTypes["BranchProtectionRule"],
	/** Identifies the conflicting branch protection rule. */
	conflictingBranchProtectionRule?:ResolverInputTypes["BranchProtectionRule"],
	/** Identifies the branch ref that has conflicting rules */
	ref?:ResolverInputTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for BranchProtectionRuleConflict. */
["BranchProtectionRuleConflictConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["BranchProtectionRuleConflictEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["BranchProtectionRuleConflict"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["BranchProtectionRuleConflictEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["BranchProtectionRuleConflict"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for BranchProtectionRule. */
["BranchProtectionRuleConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["BranchProtectionRuleEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["BranchProtectionRule"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["BranchProtectionRuleEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["BranchProtectionRule"],
		__typename?: boolean | `@${string}`
}>;
	/** A user, team, or app who has the ability to bypass a force push requirement on a protected branch. */
["BypassForcePushAllowance"]: AliasType<{
	/** The actor that can force push. */
	actor?:ResolverInputTypes["BranchActorAllowanceActor"],
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?:ResolverInputTypes["BranchProtectionRule"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for BypassForcePushAllowance. */
["BypassForcePushAllowanceConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["BypassForcePushAllowanceEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["BypassForcePushAllowance"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["BypassForcePushAllowanceEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["BypassForcePushAllowance"],
		__typename?: boolean | `@${string}`
}>;
	/** A user, team, or app who has the ability to bypass a pull request requirement on a protected branch. */
["BypassPullRequestAllowance"]: AliasType<{
	/** The actor that can bypass. */
	actor?:ResolverInputTypes["BranchActorAllowanceActor"],
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?:ResolverInputTypes["BranchProtectionRule"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for BypassPullRequestAllowance. */
["BypassPullRequestAllowanceConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["BypassPullRequestAllowanceEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["BypassPullRequestAllowance"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["BypassPullRequestAllowanceEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["BypassPullRequestAllowance"],
		__typename?: boolean | `@${string}`
}>;
	/** The Common Vulnerability Scoring System */
["CVSS"]: AliasType<{
	/** The CVSS score associated with this advisory */
	score?:boolean | `@${string}`,
	/** The CVSS vector string associated with this advisory */
	vectorString?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A common weakness enumeration */
["CWE"]: AliasType<{
	/** The id of the CWE */
	cweId?:boolean | `@${string}`,
	/** A detailed description of this CWE */
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of this CWE */
	name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CWE. */
["CWEConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CWEEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CWE"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CWEEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CWE"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CancelEnterpriseAdminInvitation */
["CancelEnterpriseAdminInvitationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the pending enterprise administrator invitation. */
	invitationId: string
};
	/** Autogenerated return type of CancelEnterpriseAdminInvitation */
["CancelEnterpriseAdminInvitationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The invitation that was canceled. */
	invitation?:ResolverInputTypes["EnterpriseAdministratorInvitation"],
	/** A message confirming the result of canceling an administrator invitation. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CancelSponsorship */
["CancelSponsorshipInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined | null,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined | null,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined | null,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined | null
};
	/** Autogenerated return type of CancelSponsorship */
["CancelSponsorshipPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The tier that was being used at the time of cancellation. */
	sponsorsTier?:ResolverInputTypes["SponsorsTier"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ChangeUserStatus */
["ChangeUserStatusInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
	emoji?: string | undefined | null,
	/** If set, the user status will not be shown after this date. */
	expiresAt?: ResolverInputTypes["DateTime"] | undefined | null,
	/** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
	limitedAvailability?: boolean | undefined | null,
	/** A short description of your current status. */
	message?: string | undefined | null,
	/** The ID of the organization whose members will be allowed to see the status. If
omitted, the status will be publicly visible. */
	organizationId?: string | undefined | null
};
	/** Autogenerated return type of ChangeUserStatus */
["ChangeUserStatusPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Your updated status. */
	status?:ResolverInputTypes["UserStatus"],
		__typename?: boolean | `@${string}`
}>;
	/** A single check annotation. */
["CheckAnnotation"]: AliasType<{
	/** The annotation's severity level. */
	annotationLevel?:boolean | `@${string}`,
	/** The path to the file that this annotation was made on. */
	blobUrl?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The position of this annotation. */
	location?:ResolverInputTypes["CheckAnnotationSpan"],
	/** The annotation's message. */
	message?:boolean | `@${string}`,
	/** The path that this annotation was made on. */
	path?:boolean | `@${string}`,
	/** Additional information about the annotation. */
	rawDetails?:boolean | `@${string}`,
	/** The annotation's title */
	title?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CheckAnnotation. */
["CheckAnnotationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CheckAnnotationEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CheckAnnotation"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Information from a check run analysis to specific lines of code. */
["CheckAnnotationData"]: {
	/** Represents an annotation's information level */
	annotationLevel: ResolverInputTypes["CheckAnnotationLevel"],
	/** The location of the annotation */
	location: ResolverInputTypes["CheckAnnotationRange"],
	/** A short description of the feedback for these lines of code. */
	message: string,
	/** The path of the file to add an annotation to. */
	path: string,
	/** Details about this annotation. */
	rawDetails?: string | undefined | null,
	/** The title that represents the annotation. */
	title?: string | undefined | null
};
	/** An edge in a connection. */
["CheckAnnotationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CheckAnnotation"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an annotation's information level. */
["CheckAnnotationLevel"]:CheckAnnotationLevel;
	/** A character position in a check annotation. */
["CheckAnnotationPosition"]: AliasType<{
	/** Column number (1 indexed). */
	column?:boolean | `@${string}`,
	/** Line number (1 indexed). */
	line?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Information from a check run analysis to specific lines of code. */
["CheckAnnotationRange"]: {
	/** The ending column of the range. */
	endColumn?: number | undefined | null,
	/** The ending line of the range. */
	endLine: number,
	/** The starting column of the range. */
	startColumn?: number | undefined | null,
	/** The starting line of the range. */
	startLine: number
};
	/** An inclusive pair of positions for a check annotation. */
["CheckAnnotationSpan"]: AliasType<{
	/** End position (inclusive). */
	end?:ResolverInputTypes["CheckAnnotationPosition"],
	/** Start position (inclusive). */
	start?:ResolverInputTypes["CheckAnnotationPosition"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states for a check suite or run conclusion. */
["CheckConclusionState"]:CheckConclusionState;
	/** A check run. */
["CheckRun"]: AliasType<{
annotations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CheckAnnotationConnection"]],
	/** The check suite that this run is a part of. */
	checkSuite?:ResolverInputTypes["CheckSuite"],
	/** Identifies the date and time when the check run was completed. */
	completedAt?:boolean | `@${string}`,
	/** The conclusion of the check run. */
	conclusion?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The corresponding deployment for this job, if any */
	deployment?:ResolverInputTypes["Deployment"],
	/** The URL from which to find full details of the check run on the integrator's site. */
	detailsUrl?:boolean | `@${string}`,
	/** A reference for the check run on the integrator's system. */
	externalId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
isRequired?: [{	/** The id of the pull request this is required for */
	pullRequestId?: string | undefined | null,	/** The number of the pull request this is required for */
	pullRequestNumber?: number | undefined | null},boolean | `@${string}`],
	/** The name of the check for this check run. */
	name?:boolean | `@${string}`,
	/** Information about a pending deployment, if any, in this check run */
	pendingDeploymentRequest?:ResolverInputTypes["DeploymentRequest"],
	/** The permalink to the check run summary. */
	permalink?:boolean | `@${string}`,
	/** The repository associated with this check run. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this check run. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the check run was started. */
	startedAt?:boolean | `@${string}`,
	/** The current status of the check run. */
	status?:boolean | `@${string}`,
steps?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Step number */
	number?: number | undefined | null},ResolverInputTypes["CheckStepConnection"]],
	/** A string representing the check run's summary */
	summary?:boolean | `@${string}`,
	/** A string representing the check run's text */
	text?:boolean | `@${string}`,
	/** A string representing the check run */
	title?:boolean | `@${string}`,
	/** The HTTP URL for this check run. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Possible further actions the integrator can perform. */
["CheckRunAction"]: {
	/** A short explanation of what this action would do. */
	description: string,
	/** A reference for the action on the integrator's system. */
	identifier: string,
	/** The text to be displayed on a button in the web UI. */
	label: string
};
	/** The connection type for CheckRun. */
["CheckRunConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CheckRunEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CheckRun"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CheckRunEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CheckRun"],
		__typename?: boolean | `@${string}`
}>;
	/** The filters that are available when fetching check runs. */
["CheckRunFilter"]: {
	/** Filters the check runs created by this application ID. */
	appId?: number | undefined | null,
	/** Filters the check runs by this name. */
	checkName?: string | undefined | null,
	/** Filters the check runs by this type. */
	checkType?: ResolverInputTypes["CheckRunType"] | undefined | null,
	/** Filters the check runs by these conclusions. */
	conclusions?: Array<ResolverInputTypes["CheckConclusionState"]> | undefined | null,
	/** Filters the check runs by this status. Superceded by statuses. */
	status?: ResolverInputTypes["CheckStatusState"] | undefined | null,
	/** Filters the check runs by this status. Overrides status. */
	statuses?: Array<ResolverInputTypes["CheckStatusState"]> | undefined | null
};
	/** Descriptive details about the check run. */
["CheckRunOutput"]: {
	/** The annotations that are made as part of the check run. */
	annotations?: Array<ResolverInputTypes["CheckAnnotationData"]> | undefined | null,
	/** Images attached to the check run output displayed in the GitHub pull request UI. */
	images?: Array<ResolverInputTypes["CheckRunOutputImage"]> | undefined | null,
	/** The summary of the check run (supports Commonmark). */
	summary: string,
	/** The details of the check run (supports Commonmark). */
	text?: string | undefined | null,
	/** A title to provide for this check run. */
	title: string
};
	/** Images attached to the check run output displayed in the GitHub pull request UI. */
["CheckRunOutputImage"]: {
	/** The alternative text for the image. */
	alt: string,
	/** A short image description. */
	caption?: string | undefined | null,
	/** The full URL of the image. */
	imageUrl: ResolverInputTypes["URI"]
};
	/** The possible states of a check run in a status rollup. */
["CheckRunState"]:CheckRunState;
	/** Represents a count of the state of a check run. */
["CheckRunStateCount"]: AliasType<{
	/** The number of check runs with this state. */
	count?:boolean | `@${string}`,
	/** The state of a check run. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible types of check runs. */
["CheckRunType"]:CheckRunType;
	/** The possible states for a check suite or run status. */
["CheckStatusState"]:CheckStatusState;
	/** A single check step. */
["CheckStep"]: AliasType<{
	/** Identifies the date and time when the check step was completed. */
	completedAt?:boolean | `@${string}`,
	/** The conclusion of the check step. */
	conclusion?:boolean | `@${string}`,
	/** A reference for the check step on the integrator's system. */
	externalId?:boolean | `@${string}`,
	/** The step's name. */
	name?:boolean | `@${string}`,
	/** The index of the step in the list of steps of the parent check run. */
	number?:boolean | `@${string}`,
	/** Number of seconds to completion. */
	secondsToCompletion?:boolean | `@${string}`,
	/** Identifies the date and time when the check step was started. */
	startedAt?:boolean | `@${string}`,
	/** The current status of the check step. */
	status?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CheckStep. */
["CheckStepConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CheckStepEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CheckStep"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CheckStepEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CheckStep"],
		__typename?: boolean | `@${string}`
}>;
	/** A check suite. */
["CheckSuite"]: AliasType<{
	/** The GitHub App which created this check suite. */
	app?:ResolverInputTypes["App"],
	/** The name of the branch for this check suite. */
	branch?:ResolverInputTypes["Ref"],
checkRuns?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Filters the check runs by this type. */
	filterBy?: ResolverInputTypes["CheckRunFilter"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CheckRunConnection"]],
	/** The commit for this check suite */
	commit?:ResolverInputTypes["Commit"],
	/** The conclusion of this check suite. */
	conclusion?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The user who triggered the check suite. */
	creator?:ResolverInputTypes["User"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
matchingPullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the pull requests by. */
	states?: Array<ResolverInputTypes["PullRequestState"]> | undefined | null},ResolverInputTypes["PullRequestConnection"]],
	/** The push that triggered this check suite. */
	push?:ResolverInputTypes["Push"],
	/** The repository associated with this check suite. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this check suite */
	resourcePath?:boolean | `@${string}`,
	/** The status of this check suite. */
	status?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this check suite */
	url?:boolean | `@${string}`,
	/** The workflow run associated with this check suite. */
	workflowRun?:ResolverInputTypes["WorkflowRun"],
		__typename?: boolean | `@${string}`
}>;
	/** The auto-trigger preferences that are available for check suites. */
["CheckSuiteAutoTriggerPreference"]: {
	/** The node ID of the application that owns the check suite. */
	appId: string,
	/** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
	setting: boolean
};
	/** The connection type for CheckSuite. */
["CheckSuiteConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CheckSuiteEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CheckSuite"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CheckSuiteEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CheckSuite"],
		__typename?: boolean | `@${string}`
}>;
	/** The filters that are available when fetching check suites. */
["CheckSuiteFilter"]: {
	/** Filters the check suites created by this application ID. */
	appId?: number | undefined | null,
	/** Filters the check suites by this name. */
	checkName?: string | undefined | null
};
	/** Autogenerated input type of ClearLabelsFromLabelable */
["ClearLabelsFromLabelableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The id of the labelable object to clear the labels from. */
	labelableId: string
};
	/** Autogenerated return type of ClearLabelsFromLabelable */
["ClearLabelsFromLabelablePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item that was unlabeled. */
	labelable?:ResolverInputTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ClearProjectV2ItemFieldValue */
["ClearProjectV2ItemFieldValueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the field to be cleared. */
	fieldId: string,
	/** The ID of the item to be cleared. */
	itemId: string,
	/** The ID of the Project. */
	projectId: string
};
	/** Autogenerated return type of ClearProjectV2ItemFieldValue */
["ClearProjectV2ItemFieldValuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated item. */
	projectV2Item?:ResolverInputTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CloneProject */
["CloneProjectInput"]: {
	/** The description of the project. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Whether or not to clone the source project's workflows. */
	includeWorkflows: boolean,
	/** The name of the project. */
	name: string,
	/** The visibility of the project, defaults to false (private). */
	public?: boolean | undefined | null,
	/** The source project to clone. */
	sourceId: string,
	/** The owner ID to create the project under. */
	targetOwnerId: string
};
	/** Autogenerated return type of CloneProject */
["CloneProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The id of the JobStatus for populating cloned fields. */
	jobStatusId?:boolean | `@${string}`,
	/** The new cloned project. */
	project?:ResolverInputTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CloneTemplateRepository */
["CloneTemplateRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** A short description of the new repository. */
	description?: string | undefined | null,
	/** Whether to copy all branches from the template to the new repository. Defaults
to copying only the default branch of the template. */
	includeAllBranches?: boolean | undefined | null,
	/** The name of the new repository. */
	name: string,
	/** The ID of the owner for the new repository. */
	ownerId: string,
	/** The Node ID of the template repository. */
	repositoryId: string,
	/** Indicates the repository's visibility level. */
	visibility: ResolverInputTypes["RepositoryVisibility"]
};
	/** Autogenerated return type of CloneTemplateRepository */
["CloneTemplateRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new repository. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An object that can be closed */
["Closable"]:AliasType<{
		/** `true` if the object is closed (definition of closed may depend on type) */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["Closable"]>;
		['...on Milestone']?: Omit<ResolverInputTypes["Milestone"],keyof ResolverInputTypes["Closable"]>;
		['...on Project']?: Omit<ResolverInputTypes["Project"],keyof ResolverInputTypes["Closable"]>;
		['...on ProjectNext']?: Omit<ResolverInputTypes["ProjectNext"],keyof ResolverInputTypes["Closable"]>;
		['...on ProjectV2']?: Omit<ResolverInputTypes["ProjectV2"],keyof ResolverInputTypes["Closable"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["Closable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CloseIssue */
["CloseIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the issue to be closed. */
	issueId: string,
	/** The reason the issue is to be closed. */
	stateReason?: ResolverInputTypes["IssueClosedStateReason"] | undefined | null
};
	/** Autogenerated return type of CloseIssue */
["CloseIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was closed. */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ClosePullRequest */
["ClosePullRequestInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the pull request to be closed. */
	pullRequestId: string
};
	/** Autogenerated return type of ClosePullRequest */
["ClosePullRequestPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that was closed. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'closed' event on any `Closable`. */
["ClosedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Object that was closed. */
	closable?:ResolverInputTypes["Closable"],
	/** Object which triggered the creation of this event. */
	closer?:ResolverInputTypes["Closer"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The HTTP path for this closed event. */
	resourcePath?:boolean | `@${string}`,
	/** The reason the issue state was changed to closed. */
	stateReason?:boolean | `@${string}`,
	/** The HTTP URL for this closed event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The object which triggered a `ClosedEvent`. */
["Closer"]: AliasType<{
	Commit?:ResolverInputTypes["Commit"],
	PullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** The Code of Conduct for a repository */
["CodeOfConduct"]: AliasType<{
	/** The body of the Code of Conduct */
	body?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The key for the Code of Conduct */
	key?:boolean | `@${string}`,
	/** The formal name of the Code of Conduct */
	name?:boolean | `@${string}`,
	/** The HTTP path for this Code of Conduct */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Code of Conduct */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Collaborators affiliation level with a subject. */
["CollaboratorAffiliation"]:CollaboratorAffiliation;
	/** Represents a comment. */
["Comment"]:AliasType<{
		/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ResolverInputTypes["CommitComment"],keyof ResolverInputTypes["Comment"]>;
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["Comment"]>;
		['...on DiscussionComment']?: Omit<ResolverInputTypes["DiscussionComment"],keyof ResolverInputTypes["Comment"]>;
		['...on GistComment']?: Omit<ResolverInputTypes["GistComment"],keyof ResolverInputTypes["Comment"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["Comment"]>;
		['...on IssueComment']?: Omit<ResolverInputTypes["IssueComment"],keyof ResolverInputTypes["Comment"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["Comment"]>;
		['...on PullRequestReview']?: Omit<ResolverInputTypes["PullRequestReview"],keyof ResolverInputTypes["Comment"]>;
		['...on PullRequestReviewComment']?: Omit<ResolverInputTypes["PullRequestReviewComment"],keyof ResolverInputTypes["Comment"]>;
		['...on TeamDiscussion']?: Omit<ResolverInputTypes["TeamDiscussion"],keyof ResolverInputTypes["Comment"]>;
		['...on TeamDiscussionComment']?: Omit<ResolverInputTypes["TeamDiscussionComment"],keyof ResolverInputTypes["Comment"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A comment author association with repository. */
["CommentAuthorAssociation"]:CommentAuthorAssociation;
	/** The possible errors that will prevent a user from updating a comment. */
["CommentCannotUpdateReason"]:CommentCannotUpdateReason;
	/** Represents a 'comment_deleted' event on a given issue or pull request. */
["CommentDeletedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The user who authored the deleted comment. */
	deletedCommentAuthor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git commit. */
["Commit"]: AliasType<{
	/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** The number of additions in this commit. */
	additions?:boolean | `@${string}`,
associatedPullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pull requests. */
	orderBy?: ResolverInputTypes["PullRequestOrder"] | undefined | null},ResolverInputTypes["PullRequestConnection"]],
	/** Authorship details of the commit. */
	author?:ResolverInputTypes["GitActor"],
	/** Check if the committer and the author match. */
	authoredByCommitter?:boolean | `@${string}`,
	/** The datetime when this commit was authored. */
	authoredDate?:boolean | `@${string}`,
authors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["GitActorConnection"]],
blame?: [{	/** The file whose Git blame information you want. */
	path: string},ResolverInputTypes["Blame"]],
	/** We recommend using the `changedFielsIfAvailable` field instead of
`changedFiles`, as `changedFiles` will cause your request to return an error
if GitHub is unable to calculate the number of changed files. */
	changedFiles?:boolean | `@${string}`,
	/** The number of changed files in this commit. If GitHub is unable to calculate
the number of changed files (for example due to a timeout), this will return
`null`. We recommend using this field instead of `changedFiles`. */
	changedFilesIfAvailable?:boolean | `@${string}`,
checkSuites?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Filters the check suites by this type. */
	filterBy?: ResolverInputTypes["CheckSuiteFilter"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CheckSuiteConnection"]],
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CommitCommentConnection"]],
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	/** The datetime when this commit was committed. */
	committedDate?:boolean | `@${string}`,
	/** Check if committed via GitHub web UI. */
	committedViaWeb?:boolean | `@${string}`,
	/** Committer details of the commit. */
	committer?:ResolverInputTypes["GitActor"],
	/** The number of deletions in this commit. */
	deletions?:boolean | `@${string}`,
deployments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Environments to list deployments for */
	environments?: Array<string> | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for deployments returned from the connection. */
	orderBy?: ResolverInputTypes["DeploymentOrder"] | undefined | null},ResolverInputTypes["DeploymentConnection"]],
file?: [{	/** The path for the file */
	path: string},ResolverInputTypes["TreeEntry"]],
history?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** If non-null, filters history to only show commits with matching authorship. */
	author?: ResolverInputTypes["CommitAuthor"] | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** If non-null, filters history to only show commits touching files under this path. */
	path?: string | undefined | null,	/** Allows specifying a beginning time or date for fetching commits. */
	since?: ResolverInputTypes["GitTimestamp"] | undefined | null,	/** Allows specifying an ending time or date for fetching commits. */
	until?: ResolverInputTypes["GitTimestamp"] | undefined | null},ResolverInputTypes["CommitHistoryConnection"]],
	id?:boolean | `@${string}`,
	/** The Git commit message */
	message?:boolean | `@${string}`,
	/** The Git commit message body */
	messageBody?:boolean | `@${string}`,
	/** The commit message body rendered to HTML. */
	messageBodyHTML?:boolean | `@${string}`,
	/** The Git commit message headline */
	messageHeadline?:boolean | `@${string}`,
	/** The commit message headline rendered to HTML. */
	messageHeadlineHTML?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The organization this commit was made on behalf of. */
	onBehalfOf?:ResolverInputTypes["Organization"],
parents?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CommitConnection"]],
	/** The datetime when this commit was pushed. */
	pushedDate?:boolean | `@${string}`,
	/** The Repository this commit belongs to */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this commit */
	resourcePath?:boolean | `@${string}`,
	/** Commit signing information, if present. */
	signature?:ResolverInputTypes["GitSignature"],
	/** Status information for this commit */
	status?:ResolverInputTypes["Status"],
	/** Check and Status rollup information for this commit. */
	statusCheckRollup?:ResolverInputTypes["StatusCheckRollup"],
submodules?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["SubmoduleConnection"]],
	/** Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes. */
	tarballUrl?:boolean | `@${string}`,
	/** Commit's root Tree */
	tree?:ResolverInputTypes["Tree"],
	/** The HTTP path for the tree of this commit */
	treeResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the tree of this commit */
	treeUrl?:boolean | `@${string}`,
	/** The HTTP URL for this commit */
	url?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
	/** Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes. */
	zipballUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Specifies an author for filtering Git commits. */
["CommitAuthor"]: {
	/** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
	emails?: Array<string> | undefined | null,
	/** ID of a User to filter by. If non-null, only commits authored by this user
will be returned. This field takes precedence over emails. */
	id?: string | undefined | null
};
	/** Represents a comment on a given Commit. */
["CommitComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** Identifies the comment body. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the commit associated with the comment, if the commit exists. */
	commit?:ResolverInputTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies the file path associated with the comment. */
	path?:boolean | `@${string}`,
	/** Identifies the line position associated with the comment. */
	position?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path permalink for this commit comment. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL permalink for this commit comment. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CommitComment. */
["CommitCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CommitCommentEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CommitComment"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CommitCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CommitComment"],
		__typename?: boolean | `@${string}`
}>;
	/** A thread of comments on a commit. */
["CommitCommentThread"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CommitCommentConnection"]],
	/** The commit the comments were made on. */
	commit?:ResolverInputTypes["Commit"],
	id?:boolean | `@${string}`,
	/** The file the comments were made on. */
	path?:boolean | `@${string}`,
	/** The position in the diff for the commit that the comment was made on. */
	position?:boolean | `@${string}`,
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Commit. */
["CommitConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CommitEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Commit"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for commit contribution connections. */
["CommitContributionOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field by which to order commit contributions. */
	field: ResolverInputTypes["CommitContributionOrderField"]
};
	/** Properties by which commit contribution connections can be ordered. */
["CommitContributionOrderField"]:CommitContributionOrderField;
	/** This aggregates commits made by a user within one repository. */
["CommitContributionsByRepository"]: AliasType<{
contributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for commit contributions returned from the connection. */
	orderBy?: ResolverInputTypes["CommitContributionOrder"] | undefined | null},ResolverInputTypes["CreatedCommitContributionConnection"]],
	/** The repository in which the commits were made. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for the user's commits to the repository in this time range. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user's commits to the repository in this time range. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CommitEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Commit"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Commit. */
["CommitHistoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CommitEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Commit"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A message to include with a new commit */
["CommitMessage"]: {
	/** The body of the message. */
	body?: string | undefined | null,
	/** The headline of the message. */
	headline: string
};
	/** A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    } */
["CommittableBranch"]: {
	/** The unqualified name of the branch to append the commit to. */
	branchName?: string | undefined | null,
	/** The Node ID of the Ref to be updated. */
	id?: string | undefined | null,
	/** The nameWithOwner of the repository to commit to. */
	repositoryNameWithOwner?: string | undefined | null
};
	/** Represents a comparison between two commit revisions. */
["Comparison"]: AliasType<{
	/** The number of commits ahead of the base branch. */
	aheadBy?:boolean | `@${string}`,
	/** The base revision of this comparison. */
	baseTarget?:ResolverInputTypes["GitObject"],
	/** The number of commits behind the base branch. */
	behindBy?:boolean | `@${string}`,
commits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ComparisonCommitConnection"]],
	/** The head revision of this comparison. */
	headTarget?:ResolverInputTypes["GitObject"],
	id?:boolean | `@${string}`,
	/** The status of this comparison. */
	status?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Commit. */
["ComparisonCommitConnection"]: AliasType<{
	/** The total count of authors and co-authors across all commits. */
	authorCount?:boolean | `@${string}`,
	/** A list of edges. */
	edges?:ResolverInputTypes["CommitEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Commit"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The status of a git comparison between two refs. */
["ComparisonStatus"]:ComparisonStatus;
	/** Represents a 'connected' event on a given issue or pull request. */
["ConnectedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reference originated in a different repository. */
	isCrossRepository?:boolean | `@${string}`,
	/** Issue or pull request that made the reference. */
	source?:ResolverInputTypes["ReferencedSubject"],
	/** Issue or pull request which was connected. */
	subject?:ResolverInputTypes["ReferencedSubject"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a contribution a user made on GitHub, such as opening an issue. */
["Contribution"]:AliasType<{
		/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ResolverInputTypes["User"];
		['...on CreatedCommitContribution']?: Omit<ResolverInputTypes["CreatedCommitContribution"],keyof ResolverInputTypes["Contribution"]>;
		['...on CreatedIssueContribution']?: Omit<ResolverInputTypes["CreatedIssueContribution"],keyof ResolverInputTypes["Contribution"]>;
		['...on CreatedPullRequestContribution']?: Omit<ResolverInputTypes["CreatedPullRequestContribution"],keyof ResolverInputTypes["Contribution"]>;
		['...on CreatedPullRequestReviewContribution']?: Omit<ResolverInputTypes["CreatedPullRequestReviewContribution"],keyof ResolverInputTypes["Contribution"]>;
		['...on CreatedRepositoryContribution']?: Omit<ResolverInputTypes["CreatedRepositoryContribution"],keyof ResolverInputTypes["Contribution"]>;
		['...on JoinedGitHubContribution']?: Omit<ResolverInputTypes["JoinedGitHubContribution"],keyof ResolverInputTypes["Contribution"]>;
		['...on RestrictedContribution']?: Omit<ResolverInputTypes["RestrictedContribution"],keyof ResolverInputTypes["Contribution"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A calendar of contributions made on GitHub by a user. */
["ContributionCalendar"]: AliasType<{
	/** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
	colors?:boolean | `@${string}`,
	/** Determine if the color set was chosen because it's currently Halloween. */
	isHalloween?:boolean | `@${string}`,
	/** A list of the months of contributions in this calendar. */
	months?:ResolverInputTypes["ContributionCalendarMonth"],
	/** The count of total contributions in the calendar. */
	totalContributions?:boolean | `@${string}`,
	/** A list of the weeks of contributions in this calendar. */
	weeks?:ResolverInputTypes["ContributionCalendarWeek"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a single day of contributions on GitHub by a user. */
["ContributionCalendarDay"]: AliasType<{
	/** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
	color?:boolean | `@${string}`,
	/** How many contributions were made by the user on this day. */
	contributionCount?:boolean | `@${string}`,
	/** Indication of contributions, relative to other days. Can be used to indicate
which color to represent this day on a calendar. */
	contributionLevel?:boolean | `@${string}`,
	/** The day this square represents. */
	date?:boolean | `@${string}`,
	/** A number representing which day of the week this square represents, e.g., 1 is Monday. */
	weekday?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A month of contributions in a user's contribution graph. */
["ContributionCalendarMonth"]: AliasType<{
	/** The date of the first day of this month. */
	firstDay?:boolean | `@${string}`,
	/** The name of the month. */
	name?:boolean | `@${string}`,
	/** How many weeks started in this month. */
	totalWeeks?:boolean | `@${string}`,
	/** The year the month occurred in. */
	year?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A week of contributions in a user's contribution graph. */
["ContributionCalendarWeek"]: AliasType<{
	/** The days of contributions in this week. */
	contributionDays?:ResolverInputTypes["ContributionCalendarDay"],
	/** The date of the earliest square in this week. */
	firstDay?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Varying levels of contributions from none to many. */
["ContributionLevel"]:ContributionLevel;
	/** Ordering options for contribution connections. */
["ContributionOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"]
};
	/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
["ContributionsCollection"]: AliasType<{
commitContributionsByRepository?: [{	/** How many repositories should be included. */
	maxRepositories?: number | undefined | null},ResolverInputTypes["CommitContributionsByRepository"]],
	/** A calendar of this user's contributions on GitHub. */
	contributionCalendar?:ResolverInputTypes["ContributionCalendar"],
	/** The years the user has been making contributions with the most recent year first. */
	contributionYears?:boolean | `@${string}`,
	/** Determine if this collection's time span ends in the current month. */
	doesEndInCurrentMonth?:boolean | `@${string}`,
	/** The date of the first restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts. */
	earliestRestrictedContributionDate?:boolean | `@${string}`,
	/** The ending date and time of this collection. */
	endedAt?:boolean | `@${string}`,
	/** The first issue the user opened on GitHub. This will be null if that issue was
opened outside the collection's time range and ignoreTimeRange is false. If
the issue is not visible but the user has opted to show private contributions,
a RestrictedContribution will be returned. */
	firstIssueContribution?:ResolverInputTypes["CreatedIssueOrRestrictedContribution"],
	/** The first pull request the user opened on GitHub. This will be null if that
pull request was opened outside the collection's time range and
ignoreTimeRange is not true. If the pull request is not visible but the user
has opted to show private contributions, a RestrictedContribution will be returned. */
	firstPullRequestContribution?:ResolverInputTypes["CreatedPullRequestOrRestrictedContribution"],
	/** The first repository the user created on GitHub. This will be null if that
first repository was created outside the collection's time range and
ignoreTimeRange is false. If the repository is not visible, then a
RestrictedContribution is returned. */
	firstRepositoryContribution?:ResolverInputTypes["CreatedRepositoryOrRestrictedContribution"],
	/** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
	hasActivityInThePast?:boolean | `@${string}`,
	/** Determine if there are any contributions in this collection. */
	hasAnyContributions?:boolean | `@${string}`,
	/** Determine if the user made any contributions in this time frame whose details
are not visible because they were made in a private repository. Can only be
true if the user enabled private contribution counts. */
	hasAnyRestrictedContributions?:boolean | `@${string}`,
	/** Whether or not the collector's time span is all within the same day. */
	isSingleDay?:boolean | `@${string}`,
issueContributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Should the user's first issue ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null,	/** Should the user's most commented issue be excluded from the result. */
	excludePopular?: boolean | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ResolverInputTypes["ContributionOrder"] | undefined | null},ResolverInputTypes["CreatedIssueContributionConnection"]],
issueContributionsByRepository?: [{	/** Should the user's first issue ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null,	/** Should the user's most commented issue be excluded from the result. */
	excludePopular?: boolean | undefined | null,	/** How many repositories should be included. */
	maxRepositories?: number | undefined | null},ResolverInputTypes["IssueContributionsByRepository"]],
	/** When the user signed up for GitHub. This will be null if that sign up date
falls outside the collection's time range and ignoreTimeRange is false. */
	joinedGitHubContribution?:ResolverInputTypes["JoinedGitHubContribution"],
	/** The date of the most recent restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts. */
	latestRestrictedContributionDate?:boolean | `@${string}`,
	/** When this collection's time range does not include any activity from the user, use this
to get a different collection from an earlier time range that does have activity. */
	mostRecentCollectionWithActivity?:ResolverInputTypes["ContributionsCollection"],
	/** Returns a different contributions collection from an earlier time range than this one
that does not have any contributions. */
	mostRecentCollectionWithoutActivity?:ResolverInputTypes["ContributionsCollection"],
	/** The issue the user opened on GitHub that received the most comments in the specified
time frame. */
	popularIssueContribution?:ResolverInputTypes["CreatedIssueContribution"],
	/** The pull request the user opened on GitHub that received the most comments in the
specified time frame. */
	popularPullRequestContribution?:ResolverInputTypes["CreatedPullRequestContribution"],
pullRequestContributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Should the user's first pull request ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null,	/** Should the user's most commented pull request be excluded from the result. */
	excludePopular?: boolean | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ResolverInputTypes["ContributionOrder"] | undefined | null},ResolverInputTypes["CreatedPullRequestContributionConnection"]],
pullRequestContributionsByRepository?: [{	/** Should the user's first pull request ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null,	/** Should the user's most commented pull request be excluded from the result. */
	excludePopular?: boolean | undefined | null,	/** How many repositories should be included. */
	maxRepositories?: number | undefined | null},ResolverInputTypes["PullRequestContributionsByRepository"]],
pullRequestReviewContributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ResolverInputTypes["ContributionOrder"] | undefined | null},ResolverInputTypes["CreatedPullRequestReviewContributionConnection"]],
pullRequestReviewContributionsByRepository?: [{	/** How many repositories should be included. */
	maxRepositories?: number | undefined | null},ResolverInputTypes["PullRequestReviewContributionsByRepository"]],
repositoryContributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Should the user's first repository ever be excluded from the result. */
	excludeFirst?: boolean | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ResolverInputTypes["ContributionOrder"] | undefined | null},ResolverInputTypes["CreatedRepositoryContributionConnection"]],
	/** A count of contributions made by the user that the viewer cannot access. Only
non-zero when the user has chosen to share their private contribution counts. */
	restrictedContributionsCount?:boolean | `@${string}`,
	/** The beginning date and time of this collection. */
	startedAt?:boolean | `@${string}`,
	/** How many commits were made by the user in this time span. */
	totalCommitContributions?:boolean | `@${string}`,
totalIssueContributions?: [{	/** Should the user's first issue ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null,	/** Should the user's most commented issue be excluded from this count. */
	excludePopular?: boolean | undefined | null},boolean | `@${string}`],
totalPullRequestContributions?: [{	/** Should the user's first pull request ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null,	/** Should the user's most commented pull request be excluded from this count. */
	excludePopular?: boolean | undefined | null},boolean | `@${string}`],
	/** How many pull request reviews the user left. */
	totalPullRequestReviewContributions?:boolean | `@${string}`,
	/** How many different repositories the user committed to. */
	totalRepositoriesWithContributedCommits?:boolean | `@${string}`,
totalRepositoriesWithContributedIssues?: [{	/** Should the user's first issue ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null,	/** Should the user's most commented issue be excluded from this count. */
	excludePopular?: boolean | undefined | null},boolean | `@${string}`],
	/** How many different repositories the user left pull request reviews in. */
	totalRepositoriesWithContributedPullRequestReviews?:boolean | `@${string}`,
totalRepositoriesWithContributedPullRequests?: [{	/** Should the user's first pull request ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null,	/** Should the user's most commented pull request be excluded from this count. */
	excludePopular?: boolean | undefined | null},boolean | `@${string}`],
totalRepositoryContributions?: [{	/** Should the user's first repository ever be excluded from this count. */
	excludeFirst?: boolean | undefined | null},boolean | `@${string}`],
	/** The user who made the contributions in this collection. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ConvertProjectCardNoteToIssue */
["ConvertProjectCardNoteToIssueInput"]: {
	/** The body of the newly created issue. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ProjectCard ID to convert. */
	projectCardId: string,
	/** The ID of the repository to create the issue in. */
	repositoryId: string,
	/** The title of the newly created issue. Defaults to the card's note text. */
	title?: string | undefined | null
};
	/** Autogenerated return type of ConvertProjectCardNoteToIssue */
["ConvertProjectCardNoteToIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated ProjectCard. */
	projectCard?:ResolverInputTypes["ProjectCard"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ConvertPullRequestToDraft */
["ConvertPullRequestToDraftInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the pull request to convert to draft */
	pullRequestId: string
};
	/** Autogenerated return type of ConvertPullRequestToDraft */
["ConvertPullRequestToDraftPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that is now a draft. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'convert_to_draft' event on a given pull request. */
["ConvertToDraftEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The HTTP path for this convert to draft event. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this convert to draft event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
["ConvertedNoteToIssueEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Project referenced by event. */
	project?:ResolverInputTypes["Project"],
	/** Project card referenced by this project event. */
	projectCard?:ResolverInputTypes["ProjectCard"],
	/** Column name referenced by this project event. */
	projectColumnName?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'converted_to_discussion' event on a given issue. */
["ConvertedToDiscussionEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The discussion that the issue was converted into. */
	discussion?:ResolverInputTypes["Discussion"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateBranchProtectionRule */
["CreateBranchProtectionRuleInput"]: {
	/** Can this branch be deleted. */
	allowsDeletions?: boolean | undefined | null,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?: boolean | undefined | null,
	/** Is branch creation a protected operation. */
	blocksCreations?: boolean | undefined | null,
	/** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
	bypassForcePushActorIds?: Array<string> | undefined | null,
	/** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
	bypassPullRequestActorIds?: Array<string> | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?: boolean | undefined | null,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?: boolean | undefined | null,
	/** The glob-like pattern used to determine matching branches. */
	pattern: string,
	/** A list of User, Team, or App IDs allowed to push to matching branches. */
	pushActorIds?: Array<string> | undefined | null,
	/** The global relay id of the repository in which a new branch protection rule should be created in. */
	repositoryId: string,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined | null,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string> | undefined | null,
	/** The list of required status checks */
	requiredStatusChecks?: Array<ResolverInputTypes["RequiredStatusCheckInput"]> | undefined | null,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?: boolean | undefined | null,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?: boolean | undefined | null,
	/** Are commits required to be signed. */
	requiresCommitSignatures?: boolean | undefined | null,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?: boolean | undefined | null,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?: boolean | undefined | null,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?: boolean | undefined | null,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?: boolean | undefined | null,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?: boolean | undefined | null,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?: boolean | undefined | null,
	/** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
	reviewDismissalActorIds?: Array<string> | undefined | null
};
	/** Autogenerated return type of CreateBranchProtectionRule */
["CreateBranchProtectionRulePayload"]: AliasType<{
	/** The newly created BranchProtectionRule. */
	branchProtectionRule?:ResolverInputTypes["BranchProtectionRule"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateCheckRun */
["CreateCheckRunInput"]: {
	/** Possible further actions the integrator can perform, which a user may trigger. */
	actions?: Array<ResolverInputTypes["CheckRunAction"]> | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The time that the check run finished. */
	completedAt?: ResolverInputTypes["DateTime"] | undefined | null,
	/** The final conclusion of the check. */
	conclusion?: ResolverInputTypes["CheckConclusionState"] | undefined | null,
	/** The URL of the integrator's site that has the full details of the check. */
	detailsUrl?: ResolverInputTypes["URI"] | undefined | null,
	/** A reference for the run on the integrator's system. */
	externalId?: string | undefined | null,
	/** The SHA of the head commit. */
	headSha: ResolverInputTypes["GitObjectID"],
	/** The name of the check. */
	name: string,
	/** Descriptive details about the run. */
	output?: ResolverInputTypes["CheckRunOutput"] | undefined | null,
	/** The node ID of the repository. */
	repositoryId: string,
	/** The time that the check run began. */
	startedAt?: ResolverInputTypes["DateTime"] | undefined | null,
	/** The current status. */
	status?: ResolverInputTypes["RequestableCheckStatusState"] | undefined | null
};
	/** Autogenerated return type of CreateCheckRun */
["CreateCheckRunPayload"]: AliasType<{
	/** The newly created check run. */
	checkRun?:ResolverInputTypes["CheckRun"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateCheckSuite */
["CreateCheckSuiteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The SHA of the head commit. */
	headSha: ResolverInputTypes["GitObjectID"],
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of CreateCheckSuite */
["CreateCheckSuitePayload"]: AliasType<{
	/** The newly created check suite. */
	checkSuite?:ResolverInputTypes["CheckSuite"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateCommitOnBranch */
["CreateCommitOnBranchInput"]: {
	/** The Ref to be updated.  Must be a branch. */
	branch: ResolverInputTypes["CommittableBranch"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The git commit oid expected at the head of the branch prior to the commit */
	expectedHeadOid: ResolverInputTypes["GitObjectID"],
	/** A description of changes to files in this commit. */
	fileChanges?: ResolverInputTypes["FileChanges"] | undefined | null,
	/** The commit message the be included with the commit. */
	message: ResolverInputTypes["CommitMessage"]
};
	/** Autogenerated return type of CreateCommitOnBranch */
["CreateCommitOnBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new commit. */
	commit?:ResolverInputTypes["Commit"],
	/** The ref which has been updated to point to the new commit. */
	ref?:ResolverInputTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateDeployment */
["CreateDeploymentInput"]: {
	/** Attempt to automatically merge the default branch into the requested ref, defaults to true. */
	autoMerge?: boolean | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Short description of the deployment. */
	description?: string | undefined | null,
	/** Name for the target deployment environment. */
	environment?: string | undefined | null,
	/** JSON payload with extra information about the deployment. */
	payload?: string | undefined | null,
	/** The node ID of the ref to be deployed. */
	refId: string,
	/** The node ID of the repository. */
	repositoryId: string,
	/** The status contexts to verify against commit status checks. To bypass required
contexts, pass an empty array. Defaults to all unique contexts. */
	requiredContexts?: Array<string> | undefined | null,
	/** Specifies a task to execute. */
	task?: string | undefined | null
};
	/** Autogenerated return type of CreateDeployment */
["CreateDeploymentPayload"]: AliasType<{
	/** True if the default branch has been auto-merged into the deployment ref. */
	autoMerged?:boolean | `@${string}`,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new deployment. */
	deployment?:ResolverInputTypes["Deployment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateDeploymentStatus */
["CreateDeploymentStatusInput"]: {
	/** Adds a new inactive status to all non-transient, non-production environment
deployments with the same repository and environment name as the created
status's deployment. */
	autoInactive?: boolean | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The node ID of the deployment. */
	deploymentId: string,
	/** A short description of the status. Maximum length of 140 characters. */
	description?: string | undefined | null,
	/** If provided, updates the environment of the deploy. Otherwise, does not modify the environment. */
	environment?: string | undefined | null,
	/** Sets the URL for accessing your environment. */
	environmentUrl?: string | undefined | null,
	/** The log URL to associate with this status.       This URL should contain
output to keep the user updated while the task is running       or serve as
historical information for what happened in the deployment. */
	logUrl?: string | undefined | null,
	/** The state of the deployment. */
	state: ResolverInputTypes["DeploymentStatusState"]
};
	/** Autogenerated return type of CreateDeploymentStatus */
["CreateDeploymentStatusPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new deployment status. */
	deploymentStatus?:ResolverInputTypes["DeploymentStatus"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateDiscussion */
["CreateDiscussionInput"]: {
	/** The body of the discussion. */
	body: string,
	/** The id of the discussion category to associate with this discussion. */
	categoryId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The id of the repository on which to create the discussion. */
	repositoryId: string,
	/** The title of the discussion. */
	title: string
};
	/** Autogenerated return type of CreateDiscussion */
["CreateDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion that was just created. */
	discussion?:ResolverInputTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateEnterpriseOrganization */
["CreateEnterpriseOrganizationInput"]: {
	/** The logins for the administrators of the new organization. */
	adminLogins: Array<string>,
	/** The email used for sending billing receipts. */
	billingEmail: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise owning the new organization. */
	enterpriseId: string,
	/** The login of the new organization. */
	login: string,
	/** The profile name of the new organization. */
	profileName: string
};
	/** Autogenerated return type of CreateEnterpriseOrganization */
["CreateEnterpriseOrganizationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise that owns the created organization. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** The organization that was created. */
	organization?:ResolverInputTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateEnvironment */
["CreateEnvironmentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of the environment. */
	name: string,
	/** The node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of CreateEnvironment */
["CreateEnvironmentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new or existing environment. */
	environment?:ResolverInputTypes["Environment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateIpAllowListEntry */
["CreateIpAllowListEntryInput"]: {
	/** An IP address or range of addresses in CIDR notation. */
	allowListValue: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Whether the IP allow list entry is active when an IP allow list is enabled. */
	isActive: boolean,
	/** An optional name for the IP allow list entry. */
	name?: string | undefined | null,
	/** The ID of the owner for which to create the new IP allow list entry. */
	ownerId: string
};
	/** Autogenerated return type of CreateIpAllowListEntry */
["CreateIpAllowListEntryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list entry that was created. */
	ipAllowListEntry?:ResolverInputTypes["IpAllowListEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateIssue */
["CreateIssueInput"]: {
	/** The Node ID for the user assignee for this issue. */
	assigneeIds?: Array<string> | undefined | null,
	/** The body for the issue description. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
	issueTemplate?: string | undefined | null,
	/** An array of Node IDs of labels for this issue. */
	labelIds?: Array<string> | undefined | null,
	/** The Node ID of the milestone for this issue. */
	milestoneId?: string | undefined | null,
	/** An array of Node IDs for projects associated with this issue. */
	projectIds?: Array<string> | undefined | null,
	/** The Node ID of the repository. */
	repositoryId: string,
	/** The title for the issue. */
	title: string
};
	/** Autogenerated return type of CreateIssue */
["CreateIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new issue. */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateLabel */
["CreateLabelInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** A 6 character hex code, without the leading #, identifying the color of the label. */
	color: string,
	/** A brief description of the label, such as its purpose. */
	description?: string | undefined | null,
	/** The name of the label. */
	name: string,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of CreateLabel */
["CreateLabelPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new label. */
	label?:ResolverInputTypes["Label"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateLinkedBranch */
["CreateLinkedBranchInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the issue to link to. */
	issueId: string,
	/** The name of the new branch. Defaults to issue number and title. */
	name?: string | undefined | null,
	/** The commit SHA to base the new branch on. */
	oid: ResolverInputTypes["GitObjectID"],
	/** ID of the repository to create the branch in. Defaults to the issue repository. */
	repositoryId?: string | undefined | null
};
	/** Autogenerated return type of CreateLinkedBranch */
["CreateLinkedBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new branch issue reference. */
	linkedBranch?:ResolverInputTypes["LinkedBranch"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateMigrationSource */
["CreateMigrationSourceInput"]: {
	/** The Octoshift migration source access token. */
	accessToken?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The GitHub personal access token of the user importing to the target repository. */
	githubPat?: string | undefined | null,
	/** The Octoshift migration source name. */
	name: string,
	/** The ID of the organization that will own the Octoshift migration source. */
	ownerId: string,
	/** The Octoshift migration source type. */
	type: ResolverInputTypes["MigrationSourceType"],
	/** The Octoshift migration source URL. */
	url: string
};
	/** Autogenerated return type of CreateMigrationSource */
["CreateMigrationSourcePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The created Octoshift migration source. */
	migrationSource?:ResolverInputTypes["MigrationSource"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateProject */
["CreateProjectInput"]: {
	/** The description of project. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of project. */
	name: string,
	/** The owner ID to create the project under. */
	ownerId: string,
	/** A list of repository IDs to create as linked repositories for the project */
	repositoryIds?: Array<string> | undefined | null,
	/** The name of the GitHub-provided template. */
	template?: ResolverInputTypes["ProjectTemplate"] | undefined | null
};
	/** Autogenerated return type of CreateProject */
["CreateProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new project. */
	project?:ResolverInputTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateProjectV2 */
["CreateProjectV2Input"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The owner ID to create the project under. */
	ownerId: string,
	/** The title of the project. */
	title: string
};
	/** Autogenerated return type of CreateProjectV2 */
["CreateProjectV2Payload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new project. */
	projectV2?:ResolverInputTypes["ProjectV2"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreatePullRequest */
["CreatePullRequestInput"]: {
	/** The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository. You cannot update the base branch on a pull request to point
to another repository. */
	baseRefName: string,
	/** The contents of the pull request. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Indicates whether this pull request should be a draft. */
	draft?: boolean | undefined | null,
	/** The name of the branch where your changes are implemented. For cross-repository pull requests
in the same network, namespace `head_ref_name` with a user like this: `username:branch`. */
	headRefName: string,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?: boolean | undefined | null,
	/** The Node ID of the repository. */
	repositoryId: string,
	/** The title of the pull request. */
	title: string
};
	/** Autogenerated return type of CreatePullRequest */
["CreatePullRequestPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new pull request. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateRef */
["CreateRefInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
	name: string,
	/** The GitObjectID that the new Ref shall target. Must point to a commit. */
	oid: ResolverInputTypes["GitObjectID"],
	/** The Node ID of the Repository to create the Ref in. */
	repositoryId: string
};
	/** Autogenerated return type of CreateRef */
["CreateRefPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The newly created ref. */
	ref?:ResolverInputTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateRepository */
["CreateRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** A short description of the new repository. */
	description?: string | undefined | null,
	/** Indicates if the repository should have the issues feature enabled. */
	hasIssuesEnabled?: boolean | undefined | null,
	/** Indicates if the repository should have the wiki feature enabled. */
	hasWikiEnabled?: boolean | undefined | null,
	/** The URL for a web page about this repository. */
	homepageUrl?: ResolverInputTypes["URI"] | undefined | null,
	/** The name of the new repository. */
	name: string,
	/** The ID of the owner for the new repository. */
	ownerId?: string | undefined | null,
	/** When an organization is specified as the owner, this ID identifies the team
that should be granted access to the new repository. */
	teamId?: string | undefined | null,
	/** Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure. */
	template?: boolean | undefined | null,
	/** Indicates the repository's visibility level. */
	visibility: ResolverInputTypes["RepositoryVisibility"]
};
	/** Autogenerated return type of CreateRepository */
["CreateRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new repository. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateSponsorsTier */
["CreateSponsorsTierInput"]: {
	/** The value of the new tier in US dollars. Valid values: 1-12000. */
	amount: number,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
	description: string,
	/** Whether sponsorships using this tier should happen monthly/yearly or just once. */
	isRecurring?: boolean | undefined | null,
	/** Whether to make the tier available immediately for sponsors to choose.
Defaults to creating a draft tier that will not be publicly visible. */
	publish?: boolean | undefined | null,
	/** Optional ID of the private repository that sponsors at this tier should gain
read-only access to. Must be owned by an organization. */
	repositoryId?: string | undefined | null,
	/** Optional name of the private repository that sponsors at this tier should gain
read-only access to. Must be owned by an organization. Necessary if
repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
	repositoryName?: string | undefined | null,
	/** Optional login of the organization owner of the private repository that
sponsors at this tier should gain read-only access to. Necessary if
repositoryName is given. Will be ignored if repositoryId is given. */
	repositoryOwnerLogin?: string | undefined | null,
	/** The ID of the user or organization who owns the GitHub Sponsors profile.
Defaults to the current user if omitted and sponsorableLogin is not given. */
	sponsorableId?: string | undefined | null,
	/** The username of the user or organization who owns the GitHub Sponsors profile.
Defaults to the current user if omitted and sponsorableId is not given. */
	sponsorableLogin?: string | undefined | null,
	/** Optional message new sponsors at this tier will receive. */
	welcomeMessage?: string | undefined | null
};
	/** Autogenerated return type of CreateSponsorsTier */
["CreateSponsorsTierPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new tier. */
	sponsorsTier?:ResolverInputTypes["SponsorsTier"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateSponsorship */
["CreateSponsorshipInput"]: {
	/** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
	amount?: number | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
	isRecurring?: boolean | undefined | null,
	/** Specify whether others should be able to see that the sponsor is sponsoring
the sponsorable. Public visibility still does not reveal which tier is used. */
	privacyLevel?: ResolverInputTypes["SponsorshipPrivacy"] | undefined | null,
	/** Whether the sponsor should receive email updates from the sponsorable. */
	receiveEmails?: boolean | undefined | null,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined | null,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined | null,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined | null,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined | null,
	/** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
	tierId?: string | undefined | null
};
	/** Autogenerated return type of CreateSponsorship */
["CreateSponsorshipPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The sponsorship that was started. */
	sponsorship?:ResolverInputTypes["Sponsorship"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateTeamDiscussionComment */
["CreateTeamDiscussionCommentInput"]: {
	/** The content of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the discussion to which the comment belongs. */
	discussionId: string
};
	/** Autogenerated return type of CreateTeamDiscussionComment */
["CreateTeamDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new comment. */
	teamDiscussionComment?:ResolverInputTypes["TeamDiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of CreateTeamDiscussion */
["CreateTeamDiscussionInput"]: {
	/** The content of the discussion. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** If true, restricts the visibility of this discussion to team members and
organization admins. If false or not specified, allows any organization member
to view this discussion. */
	private?: boolean | undefined | null,
	/** The ID of the team to which the discussion belongs. */
	teamId: string,
	/** The title of the discussion. */
	title: string
};
	/** Autogenerated return type of CreateTeamDiscussion */
["CreateTeamDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new discussion. */
	teamDiscussion?:ResolverInputTypes["TeamDiscussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made by committing to a repository. */
["CreatedCommitContribution"]: AliasType<{
	/** How many commits were made on this day to this repository by the user. */
	commitCount?:boolean | `@${string}`,
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The repository the user made a commit in. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedCommitContribution. */
["CreatedCommitContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CreatedCommitContributionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CreatedCommitContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of commits across days and repositories in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedCommitContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CreatedCommitContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made on GitHub by opening an issue. */
["CreatedIssueContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** The issue that was opened. */
	issue?:ResolverInputTypes["Issue"],
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedIssueContribution. */
["CreatedIssueContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CreatedIssueContributionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CreatedIssueContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedIssueContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CreatedIssueContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents either a issue the viewer can access or a restricted contribution. */
["CreatedIssueOrRestrictedContribution"]: AliasType<{
	CreatedIssueContribution?:ResolverInputTypes["CreatedIssueContribution"],
	RestrictedContribution?:ResolverInputTypes["RestrictedContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made on GitHub by opening a pull request. */
["CreatedPullRequestContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The pull request that was opened. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedPullRequestContribution. */
["CreatedPullRequestContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CreatedPullRequestContributionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CreatedPullRequestContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedPullRequestContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CreatedPullRequestContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents either a pull request the viewer can access or a restricted contribution. */
["CreatedPullRequestOrRestrictedContribution"]: AliasType<{
	CreatedPullRequestContribution?:ResolverInputTypes["CreatedPullRequestContribution"],
	RestrictedContribution?:ResolverInputTypes["RestrictedContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made by leaving a review on a pull request. */
["CreatedPullRequestReviewContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The pull request the user reviewed. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The review the user left on the pull request. */
	pullRequestReview?:ResolverInputTypes["PullRequestReview"],
	/** The repository containing the pull request that the user reviewed. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedPullRequestReviewContribution. */
["CreatedPullRequestReviewContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CreatedPullRequestReviewContributionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CreatedPullRequestReviewContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedPullRequestReviewContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CreatedPullRequestReviewContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the contribution a user made on GitHub by creating a repository. */
["CreatedRepositoryContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The repository that was created. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for CreatedRepositoryContribution. */
["CreatedRepositoryContributionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["CreatedRepositoryContributionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["CreatedRepositoryContribution"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["CreatedRepositoryContributionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["CreatedRepositoryContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents either a repository the viewer can access or a restricted contribution. */
["CreatedRepositoryOrRestrictedContribution"]: AliasType<{
	CreatedRepositoryContribution?:ResolverInputTypes["CreatedRepositoryContribution"],
	RestrictedContribution?:ResolverInputTypes["RestrictedContribution"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a mention made by one issue or pull request to another. */
["CrossReferencedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reference originated in a different repository. */
	isCrossRepository?:boolean | `@${string}`,
	/** Identifies when the reference was made. */
	referencedAt?:boolean | `@${string}`,
	/** The HTTP path for this pull request. */
	resourcePath?:boolean | `@${string}`,
	/** Issue or pull request that made the reference. */
	source?:ResolverInputTypes["ReferencedSubject"],
	/** Issue or pull request to which the reference was made. */
	target?:ResolverInputTypes["ReferencedSubject"],
	/** The HTTP URL for this pull request. */
	url?:boolean | `@${string}`,
	/** Checks if the target will be closed when the source is merged. */
	willCloseTarget?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An ISO-8601 encoded date string. */
["Date"]:unknown;
	/** An ISO-8601 encoded UTC date string. */
["DateTime"]:unknown;
	/** Autogenerated input type of DeclineTopicSuggestion */
["DeclineTopicSuggestionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of the suggested topic. */
	name: string,
	/** The reason why the suggested topic is declined. */
	reason: ResolverInputTypes["TopicSuggestionDeclineReason"],
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of DeclineTopicSuggestion */
["DeclineTopicSuggestionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The declined topic. */
	topic?:ResolverInputTypes["Topic"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible base permissions for repositories. */
["DefaultRepositoryPermissionField"]:DefaultRepositoryPermissionField;
	/** Entities that can be deleted. */
["Deletable"]:AliasType<{
		/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ResolverInputTypes["CommitComment"],keyof ResolverInputTypes["Deletable"]>;
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["Deletable"]>;
		['...on DiscussionComment']?: Omit<ResolverInputTypes["DiscussionComment"],keyof ResolverInputTypes["Deletable"]>;
		['...on GistComment']?: Omit<ResolverInputTypes["GistComment"],keyof ResolverInputTypes["Deletable"]>;
		['...on IssueComment']?: Omit<ResolverInputTypes["IssueComment"],keyof ResolverInputTypes["Deletable"]>;
		['...on PullRequestReview']?: Omit<ResolverInputTypes["PullRequestReview"],keyof ResolverInputTypes["Deletable"]>;
		['...on PullRequestReviewComment']?: Omit<ResolverInputTypes["PullRequestReviewComment"],keyof ResolverInputTypes["Deletable"]>;
		['...on TeamDiscussion']?: Omit<ResolverInputTypes["TeamDiscussion"],keyof ResolverInputTypes["Deletable"]>;
		['...on TeamDiscussionComment']?: Omit<ResolverInputTypes["TeamDiscussionComment"],keyof ResolverInputTypes["Deletable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteBranchProtectionRule */
["DeleteBranchProtectionRuleInput"]: {
	/** The global relay id of the branch protection rule to be deleted. */
	branchProtectionRuleId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null
};
	/** Autogenerated return type of DeleteBranchProtectionRule */
["DeleteBranchProtectionRulePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteDeployment */
["DeleteDeploymentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the deployment to be deleted. */
	id: string
};
	/** Autogenerated return type of DeleteDeployment */
["DeleteDeploymentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteDiscussionComment */
["DeleteDiscussionCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node id of the discussion comment to delete. */
	id: string
};
	/** Autogenerated return type of DeleteDiscussionComment */
["DeleteDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion comment that was just deleted. */
	comment?:ResolverInputTypes["DiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteDiscussion */
["DeleteDiscussionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The id of the discussion to delete. */
	id: string
};
	/** Autogenerated return type of DeleteDiscussion */
["DeleteDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion that was just deleted. */
	discussion?:ResolverInputTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteEnvironment */
["DeleteEnvironmentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the environment to be deleted. */
	id: string
};
	/** Autogenerated return type of DeleteEnvironment */
["DeleteEnvironmentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteIpAllowListEntry */
["DeleteIpAllowListEntryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the IP allow list entry to delete. */
	ipAllowListEntryId: string
};
	/** Autogenerated return type of DeleteIpAllowListEntry */
["DeleteIpAllowListEntryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list entry that was deleted. */
	ipAllowListEntry?:ResolverInputTypes["IpAllowListEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteIssueComment */
["DeleteIssueCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the comment to delete. */
	id: string
};
	/** Autogenerated return type of DeleteIssueComment */
["DeleteIssueCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteIssue */
["DeleteIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the issue to delete. */
	issueId: string
};
	/** Autogenerated return type of DeleteIssue */
["DeleteIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository the issue belonged to */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteLabel */
["DeleteLabelInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the label to be deleted. */
	id: string
};
	/** Autogenerated return type of DeleteLabel */
["DeleteLabelPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteLinkedBranch */
["DeleteLinkedBranchInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the linked branch */
	linkedBranchId: string
};
	/** Autogenerated return type of DeleteLinkedBranch */
["DeleteLinkedBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue the linked branch was unlinked from. */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeletePackageVersion */
["DeletePackageVersionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the package version to be deleted. */
	packageVersionId: string
};
	/** Autogenerated return type of DeletePackageVersion */
["DeletePackageVersionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Whether or not the operation succeeded. */
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteProjectCard */
["DeleteProjectCardInput"]: {
	/** The id of the card to delete. */
	cardId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null
};
	/** Autogenerated return type of DeleteProjectCard */
["DeleteProjectCardPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The column the deleted card was in. */
	column?:ResolverInputTypes["ProjectColumn"],
	/** The deleted card ID. */
	deletedCardId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteProjectColumn */
["DeleteProjectColumnInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The id of the column to delete. */
	columnId: string
};
	/** Autogenerated return type of DeleteProjectColumn */
["DeleteProjectColumnPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The deleted column ID. */
	deletedColumnId?:boolean | `@${string}`,
	/** The project the deleted column was in. */
	project?:ResolverInputTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteProject */
["DeleteProjectInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Project ID to update. */
	projectId: string
};
	/** Autogenerated input type of DeleteProjectNextItem */
["DeleteProjectNextItemInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the item to be removed. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	itemId?: string | undefined | null,
	/** The ID of the Project from which the item should be removed. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined | null
};
	/** Autogenerated return type of DeleteProjectNextItem */
["DeleteProjectNextItemPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The ID of the deleted item. */
	deletedItemId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated return type of DeleteProject */
["DeleteProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository or organization the project was removed from. */
	owner?:ResolverInputTypes["ProjectOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteProjectV2Item */
["DeleteProjectV2ItemInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the item to be removed. */
	itemId: string,
	/** The ID of the Project from which the item should be removed. */
	projectId: string
};
	/** Autogenerated return type of DeleteProjectV2Item */
["DeleteProjectV2ItemPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The ID of the deleted item. */
	deletedItemId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeletePullRequestReviewComment */
["DeletePullRequestReviewCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the comment to delete. */
	id: string
};
	/** Autogenerated return type of DeletePullRequestReviewComment */
["DeletePullRequestReviewCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request review the deleted comment belonged to. */
	pullRequestReview?:ResolverInputTypes["PullRequestReview"],
	/** The deleted pull request review comment. */
	pullRequestReviewComment?:ResolverInputTypes["PullRequestReviewComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeletePullRequestReview */
["DeletePullRequestReviewInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the pull request review to delete. */
	pullRequestReviewId: string
};
	/** Autogenerated return type of DeletePullRequestReview */
["DeletePullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The deleted pull request review. */
	pullRequestReview?:ResolverInputTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteRef */
["DeleteRefInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the Ref to be deleted. */
	refId: string
};
	/** Autogenerated return type of DeleteRef */
["DeleteRefPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteTeamDiscussionComment */
["DeleteTeamDiscussionCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the comment to delete. */
	id: string
};
	/** Autogenerated return type of DeleteTeamDiscussionComment */
["DeleteTeamDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteTeamDiscussion */
["DeleteTeamDiscussionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The discussion ID to delete. */
	id: string
};
	/** Autogenerated return type of DeleteTeamDiscussion */
["DeleteTeamDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of DeleteVerifiableDomain */
["DeleteVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the verifiable domain to delete. */
	id: string
};
	/** Autogenerated return type of DeleteVerifiableDomain */
["DeleteVerifiableDomainPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The owning account from which the domain was deleted. */
	owner?:ResolverInputTypes["VerifiableDomainOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'demilestoned' event on a given issue or pull request. */
["DemilestonedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the milestone title associated with the 'demilestoned' event. */
	milestoneTitle?:boolean | `@${string}`,
	/** Object referenced by event. */
	subject?:ResolverInputTypes["MilestoneItem"],
		__typename?: boolean | `@${string}`
}>;
	/** A Dependabot Update for a dependency in a repository */
["DependabotUpdate"]: AliasType<{
	/** The error from a dependency update */
	error?:ResolverInputTypes["DependabotUpdateError"],
	/** The associated pull request */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An error produced from a Dependabot Update */
["DependabotUpdateError"]: AliasType<{
	/** The body of the error */
	body?:boolean | `@${string}`,
	/** The error code */
	errorType?:boolean | `@${string}`,
	/** The title of the error */
	title?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A dependency manifest entry */
["DependencyGraphDependency"]: AliasType<{
	/** Does the dependency itself have dependencies? */
	hasDependencies?:boolean | `@${string}`,
	/** The original name of the package, as it appears in the manifest. */
	packageLabel?:boolean | `@${string}`,
	/** The dependency package manager */
	packageManager?:boolean | `@${string}`,
	/** The name of the package in the canonical form used by the package manager.
This may differ from the original textual form (see packageLabel), for example
in a package manager that uses case-insensitive comparisons. */
	packageName?:boolean | `@${string}`,
	/** The repository containing the package */
	repository?:ResolverInputTypes["Repository"],
	/** The dependency version requirements */
	requirements?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DependencyGraphDependency. */
["DependencyGraphDependencyConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DependencyGraphDependencyEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DependencyGraphDependency"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DependencyGraphDependencyEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DependencyGraphDependency"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible ecosystems of a dependency graph package. */
["DependencyGraphEcosystem"]:DependencyGraphEcosystem;
	/** Dependency manifest for a repository */
["DependencyGraphManifest"]: AliasType<{
	/** Path to view the manifest file blob */
	blobPath?:boolean | `@${string}`,
dependencies?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DependencyGraphDependencyConnection"]],
	/** The number of dependencies listed in the manifest */
	dependenciesCount?:boolean | `@${string}`,
	/** Is the manifest too big to parse? */
	exceedsMaxSize?:boolean | `@${string}`,
	/** Fully qualified manifest filename */
	filename?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Were we able to parse the manifest? */
	parseable?:boolean | `@${string}`,
	/** The repository containing the manifest */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DependencyGraphManifest. */
["DependencyGraphManifestConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DependencyGraphManifestEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DependencyGraphManifest"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DependencyGraphManifestEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DependencyGraphManifest"],
		__typename?: boolean | `@${string}`
}>;
	/** A repository deploy key. */
["DeployKey"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The deploy key. */
	key?:boolean | `@${string}`,
	/** Whether or not the deploy key is read only. */
	readOnly?:boolean | `@${string}`,
	/** The deploy key title. */
	title?:boolean | `@${string}`,
	/** Whether or not the deploy key has been verified. */
	verified?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeployKey. */
["DeployKeyConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DeployKeyEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DeployKey"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeployKeyEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DeployKey"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'deployed' event on a given pull request. */
["DeployedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The deployment associated with the 'deployed' event. */
	deployment?:ResolverInputTypes["Deployment"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The ref associated with the 'deployed' event. */
	ref?:ResolverInputTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents triggered deployment instance. */
["Deployment"]: AliasType<{
	/** Identifies the commit sha of the deployment. */
	commit?:ResolverInputTypes["Commit"],
	/** Identifies the oid of the deployment commit, even if the commit has been deleted. */
	commitOid?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the actor who triggered the deployment. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The deployment description. */
	description?:boolean | `@${string}`,
	/** The latest environment to which this deployment was made. */
	environment?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The latest environment to which this deployment was made. */
	latestEnvironment?:boolean | `@${string}`,
	/** The latest status of this deployment. */
	latestStatus?:ResolverInputTypes["DeploymentStatus"],
	/** The original environment to which this deployment was made. */
	originalEnvironment?:boolean | `@${string}`,
	/** Extra information that a deployment system might need. */
	payload?:boolean | `@${string}`,
	/** Identifies the Ref of the deployment, if the deployment was created by ref. */
	ref?:ResolverInputTypes["Ref"],
	/** Identifies the repository associated with the deployment. */
	repository?:ResolverInputTypes["Repository"],
	/** The current state of the deployment. */
	state?:boolean | `@${string}`,
statuses?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DeploymentStatusConnection"]],
	/** The deployment task. */
	task?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Deployment. */
["DeploymentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DeploymentEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Deployment"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Deployment"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'deployment_environment_changed' event on a given pull request. */
["DeploymentEnvironmentChangedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The deployment status that updated the deployment environment. */
	deploymentStatus?:ResolverInputTypes["DeploymentStatus"],
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for deployment connections */
["DeploymentOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order deployments by. */
	field: ResolverInputTypes["DeploymentOrderField"]
};
	/** Properties by which deployment connections can be ordered. */
["DeploymentOrderField"]:DeploymentOrderField;
	/** A protection rule. */
["DeploymentProtectionRule"]: AliasType<{
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
reviewers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DeploymentReviewerConnection"]],
	/** The timeout in minutes for this protection rule. */
	timeout?:boolean | `@${string}`,
	/** The type of protection rule. */
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentProtectionRule. */
["DeploymentProtectionRuleConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DeploymentProtectionRuleEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DeploymentProtectionRule"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentProtectionRuleEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DeploymentProtectionRule"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible protection rule types. */
["DeploymentProtectionRuleType"]:DeploymentProtectionRuleType;
	/** A request to deploy a workflow run to an environment. */
["DeploymentRequest"]: AliasType<{
	/** Whether or not the current user can approve the deployment */
	currentUserCanApprove?:boolean | `@${string}`,
	/** The target environment of the deployment */
	environment?:ResolverInputTypes["Environment"],
reviewers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DeploymentReviewerConnection"]],
	/** The wait timer in minutes configured in the environment */
	waitTimer?:boolean | `@${string}`,
	/** The wait timer in minutes configured in the environment */
	waitTimerStartedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentRequest. */
["DeploymentRequestConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DeploymentRequestEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DeploymentRequest"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentRequestEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DeploymentRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** A deployment review. */
["DeploymentReview"]: AliasType<{
	/** The comment the user left. */
	comment?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
environments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["EnvironmentConnection"]],
	id?:boolean | `@${string}`,
	/** The decision of the user. */
	state?:boolean | `@${string}`,
	/** The user that reviewed the deployment. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentReview. */
["DeploymentReviewConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DeploymentReviewEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DeploymentReview"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentReviewEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DeploymentReview"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states for a deployment review. */
["DeploymentReviewState"]:DeploymentReviewState;
	/** Users and teams. */
["DeploymentReviewer"]: AliasType<{
	Team?:ResolverInputTypes["Team"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentReviewer. */
["DeploymentReviewerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DeploymentReviewerEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DeploymentReviewer"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentReviewerEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DeploymentReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states in which a deployment can be. */
["DeploymentState"]:DeploymentState;
	/** Describes the status of a given deployment attempt. */
["DeploymentStatus"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the actor who triggered the deployment. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the deployment associated with status. */
	deployment?:ResolverInputTypes["Deployment"],
	/** Identifies the description of the deployment. */
	description?:boolean | `@${string}`,
	/** Identifies the environment of the deployment at the time of this deployment status */
	environment?:boolean | `@${string}`,
	/** Identifies the environment URL of the deployment. */
	environmentUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the log URL of the deployment. */
	logUrl?:boolean | `@${string}`,
	/** Identifies the current state of the deployment. */
	state?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DeploymentStatus. */
["DeploymentStatusConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DeploymentStatusEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DeploymentStatus"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DeploymentStatusEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DeploymentStatus"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states for a deployment status. */
["DeploymentStatusState"]:DeploymentStatusState;
	/** The possible sides of a diff. */
["DiffSide"]:DiffSide;
	/** Autogenerated input type of DisablePullRequestAutoMerge */
["DisablePullRequestAutoMergeInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the pull request to disable auto merge on. */
	pullRequestId: string
};
	/** Autogenerated return type of DisablePullRequestAutoMerge */
["DisablePullRequestAutoMergePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request auto merge was disabled on. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'disconnected' event on a given issue or pull request. */
["DisconnectedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reference originated in a different repository. */
	isCrossRepository?:boolean | `@${string}`,
	/** Issue or pull request from which the issue was disconnected. */
	source?:ResolverInputTypes["ReferencedSubject"],
	/** Issue or pull request which was disconnected. */
	subject?:ResolverInputTypes["ReferencedSubject"],
		__typename?: boolean | `@${string}`
}>;
	/** A discussion in a repository. */
["Discussion"]: AliasType<{
	/** Reason that the conversation was locked. */
	activeLockReason?:boolean | `@${string}`,
	/** The comment chosen as this discussion's answer, if any. */
	answer?:ResolverInputTypes["DiscussionComment"],
	/** The time when a user chose this discussion's answer, if answered. */
	answerChosenAt?:boolean | `@${string}`,
	/** The user who chose this discussion's answer, if answered. */
	answerChosenBy?:ResolverInputTypes["Actor"],
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The main text of the discussion post. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** The category for this discussion. */
	category?:ResolverInputTypes["DiscussionCategory"],
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DiscussionCommentConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for labels returned from the connection. */
	orderBy?: ResolverInputTypes["LabelOrder"] | undefined | null},ResolverInputTypes["LabelConnection"]],
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** `true` if the object is locked */
	locked?:boolean | `@${string}`,
	/** The number identifying this discussion within the repository. */
	number?:boolean | `@${string}`,
	/** The poll associated with this discussion, if one exists. */
	poll?:ResolverInputTypes["DiscussionPoll"],
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
	/** The path for this discussion. */
	resourcePath?:boolean | `@${string}`,
	/** The title of this discussion. */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** Number of upvotes that this subject has received. */
	upvoteCount?:boolean | `@${string}`,
	/** The URL for this discussion. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A category for discussions in a repository. */
["DiscussionCategory"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** A description of this category. */
	description?:boolean | `@${string}`,
	/** An emoji representing this category. */
	emoji?:boolean | `@${string}`,
	/** This category's emoji rendered as HTML. */
	emojiHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
	isAnswerable?:boolean | `@${string}`,
	/** The name of this category. */
	name?:boolean | `@${string}`,
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
	/** The slug of this category. */
	slug?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DiscussionCategory. */
["DiscussionCategoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DiscussionCategoryEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DiscussionCategory"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DiscussionCategoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DiscussionCategory"],
		__typename?: boolean | `@${string}`
}>;
	/** A comment on a discussion. */
["DiscussionComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The time when this replied-to comment was deleted */
	deletedAt?:boolean | `@${string}`,
	/** The discussion this comment was created in */
	discussion?:ResolverInputTypes["Discussion"],
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Has this comment been chosen as the answer of its discussion? */
	isAnswer?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
replies?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DiscussionCommentConnection"]],
	/** The discussion comment this comment is a reply to */
	replyTo?:ResolverInputTypes["DiscussionComment"],
	/** The path for this discussion comment. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** Number of upvotes that this subject has received. */
	upvoteCount?:boolean | `@${string}`,
	/** The URL for this discussion comment. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Can the current user mark this comment as an answer? */
	viewerCanMarkAsAnswer?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Can the current user unmark this comment as an answer? */
	viewerCanUnmarkAsAnswer?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DiscussionComment. */
["DiscussionCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DiscussionCommentEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DiscussionComment"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DiscussionCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Discussion. */
["DiscussionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DiscussionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Discussion"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DiscussionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of discussions can be ordered upon return. */
["DiscussionOrder"]: {
	/** The direction in which to order discussions by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field by which to order discussions. */
	field: ResolverInputTypes["DiscussionOrderField"]
};
	/** Properties by which discussion connections can be ordered. */
["DiscussionOrderField"]:DiscussionOrderField;
	/** A poll for a discussion. */
["DiscussionPoll"]: AliasType<{
	/** The discussion that this poll belongs to. */
	discussion?:ResolverInputTypes["Discussion"],
	id?:boolean | `@${string}`,
options?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** How to order the options for the discussion poll. */
	orderBy?: ResolverInputTypes["DiscussionPollOptionOrder"] | undefined | null},ResolverInputTypes["DiscussionPollOptionConnection"]],
	/** The question that is being asked by this poll. */
	question?:boolean | `@${string}`,
	/** The total number of votes that have been cast for this poll. */
	totalVoteCount?:boolean | `@${string}`,
	/** Indicates if the viewer has permission to vote in this poll. */
	viewerCanVote?:boolean | `@${string}`,
	/** Indicates if the viewer has voted for any option in this poll. */
	viewerHasVoted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An option for a discussion poll. */
["DiscussionPollOption"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The text for this option. */
	option?:boolean | `@${string}`,
	/** The discussion poll that this option belongs to. */
	poll?:ResolverInputTypes["DiscussionPoll"],
	/** The total number of votes that have been cast for this option. */
	totalVoteCount?:boolean | `@${string}`,
	/** Indicates if the viewer has voted for this option in the poll. */
	viewerHasVoted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for DiscussionPollOption. */
["DiscussionPollOptionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["DiscussionPollOptionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["DiscussionPollOption"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["DiscussionPollOptionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["DiscussionPollOption"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for discussion poll option connections. */
["DiscussionPollOptionOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order poll options by. */
	field: ResolverInputTypes["DiscussionPollOptionOrderField"]
};
	/** Properties by which discussion poll option connections can be ordered. */
["DiscussionPollOptionOrderField"]:DiscussionPollOptionOrderField;
	/** Autogenerated input type of DismissPullRequestReview */
["DismissPullRequestReviewInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The contents of the pull request review dismissal message. */
	message: string,
	/** The Node ID of the pull request review to modify. */
	pullRequestReviewId: string
};
	/** Autogenerated return type of DismissPullRequestReview */
["DismissPullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The dismissed pull request review. */
	pullRequestReview?:ResolverInputTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible reasons that a Dependabot alert was dismissed. */
["DismissReason"]:DismissReason;
	/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
["DismissRepositoryVulnerabilityAlertInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The reason the Dependabot alert is being dismissed. */
	dismissReason: ResolverInputTypes["DismissReason"],
	/** The Dependabot alert ID to dismiss. */
	repositoryVulnerabilityAlertId: string
};
	/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */
["DismissRepositoryVulnerabilityAlertPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The Dependabot alert that was dismissed */
	repositoryVulnerabilityAlert?:ResolverInputTypes["RepositoryVulnerabilityAlert"],
		__typename?: boolean | `@${string}`
}>;
	/** A draft issue within a project. */
["DraftIssue"]: AliasType<{
assignees?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
	/** The body of the draft issue. */
	body?:boolean | `@${string}`,
	/** The body of the draft issue rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body of the draft issue rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created this draft issue. */
	creator?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** The project (beta) that contains this draft issue. */
	project?:ResolverInputTypes["ProjectNext"],
	/** The project (beta) item that wraps this draft issue. */
	projectItem?:ResolverInputTypes["ProjectNextItem"],
projectV2Items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2ItemConnection"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
	/** The title of the draft issue */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Specifies a review comment to be left with a Pull Request Review. */
["DraftPullRequestReviewComment"]: {
	/** Body of the comment to leave. */
	body: string,
	/** Path to the file being commented on. */
	path: string,
	/** Position in the file to leave a comment on. */
	position: number
};
	/** Specifies a review comment thread to be left with a Pull Request Review. */
["DraftPullRequestReviewThread"]: {
	/** Body of the comment to leave. */
	body: string,
	/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
	line: number,
	/** Path to the file being commented on. */
	path: string,
	/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
	side?: ResolverInputTypes["DiffSide"] | undefined | null,
	/** The first line of the range to which the comment refers. */
	startLine?: number | undefined | null,
	/** The side of the diff on which the start line resides. */
	startSide?: ResolverInputTypes["DiffSide"] | undefined | null
};
	/** Autogenerated input type of EnablePullRequestAutoMerge */
["EnablePullRequestAutoMergeInput"]: {
	/** The email address to associate with this merge. */
	authorEmail?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Commit body to use for the commit when the PR is mergable; if omitted, a
default message will be used. NOTE: when merging with a merge queue any input
value for commit message is ignored. */
	commitBody?: string | undefined | null,
	/** Commit headline to use for the commit when the PR is mergable; if omitted, a
default message will be used. NOTE: when merging with a merge queue any input
value for commit headline is ignored. */
	commitHeadline?: string | undefined | null,
	/** The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
with a merge queue any input value for merge method is ignored. */
	mergeMethod?: ResolverInputTypes["PullRequestMergeMethod"] | undefined | null,
	/** ID of the pull request to enable auto-merge on. */
	pullRequestId: string
};
	/** Autogenerated return type of EnablePullRequestAutoMerge */
["EnablePullRequestAutoMergePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request auto-merge was enabled on. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** An account to manage multiple organizations with consolidated policy and billing. */
["Enterprise"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** Enterprise billing information visible to enterprise billing managers. */
	billingInfo?:ResolverInputTypes["EnterpriseBillingInfo"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The description of the enterprise. */
	description?:boolean | `@${string}`,
	/** The description of the enterprise as HTML. */
	descriptionHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The location of the enterprise. */
	location?:boolean | `@${string}`,
members?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Only return members within the selected GitHub Enterprise deployment */
	deployment?: ResolverInputTypes["EnterpriseUserDeployment"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Only return members with this two-factor authentication status. Does not
include members who only have an account on a GitHub Enterprise Server instance. */
	hasTwoFactorEnabled?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for members returned from the connection. */
	orderBy?: ResolverInputTypes["EnterpriseMemberOrder"] | undefined | null,	/** Only return members within the organizations with these logins */
	organizationLogins?: Array<string> | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null,	/** The role of the user in the enterprise organization or server. */
	role?: ResolverInputTypes["EnterpriseUserAccountMembershipRole"] | undefined | null},ResolverInputTypes["EnterpriseMemberConnection"]],
	/** The name of the enterprise. */
	name?:boolean | `@${string}`,
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations returned from the connection. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null,	/** The viewer's role in an organization. */
	viewerOrganizationRole?: ResolverInputTypes["RoleInOrganization"] | undefined | null},ResolverInputTypes["OrganizationConnection"]],
	/** Enterprise information only visible to enterprise owners. */
	ownerInfo?:ResolverInputTypes["EnterpriseOwnerInfo"],
	/** The HTTP path for this enterprise. */
	resourcePath?:boolean | `@${string}`,
	/** The URL-friendly identifier for the enterprise. */
	slug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	url?:boolean | `@${string}`,
	/** Is the current viewer an admin of this enterprise? */
	viewerIsAdmin?:boolean | `@${string}`,
	/** The URL of the enterprise website. */
	websiteUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["EnterpriseAdministratorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseAdministratorEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A User who is an administrator of an enterprise. */
["EnterpriseAdministratorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["User"],
	/** The role of the administrator. */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An invitation for a user to become an owner or billing manager of an enterprise. */
["EnterpriseAdministratorInvitation"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The email of the person who was invited to the enterprise. */
	email?:boolean | `@${string}`,
	/** The enterprise the invitation is for. */
	enterprise?:ResolverInputTypes["Enterprise"],
	id?:boolean | `@${string}`,
	/** The user who was invited to the enterprise. */
	invitee?:ResolverInputTypes["User"],
	/** The user who created the invitation. */
	inviter?:ResolverInputTypes["User"],
	/** The invitee's pending role in the enterprise (owner or billing_manager). */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseAdministratorInvitation. */
["EnterpriseAdministratorInvitationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseAdministratorInvitationEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["EnterpriseAdministratorInvitation"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseAdministratorInvitationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["EnterpriseAdministratorInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for enterprise administrator invitation connections */
["EnterpriseAdministratorInvitationOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order enterprise administrator invitations by. */
	field: ResolverInputTypes["EnterpriseAdministratorInvitationOrderField"]
};
	/** Properties by which enterprise administrator invitation connections can be ordered. */
["EnterpriseAdministratorInvitationOrderField"]:EnterpriseAdministratorInvitationOrderField;
	/** The possible administrator roles in an enterprise account. */
["EnterpriseAdministratorRole"]:EnterpriseAdministratorRole;
	/** The possible values for the enterprise allow private repository forking policy value. */
["EnterpriseAllowPrivateRepositoryForkingPolicyValue"]:EnterpriseAllowPrivateRepositoryForkingPolicyValue;
	/** Metadata for an audit entry containing enterprise account information. */
["EnterpriseAuditEntryData"]:AliasType<{
		/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`;
		['...on MembersCanDeleteReposClearAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposClearAuditEntry"],keyof ResolverInputTypes["EnterpriseAuditEntryData"]>;
		['...on MembersCanDeleteReposDisableAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposDisableAuditEntry"],keyof ResolverInputTypes["EnterpriseAuditEntryData"]>;
		['...on MembersCanDeleteReposEnableAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposEnableAuditEntry"],keyof ResolverInputTypes["EnterpriseAuditEntryData"]>;
		['...on OrgInviteToBusinessAuditEntry']?: Omit<ResolverInputTypes["OrgInviteToBusinessAuditEntry"],keyof ResolverInputTypes["EnterpriseAuditEntryData"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ResolverInputTypes["EnterpriseAuditEntryData"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ResolverInputTypes["EnterpriseAuditEntryData"]>;
		['...on RepositoryVisibilityChangeDisableAuditEntry']?: Omit<ResolverInputTypes["RepositoryVisibilityChangeDisableAuditEntry"],keyof ResolverInputTypes["EnterpriseAuditEntryData"]>;
		['...on RepositoryVisibilityChangeEnableAuditEntry']?: Omit<ResolverInputTypes["RepositoryVisibilityChangeEnableAuditEntry"],keyof ResolverInputTypes["EnterpriseAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Enterprise billing information visible to enterprise billing managers and owners. */
["EnterpriseBillingInfo"]: AliasType<{
	/** The number of licenseable users/emails across the enterprise. */
	allLicensableUsersCount?:boolean | `@${string}`,
	/** The number of data packs used by all organizations owned by the enterprise. */
	assetPacks?:boolean | `@${string}`,
	/** The bandwidth quota in GB for all organizations owned by the enterprise. */
	bandwidthQuota?:boolean | `@${string}`,
	/** The bandwidth usage in GB for all organizations owned by the enterprise. */
	bandwidthUsage?:boolean | `@${string}`,
	/** The bandwidth usage as a percentage of the bandwidth quota. */
	bandwidthUsagePercentage?:boolean | `@${string}`,
	/** The storage quota in GB for all organizations owned by the enterprise. */
	storageQuota?:boolean | `@${string}`,
	/** The storage usage in GB for all organizations owned by the enterprise. */
	storageUsage?:boolean | `@${string}`,
	/** The storage usage as a percentage of the storage quota. */
	storageUsagePercentage?:boolean | `@${string}`,
	/** The number of available licenses across all owned organizations based on the unique number of billable users. */
	totalAvailableLicenses?:boolean | `@${string}`,
	/** The total number of licenses allocated. */
	totalLicenses?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible values for the enterprise base repository permission setting. */
["EnterpriseDefaultRepositoryPermissionSettingValue"]:EnterpriseDefaultRepositoryPermissionSettingValue;
	/** The possible values for an enabled/disabled enterprise setting. */
["EnterpriseEnabledDisabledSettingValue"]:EnterpriseEnabledDisabledSettingValue;
	/** The possible values for an enabled/no policy enterprise setting. */
["EnterpriseEnabledSettingValue"]:EnterpriseEnabledSettingValue;
	/** An identity provider configured to provision identities for an enterprise. */
["EnterpriseIdentityProvider"]: AliasType<{
	/** The digest algorithm used to sign SAML requests for the identity provider. */
	digestMethod?:boolean | `@${string}`,
	/** The enterprise this identity provider belongs to. */
	enterprise?:ResolverInputTypes["Enterprise"],
externalIdentities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter to external identities with the users login */
	login?: string | undefined | null,	/** Filter to external identities with valid org membership only */
	membersOnly?: boolean | undefined | null,	/** Filter to external identities with the users userName/NameID attribute */
	userName?: string | undefined | null},ResolverInputTypes["ExternalIdentityConnection"]],
	id?:boolean | `@${string}`,
	/** The x509 certificate used by the identity provider to sign assertions and responses. */
	idpCertificate?:boolean | `@${string}`,
	/** The Issuer Entity ID for the SAML identity provider. */
	issuer?:boolean | `@${string}`,
	/** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
	recoveryCodes?:boolean | `@${string}`,
	/** The signature algorithm used to sign SAML requests for the identity provider. */
	signatureMethod?:boolean | `@${string}`,
	/** The URL endpoint for the identity provider's SAML SSO. */
	ssoUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An object that is a member of an enterprise. */
["EnterpriseMember"]: AliasType<{
	EnterpriseUserAccount?:ResolverInputTypes["EnterpriseUserAccount"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseMember. */
["EnterpriseMemberConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseMemberEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["EnterpriseMember"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A User who is a member of an enterprise through one or more organizations. */
["EnterpriseMemberEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["EnterpriseMember"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for enterprise member connections. */
["EnterpriseMemberOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order enterprise members by. */
	field: ResolverInputTypes["EnterpriseMemberOrderField"]
};
	/** Properties by which enterprise member connections can be ordered. */
["EnterpriseMemberOrderField"]:EnterpriseMemberOrderField;
	/** The possible values for the enterprise members can create repositories setting. */
["EnterpriseMembersCanCreateRepositoriesSettingValue"]:EnterpriseMembersCanCreateRepositoriesSettingValue;
	/** The possible values for the members can make purchases setting. */
["EnterpriseMembersCanMakePurchasesSettingValue"]:EnterpriseMembersCanMakePurchasesSettingValue;
	/** The connection type for Organization. */
["EnterpriseOrganizationMembershipConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseOrganizationMembershipEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Organization"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An enterprise organization that a user is a member of. */
["EnterpriseOrganizationMembershipEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Organization"],
	/** The role of the user in the enterprise membership. */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["EnterpriseOutsideCollaboratorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseOutsideCollaboratorEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A User who is an outside collaborator of an enterprise through one or more organizations. */
["EnterpriseOutsideCollaboratorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["User"],
repositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories. */
	orderBy?: ResolverInputTypes["RepositoryOrder"] | undefined | null},ResolverInputTypes["EnterpriseRepositoryInfoConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Enterprise information only visible to enterprise owners. */
["EnterpriseOwnerInfo"]: AliasType<{
admins?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Only return administrators with this two-factor authentication status. */
	hasTwoFactorEnabled?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for administrators returned from the connection. */
	orderBy?: ResolverInputTypes["EnterpriseMemberOrder"] | undefined | null,	/** Only return members within the organizations with these logins */
	organizationLogins?: Array<string> | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null,	/** The role to filter by. */
	role?: ResolverInputTypes["EnterpriseAdministratorRole"] | undefined | null},ResolverInputTypes["EnterpriseAdministratorConnection"]],
affiliatedUsersWithTwoFactorDisabled?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
	/** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
	affiliatedUsersWithTwoFactorDisabledExist?:boolean | `@${string}`,
	/** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
	allowPrivateRepositoryForkingSetting?:boolean | `@${string}`,
allowPrivateRepositoryForkingSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
	/** The value for the allow private repository forking policy on the enterprise. */
	allowPrivateRepositoryForkingSettingPolicyValue?:boolean | `@${string}`,
	/** The setting value for base repository permissions for organizations in this enterprise. */
	defaultRepositoryPermissionSetting?:boolean | `@${string}`,
defaultRepositoryPermissionSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The permission to find organizations for. */
	value: ResolverInputTypes["DefaultRepositoryPermissionField"]},ResolverInputTypes["OrganizationConnection"]],
domains?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Filter whether or not the domain is approved. */
	isApproved?: boolean | undefined | null,	/** Filter whether or not the domain is verified. */
	isVerified?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for verifiable domains returned. */
	orderBy?: ResolverInputTypes["VerifiableDomainOrder"] | undefined | null},ResolverInputTypes["VerifiableDomainConnection"]],
enterpriseServerInstallations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Whether or not to only return installations discovered via GitHub Connect. */
	connectedOnly?: boolean | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for Enterprise Server installations returned. */
	orderBy?: ResolverInputTypes["EnterpriseServerInstallationOrder"] | undefined | null},ResolverInputTypes["EnterpriseServerInstallationConnection"]],
	/** The setting value for whether the enterprise has an IP allow list enabled. */
	ipAllowListEnabledSetting?:boolean | `@${string}`,
ipAllowListEntries?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for IP allow list entries returned. */
	orderBy?: ResolverInputTypes["IpAllowListEntryOrder"] | undefined | null},ResolverInputTypes["IpAllowListEntryConnection"]],
	/** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
	ipAllowListForInstalledAppsEnabledSetting?:boolean | `@${string}`,
	/** Whether or not the base repository permission is currently being updated. */
	isUpdatingDefaultRepositoryPermission?:boolean | `@${string}`,
	/** Whether the two-factor authentication requirement is currently being enforced. */
	isUpdatingTwoFactorRequirement?:boolean | `@${string}`,
	/** The setting value for whether organization members with admin permissions on a
repository can change repository visibility. */
	membersCanChangeRepositoryVisibilitySetting?:boolean | `@${string}`,
membersCanChangeRepositoryVisibilitySettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
	/** The setting value for whether members of organizations in the enterprise can create internal repositories. */
	membersCanCreateInternalRepositoriesSetting?:boolean | `@${string}`,
	/** The setting value for whether members of organizations in the enterprise can create private repositories. */
	membersCanCreatePrivateRepositoriesSetting?:boolean | `@${string}`,
	/** The setting value for whether members of organizations in the enterprise can create public repositories. */
	membersCanCreatePublicRepositoriesSetting?:boolean | `@${string}`,
	/** The setting value for whether members of organizations in the enterprise can create repositories. */
	membersCanCreateRepositoriesSetting?:boolean | `@${string}`,
membersCanCreateRepositoriesSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting to find organizations for. */
	value: ResolverInputTypes["OrganizationMembersCanCreateRepositoriesSettingValue"]},ResolverInputTypes["OrganizationConnection"]],
	/** The setting value for whether members with admin permissions for repositories can delete issues. */
	membersCanDeleteIssuesSetting?:boolean | `@${string}`,
membersCanDeleteIssuesSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
	/** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
	membersCanDeleteRepositoriesSetting?:boolean | `@${string}`,
membersCanDeleteRepositoriesSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
	/** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
	membersCanInviteCollaboratorsSetting?:boolean | `@${string}`,
membersCanInviteCollaboratorsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
	/** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
	membersCanMakePurchasesSetting?:boolean | `@${string}`,
	/** The setting value for whether members with admin permissions for repositories can update protected branches. */
	membersCanUpdateProtectedBranchesSetting?:boolean | `@${string}`,
membersCanUpdateProtectedBranchesSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
	/** The setting value for whether members can view dependency insights. */
	membersCanViewDependencyInsightsSetting?:boolean | `@${string}`,
membersCanViewDependencyInsightsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
	/** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
	notificationDeliveryRestrictionEnabledSetting?:boolean | `@${string}`,
	/** The OIDC Identity Provider for the enterprise. */
	oidcProvider?:ResolverInputTypes["OIDCProvider"],
	/** The setting value for whether organization projects are enabled for organizations in this enterprise. */
	organizationProjectsSetting?:boolean | `@${string}`,
organizationProjectsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
outsideCollaborators?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Only return outside collaborators with this two-factor authentication status. */
	hasTwoFactorEnabled?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** The login of one specific outside collaborator. */
	login?: string | undefined | null,	/** Ordering options for outside collaborators returned from the connection. */
	orderBy?: ResolverInputTypes["EnterpriseMemberOrder"] | undefined | null,	/** Only return outside collaborators within the organizations with these logins */
	organizationLogins?: Array<string> | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null,	/** Only return outside collaborators on repositories with this visibility. */
	visibility?: ResolverInputTypes["RepositoryVisibility"] | undefined | null},ResolverInputTypes["EnterpriseOutsideCollaboratorConnection"]],
pendingAdminInvitations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pending enterprise administrator invitations returned from the connection. */
	orderBy?: ResolverInputTypes["EnterpriseAdministratorInvitationOrder"] | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null,	/** The role to filter by. */
	role?: ResolverInputTypes["EnterpriseAdministratorRole"] | undefined | null},ResolverInputTypes["EnterpriseAdministratorInvitationConnection"]],
pendingCollaboratorInvitations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pending repository collaborator invitations returned from the connection. */
	orderBy?: ResolverInputTypes["RepositoryInvitationOrder"] | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null},ResolverInputTypes["RepositoryInvitationConnection"]],
pendingMemberInvitations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Only return invitations within the organizations with these logins */
	organizationLogins?: Array<string> | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null},ResolverInputTypes["EnterprisePendingMemberInvitationConnection"]],
	/** The setting value for whether repository projects are enabled in this enterprise. */
	repositoryProjectsSetting?:boolean | `@${string}`,
repositoryProjectsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
	/** The SAML Identity Provider for the enterprise. When used by a GitHub App,
requires an installation token with read and write access to members. */
	samlIdentityProvider?:ResolverInputTypes["EnterpriseIdentityProvider"],
samlIdentityProviderSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: ResolverInputTypes["IdentityProviderConfigurationState"]},ResolverInputTypes["OrganizationConnection"]],
supportEntitlements?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for support entitlement users returned from the connection. */
	orderBy?: ResolverInputTypes["EnterpriseMemberOrder"] | undefined | null},ResolverInputTypes["EnterpriseMemberConnection"]],
	/** The setting value for whether team discussions are enabled for organizations in this enterprise. */
	teamDiscussionsSetting?:boolean | `@${string}`,
teamDiscussionsSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
	/** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
	twoFactorRequiredSetting?:boolean | `@${string}`,
twoFactorRequiredSettingOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations with this setting. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The setting value to find organizations for. */
	value: boolean},ResolverInputTypes["OrganizationConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for OrganizationInvitation. */
["EnterprisePendingMemberInvitationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterprisePendingMemberInvitationEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["OrganizationInvitation"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** Identifies the total count of unique users in the connection. */
	totalUniqueUserCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An invitation to be a member in an enterprise organization. */
["EnterprisePendingMemberInvitationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["OrganizationInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** A subset of repository information queryable from an enterprise. */
["EnterpriseRepositoryInfo"]: AliasType<{
	id?:boolean | `@${string}`,
	/** Identifies if the repository is private or internal. */
	isPrivate?:boolean | `@${string}`,
	/** The repository's name. */
	name?:boolean | `@${string}`,
	/** The repository's name with owner. */
	nameWithOwner?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseRepositoryInfo. */
["EnterpriseRepositoryInfoConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseRepositoryInfoEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["EnterpriseRepositoryInfo"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseRepositoryInfoEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["EnterpriseRepositoryInfo"],
		__typename?: boolean | `@${string}`
}>;
	/** An Enterprise Server installation. */
["EnterpriseServerInstallation"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The customer name to which the Enterprise Server installation belongs. */
	customerName?:boolean | `@${string}`,
	/** The host name of the Enterprise Server installation. */
	hostName?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
	isConnected?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
userAccounts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for Enterprise Server user accounts returned from the connection. */
	orderBy?: ResolverInputTypes["EnterpriseServerUserAccountOrder"] | undefined | null},ResolverInputTypes["EnterpriseServerUserAccountConnection"]],
userAccountsUploads?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for Enterprise Server user accounts uploads returned from the connection. */
	orderBy?: ResolverInputTypes["EnterpriseServerUserAccountsUploadOrder"] | undefined | null},ResolverInputTypes["EnterpriseServerUserAccountsUploadConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseServerInstallation. */
["EnterpriseServerInstallationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseServerInstallationEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["EnterpriseServerInstallation"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseServerInstallationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["EnterpriseServerInstallation"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Enterprise Server installation connections. */
["EnterpriseServerInstallationOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order Enterprise Server installations by. */
	field: ResolverInputTypes["EnterpriseServerInstallationOrderField"]
};
	/** Properties by which Enterprise Server installation connections can be ordered. */
["EnterpriseServerInstallationOrderField"]:EnterpriseServerInstallationOrderField;
	/** A user account on an Enterprise Server installation. */
["EnterpriseServerUserAccount"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
emails?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for Enterprise Server user account emails returned from the connection. */
	orderBy?: ResolverInputTypes["EnterpriseServerUserAccountEmailOrder"] | undefined | null},ResolverInputTypes["EnterpriseServerUserAccountEmailConnection"]],
	/** The Enterprise Server installation on which this user account exists. */
	enterpriseServerInstallation?:ResolverInputTypes["EnterpriseServerInstallation"],
	id?:boolean | `@${string}`,
	/** Whether the user account is a site administrator on the Enterprise Server installation. */
	isSiteAdmin?:boolean | `@${string}`,
	/** The login of the user account on the Enterprise Server installation. */
	login?:boolean | `@${string}`,
	/** The profile name of the user account on the Enterprise Server installation. */
	profileName?:boolean | `@${string}`,
	/** The date and time when the user account was created on the Enterprise Server installation. */
	remoteCreatedAt?:boolean | `@${string}`,
	/** The ID of the user account on the Enterprise Server installation. */
	remoteUserId?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseServerUserAccount. */
["EnterpriseServerUserAccountConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseServerUserAccountEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["EnterpriseServerUserAccount"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseServerUserAccountEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["EnterpriseServerUserAccount"],
		__typename?: boolean | `@${string}`
}>;
	/** An email belonging to a user account on an Enterprise Server installation. */
["EnterpriseServerUserAccountEmail"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The email address. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Indicates whether this is the primary email of the associated user account. */
	isPrimary?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The user account to which the email belongs. */
	userAccount?:ResolverInputTypes["EnterpriseServerUserAccount"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseServerUserAccountEmail. */
["EnterpriseServerUserAccountEmailConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseServerUserAccountEmailEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["EnterpriseServerUserAccountEmail"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseServerUserAccountEmailEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["EnterpriseServerUserAccountEmail"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Enterprise Server user account email connections. */
["EnterpriseServerUserAccountEmailOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order emails by. */
	field: ResolverInputTypes["EnterpriseServerUserAccountEmailOrderField"]
};
	/** Properties by which Enterprise Server user account email connections can be ordered. */
["EnterpriseServerUserAccountEmailOrderField"]:EnterpriseServerUserAccountEmailOrderField;
	/** Ordering options for Enterprise Server user account connections. */
["EnterpriseServerUserAccountOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order user accounts by. */
	field: ResolverInputTypes["EnterpriseServerUserAccountOrderField"]
};
	/** Properties by which Enterprise Server user account connections can be ordered. */
["EnterpriseServerUserAccountOrderField"]:EnterpriseServerUserAccountOrderField;
	/** A user accounts upload from an Enterprise Server installation. */
["EnterpriseServerUserAccountsUpload"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The enterprise to which this upload belongs. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** The Enterprise Server installation for which this upload was generated. */
	enterpriseServerInstallation?:ResolverInputTypes["EnterpriseServerInstallation"],
	id?:boolean | `@${string}`,
	/** The name of the file uploaded. */
	name?:boolean | `@${string}`,
	/** The synchronization state of the upload */
	syncState?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for EnterpriseServerUserAccountsUpload. */
["EnterpriseServerUserAccountsUploadConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnterpriseServerUserAccountsUploadEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["EnterpriseServerUserAccountsUpload"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnterpriseServerUserAccountsUploadEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["EnterpriseServerUserAccountsUpload"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Enterprise Server user accounts upload connections. */
["EnterpriseServerUserAccountsUploadOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order user accounts uploads by. */
	field: ResolverInputTypes["EnterpriseServerUserAccountsUploadOrderField"]
};
	/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
["EnterpriseServerUserAccountsUploadOrderField"]:EnterpriseServerUserAccountsUploadOrderField;
	/** Synchronization state of the Enterprise Server user accounts upload */
["EnterpriseServerUserAccountsUploadSyncState"]:EnterpriseServerUserAccountsUploadSyncState;
	/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
["EnterpriseUserAccount"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The enterprise in which this user account exists. */
	enterprise?:ResolverInputTypes["Enterprise"],
	id?:boolean | `@${string}`,
	/** An identifier for the enterprise user account, a login or email address */
	login?:boolean | `@${string}`,
	/** The name of the enterprise user account */
	name?:boolean | `@${string}`,
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for organizations returned from the connection. */
	orderBy?: ResolverInputTypes["OrganizationOrder"] | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null,	/** The role of the user in the enterprise organization. */
	role?: ResolverInputTypes["EnterpriseUserAccountMembershipRole"] | undefined | null},ResolverInputTypes["EnterpriseOrganizationMembershipConnection"]],
	/** The HTTP path for this user. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this user. */
	url?:boolean | `@${string}`,
	/** The user within the enterprise. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible roles for enterprise membership. */
["EnterpriseUserAccountMembershipRole"]:EnterpriseUserAccountMembershipRole;
	/** The possible GitHub Enterprise deployments where this user can exist. */
["EnterpriseUserDeployment"]:EnterpriseUserDeployment;
	/** An environment. */
["Environment"]: AliasType<{
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the environment */
	name?:boolean | `@${string}`,
protectionRules?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DeploymentProtectionRuleConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Environment. */
["EnvironmentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["EnvironmentEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Environment"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["EnvironmentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Environment"],
		__typename?: boolean | `@${string}`
}>;
	/** An external identity provisioned by SAML SSO or SCIM. */
["ExternalIdentity"]: AliasType<{
	/** The GUID for this identity */
	guid?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Organization invitation for this SCIM-provisioned external identity */
	organizationInvitation?:ResolverInputTypes["OrganizationInvitation"],
	/** SAML Identity attributes */
	samlIdentity?:ResolverInputTypes["ExternalIdentitySamlAttributes"],
	/** SCIM Identity attributes */
	scimIdentity?:ResolverInputTypes["ExternalIdentityScimAttributes"],
	/** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** An attribute for the External Identity attributes collection */
["ExternalIdentityAttribute"]: AliasType<{
	/** The attribute metadata as JSON */
	metadata?:boolean | `@${string}`,
	/** The attribute name */
	name?:boolean | `@${string}`,
	/** The attribute value */
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ExternalIdentity. */
["ExternalIdentityConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ExternalIdentityEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ExternalIdentity"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ExternalIdentityEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ExternalIdentity"],
		__typename?: boolean | `@${string}`
}>;
	/** SAML attributes for the External Identity */
["ExternalIdentitySamlAttributes"]: AliasType<{
	/** SAML Identity attributes */
	attributes?:ResolverInputTypes["ExternalIdentityAttribute"],
	/** The emails associated with the SAML identity */
	emails?:ResolverInputTypes["UserEmailMetadata"],
	/** Family name of the SAML identity */
	familyName?:boolean | `@${string}`,
	/** Given name of the SAML identity */
	givenName?:boolean | `@${string}`,
	/** The groups linked to this identity in IDP */
	groups?:boolean | `@${string}`,
	/** The NameID of the SAML identity */
	nameId?:boolean | `@${string}`,
	/** The userName of the SAML identity */
	username?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** SCIM attributes for the External Identity */
["ExternalIdentityScimAttributes"]: AliasType<{
	/** The emails associated with the SCIM identity */
	emails?:ResolverInputTypes["UserEmailMetadata"],
	/** Family name of the SCIM identity */
	familyName?:boolean | `@${string}`,
	/** Given name of the SCIM identity */
	givenName?:boolean | `@${string}`,
	/** The groups linked to this identity in IDP */
	groups?:boolean | `@${string}`,
	/** The userName of the SCIM identity */
	username?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A command to add a file at the given path with the given contents as part of a
commit.  Any existing file at that that path will be replaced. */
["FileAddition"]: {
	/** The base64 encoded contents of the file */
	contents: ResolverInputTypes["Base64String"],
	/** The path in the repository where the file will be located */
	path: string
};
	/** A description of a set of changes to a file tree to be made as part of
a git commit, modeled as zero or more file `additions` and zero or more
file `deletions`.

Both fields are optional; omitting both will produce a commit with no
file changes.

`deletions` and `additions` describe changes to files identified
by their path in the git tree using unix-style path separators, i.e.
`/`.  The root of a git tree is an empty string, so paths are not
slash-prefixed.

`path` values must be unique across all `additions` and `deletions`
provided.  Any duplication will result in a validation error.

### Encoding

File contents must be provided in full for each `FileAddition`.

The `contents` of a `FileAddition` must be encoded using RFC 4648
compliant base64, i.e. correct padding is required and no characters
outside the standard alphabet may be used.  Invalid base64
encoding will be rejected with a validation error.

The encoded contents may be binary.

For text files, no assumptions are made about the character encoding of
the file contents (after base64 decoding).  No charset transcoding or
line-ending normalization will be performed; it is the client's
responsibility to manage the character encoding of files they provide.
However, for maximum compatibility we recommend using UTF-8 encoding
and ensuring that all files in a repository use a consistent
line-ending convention (`\n` or `\r\n`), and that all files end
with a newline.

### Modeling file changes

Each of the the five types of conceptual changes that can be made in a
git commit can be described using the `FileChanges` type as follows:

1. New file addition: create file `hello world\n` at path `docs/README.txt`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }

2. Existing file modification: change existing `docs/README.txt` to have new
   content `new content here\n`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("new content here\n")
           }
         ]
       }

3. Existing file deletion: remove existing file `docs/README.txt`.
   Note that the path is required to exist -- specifying a
   path that does not exist on the given branch will abort the
   commit and return an error.

       {
         "deletions" [
           {
             "path": "docs/README.txt"
           }
         ]
       }


4. File rename with no changes: rename `docs/README.txt` with
   previous content `hello world\n` to the same content at
   `newdocs/README.txt`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }


5. File rename with changes: rename `docs/README.txt` with
   previous content `hello world\n` to a file at path
   `newdocs/README.txt` with content `new contents\n`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("new contents\n")
           }
         ]
       } */
["FileChanges"]: {
	/** File to add or change. */
	additions?: Array<ResolverInputTypes["FileAddition"]> | undefined | null,
	/** Files to delete. */
	deletions?: Array<ResolverInputTypes["FileDeletion"]> | undefined | null
};
	/** A command to delete the file at the given path as part of a commit. */
["FileDeletion"]: {
	/** The path to delete */
	path: string
};
	/** The possible viewed states of a file . */
["FileViewedState"]:FileViewedState;
	/** Autogenerated input type of FollowOrganization */
["FollowOrganizationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the organization to follow. */
	organizationId: string
};
	/** Autogenerated return type of FollowOrganization */
["FollowOrganizationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The organization that was followed. */
	organization?:ResolverInputTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of FollowUser */
["FollowUserInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the user to follow. */
	userId: string
};
	/** Autogenerated return type of FollowUser */
["FollowUserPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The user that was followed. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["FollowerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["UserEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["FollowingConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["UserEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A funding platform link for a repository. */
["FundingLink"]: AliasType<{
	/** The funding platform this link is for. */
	platform?:boolean | `@${string}`,
	/** The configured URL for this funding link. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible funding platforms for repository funding links. */
["FundingPlatform"]:FundingPlatform;
	/** A generic hovercard context with a message and icon */
["GenericHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A Gist. */
["Gist"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["GistCommentConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The gist description. */
	description?:boolean | `@${string}`,
files?: [{	/** The maximum number of files to return. */
	limit?: number | undefined | null,	/** The oid of the files to return */
	oid?: ResolverInputTypes["GitObjectID"] | undefined | null},ResolverInputTypes["GistFile"]],
forks?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for gists returned from the connection */
	orderBy?: ResolverInputTypes["GistOrder"] | undefined | null},ResolverInputTypes["GistConnection"]],
	id?:boolean | `@${string}`,
	/** Identifies if the gist is a fork. */
	isFork?:boolean | `@${string}`,
	/** Whether the gist is public or not. */
	isPublic?:boolean | `@${string}`,
	/** The gist name. */
	name?:boolean | `@${string}`,
	/** The gist owner. */
	owner?:ResolverInputTypes["RepositoryOwner"],
	/** Identifies when the gist was last pushed to. */
	pushedAt?:boolean | `@${string}`,
	/** The HTML path to this resource. */
	resourcePath?:boolean | `@${string}`,
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount?:boolean | `@${string}`,
stargazers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["StarOrder"] | undefined | null},ResolverInputTypes["StargazerConnection"]],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this Gist. */
	url?:boolean | `@${string}`,
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a comment on an Gist. */
["GistComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the gist. */
	authorAssociation?:boolean | `@${string}`,
	/** Identifies the comment body. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	/** The associated gist. */
	gist?:ResolverInputTypes["Gist"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for GistComment. */
["GistCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["GistCommentEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["GistComment"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["GistCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["GistComment"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Gist. */
["GistConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["GistEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Gist"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["GistEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Gist"],
		__typename?: boolean | `@${string}`
}>;
	/** A file in a gist. */
["GistFile"]: AliasType<{
	/** The file name encoded to remove characters that are invalid in URL paths. */
	encodedName?:boolean | `@${string}`,
	/** The gist file encoding. */
	encoding?:boolean | `@${string}`,
	/** The file extension from the file name. */
	extension?:boolean | `@${string}`,
	/** Indicates if this file is an image. */
	isImage?:boolean | `@${string}`,
	/** Whether the file's contents were truncated. */
	isTruncated?:boolean | `@${string}`,
	/** The programming language this file is written in. */
	language?:ResolverInputTypes["Language"],
	/** The gist file name. */
	name?:boolean | `@${string}`,
	/** The gist file size in bytes. */
	size?:boolean | `@${string}`,
text?: [{	/** Optionally truncate the returned file to this length. */
	truncate?: number | undefined | null},boolean | `@${string}`],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for gist connections */
["GistOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order repositories by. */
	field: ResolverInputTypes["GistOrderField"]
};
	/** Properties by which gist connections can be ordered. */
["GistOrderField"]:GistOrderField;
	/** The privacy of a Gist */
["GistPrivacy"]:GistPrivacy;
	/** Represents an actor in a Git commit (ie. an author or committer). */
["GitActor"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** The timestamp of the Git action (authoring or committing). */
	date?:boolean | `@${string}`,
	/** The email in the Git commit. */
	email?:boolean | `@${string}`,
	/** The name in the Git commit. */
	name?:boolean | `@${string}`,
	/** The GitHub user corresponding to the email field. Null if no such user exists. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for GitActor. */
["GitActorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["GitActorEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["GitActor"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["GitActorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["GitActor"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents information about the GitHub instance. */
["GitHubMetadata"]: AliasType<{
	/** Returns a String that's a SHA of `github-services` */
	gitHubServicesSha?:boolean | `@${string}`,
	/** IP addresses that users connect to for git operations */
	gitIpAddresses?:boolean | `@${string}`,
	/** IP addresses that service hooks are sent from */
	hookIpAddresses?:boolean | `@${string}`,
	/** IP addresses that the importer connects from */
	importerIpAddresses?:boolean | `@${string}`,
	/** Whether or not users are verified */
	isPasswordAuthenticationVerifiable?:boolean | `@${string}`,
	/** IP addresses for GitHub Pages' A records */
	pagesIpAddresses?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git object. */
["GitObject"]:AliasType<{
		/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The Repository the Git object belongs to */
	repository?:ResolverInputTypes["Repository"];
		['...on Blob']?: Omit<ResolverInputTypes["Blob"],keyof ResolverInputTypes["GitObject"]>;
		['...on Commit']?: Omit<ResolverInputTypes["Commit"],keyof ResolverInputTypes["GitObject"]>;
		['...on Tag']?: Omit<ResolverInputTypes["Tag"],keyof ResolverInputTypes["GitObject"]>;
		['...on Tree']?: Omit<ResolverInputTypes["Tree"],keyof ResolverInputTypes["GitObject"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A Git object ID. */
["GitObjectID"]:unknown;
	/** A fully qualified reference name (e.g. `refs/heads/master`). */
["GitRefname"]:unknown;
	/** Git SSH string */
["GitSSHRemote"]:unknown;
	/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
["GitSignature"]:AliasType<{
		/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ResolverInputTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`;
		['...on GpgSignature']?: Omit<ResolverInputTypes["GpgSignature"],keyof ResolverInputTypes["GitSignature"]>;
		['...on SmimeSignature']?: Omit<ResolverInputTypes["SmimeSignature"],keyof ResolverInputTypes["GitSignature"]>;
		['...on SshSignature']?: Omit<ResolverInputTypes["SshSignature"],keyof ResolverInputTypes["GitSignature"]>;
		['...on UnknownSignature']?: Omit<ResolverInputTypes["UnknownSignature"],keyof ResolverInputTypes["GitSignature"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The state of a Git signature. */
["GitSignatureState"]:GitSignatureState;
	/** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
["GitTimestamp"]:unknown;
	/** Represents a GPG signature on a Commit or Tag. */
["GpgSignature"]: AliasType<{
	/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Hex-encoded ID of the key that signed this object. */
	keyId?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ResolverInputTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
["GrantEnterpriseOrganizationsMigratorRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
	enterpriseId: string,
	/** The login of the user to grant the migrator role */
	login: string
};
	/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
["GrantEnterpriseOrganizationsMigratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["OrganizationConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of GrantMigratorRole */
["GrantMigratorRoleInput"]: {
	/** The user login or Team slug to grant the migrator role. */
	actor: string,
	/** Specifies the type of the actor, can be either USER or TEAM. */
	actorType: ResolverInputTypes["ActorType"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the organization that the user/team belongs to. */
	organizationId: string
};
	/** Autogenerated return type of GrantMigratorRole */
["GrantMigratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Did the operation succeed? */
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A string containing HTML code. */
["HTML"]:unknown;
	/** Represents a 'head_ref_deleted' event on a given pull request. */
["HeadRefDeletedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the Ref associated with the `head_ref_deleted` event. */
	headRef?:ResolverInputTypes["Ref"],
	/** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
	headRefName?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'head_ref_force_pushed' event on a given pull request. */
["HeadRefForcePushedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
	afterCommit?:ResolverInputTypes["Commit"],
	/** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
	beforeCommit?:ResolverInputTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
	ref?:ResolverInputTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'head_ref_restored' event on a given pull request. */
["HeadRefRestoredEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Detail needed to display a hovercard for a user */
["Hovercard"]: AliasType<{
	/** Each of the contexts for this hovercard */
	contexts?:ResolverInputTypes["HovercardContext"],
		__typename?: boolean | `@${string}`
}>;
	/** An individual line of a hovercard */
["HovercardContext"]:AliasType<{
		/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`;
		['...on GenericHovercardContext']?: Omit<ResolverInputTypes["GenericHovercardContext"],keyof ResolverInputTypes["HovercardContext"]>;
		['...on OrganizationTeamsHovercardContext']?: Omit<ResolverInputTypes["OrganizationTeamsHovercardContext"],keyof ResolverInputTypes["HovercardContext"]>;
		['...on OrganizationsHovercardContext']?: Omit<ResolverInputTypes["OrganizationsHovercardContext"],keyof ResolverInputTypes["HovercardContext"]>;
		['...on ReviewStatusHovercardContext']?: Omit<ResolverInputTypes["ReviewStatusHovercardContext"],keyof ResolverInputTypes["HovercardContext"]>;
		['...on ViewerHovercardContext']?: Omit<ResolverInputTypes["ViewerHovercardContext"],keyof ResolverInputTypes["HovercardContext"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The possible states in which authentication can be configured with an identity provider. */
["IdentityProviderConfigurationState"]:IdentityProviderConfigurationState;
	/** Autogenerated input type of ImportProject */
["ImportProjectInput"]: {
	/** The description of Project. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** A list of columns containing issues and pull requests. */
	columnImports: Array<ResolverInputTypes["ProjectColumnImport"]>,
	/** The name of Project. */
	name: string,
	/** The name of the Organization or User to create the Project under. */
	ownerName: string,
	/** Whether the Project is public or not. */
	public?: boolean | undefined | null
};
	/** Autogenerated return type of ImportProject */
["ImportProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new Project! */
	project?:ResolverInputTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of InviteEnterpriseAdmin */
["InviteEnterpriseAdminInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The email of the person to invite as an administrator. */
	email?: string | undefined | null,
	/** The ID of the enterprise to which you want to invite an administrator. */
	enterpriseId: string,
	/** The login of a user to invite as an administrator. */
	invitee?: string | undefined | null,
	/** The role of the administrator. */
	role?: ResolverInputTypes["EnterpriseAdministratorRole"] | undefined | null
};
	/** Autogenerated return type of InviteEnterpriseAdmin */
["InviteEnterpriseAdminPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The created enterprise administrator invitation. */
	invitation?:ResolverInputTypes["EnterpriseAdministratorInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible values for the IP allow list enabled setting. */
["IpAllowListEnabledSettingValue"]:IpAllowListEnabledSettingValue;
	/** An IP address or range of addresses that is allowed to access an owner's resources. */
["IpAllowListEntry"]: AliasType<{
	/** A single IP address or range of IP addresses in CIDR notation. */
	allowListValue?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the entry is currently active. */
	isActive?:boolean | `@${string}`,
	/** The name of the IP allow list entry. */
	name?:boolean | `@${string}`,
	/** The owner of the IP allow list entry. */
	owner?:ResolverInputTypes["IpAllowListOwner"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for IpAllowListEntry. */
["IpAllowListEntryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["IpAllowListEntryEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["IpAllowListEntry"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IpAllowListEntryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["IpAllowListEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for IP allow list entry connections. */
["IpAllowListEntryOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order IP allow list entries by. */
	field: ResolverInputTypes["IpAllowListEntryOrderField"]
};
	/** Properties by which IP allow list entry connections can be ordered. */
["IpAllowListEntryOrderField"]:IpAllowListEntryOrderField;
	/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
["IpAllowListForInstalledAppsEnabledSettingValue"]:IpAllowListForInstalledAppsEnabledSettingValue;
	/** Types that can own an IP allow list. */
["IpAllowListOwner"]: AliasType<{
	App?:ResolverInputTypes["App"],
	Enterprise?:ResolverInputTypes["Enterprise"],
	Organization?:ResolverInputTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
["Issue"]: AliasType<{
	/** Reason that the conversation was locked. */
	activeLockReason?:boolean | `@${string}`,
assignees?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** Identifies the body of the issue. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The http path for this issue body */
	bodyResourcePath?:boolean | `@${string}`,
	/** Identifies the body of the issue rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** The http URL for this issue body */
	bodyUrl?:boolean | `@${string}`,
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for issue comments returned from the connection. */
	orderBy?: ResolverInputTypes["IssueCommentOrder"] | undefined | null},ResolverInputTypes["IssueCommentConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
hovercard?: [{	/** Whether or not to include notification contexts */
	includeNotificationContexts?: boolean | undefined | null},ResolverInputTypes["Hovercard"]],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Indicates whether or not this issue is currently pinned to the repository issues list */
	isPinned?:boolean | `@${string}`,
	/** Is this issue read by the viewer */
	isReadByViewer?:boolean | `@${string}`,
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for labels returned from the connection. */
	orderBy?: ResolverInputTypes["LabelOrder"] | undefined | null},ResolverInputTypes["LabelConnection"]],
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
linkedBranches?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["LinkedBranchConnection"]],
	/** `true` if the object is locked */
	locked?:boolean | `@${string}`,
	/** Identifies the milestone associated with the issue. */
	milestone?:ResolverInputTypes["Milestone"],
	/** Identifies the issue number. */
	number?:boolean | `@${string}`,
participants?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
projectCards?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** A list of archived states to filter the cards by */
	archivedStates?: Array<ResolverInputTypes["ProjectCardArchivedState"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectCardConnection"]],
projectItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Include archived items. */
	includeArchived?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2ItemConnection"]],
projectNext?: [{	/** The project (beta) number. */
	number: number},ResolverInputTypes["ProjectNext"]],
projectNextItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Include archived items. */
	includeArchived?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectNextItemConnection"]],
projectV2?: [{	/** The project number. */
	number: number},ResolverInputTypes["ProjectV2"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null,	/** How to order the returned projects (beta). */
	sortBy?: ResolverInputTypes["ProjectNextOrderField"] | undefined | null},ResolverInputTypes["ProjectNextConnection"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** How to order the returned projects. */
	orderBy?: ResolverInputTypes["ProjectV2Order"] | undefined | null,	/** A project to search for under the the owner. */
	query?: string | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this issue */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the state of the issue. */
	state?:boolean | `@${string}`,
	/** Identifies the reason for the issue state. */
	stateReason?:boolean | `@${string}`,
timeline?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows filtering timeline events by a `since` timestamp. */
	since?: ResolverInputTypes["DateTime"] | undefined | null},ResolverInputTypes["IssueTimelineConnection"]],
timelineItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Filter timeline items by type. */
	itemTypes?: Array<ResolverInputTypes["IssueTimelineItemsItemType"]> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter timeline items by a `since` timestamp. */
	since?: ResolverInputTypes["DateTime"] | undefined | null,	/** Skips the first _n_ elements in the list. */
	skip?: number | undefined | null},ResolverInputTypes["IssueTimelineItemsConnection"]],
	/** Identifies the issue title. */
	title?:boolean | `@${string}`,
	/** Identifies the issue title rendered to HTML. */
	titleHTML?:boolean | `@${string}`,
trackedInIssues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["IssueConnection"]],
trackedIssues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["IssueConnection"]],
trackedIssuesCount?: [{	/** Limit the count to tracked issues with the specified states. */
	states?: Array<ResolverInputTypes["TrackedIssueStates"] | undefined | null> | undefined | null},boolean | `@${string}`],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this issue */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible state reasons of a closed issue. */
["IssueClosedStateReason"]:IssueClosedStateReason;
	/** Represents a comment on an Issue. */
["IssueComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** Identifies the issue associated with the comment. */
	issue?:ResolverInputTypes["Issue"],
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** Returns the pull request associated with the comment, if this comment was made on a
pull request. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this issue comment */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this issue comment */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for IssueComment. */
["IssueCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["IssueCommentEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["IssueComment"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IssueCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["IssueComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of issue comments can be ordered upon return. */
["IssueCommentOrder"]: {
	/** The direction in which to order issue comments by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order issue comments by. */
	field: ResolverInputTypes["IssueCommentOrderField"]
};
	/** Properties by which issue comment connections can be ordered. */
["IssueCommentOrderField"]:IssueCommentOrderField;
	/** The connection type for Issue. */
["IssueConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["IssueEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Issue"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** This aggregates issues opened by a user within one repository. */
["IssueContributionsByRepository"]: AliasType<{
contributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ResolverInputTypes["ContributionOrder"] | undefined | null},ResolverInputTypes["CreatedIssueContributionConnection"]],
	/** The repository in which the issues were opened. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IssueEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which to filter lists of issues. */
["IssueFilters"]: {
	/** List issues assigned to given name. Pass in `null` for issues with no assigned
user, and `*` for issues assigned to any user. */
	assignee?: string | undefined | null,
	/** List issues created by given name. */
	createdBy?: string | undefined | null,
	/** List issues where the list of label names exist on the issue. */
	labels?: Array<string> | undefined | null,
	/** List issues where the given name is mentioned in the issue. */
	mentioned?: string | undefined | null,
	/** List issues by given milestone argument. If an string representation of an
integer is passed, it should refer to a milestone by its database ID. Pass in
`null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
	milestone?: string | undefined | null,
	/** List issues by given milestone argument. If an string representation of an
integer is passed, it should refer to a milestone by its number field. Pass in
`null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
	milestoneNumber?: string | undefined | null,
	/** List issues that have been updated at or after the given date. */
	since?: ResolverInputTypes["DateTime"] | undefined | null,
	/** List issues filtered by the list of states given. */
	states?: Array<ResolverInputTypes["IssueState"]> | undefined | null,
	/** List issues subscribed to by viewer. */
	viewerSubscribed?: boolean | undefined | null
};
	/** Used for return value of Repository.issueOrPullRequest. */
["IssueOrPullRequest"]: AliasType<{
	Issue?:ResolverInputTypes["Issue"],
	PullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of issues can be ordered upon return. */
["IssueOrder"]: {
	/** The direction in which to order issues by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order issues by. */
	field: ResolverInputTypes["IssueOrderField"]
};
	/** Properties by which issue connections can be ordered. */
["IssueOrderField"]:IssueOrderField;
	/** The possible states of an issue. */
["IssueState"]:IssueState;
	/** The possible state reasons of an issue. */
["IssueStateReason"]:IssueStateReason;
	/** A repository issue template. */
["IssueTemplate"]: AliasType<{
	/** The template purpose. */
	about?:boolean | `@${string}`,
	/** The suggested issue body. */
	body?:boolean | `@${string}`,
	/** The template filename. */
	filename?:boolean | `@${string}`,
	/** The template name. */
	name?:boolean | `@${string}`,
	/** The suggested issue title. */
	title?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for IssueTimelineItem. */
["IssueTimelineConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["IssueTimelineItemEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["IssueTimelineItem"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An item in an issue timeline */
["IssueTimelineItem"]: AliasType<{
	AssignedEvent?:ResolverInputTypes["AssignedEvent"],
	ClosedEvent?:ResolverInputTypes["ClosedEvent"],
	Commit?:ResolverInputTypes["Commit"],
	CrossReferencedEvent?:ResolverInputTypes["CrossReferencedEvent"],
	DemilestonedEvent?:ResolverInputTypes["DemilestonedEvent"],
	IssueComment?:ResolverInputTypes["IssueComment"],
	LabeledEvent?:ResolverInputTypes["LabeledEvent"],
	LockedEvent?:ResolverInputTypes["LockedEvent"],
	MilestonedEvent?:ResolverInputTypes["MilestonedEvent"],
	ReferencedEvent?:ResolverInputTypes["ReferencedEvent"],
	RenamedTitleEvent?:ResolverInputTypes["RenamedTitleEvent"],
	ReopenedEvent?:ResolverInputTypes["ReopenedEvent"],
	SubscribedEvent?:ResolverInputTypes["SubscribedEvent"],
	TransferredEvent?:ResolverInputTypes["TransferredEvent"],
	UnassignedEvent?:ResolverInputTypes["UnassignedEvent"],
	UnlabeledEvent?:ResolverInputTypes["UnlabeledEvent"],
	UnlockedEvent?:ResolverInputTypes["UnlockedEvent"],
	UnsubscribedEvent?:ResolverInputTypes["UnsubscribedEvent"],
	UserBlockedEvent?:ResolverInputTypes["UserBlockedEvent"],
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IssueTimelineItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["IssueTimelineItem"],
		__typename?: boolean | `@${string}`
}>;
	/** An item in an issue timeline */
["IssueTimelineItems"]: AliasType<{
	AddedToProjectEvent?:ResolverInputTypes["AddedToProjectEvent"],
	AssignedEvent?:ResolverInputTypes["AssignedEvent"],
	ClosedEvent?:ResolverInputTypes["ClosedEvent"],
	CommentDeletedEvent?:ResolverInputTypes["CommentDeletedEvent"],
	ConnectedEvent?:ResolverInputTypes["ConnectedEvent"],
	ConvertedNoteToIssueEvent?:ResolverInputTypes["ConvertedNoteToIssueEvent"],
	ConvertedToDiscussionEvent?:ResolverInputTypes["ConvertedToDiscussionEvent"],
	CrossReferencedEvent?:ResolverInputTypes["CrossReferencedEvent"],
	DemilestonedEvent?:ResolverInputTypes["DemilestonedEvent"],
	DisconnectedEvent?:ResolverInputTypes["DisconnectedEvent"],
	IssueComment?:ResolverInputTypes["IssueComment"],
	LabeledEvent?:ResolverInputTypes["LabeledEvent"],
	LockedEvent?:ResolverInputTypes["LockedEvent"],
	MarkedAsDuplicateEvent?:ResolverInputTypes["MarkedAsDuplicateEvent"],
	MentionedEvent?:ResolverInputTypes["MentionedEvent"],
	MilestonedEvent?:ResolverInputTypes["MilestonedEvent"],
	MovedColumnsInProjectEvent?:ResolverInputTypes["MovedColumnsInProjectEvent"],
	PinnedEvent?:ResolverInputTypes["PinnedEvent"],
	ReferencedEvent?:ResolverInputTypes["ReferencedEvent"],
	RemovedFromProjectEvent?:ResolverInputTypes["RemovedFromProjectEvent"],
	RenamedTitleEvent?:ResolverInputTypes["RenamedTitleEvent"],
	ReopenedEvent?:ResolverInputTypes["ReopenedEvent"],
	SubscribedEvent?:ResolverInputTypes["SubscribedEvent"],
	TransferredEvent?:ResolverInputTypes["TransferredEvent"],
	UnassignedEvent?:ResolverInputTypes["UnassignedEvent"],
	UnlabeledEvent?:ResolverInputTypes["UnlabeledEvent"],
	UnlockedEvent?:ResolverInputTypes["UnlockedEvent"],
	UnmarkedAsDuplicateEvent?:ResolverInputTypes["UnmarkedAsDuplicateEvent"],
	UnpinnedEvent?:ResolverInputTypes["UnpinnedEvent"],
	UnsubscribedEvent?:ResolverInputTypes["UnsubscribedEvent"],
	UserBlockedEvent?:ResolverInputTypes["UserBlockedEvent"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for IssueTimelineItems. */
["IssueTimelineItemsConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["IssueTimelineItemsEdge"],
	/** Identifies the count of items after applying `before` and `after` filters. */
	filteredCount?:boolean | `@${string}`,
	/** A list of nodes. */
	nodes?:ResolverInputTypes["IssueTimelineItems"],
	/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
	pageCount?:boolean | `@${string}`,
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** Identifies the date and time when the timeline was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["IssueTimelineItemsEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["IssueTimelineItems"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible item types found in a timeline. */
["IssueTimelineItemsItemType"]:IssueTimelineItemsItemType;
	/** Represents a user signing up for a GitHub account. */
["JoinedGitHubContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
["Label"]: AliasType<{
	/** Identifies the label color. */
	color?:boolean | `@${string}`,
	/** Identifies the date and time when the label was created. */
	createdAt?:boolean | `@${string}`,
	/** A brief description of this label. */
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Indicates whether or not this is a default label. */
	isDefault?:boolean | `@${string}`,
issues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Filtering options for issues returned from the connection. */
	filterBy?: ResolverInputTypes["IssueFilters"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for issues returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the issues by. */
	states?: Array<ResolverInputTypes["IssueState"]> | undefined | null},ResolverInputTypes["IssueConnection"]],
	/** Identifies the label name. */
	name?:boolean | `@${string}`,
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the pull requests by. */
	states?: Array<ResolverInputTypes["PullRequestState"]> | undefined | null},ResolverInputTypes["PullRequestConnection"]],
	/** The repository associated with this label. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this label. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the label was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this label. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Label. */
["LabelConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["LabelEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Label"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["LabelEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Label"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of labels can be ordered upon return. */
["LabelOrder"]: {
	/** The direction in which to order labels by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order labels by. */
	field: ResolverInputTypes["LabelOrderField"]
};
	/** Properties by which label connections can be ordered. */
["LabelOrderField"]:LabelOrderField;
	/** An object that can have labels assigned to it. */
["Labelable"]:AliasType<{
	labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for labels returned from the connection. */
	orderBy?: ResolverInputTypes["LabelOrder"] | undefined | null},ResolverInputTypes["LabelConnection"]];
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["Labelable"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["Labelable"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["Labelable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'labeled' event on a given issue or pull request. */
["LabeledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the label associated with the 'labeled' event. */
	label?:ResolverInputTypes["Label"],
	/** Identifies the `Labelable` associated with the event. */
	labelable?:ResolverInputTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a given language found in repositories. */
["Language"]: AliasType<{
	/** The color defined for the current language. */
	color?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the current language. */
	name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A list of languages associated with the parent. */
["LanguageConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["LanguageEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Language"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** The total size in bytes of files written in that language. */
	totalSize?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents the language of a repository. */
["LanguageEdge"]: AliasType<{
	cursor?:boolean | `@${string}`,
	node?:ResolverInputTypes["Language"],
	/** The number of bytes of code written in the language. */
	size?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for language connections. */
["LanguageOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order languages by. */
	field: ResolverInputTypes["LanguageOrderField"]
};
	/** Properties by which language connections can be ordered. */
["LanguageOrderField"]:LanguageOrderField;
	/** A repository's open source license */
["License"]: AliasType<{
	/** The full text of the license */
	body?:boolean | `@${string}`,
	/** The conditions set by the license */
	conditions?:ResolverInputTypes["LicenseRule"],
	/** A human-readable description of the license */
	description?:boolean | `@${string}`,
	/** Whether the license should be featured */
	featured?:boolean | `@${string}`,
	/** Whether the license should be displayed in license pickers */
	hidden?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Instructions on how to implement the license */
	implementation?:boolean | `@${string}`,
	/** The lowercased SPDX ID of the license */
	key?:boolean | `@${string}`,
	/** The limitations set by the license */
	limitations?:ResolverInputTypes["LicenseRule"],
	/** The license full name specified by <https://spdx.org/licenses> */
	name?:boolean | `@${string}`,
	/** Customary short name if applicable (e.g, GPLv3) */
	nickname?:boolean | `@${string}`,
	/** The permissions set by the license */
	permissions?:ResolverInputTypes["LicenseRule"],
	/** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
	pseudoLicense?:boolean | `@${string}`,
	/** Short identifier specified by <https://spdx.org/licenses> */
	spdxId?:boolean | `@${string}`,
	/** URL to the license on <https://choosealicense.com> */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Describes a License's conditions, permissions, and limitations */
["LicenseRule"]: AliasType<{
	/** A description of the rule */
	description?:boolean | `@${string}`,
	/** The machine-readable rule key */
	key?:boolean | `@${string}`,
	/** The human-readable rule label */
	label?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of LinkRepositoryToProject */
["LinkRepositoryToProjectInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the Project to link to a Repository */
	projectId: string,
	/** The ID of the Repository to link to a Project. */
	repositoryId: string
};
	/** Autogenerated return type of LinkRepositoryToProject */
["LinkRepositoryToProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The linked Project. */
	project?:ResolverInputTypes["Project"],
	/** The linked Repository. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A branch linked to an issue. */
["LinkedBranch"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The branch's ref. */
	ref?:ResolverInputTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for LinkedBranch. */
["LinkedBranchConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["LinkedBranchEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["LinkedBranch"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["LinkedBranchEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["LinkedBranch"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of LockLockable */
["LockLockableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** A reason for why the item will be locked. */
	lockReason?: ResolverInputTypes["LockReason"] | undefined | null,
	/** ID of the item to be locked. */
	lockableId: string
};
	/** Autogenerated return type of LockLockable */
["LockLockablePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item that was locked. */
	lockedRecord?:ResolverInputTypes["Lockable"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible reasons that an issue or pull request was locked. */
["LockReason"]:LockReason;
	/** An object that can be locked. */
["Lockable"]:AliasType<{
		/** Reason that the conversation was locked. */
	activeLockReason?:boolean | `@${string}`,
	/** `true` if the object is locked */
	locked?:boolean | `@${string}`;
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["Lockable"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["Lockable"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["Lockable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'locked' event on a given issue or pull request. */
["LockedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reason that the conversation was locked (optional). */
	lockReason?:boolean | `@${string}`,
	/** Object that was locked. */
	lockable?:ResolverInputTypes["Lockable"],
		__typename?: boolean | `@${string}`
}>;
	/** A placeholder user for attribution of imported data on GitHub. */
["Mannequin"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** The user that has claimed the data attributed to this mannequin. */
	claimant?:ResolverInputTypes["User"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The mannequin's email on the source instance. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The username of the actor. */
	login?:boolean | `@${string}`,
	/** The HTML path to this resource. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The URL to this resource. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
["MarkDiscussionCommentAsAnswerInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the discussion comment to mark as an answer. */
	id: string
};
	/** Autogenerated return type of MarkDiscussionCommentAsAnswer */
["MarkDiscussionCommentAsAnswerPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion that includes the chosen comment. */
	discussion?:ResolverInputTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MarkFileAsViewed */
["MarkFileAsViewedInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The path of the file to mark as viewed */
	path: string,
	/** The Node ID of the pull request. */
	pullRequestId: string
};
	/** Autogenerated return type of MarkFileAsViewed */
["MarkFileAsViewedPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MarkPullRequestReadyForReview */
["MarkPullRequestReadyForReviewInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the pull request to be marked as ready for review. */
	pullRequestId: string
};
	/** Autogenerated return type of MarkPullRequestReadyForReview */
["MarkPullRequestReadyForReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that is ready for review. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
["MarkedAsDuplicateEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** The authoritative issue or pull request which has been duplicated by another. */
	canonical?:ResolverInputTypes["IssueOrPullRequest"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The issue or pull request which has been marked as a duplicate of another. */
	duplicate?:ResolverInputTypes["IssueOrPullRequest"],
	id?:boolean | `@${string}`,
	/** Canonical and duplicate belong to different repositories. */
	isCrossRepository?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A public description of a Marketplace category. */
["MarketplaceCategory"]: AliasType<{
	/** The category's description. */
	description?:boolean | `@${string}`,
	/** The technical description of how apps listed in this category work with GitHub. */
	howItWorks?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The category's name. */
	name?:boolean | `@${string}`,
	/** How many Marketplace listings have this as their primary category. */
	primaryListingCount?:boolean | `@${string}`,
	/** The HTTP path for this Marketplace category. */
	resourcePath?:boolean | `@${string}`,
	/** How many Marketplace listings have this as their secondary category. */
	secondaryListingCount?:boolean | `@${string}`,
	/** The short name of the category used in its URL. */
	slug?:boolean | `@${string}`,
	/** The HTTP URL for this Marketplace category. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A listing in the GitHub integration marketplace. */
["MarketplaceListing"]: AliasType<{
	/** The GitHub App this listing represents. */
	app?:ResolverInputTypes["App"],
	/** URL to the listing owner's company site. */
	companyUrl?:boolean | `@${string}`,
	/** The HTTP path for configuring access to the listing's integration or OAuth app */
	configurationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for configuring access to the listing's integration or OAuth app */
	configurationUrl?:boolean | `@${string}`,
	/** URL to the listing's documentation. */
	documentationUrl?:boolean | `@${string}`,
	/** The listing's detailed description. */
	extendedDescription?:boolean | `@${string}`,
	/** The listing's detailed description rendered to HTML. */
	extendedDescriptionHTML?:boolean | `@${string}`,
	/** The listing's introductory description. */
	fullDescription?:boolean | `@${string}`,
	/** The listing's introductory description rendered to HTML. */
	fullDescriptionHTML?:boolean | `@${string}`,
	/** Does this listing have any plans with a free trial? */
	hasPublishedFreeTrialPlans?:boolean | `@${string}`,
	/** Does this listing have a terms of service link? */
	hasTermsOfService?:boolean | `@${string}`,
	/** Whether the creator of the app is a verified org */
	hasVerifiedOwner?:boolean | `@${string}`,
	/** A technical description of how this app works with GitHub. */
	howItWorks?:boolean | `@${string}`,
	/** The listing's technical description rendered to HTML. */
	howItWorksHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** URL to install the product to the viewer's account or organization. */
	installationUrl?:boolean | `@${string}`,
	/** Whether this listing's app has been installed for the current viewer */
	installedForViewer?:boolean | `@${string}`,
	/** Whether this listing has been removed from the Marketplace. */
	isArchived?:boolean | `@${string}`,
	/** Whether this listing is still an editable draft that has not been submitted
for review and is not publicly visible in the Marketplace. */
	isDraft?:boolean | `@${string}`,
	/** Whether the product this listing represents is available as part of a paid plan. */
	isPaid?:boolean | `@${string}`,
	/** Whether this listing has been approved for display in the Marketplace. */
	isPublic?:boolean | `@${string}`,
	/** Whether this listing has been rejected by GitHub for display in the Marketplace. */
	isRejected?:boolean | `@${string}`,
	/** Whether this listing has been approved for unverified display in the Marketplace. */
	isUnverified?:boolean | `@${string}`,
	/** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
	isUnverifiedPending?:boolean | `@${string}`,
	/** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
	isVerificationPendingFromDraft?:boolean | `@${string}`,
	/** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
	isVerificationPendingFromUnverified?:boolean | `@${string}`,
	/** Whether this listing has been approved for verified display in the Marketplace. */
	isVerified?:boolean | `@${string}`,
	/** The hex color code, without the leading '#', for the logo background. */
	logoBackgroundColor?:boolean | `@${string}`,
logoUrl?: [{	/** The size in pixels of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** The listing's full name. */
	name?:boolean | `@${string}`,
	/** The listing's very short description without a trailing period or ampersands. */
	normalizedShortDescription?:boolean | `@${string}`,
	/** URL to the listing's detailed pricing. */
	pricingUrl?:boolean | `@${string}`,
	/** The category that best describes the listing. */
	primaryCategory?:ResolverInputTypes["MarketplaceCategory"],
	/** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
	privacyPolicyUrl?:boolean | `@${string}`,
	/** The HTTP path for the Marketplace listing. */
	resourcePath?:boolean | `@${string}`,
	/** The URLs for the listing's screenshots. */
	screenshotUrls?:boolean | `@${string}`,
	/** An alternate category that describes the listing. */
	secondaryCategory?:ResolverInputTypes["MarketplaceCategory"],
	/** The listing's very short description. */
	shortDescription?:boolean | `@${string}`,
	/** The short name of the listing used in its URL. */
	slug?:boolean | `@${string}`,
	/** URL to the listing's status page. */
	statusUrl?:boolean | `@${string}`,
	/** An email address for support for this listing's app. */
	supportEmail?:boolean | `@${string}`,
	/** Either a URL or an email address for support for this listing's app, may
return an empty string for listings that do not require a support URL. */
	supportUrl?:boolean | `@${string}`,
	/** URL to the listing's terms of service. */
	termsOfServiceUrl?:boolean | `@${string}`,
	/** The HTTP URL for the Marketplace listing. */
	url?:boolean | `@${string}`,
	/** Can the current viewer add plans for this Marketplace listing. */
	viewerCanAddPlans?:boolean | `@${string}`,
	/** Can the current viewer approve this Marketplace listing. */
	viewerCanApprove?:boolean | `@${string}`,
	/** Can the current viewer delist this Marketplace listing. */
	viewerCanDelist?:boolean | `@${string}`,
	/** Can the current viewer edit this Marketplace listing. */
	viewerCanEdit?:boolean | `@${string}`,
	/** Can the current viewer edit the primary and secondary category of this
Marketplace listing. */
	viewerCanEditCategories?:boolean | `@${string}`,
	/** Can the current viewer edit the plans for this Marketplace listing. */
	viewerCanEditPlans?:boolean | `@${string}`,
	/** Can the current viewer return this Marketplace listing to draft state
so it becomes editable again. */
	viewerCanRedraft?:boolean | `@${string}`,
	/** Can the current viewer reject this Marketplace listing by returning it to
an editable draft state or rejecting it entirely. */
	viewerCanReject?:boolean | `@${string}`,
	/** Can the current viewer request this listing be reviewed for display in
the Marketplace as verified. */
	viewerCanRequestApproval?:boolean | `@${string}`,
	/** Indicates whether the current user has an active subscription to this Marketplace listing. */
	viewerHasPurchased?:boolean | `@${string}`,
	/** Indicates if the current user has purchased a subscription to this Marketplace listing
for all of the organizations the user owns. */
	viewerHasPurchasedForAllOrganizations?:boolean | `@${string}`,
	/** Does the current viewer role allow them to administer this Marketplace listing. */
	viewerIsListingAdmin?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Look up Marketplace Listings */
["MarketplaceListingConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["MarketplaceListingEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["MarketplaceListing"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["MarketplaceListingEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["MarketplaceListing"],
		__typename?: boolean | `@${string}`
}>;
	/** Entities that have members who can set status messages. */
["MemberStatusable"]:AliasType<{
	memberStatuses?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for user statuses returned from the connection. */
	orderBy?: ResolverInputTypes["UserStatusOrder"] | undefined | null},ResolverInputTypes["UserStatusConnection"]];
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["MemberStatusable"]>;
		['...on Team']?: Omit<ResolverInputTypes["Team"],keyof ResolverInputTypes["MemberStatusable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a members_can_delete_repos.clear event. */
["MembersCanDeleteReposClearAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a members_can_delete_repos.disable event. */
["MembersCanDeleteReposDisableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a members_can_delete_repos.enable event. */
["MembersCanDeleteReposEnableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'mentioned' event on a given issue or pull request. */
["MentionedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MergeBranch */
["MergeBranchInput"]: {
	/** The email address to associate with this commit. */
	authorEmail?: string | undefined | null,
	/** The name of the base branch that the provided head will be merged into. */
	base: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Message to use for the merge commit. If omitted, a default will be used. */
	commitMessage?: string | undefined | null,
	/** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
	head: string,
	/** The Node ID of the Repository containing the base branch that will be modified. */
	repositoryId: string
};
	/** Autogenerated return type of MergeBranch */
["MergeBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The resulting merge Commit. */
	mergeCommit?:ResolverInputTypes["Commit"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible default commit messages for merges. */
["MergeCommitMessage"]:MergeCommitMessage;
	/** The possible default commit titles for merges. */
["MergeCommitTitle"]:MergeCommitTitle;
	/** Autogenerated input type of MergePullRequest */
["MergePullRequestInput"]: {
	/** The email address to associate with this merge. */
	authorEmail?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Commit body to use for the merge commit; if omitted, a default message will be used */
	commitBody?: string | undefined | null,
	/** Commit headline to use for the merge commit; if omitted, a default message will be used. */
	commitHeadline?: string | undefined | null,
	/** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
	expectedHeadOid?: ResolverInputTypes["GitObjectID"] | undefined | null,
	/** The merge method to use. If omitted, defaults to 'MERGE' */
	mergeMethod?: ResolverInputTypes["PullRequestMergeMethod"] | undefined | null,
	/** ID of the pull request to be merged. */
	pullRequestId: string
};
	/** Autogenerated return type of MergePullRequest */
["MergePullRequestPayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that was merged. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Detailed status information about a pull request merge. */
["MergeStateStatus"]:MergeStateStatus;
	/** Whether or not a PullRequest can be merged. */
["MergeableState"]:MergeableState;
	/** Represents a 'merged' event on a given pull request. */
["MergedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the commit associated with the `merge` event. */
	commit?:ResolverInputTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the Ref associated with the `merge` event. */
	mergeRef?:ResolverInputTypes["Ref"],
	/** Identifies the name of the Ref associated with the `merge` event. */
	mergeRefName?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The HTTP path for this merged event. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this merged event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents an Octoshift migration. */
["Migration"]:AliasType<{
		/** The Octoshift migration flag to continue on error. */
	continueOnError?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The reason the migration failed. */
	failureReason?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The URL for the migration log (expires 1 day after migration completes). */
	migrationLogUrl?:boolean | `@${string}`,
	/** The Octoshift migration source. */
	migrationSource?:ResolverInputTypes["MigrationSource"],
	/** The target repository name. */
	repositoryName?:boolean | `@${string}`,
	/** The Octoshift migration source URL. */
	sourceUrl?:boolean | `@${string}`,
	/** The Octoshift migration state. */
	state?:boolean | `@${string}`;
		['...on RepositoryMigration']?: Omit<ResolverInputTypes["RepositoryMigration"],keyof ResolverInputTypes["Migration"]>;
		__typename?: boolean | `@${string}`
}>;
	/** An Octoshift migration source. */
["MigrationSource"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The Octoshift migration source name. */
	name?:boolean | `@${string}`,
	/** The Octoshift migration source type. */
	type?:boolean | `@${string}`,
	/** The Octoshift migration source URL. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents the different Octoshift migration sources. */
["MigrationSourceType"]:MigrationSourceType;
	/** The Octoshift migration state. */
["MigrationState"]:MigrationState;
	/** Represents a Milestone object on a given repository. */
["Milestone"]: AliasType<{
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the actor who created the milestone. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the description of the milestone. */
	description?:boolean | `@${string}`,
	/** Identifies the due date of the milestone. */
	dueOn?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
issues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Filtering options for issues returned from the connection. */
	filterBy?: ResolverInputTypes["IssueFilters"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for issues returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the issues by. */
	states?: Array<ResolverInputTypes["IssueState"]> | undefined | null},ResolverInputTypes["IssueConnection"]],
	/** Identifies the number of the milestone. */
	number?:boolean | `@${string}`,
	/** Identifies the percentage complete for the milestone */
	progressPercentage?:boolean | `@${string}`,
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the pull requests by. */
	states?: Array<ResolverInputTypes["PullRequestState"]> | undefined | null},ResolverInputTypes["PullRequestConnection"]],
	/** The repository associated with this milestone. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this milestone */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the state of the milestone. */
	state?:boolean | `@${string}`,
	/** Identifies the title of the milestone. */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this milestone */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Milestone. */
["MilestoneConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["MilestoneEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Milestone"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["MilestoneEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Milestone"],
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be inside a Milestone. */
["MilestoneItem"]: AliasType<{
	Issue?:ResolverInputTypes["Issue"],
	PullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for milestone connections. */
["MilestoneOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order milestones by. */
	field: ResolverInputTypes["MilestoneOrderField"]
};
	/** Properties by which milestone connections can be ordered. */
["MilestoneOrderField"]:MilestoneOrderField;
	/** The possible states of a milestone. */
["MilestoneState"]:MilestoneState;
	/** Represents a 'milestoned' event on a given issue or pull request. */
["MilestonedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the milestone title associated with the 'milestoned' event. */
	milestoneTitle?:boolean | `@${string}`,
	/** Object referenced by event. */
	subject?:ResolverInputTypes["MilestoneItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can be minimized. */
["Minimizable"]:AliasType<{
		/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ResolverInputTypes["CommitComment"],keyof ResolverInputTypes["Minimizable"]>;
		['...on DiscussionComment']?: Omit<ResolverInputTypes["DiscussionComment"],keyof ResolverInputTypes["Minimizable"]>;
		['...on GistComment']?: Omit<ResolverInputTypes["GistComment"],keyof ResolverInputTypes["Minimizable"]>;
		['...on IssueComment']?: Omit<ResolverInputTypes["IssueComment"],keyof ResolverInputTypes["Minimizable"]>;
		['...on PullRequestReviewComment']?: Omit<ResolverInputTypes["PullRequestReviewComment"],keyof ResolverInputTypes["Minimizable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MinimizeComment */
["MinimizeCommentInput"]: {
	/** The classification of comment */
	classifier: ResolverInputTypes["ReportedContentClassifiers"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of MinimizeComment */
["MinimizeCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The comment that was minimized. */
	minimizedComment?:ResolverInputTypes["Minimizable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MoveProjectCard */
["MoveProjectCardInput"]: {
	/** Place the new card after the card with this id. Pass null to place it at the top. */
	afterCardId?: string | undefined | null,
	/** The id of the card to move. */
	cardId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The id of the column to move it into. */
	columnId: string
};
	/** Autogenerated return type of MoveProjectCard */
["MoveProjectCardPayload"]: AliasType<{
	/** The new edge of the moved card. */
	cardEdge?:ResolverInputTypes["ProjectCardEdge"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of MoveProjectColumn */
["MoveProjectColumnInput"]: {
	/** Place the new column after the column with this id. Pass null to place it at the front. */
	afterColumnId?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The id of the column to move. */
	columnId: string
};
	/** Autogenerated return type of MoveProjectColumn */
["MoveProjectColumnPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new edge of the moved column. */
	columnEdge?:ResolverInputTypes["ProjectColumnEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
["MovedColumnsInProjectEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Column name the issue or pull request was moved from. */
	previousProjectColumnName?:boolean | `@${string}`,
	/** Project referenced by event. */
	project?:ResolverInputTypes["Project"],
	/** Project card referenced by this project event. */
	projectCard?:ResolverInputTypes["ProjectCard"],
	/** Column name the issue or pull request was moved to. */
	projectColumnName?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The root query for implementing GraphQL mutations. */
["Mutation"]: AliasType<{
abortQueuedMigrations?: [{	/** Parameters for AbortQueuedMigrations */
	input: ResolverInputTypes["AbortQueuedMigrationsInput"]},ResolverInputTypes["AbortQueuedMigrationsPayload"]],
acceptEnterpriseAdministratorInvitation?: [{	/** Parameters for AcceptEnterpriseAdministratorInvitation */
	input: ResolverInputTypes["AcceptEnterpriseAdministratorInvitationInput"]},ResolverInputTypes["AcceptEnterpriseAdministratorInvitationPayload"]],
acceptTopicSuggestion?: [{	/** Parameters for AcceptTopicSuggestion */
	input: ResolverInputTypes["AcceptTopicSuggestionInput"]},ResolverInputTypes["AcceptTopicSuggestionPayload"]],
addAssigneesToAssignable?: [{	/** Parameters for AddAssigneesToAssignable */
	input: ResolverInputTypes["AddAssigneesToAssignableInput"]},ResolverInputTypes["AddAssigneesToAssignablePayload"]],
addComment?: [{	/** Parameters for AddComment */
	input: ResolverInputTypes["AddCommentInput"]},ResolverInputTypes["AddCommentPayload"]],
addDiscussionComment?: [{	/** Parameters for AddDiscussionComment */
	input: ResolverInputTypes["AddDiscussionCommentInput"]},ResolverInputTypes["AddDiscussionCommentPayload"]],
addDiscussionPollVote?: [{	/** Parameters for AddDiscussionPollVote */
	input: ResolverInputTypes["AddDiscussionPollVoteInput"]},ResolverInputTypes["AddDiscussionPollVotePayload"]],
addEnterpriseSupportEntitlement?: [{	/** Parameters for AddEnterpriseSupportEntitlement */
	input: ResolverInputTypes["AddEnterpriseSupportEntitlementInput"]},ResolverInputTypes["AddEnterpriseSupportEntitlementPayload"]],
addLabelsToLabelable?: [{	/** Parameters for AddLabelsToLabelable */
	input: ResolverInputTypes["AddLabelsToLabelableInput"]},ResolverInputTypes["AddLabelsToLabelablePayload"]],
addProjectCard?: [{	/** Parameters for AddProjectCard */
	input: ResolverInputTypes["AddProjectCardInput"]},ResolverInputTypes["AddProjectCardPayload"]],
addProjectColumn?: [{	/** Parameters for AddProjectColumn */
	input: ResolverInputTypes["AddProjectColumnInput"]},ResolverInputTypes["AddProjectColumnPayload"]],
addProjectDraftIssue?: [{	/** Parameters for AddProjectDraftIssue */
	input: ResolverInputTypes["AddProjectDraftIssueInput"]},ResolverInputTypes["AddProjectDraftIssuePayload"]],
addProjectNextItem?: [{	/** Parameters for AddProjectNextItem */
	input: ResolverInputTypes["AddProjectNextItemInput"]},ResolverInputTypes["AddProjectNextItemPayload"]],
addProjectV2DraftIssue?: [{	/** Parameters for AddProjectV2DraftIssue */
	input: ResolverInputTypes["AddProjectV2DraftIssueInput"]},ResolverInputTypes["AddProjectV2DraftIssuePayload"]],
addProjectV2ItemById?: [{	/** Parameters for AddProjectV2ItemById */
	input: ResolverInputTypes["AddProjectV2ItemByIdInput"]},ResolverInputTypes["AddProjectV2ItemByIdPayload"]],
addPullRequestReview?: [{	/** Parameters for AddPullRequestReview */
	input: ResolverInputTypes["AddPullRequestReviewInput"]},ResolverInputTypes["AddPullRequestReviewPayload"]],
addPullRequestReviewComment?: [{	/** Parameters for AddPullRequestReviewComment */
	input: ResolverInputTypes["AddPullRequestReviewCommentInput"]},ResolverInputTypes["AddPullRequestReviewCommentPayload"]],
addPullRequestReviewThread?: [{	/** Parameters for AddPullRequestReviewThread */
	input: ResolverInputTypes["AddPullRequestReviewThreadInput"]},ResolverInputTypes["AddPullRequestReviewThreadPayload"]],
addReaction?: [{	/** Parameters for AddReaction */
	input: ResolverInputTypes["AddReactionInput"]},ResolverInputTypes["AddReactionPayload"]],
addStar?: [{	/** Parameters for AddStar */
	input: ResolverInputTypes["AddStarInput"]},ResolverInputTypes["AddStarPayload"]],
addUpvote?: [{	/** Parameters for AddUpvote */
	input: ResolverInputTypes["AddUpvoteInput"]},ResolverInputTypes["AddUpvotePayload"]],
addVerifiableDomain?: [{	/** Parameters for AddVerifiableDomain */
	input: ResolverInputTypes["AddVerifiableDomainInput"]},ResolverInputTypes["AddVerifiableDomainPayload"]],
approveDeployments?: [{	/** Parameters for ApproveDeployments */
	input: ResolverInputTypes["ApproveDeploymentsInput"]},ResolverInputTypes["ApproveDeploymentsPayload"]],
approveVerifiableDomain?: [{	/** Parameters for ApproveVerifiableDomain */
	input: ResolverInputTypes["ApproveVerifiableDomainInput"]},ResolverInputTypes["ApproveVerifiableDomainPayload"]],
archiveRepository?: [{	/** Parameters for ArchiveRepository */
	input: ResolverInputTypes["ArchiveRepositoryInput"]},ResolverInputTypes["ArchiveRepositoryPayload"]],
cancelEnterpriseAdminInvitation?: [{	/** Parameters for CancelEnterpriseAdminInvitation */
	input: ResolverInputTypes["CancelEnterpriseAdminInvitationInput"]},ResolverInputTypes["CancelEnterpriseAdminInvitationPayload"]],
cancelSponsorship?: [{	/** Parameters for CancelSponsorship */
	input: ResolverInputTypes["CancelSponsorshipInput"]},ResolverInputTypes["CancelSponsorshipPayload"]],
changeUserStatus?: [{	/** Parameters for ChangeUserStatus */
	input: ResolverInputTypes["ChangeUserStatusInput"]},ResolverInputTypes["ChangeUserStatusPayload"]],
clearLabelsFromLabelable?: [{	/** Parameters for ClearLabelsFromLabelable */
	input: ResolverInputTypes["ClearLabelsFromLabelableInput"]},ResolverInputTypes["ClearLabelsFromLabelablePayload"]],
clearProjectV2ItemFieldValue?: [{	/** Parameters for ClearProjectV2ItemFieldValue */
	input: ResolverInputTypes["ClearProjectV2ItemFieldValueInput"]},ResolverInputTypes["ClearProjectV2ItemFieldValuePayload"]],
cloneProject?: [{	/** Parameters for CloneProject */
	input: ResolverInputTypes["CloneProjectInput"]},ResolverInputTypes["CloneProjectPayload"]],
cloneTemplateRepository?: [{	/** Parameters for CloneTemplateRepository */
	input: ResolverInputTypes["CloneTemplateRepositoryInput"]},ResolverInputTypes["CloneTemplateRepositoryPayload"]],
closeIssue?: [{	/** Parameters for CloseIssue */
	input: ResolverInputTypes["CloseIssueInput"]},ResolverInputTypes["CloseIssuePayload"]],
closePullRequest?: [{	/** Parameters for ClosePullRequest */
	input: ResolverInputTypes["ClosePullRequestInput"]},ResolverInputTypes["ClosePullRequestPayload"]],
convertProjectCardNoteToIssue?: [{	/** Parameters for ConvertProjectCardNoteToIssue */
	input: ResolverInputTypes["ConvertProjectCardNoteToIssueInput"]},ResolverInputTypes["ConvertProjectCardNoteToIssuePayload"]],
convertPullRequestToDraft?: [{	/** Parameters for ConvertPullRequestToDraft */
	input: ResolverInputTypes["ConvertPullRequestToDraftInput"]},ResolverInputTypes["ConvertPullRequestToDraftPayload"]],
createBranchProtectionRule?: [{	/** Parameters for CreateBranchProtectionRule */
	input: ResolverInputTypes["CreateBranchProtectionRuleInput"]},ResolverInputTypes["CreateBranchProtectionRulePayload"]],
createCheckRun?: [{	/** Parameters for CreateCheckRun */
	input: ResolverInputTypes["CreateCheckRunInput"]},ResolverInputTypes["CreateCheckRunPayload"]],
createCheckSuite?: [{	/** Parameters for CreateCheckSuite */
	input: ResolverInputTypes["CreateCheckSuiteInput"]},ResolverInputTypes["CreateCheckSuitePayload"]],
createCommitOnBranch?: [{	/** Parameters for CreateCommitOnBranch */
	input: ResolverInputTypes["CreateCommitOnBranchInput"]},ResolverInputTypes["CreateCommitOnBranchPayload"]],
createDeployment?: [{	/** Parameters for CreateDeployment */
	input: ResolverInputTypes["CreateDeploymentInput"]},ResolverInputTypes["CreateDeploymentPayload"]],
createDeploymentStatus?: [{	/** Parameters for CreateDeploymentStatus */
	input: ResolverInputTypes["CreateDeploymentStatusInput"]},ResolverInputTypes["CreateDeploymentStatusPayload"]],
createDiscussion?: [{	/** Parameters for CreateDiscussion */
	input: ResolverInputTypes["CreateDiscussionInput"]},ResolverInputTypes["CreateDiscussionPayload"]],
createEnterpriseOrganization?: [{	/** Parameters for CreateEnterpriseOrganization */
	input: ResolverInputTypes["CreateEnterpriseOrganizationInput"]},ResolverInputTypes["CreateEnterpriseOrganizationPayload"]],
createEnvironment?: [{	/** Parameters for CreateEnvironment */
	input: ResolverInputTypes["CreateEnvironmentInput"]},ResolverInputTypes["CreateEnvironmentPayload"]],
createIpAllowListEntry?: [{	/** Parameters for CreateIpAllowListEntry */
	input: ResolverInputTypes["CreateIpAllowListEntryInput"]},ResolverInputTypes["CreateIpAllowListEntryPayload"]],
createIssue?: [{	/** Parameters for CreateIssue */
	input: ResolverInputTypes["CreateIssueInput"]},ResolverInputTypes["CreateIssuePayload"]],
createLabel?: [{	/** Parameters for CreateLabel */
	input: ResolverInputTypes["CreateLabelInput"]},ResolverInputTypes["CreateLabelPayload"]],
createLinkedBranch?: [{	/** Parameters for CreateLinkedBranch */
	input: ResolverInputTypes["CreateLinkedBranchInput"]},ResolverInputTypes["CreateLinkedBranchPayload"]],
createMigrationSource?: [{	/** Parameters for CreateMigrationSource */
	input: ResolverInputTypes["CreateMigrationSourceInput"]},ResolverInputTypes["CreateMigrationSourcePayload"]],
createProject?: [{	/** Parameters for CreateProject */
	input: ResolverInputTypes["CreateProjectInput"]},ResolverInputTypes["CreateProjectPayload"]],
createProjectV2?: [{	/** Parameters for CreateProjectV2 */
	input: ResolverInputTypes["CreateProjectV2Input"]},ResolverInputTypes["CreateProjectV2Payload"]],
createPullRequest?: [{	/** Parameters for CreatePullRequest */
	input: ResolverInputTypes["CreatePullRequestInput"]},ResolverInputTypes["CreatePullRequestPayload"]],
createRef?: [{	/** Parameters for CreateRef */
	input: ResolverInputTypes["CreateRefInput"]},ResolverInputTypes["CreateRefPayload"]],
createRepository?: [{	/** Parameters for CreateRepository */
	input: ResolverInputTypes["CreateRepositoryInput"]},ResolverInputTypes["CreateRepositoryPayload"]],
createSponsorsTier?: [{	/** Parameters for CreateSponsorsTier */
	input: ResolverInputTypes["CreateSponsorsTierInput"]},ResolverInputTypes["CreateSponsorsTierPayload"]],
createSponsorship?: [{	/** Parameters for CreateSponsorship */
	input: ResolverInputTypes["CreateSponsorshipInput"]},ResolverInputTypes["CreateSponsorshipPayload"]],
createTeamDiscussion?: [{	/** Parameters for CreateTeamDiscussion */
	input: ResolverInputTypes["CreateTeamDiscussionInput"]},ResolverInputTypes["CreateTeamDiscussionPayload"]],
createTeamDiscussionComment?: [{	/** Parameters for CreateTeamDiscussionComment */
	input: ResolverInputTypes["CreateTeamDiscussionCommentInput"]},ResolverInputTypes["CreateTeamDiscussionCommentPayload"]],
declineTopicSuggestion?: [{	/** Parameters for DeclineTopicSuggestion */
	input: ResolverInputTypes["DeclineTopicSuggestionInput"]},ResolverInputTypes["DeclineTopicSuggestionPayload"]],
deleteBranchProtectionRule?: [{	/** Parameters for DeleteBranchProtectionRule */
	input: ResolverInputTypes["DeleteBranchProtectionRuleInput"]},ResolverInputTypes["DeleteBranchProtectionRulePayload"]],
deleteDeployment?: [{	/** Parameters for DeleteDeployment */
	input: ResolverInputTypes["DeleteDeploymentInput"]},ResolverInputTypes["DeleteDeploymentPayload"]],
deleteDiscussion?: [{	/** Parameters for DeleteDiscussion */
	input: ResolverInputTypes["DeleteDiscussionInput"]},ResolverInputTypes["DeleteDiscussionPayload"]],
deleteDiscussionComment?: [{	/** Parameters for DeleteDiscussionComment */
	input: ResolverInputTypes["DeleteDiscussionCommentInput"]},ResolverInputTypes["DeleteDiscussionCommentPayload"]],
deleteEnvironment?: [{	/** Parameters for DeleteEnvironment */
	input: ResolverInputTypes["DeleteEnvironmentInput"]},ResolverInputTypes["DeleteEnvironmentPayload"]],
deleteIpAllowListEntry?: [{	/** Parameters for DeleteIpAllowListEntry */
	input: ResolverInputTypes["DeleteIpAllowListEntryInput"]},ResolverInputTypes["DeleteIpAllowListEntryPayload"]],
deleteIssue?: [{	/** Parameters for DeleteIssue */
	input: ResolverInputTypes["DeleteIssueInput"]},ResolverInputTypes["DeleteIssuePayload"]],
deleteIssueComment?: [{	/** Parameters for DeleteIssueComment */
	input: ResolverInputTypes["DeleteIssueCommentInput"]},ResolverInputTypes["DeleteIssueCommentPayload"]],
deleteLabel?: [{	/** Parameters for DeleteLabel */
	input: ResolverInputTypes["DeleteLabelInput"]},ResolverInputTypes["DeleteLabelPayload"]],
deleteLinkedBranch?: [{	/** Parameters for DeleteLinkedBranch */
	input: ResolverInputTypes["DeleteLinkedBranchInput"]},ResolverInputTypes["DeleteLinkedBranchPayload"]],
deletePackageVersion?: [{	/** Parameters for DeletePackageVersion */
	input: ResolverInputTypes["DeletePackageVersionInput"]},ResolverInputTypes["DeletePackageVersionPayload"]],
deleteProject?: [{	/** Parameters for DeleteProject */
	input: ResolverInputTypes["DeleteProjectInput"]},ResolverInputTypes["DeleteProjectPayload"]],
deleteProjectCard?: [{	/** Parameters for DeleteProjectCard */
	input: ResolverInputTypes["DeleteProjectCardInput"]},ResolverInputTypes["DeleteProjectCardPayload"]],
deleteProjectColumn?: [{	/** Parameters for DeleteProjectColumn */
	input: ResolverInputTypes["DeleteProjectColumnInput"]},ResolverInputTypes["DeleteProjectColumnPayload"]],
deleteProjectNextItem?: [{	/** Parameters for DeleteProjectNextItem */
	input: ResolverInputTypes["DeleteProjectNextItemInput"]},ResolverInputTypes["DeleteProjectNextItemPayload"]],
deleteProjectV2Item?: [{	/** Parameters for DeleteProjectV2Item */
	input: ResolverInputTypes["DeleteProjectV2ItemInput"]},ResolverInputTypes["DeleteProjectV2ItemPayload"]],
deletePullRequestReview?: [{	/** Parameters for DeletePullRequestReview */
	input: ResolverInputTypes["DeletePullRequestReviewInput"]},ResolverInputTypes["DeletePullRequestReviewPayload"]],
deletePullRequestReviewComment?: [{	/** Parameters for DeletePullRequestReviewComment */
	input: ResolverInputTypes["DeletePullRequestReviewCommentInput"]},ResolverInputTypes["DeletePullRequestReviewCommentPayload"]],
deleteRef?: [{	/** Parameters for DeleteRef */
	input: ResolverInputTypes["DeleteRefInput"]},ResolverInputTypes["DeleteRefPayload"]],
deleteTeamDiscussion?: [{	/** Parameters for DeleteTeamDiscussion */
	input: ResolverInputTypes["DeleteTeamDiscussionInput"]},ResolverInputTypes["DeleteTeamDiscussionPayload"]],
deleteTeamDiscussionComment?: [{	/** Parameters for DeleteTeamDiscussionComment */
	input: ResolverInputTypes["DeleteTeamDiscussionCommentInput"]},ResolverInputTypes["DeleteTeamDiscussionCommentPayload"]],
deleteVerifiableDomain?: [{	/** Parameters for DeleteVerifiableDomain */
	input: ResolverInputTypes["DeleteVerifiableDomainInput"]},ResolverInputTypes["DeleteVerifiableDomainPayload"]],
disablePullRequestAutoMerge?: [{	/** Parameters for DisablePullRequestAutoMerge */
	input: ResolverInputTypes["DisablePullRequestAutoMergeInput"]},ResolverInputTypes["DisablePullRequestAutoMergePayload"]],
dismissPullRequestReview?: [{	/** Parameters for DismissPullRequestReview */
	input: ResolverInputTypes["DismissPullRequestReviewInput"]},ResolverInputTypes["DismissPullRequestReviewPayload"]],
dismissRepositoryVulnerabilityAlert?: [{	/** Parameters for DismissRepositoryVulnerabilityAlert */
	input: ResolverInputTypes["DismissRepositoryVulnerabilityAlertInput"]},ResolverInputTypes["DismissRepositoryVulnerabilityAlertPayload"]],
enablePullRequestAutoMerge?: [{	/** Parameters for EnablePullRequestAutoMerge */
	input: ResolverInputTypes["EnablePullRequestAutoMergeInput"]},ResolverInputTypes["EnablePullRequestAutoMergePayload"]],
followOrganization?: [{	/** Parameters for FollowOrganization */
	input: ResolverInputTypes["FollowOrganizationInput"]},ResolverInputTypes["FollowOrganizationPayload"]],
followUser?: [{	/** Parameters for FollowUser */
	input: ResolverInputTypes["FollowUserInput"]},ResolverInputTypes["FollowUserPayload"]],
grantEnterpriseOrganizationsMigratorRole?: [{	/** Parameters for GrantEnterpriseOrganizationsMigratorRole */
	input: ResolverInputTypes["GrantEnterpriseOrganizationsMigratorRoleInput"]},ResolverInputTypes["GrantEnterpriseOrganizationsMigratorRolePayload"]],
grantMigratorRole?: [{	/** Parameters for GrantMigratorRole */
	input: ResolverInputTypes["GrantMigratorRoleInput"]},ResolverInputTypes["GrantMigratorRolePayload"]],
importProject?: [{	/** Parameters for ImportProject */
	input: ResolverInputTypes["ImportProjectInput"]},ResolverInputTypes["ImportProjectPayload"]],
inviteEnterpriseAdmin?: [{	/** Parameters for InviteEnterpriseAdmin */
	input: ResolverInputTypes["InviteEnterpriseAdminInput"]},ResolverInputTypes["InviteEnterpriseAdminPayload"]],
linkRepositoryToProject?: [{	/** Parameters for LinkRepositoryToProject */
	input: ResolverInputTypes["LinkRepositoryToProjectInput"]},ResolverInputTypes["LinkRepositoryToProjectPayload"]],
lockLockable?: [{	/** Parameters for LockLockable */
	input: ResolverInputTypes["LockLockableInput"]},ResolverInputTypes["LockLockablePayload"]],
markDiscussionCommentAsAnswer?: [{	/** Parameters for MarkDiscussionCommentAsAnswer */
	input: ResolverInputTypes["MarkDiscussionCommentAsAnswerInput"]},ResolverInputTypes["MarkDiscussionCommentAsAnswerPayload"]],
markFileAsViewed?: [{	/** Parameters for MarkFileAsViewed */
	input: ResolverInputTypes["MarkFileAsViewedInput"]},ResolverInputTypes["MarkFileAsViewedPayload"]],
markPullRequestReadyForReview?: [{	/** Parameters for MarkPullRequestReadyForReview */
	input: ResolverInputTypes["MarkPullRequestReadyForReviewInput"]},ResolverInputTypes["MarkPullRequestReadyForReviewPayload"]],
mergeBranch?: [{	/** Parameters for MergeBranch */
	input: ResolverInputTypes["MergeBranchInput"]},ResolverInputTypes["MergeBranchPayload"]],
mergePullRequest?: [{	/** Parameters for MergePullRequest */
	input: ResolverInputTypes["MergePullRequestInput"]},ResolverInputTypes["MergePullRequestPayload"]],
minimizeComment?: [{	/** Parameters for MinimizeComment */
	input: ResolverInputTypes["MinimizeCommentInput"]},ResolverInputTypes["MinimizeCommentPayload"]],
moveProjectCard?: [{	/** Parameters for MoveProjectCard */
	input: ResolverInputTypes["MoveProjectCardInput"]},ResolverInputTypes["MoveProjectCardPayload"]],
moveProjectColumn?: [{	/** Parameters for MoveProjectColumn */
	input: ResolverInputTypes["MoveProjectColumnInput"]},ResolverInputTypes["MoveProjectColumnPayload"]],
pinIssue?: [{	/** Parameters for PinIssue */
	input: ResolverInputTypes["PinIssueInput"]},ResolverInputTypes["PinIssuePayload"]],
regenerateEnterpriseIdentityProviderRecoveryCodes?: [{	/** Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes */
	input: ResolverInputTypes["RegenerateEnterpriseIdentityProviderRecoveryCodesInput"]},ResolverInputTypes["RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"]],
regenerateVerifiableDomainToken?: [{	/** Parameters for RegenerateVerifiableDomainToken */
	input: ResolverInputTypes["RegenerateVerifiableDomainTokenInput"]},ResolverInputTypes["RegenerateVerifiableDomainTokenPayload"]],
rejectDeployments?: [{	/** Parameters for RejectDeployments */
	input: ResolverInputTypes["RejectDeploymentsInput"]},ResolverInputTypes["RejectDeploymentsPayload"]],
removeAssigneesFromAssignable?: [{	/** Parameters for RemoveAssigneesFromAssignable */
	input: ResolverInputTypes["RemoveAssigneesFromAssignableInput"]},ResolverInputTypes["RemoveAssigneesFromAssignablePayload"]],
removeEnterpriseAdmin?: [{	/** Parameters for RemoveEnterpriseAdmin */
	input: ResolverInputTypes["RemoveEnterpriseAdminInput"]},ResolverInputTypes["RemoveEnterpriseAdminPayload"]],
removeEnterpriseIdentityProvider?: [{	/** Parameters for RemoveEnterpriseIdentityProvider */
	input: ResolverInputTypes["RemoveEnterpriseIdentityProviderInput"]},ResolverInputTypes["RemoveEnterpriseIdentityProviderPayload"]],
removeEnterpriseOrganization?: [{	/** Parameters for RemoveEnterpriseOrganization */
	input: ResolverInputTypes["RemoveEnterpriseOrganizationInput"]},ResolverInputTypes["RemoveEnterpriseOrganizationPayload"]],
removeEnterpriseSupportEntitlement?: [{	/** Parameters for RemoveEnterpriseSupportEntitlement */
	input: ResolverInputTypes["RemoveEnterpriseSupportEntitlementInput"]},ResolverInputTypes["RemoveEnterpriseSupportEntitlementPayload"]],
removeLabelsFromLabelable?: [{	/** Parameters for RemoveLabelsFromLabelable */
	input: ResolverInputTypes["RemoveLabelsFromLabelableInput"]},ResolverInputTypes["RemoveLabelsFromLabelablePayload"]],
removeOutsideCollaborator?: [{	/** Parameters for RemoveOutsideCollaborator */
	input: ResolverInputTypes["RemoveOutsideCollaboratorInput"]},ResolverInputTypes["RemoveOutsideCollaboratorPayload"]],
removeReaction?: [{	/** Parameters for RemoveReaction */
	input: ResolverInputTypes["RemoveReactionInput"]},ResolverInputTypes["RemoveReactionPayload"]],
removeStar?: [{	/** Parameters for RemoveStar */
	input: ResolverInputTypes["RemoveStarInput"]},ResolverInputTypes["RemoveStarPayload"]],
removeUpvote?: [{	/** Parameters for RemoveUpvote */
	input: ResolverInputTypes["RemoveUpvoteInput"]},ResolverInputTypes["RemoveUpvotePayload"]],
reopenIssue?: [{	/** Parameters for ReopenIssue */
	input: ResolverInputTypes["ReopenIssueInput"]},ResolverInputTypes["ReopenIssuePayload"]],
reopenPullRequest?: [{	/** Parameters for ReopenPullRequest */
	input: ResolverInputTypes["ReopenPullRequestInput"]},ResolverInputTypes["ReopenPullRequestPayload"]],
requestReviews?: [{	/** Parameters for RequestReviews */
	input: ResolverInputTypes["RequestReviewsInput"]},ResolverInputTypes["RequestReviewsPayload"]],
rerequestCheckSuite?: [{	/** Parameters for RerequestCheckSuite */
	input: ResolverInputTypes["RerequestCheckSuiteInput"]},ResolverInputTypes["RerequestCheckSuitePayload"]],
resolveReviewThread?: [{	/** Parameters for ResolveReviewThread */
	input: ResolverInputTypes["ResolveReviewThreadInput"]},ResolverInputTypes["ResolveReviewThreadPayload"]],
revokeEnterpriseOrganizationsMigratorRole?: [{	/** Parameters for RevokeEnterpriseOrganizationsMigratorRole */
	input: ResolverInputTypes["RevokeEnterpriseOrganizationsMigratorRoleInput"]},ResolverInputTypes["RevokeEnterpriseOrganizationsMigratorRolePayload"]],
revokeMigratorRole?: [{	/** Parameters for RevokeMigratorRole */
	input: ResolverInputTypes["RevokeMigratorRoleInput"]},ResolverInputTypes["RevokeMigratorRolePayload"]],
setEnterpriseIdentityProvider?: [{	/** Parameters for SetEnterpriseIdentityProvider */
	input: ResolverInputTypes["SetEnterpriseIdentityProviderInput"]},ResolverInputTypes["SetEnterpriseIdentityProviderPayload"]],
setOrganizationInteractionLimit?: [{	/** Parameters for SetOrganizationInteractionLimit */
	input: ResolverInputTypes["SetOrganizationInteractionLimitInput"]},ResolverInputTypes["SetOrganizationInteractionLimitPayload"]],
setRepositoryInteractionLimit?: [{	/** Parameters for SetRepositoryInteractionLimit */
	input: ResolverInputTypes["SetRepositoryInteractionLimitInput"]},ResolverInputTypes["SetRepositoryInteractionLimitPayload"]],
setUserInteractionLimit?: [{	/** Parameters for SetUserInteractionLimit */
	input: ResolverInputTypes["SetUserInteractionLimitInput"]},ResolverInputTypes["SetUserInteractionLimitPayload"]],
startRepositoryMigration?: [{	/** Parameters for StartRepositoryMigration */
	input: ResolverInputTypes["StartRepositoryMigrationInput"]},ResolverInputTypes["StartRepositoryMigrationPayload"]],
submitPullRequestReview?: [{	/** Parameters for SubmitPullRequestReview */
	input: ResolverInputTypes["SubmitPullRequestReviewInput"]},ResolverInputTypes["SubmitPullRequestReviewPayload"]],
transferIssue?: [{	/** Parameters for TransferIssue */
	input: ResolverInputTypes["TransferIssueInput"]},ResolverInputTypes["TransferIssuePayload"]],
unarchiveRepository?: [{	/** Parameters for UnarchiveRepository */
	input: ResolverInputTypes["UnarchiveRepositoryInput"]},ResolverInputTypes["UnarchiveRepositoryPayload"]],
unfollowOrganization?: [{	/** Parameters for UnfollowOrganization */
	input: ResolverInputTypes["UnfollowOrganizationInput"]},ResolverInputTypes["UnfollowOrganizationPayload"]],
unfollowUser?: [{	/** Parameters for UnfollowUser */
	input: ResolverInputTypes["UnfollowUserInput"]},ResolverInputTypes["UnfollowUserPayload"]],
unlinkRepositoryFromProject?: [{	/** Parameters for UnlinkRepositoryFromProject */
	input: ResolverInputTypes["UnlinkRepositoryFromProjectInput"]},ResolverInputTypes["UnlinkRepositoryFromProjectPayload"]],
unlockLockable?: [{	/** Parameters for UnlockLockable */
	input: ResolverInputTypes["UnlockLockableInput"]},ResolverInputTypes["UnlockLockablePayload"]],
unmarkDiscussionCommentAsAnswer?: [{	/** Parameters for UnmarkDiscussionCommentAsAnswer */
	input: ResolverInputTypes["UnmarkDiscussionCommentAsAnswerInput"]},ResolverInputTypes["UnmarkDiscussionCommentAsAnswerPayload"]],
unmarkFileAsViewed?: [{	/** Parameters for UnmarkFileAsViewed */
	input: ResolverInputTypes["UnmarkFileAsViewedInput"]},ResolverInputTypes["UnmarkFileAsViewedPayload"]],
unmarkIssueAsDuplicate?: [{	/** Parameters for UnmarkIssueAsDuplicate */
	input: ResolverInputTypes["UnmarkIssueAsDuplicateInput"]},ResolverInputTypes["UnmarkIssueAsDuplicatePayload"]],
unminimizeComment?: [{	/** Parameters for UnminimizeComment */
	input: ResolverInputTypes["UnminimizeCommentInput"]},ResolverInputTypes["UnminimizeCommentPayload"]],
unpinIssue?: [{	/** Parameters for UnpinIssue */
	input: ResolverInputTypes["UnpinIssueInput"]},ResolverInputTypes["UnpinIssuePayload"]],
unresolveReviewThread?: [{	/** Parameters for UnresolveReviewThread */
	input: ResolverInputTypes["UnresolveReviewThreadInput"]},ResolverInputTypes["UnresolveReviewThreadPayload"]],
updateBranchProtectionRule?: [{	/** Parameters for UpdateBranchProtectionRule */
	input: ResolverInputTypes["UpdateBranchProtectionRuleInput"]},ResolverInputTypes["UpdateBranchProtectionRulePayload"]],
updateCheckRun?: [{	/** Parameters for UpdateCheckRun */
	input: ResolverInputTypes["UpdateCheckRunInput"]},ResolverInputTypes["UpdateCheckRunPayload"]],
updateCheckSuitePreferences?: [{	/** Parameters for UpdateCheckSuitePreferences */
	input: ResolverInputTypes["UpdateCheckSuitePreferencesInput"]},ResolverInputTypes["UpdateCheckSuitePreferencesPayload"]],
updateDiscussion?: [{	/** Parameters for UpdateDiscussion */
	input: ResolverInputTypes["UpdateDiscussionInput"]},ResolverInputTypes["UpdateDiscussionPayload"]],
updateDiscussionComment?: [{	/** Parameters for UpdateDiscussionComment */
	input: ResolverInputTypes["UpdateDiscussionCommentInput"]},ResolverInputTypes["UpdateDiscussionCommentPayload"]],
updateEnterpriseAdministratorRole?: [{	/** Parameters for UpdateEnterpriseAdministratorRole */
	input: ResolverInputTypes["UpdateEnterpriseAdministratorRoleInput"]},ResolverInputTypes["UpdateEnterpriseAdministratorRolePayload"]],
updateEnterpriseAllowPrivateRepositoryForkingSetting?: [{	/** Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
	input: ResolverInputTypes["UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"]},ResolverInputTypes["UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"]],
updateEnterpriseDefaultRepositoryPermissionSetting?: [{	/** Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting */
	input: ResolverInputTypes["UpdateEnterpriseDefaultRepositoryPermissionSettingInput"]},ResolverInputTypes["UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"]],
updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: [{	/** Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
	input: ResolverInputTypes["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"]},ResolverInputTypes["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"]],
updateEnterpriseMembersCanCreateRepositoriesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting */
	input: ResolverInputTypes["UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"]},ResolverInputTypes["UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"]],
updateEnterpriseMembersCanDeleteIssuesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting */
	input: ResolverInputTypes["UpdateEnterpriseMembersCanDeleteIssuesSettingInput"]},ResolverInputTypes["UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"]],
updateEnterpriseMembersCanDeleteRepositoriesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
	input: ResolverInputTypes["UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"]},ResolverInputTypes["UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"]],
updateEnterpriseMembersCanInviteCollaboratorsSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
	input: ResolverInputTypes["UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"]},ResolverInputTypes["UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"]],
updateEnterpriseMembersCanMakePurchasesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting */
	input: ResolverInputTypes["UpdateEnterpriseMembersCanMakePurchasesSettingInput"]},ResolverInputTypes["UpdateEnterpriseMembersCanMakePurchasesSettingPayload"]],
updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
	input: ResolverInputTypes["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"]},ResolverInputTypes["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"]],
updateEnterpriseMembersCanViewDependencyInsightsSetting?: [{	/** Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
	input: ResolverInputTypes["UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"]},ResolverInputTypes["UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"]],
updateEnterpriseOrganizationProjectsSetting?: [{	/** Parameters for UpdateEnterpriseOrganizationProjectsSetting */
	input: ResolverInputTypes["UpdateEnterpriseOrganizationProjectsSettingInput"]},ResolverInputTypes["UpdateEnterpriseOrganizationProjectsSettingPayload"]],
updateEnterpriseOwnerOrganizationRole?: [{	/** Parameters for UpdateEnterpriseOwnerOrganizationRole */
	input: ResolverInputTypes["UpdateEnterpriseOwnerOrganizationRoleInput"]},ResolverInputTypes["UpdateEnterpriseOwnerOrganizationRolePayload"]],
updateEnterpriseProfile?: [{	/** Parameters for UpdateEnterpriseProfile */
	input: ResolverInputTypes["UpdateEnterpriseProfileInput"]},ResolverInputTypes["UpdateEnterpriseProfilePayload"]],
updateEnterpriseRepositoryProjectsSetting?: [{	/** Parameters for UpdateEnterpriseRepositoryProjectsSetting */
	input: ResolverInputTypes["UpdateEnterpriseRepositoryProjectsSettingInput"]},ResolverInputTypes["UpdateEnterpriseRepositoryProjectsSettingPayload"]],
updateEnterpriseTeamDiscussionsSetting?: [{	/** Parameters for UpdateEnterpriseTeamDiscussionsSetting */
	input: ResolverInputTypes["UpdateEnterpriseTeamDiscussionsSettingInput"]},ResolverInputTypes["UpdateEnterpriseTeamDiscussionsSettingPayload"]],
updateEnterpriseTwoFactorAuthenticationRequiredSetting?: [{	/** Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
	input: ResolverInputTypes["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"]},ResolverInputTypes["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"]],
updateEnvironment?: [{	/** Parameters for UpdateEnvironment */
	input: ResolverInputTypes["UpdateEnvironmentInput"]},ResolverInputTypes["UpdateEnvironmentPayload"]],
updateIpAllowListEnabledSetting?: [{	/** Parameters for UpdateIpAllowListEnabledSetting */
	input: ResolverInputTypes["UpdateIpAllowListEnabledSettingInput"]},ResolverInputTypes["UpdateIpAllowListEnabledSettingPayload"]],
updateIpAllowListEntry?: [{	/** Parameters for UpdateIpAllowListEntry */
	input: ResolverInputTypes["UpdateIpAllowListEntryInput"]},ResolverInputTypes["UpdateIpAllowListEntryPayload"]],
updateIpAllowListForInstalledAppsEnabledSetting?: [{	/** Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting */
	input: ResolverInputTypes["UpdateIpAllowListForInstalledAppsEnabledSettingInput"]},ResolverInputTypes["UpdateIpAllowListForInstalledAppsEnabledSettingPayload"]],
updateIssue?: [{	/** Parameters for UpdateIssue */
	input: ResolverInputTypes["UpdateIssueInput"]},ResolverInputTypes["UpdateIssuePayload"]],
updateIssueComment?: [{	/** Parameters for UpdateIssueComment */
	input: ResolverInputTypes["UpdateIssueCommentInput"]},ResolverInputTypes["UpdateIssueCommentPayload"]],
updateLabel?: [{	/** Parameters for UpdateLabel */
	input: ResolverInputTypes["UpdateLabelInput"]},ResolverInputTypes["UpdateLabelPayload"]],
updateNotificationRestrictionSetting?: [{	/** Parameters for UpdateNotificationRestrictionSetting */
	input: ResolverInputTypes["UpdateNotificationRestrictionSettingInput"]},ResolverInputTypes["UpdateNotificationRestrictionSettingPayload"]],
updateOrganizationAllowPrivateRepositoryForkingSetting?: [{	/** Parameters for UpdateOrganizationAllowPrivateRepositoryForkingSetting */
	input: ResolverInputTypes["UpdateOrganizationAllowPrivateRepositoryForkingSettingInput"]},ResolverInputTypes["UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"]],
updateOrganizationWebCommitSignoffSetting?: [{	/** Parameters for UpdateOrganizationWebCommitSignoffSetting */
	input: ResolverInputTypes["UpdateOrganizationWebCommitSignoffSettingInput"]},ResolverInputTypes["UpdateOrganizationWebCommitSignoffSettingPayload"]],
updateProject?: [{	/** Parameters for UpdateProject */
	input: ResolverInputTypes["UpdateProjectInput"]},ResolverInputTypes["UpdateProjectPayload"]],
updateProjectCard?: [{	/** Parameters for UpdateProjectCard */
	input: ResolverInputTypes["UpdateProjectCardInput"]},ResolverInputTypes["UpdateProjectCardPayload"]],
updateProjectColumn?: [{	/** Parameters for UpdateProjectColumn */
	input: ResolverInputTypes["UpdateProjectColumnInput"]},ResolverInputTypes["UpdateProjectColumnPayload"]],
updateProjectDraftIssue?: [{	/** Parameters for UpdateProjectDraftIssue */
	input: ResolverInputTypes["UpdateProjectDraftIssueInput"]},ResolverInputTypes["UpdateProjectDraftIssuePayload"]],
updateProjectNext?: [{	/** Parameters for UpdateProjectNext */
	input: ResolverInputTypes["UpdateProjectNextInput"]},ResolverInputTypes["UpdateProjectNextPayload"]],
updateProjectNextItemField?: [{	/** Parameters for UpdateProjectNextItemField */
	input: ResolverInputTypes["UpdateProjectNextItemFieldInput"]},ResolverInputTypes["UpdateProjectNextItemFieldPayload"]],
updateProjectV2?: [{	/** Parameters for UpdateProjectV2 */
	input: ResolverInputTypes["UpdateProjectV2Input"]},ResolverInputTypes["UpdateProjectV2Payload"]],
updateProjectV2DraftIssue?: [{	/** Parameters for UpdateProjectV2DraftIssue */
	input: ResolverInputTypes["UpdateProjectV2DraftIssueInput"]},ResolverInputTypes["UpdateProjectV2DraftIssuePayload"]],
updateProjectV2ItemFieldValue?: [{	/** Parameters for UpdateProjectV2ItemFieldValue */
	input: ResolverInputTypes["UpdateProjectV2ItemFieldValueInput"]},ResolverInputTypes["UpdateProjectV2ItemFieldValuePayload"]],
updateProjectV2ItemPosition?: [{	/** Parameters for UpdateProjectV2ItemPosition */
	input: ResolverInputTypes["UpdateProjectV2ItemPositionInput"]},ResolverInputTypes["UpdateProjectV2ItemPositionPayload"]],
updatePullRequest?: [{	/** Parameters for UpdatePullRequest */
	input: ResolverInputTypes["UpdatePullRequestInput"]},ResolverInputTypes["UpdatePullRequestPayload"]],
updatePullRequestBranch?: [{	/** Parameters for UpdatePullRequestBranch */
	input: ResolverInputTypes["UpdatePullRequestBranchInput"]},ResolverInputTypes["UpdatePullRequestBranchPayload"]],
updatePullRequestReview?: [{	/** Parameters for UpdatePullRequestReview */
	input: ResolverInputTypes["UpdatePullRequestReviewInput"]},ResolverInputTypes["UpdatePullRequestReviewPayload"]],
updatePullRequestReviewComment?: [{	/** Parameters for UpdatePullRequestReviewComment */
	input: ResolverInputTypes["UpdatePullRequestReviewCommentInput"]},ResolverInputTypes["UpdatePullRequestReviewCommentPayload"]],
updateRef?: [{	/** Parameters for UpdateRef */
	input: ResolverInputTypes["UpdateRefInput"]},ResolverInputTypes["UpdateRefPayload"]],
updateRefs?: [{	/** Parameters for UpdateRefs */
	input: ResolverInputTypes["UpdateRefsInput"]},ResolverInputTypes["UpdateRefsPayload"]],
updateRepository?: [{	/** Parameters for UpdateRepository */
	input: ResolverInputTypes["UpdateRepositoryInput"]},ResolverInputTypes["UpdateRepositoryPayload"]],
updateRepositoryWebCommitSignoffSetting?: [{	/** Parameters for UpdateRepositoryWebCommitSignoffSetting */
	input: ResolverInputTypes["UpdateRepositoryWebCommitSignoffSettingInput"]},ResolverInputTypes["UpdateRepositoryWebCommitSignoffSettingPayload"]],
updateSponsorshipPreferences?: [{	/** Parameters for UpdateSponsorshipPreferences */
	input: ResolverInputTypes["UpdateSponsorshipPreferencesInput"]},ResolverInputTypes["UpdateSponsorshipPreferencesPayload"]],
updateSubscription?: [{	/** Parameters for UpdateSubscription */
	input: ResolverInputTypes["UpdateSubscriptionInput"]},ResolverInputTypes["UpdateSubscriptionPayload"]],
updateTeamDiscussion?: [{	/** Parameters for UpdateTeamDiscussion */
	input: ResolverInputTypes["UpdateTeamDiscussionInput"]},ResolverInputTypes["UpdateTeamDiscussionPayload"]],
updateTeamDiscussionComment?: [{	/** Parameters for UpdateTeamDiscussionComment */
	input: ResolverInputTypes["UpdateTeamDiscussionCommentInput"]},ResolverInputTypes["UpdateTeamDiscussionCommentPayload"]],
updateTeamReviewAssignment?: [{	/** Parameters for UpdateTeamReviewAssignment */
	input: ResolverInputTypes["UpdateTeamReviewAssignmentInput"]},ResolverInputTypes["UpdateTeamReviewAssignmentPayload"]],
updateTeamsRepository?: [{	/** Parameters for UpdateTeamsRepository */
	input: ResolverInputTypes["UpdateTeamsRepositoryInput"]},ResolverInputTypes["UpdateTeamsRepositoryPayload"]],
updateTopics?: [{	/** Parameters for UpdateTopics */
	input: ResolverInputTypes["UpdateTopicsInput"]},ResolverInputTypes["UpdateTopicsPayload"]],
verifyVerifiableDomain?: [{	/** Parameters for VerifyVerifiableDomain */
	input: ResolverInputTypes["VerifyVerifiableDomainInput"]},ResolverInputTypes["VerifyVerifiableDomainPayload"]],
		__typename?: boolean | `@${string}`
}>;
	/** An object with an ID. */
["Node"]:AliasType<{
		/** ID of the object. */
	id?:boolean | `@${string}`;
		['...on AddedToProjectEvent']?: Omit<ResolverInputTypes["AddedToProjectEvent"],keyof ResolverInputTypes["Node"]>;
		['...on App']?: Omit<ResolverInputTypes["App"],keyof ResolverInputTypes["Node"]>;
		['...on AssignedEvent']?: Omit<ResolverInputTypes["AssignedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on AutoMergeDisabledEvent']?: Omit<ResolverInputTypes["AutoMergeDisabledEvent"],keyof ResolverInputTypes["Node"]>;
		['...on AutoMergeEnabledEvent']?: Omit<ResolverInputTypes["AutoMergeEnabledEvent"],keyof ResolverInputTypes["Node"]>;
		['...on AutoRebaseEnabledEvent']?: Omit<ResolverInputTypes["AutoRebaseEnabledEvent"],keyof ResolverInputTypes["Node"]>;
		['...on AutoSquashEnabledEvent']?: Omit<ResolverInputTypes["AutoSquashEnabledEvent"],keyof ResolverInputTypes["Node"]>;
		['...on AutomaticBaseChangeFailedEvent']?: Omit<ResolverInputTypes["AutomaticBaseChangeFailedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on AutomaticBaseChangeSucceededEvent']?: Omit<ResolverInputTypes["AutomaticBaseChangeSucceededEvent"],keyof ResolverInputTypes["Node"]>;
		['...on BaseRefChangedEvent']?: Omit<ResolverInputTypes["BaseRefChangedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on BaseRefDeletedEvent']?: Omit<ResolverInputTypes["BaseRefDeletedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on BaseRefForcePushedEvent']?: Omit<ResolverInputTypes["BaseRefForcePushedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Blob']?: Omit<ResolverInputTypes["Blob"],keyof ResolverInputTypes["Node"]>;
		['...on Bot']?: Omit<ResolverInputTypes["Bot"],keyof ResolverInputTypes["Node"]>;
		['...on BranchProtectionRule']?: Omit<ResolverInputTypes["BranchProtectionRule"],keyof ResolverInputTypes["Node"]>;
		['...on BypassForcePushAllowance']?: Omit<ResolverInputTypes["BypassForcePushAllowance"],keyof ResolverInputTypes["Node"]>;
		['...on BypassPullRequestAllowance']?: Omit<ResolverInputTypes["BypassPullRequestAllowance"],keyof ResolverInputTypes["Node"]>;
		['...on CWE']?: Omit<ResolverInputTypes["CWE"],keyof ResolverInputTypes["Node"]>;
		['...on CheckRun']?: Omit<ResolverInputTypes["CheckRun"],keyof ResolverInputTypes["Node"]>;
		['...on CheckSuite']?: Omit<ResolverInputTypes["CheckSuite"],keyof ResolverInputTypes["Node"]>;
		['...on ClosedEvent']?: Omit<ResolverInputTypes["ClosedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on CodeOfConduct']?: Omit<ResolverInputTypes["CodeOfConduct"],keyof ResolverInputTypes["Node"]>;
		['...on CommentDeletedEvent']?: Omit<ResolverInputTypes["CommentDeletedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Commit']?: Omit<ResolverInputTypes["Commit"],keyof ResolverInputTypes["Node"]>;
		['...on CommitComment']?: Omit<ResolverInputTypes["CommitComment"],keyof ResolverInputTypes["Node"]>;
		['...on CommitCommentThread']?: Omit<ResolverInputTypes["CommitCommentThread"],keyof ResolverInputTypes["Node"]>;
		['...on Comparison']?: Omit<ResolverInputTypes["Comparison"],keyof ResolverInputTypes["Node"]>;
		['...on ConnectedEvent']?: Omit<ResolverInputTypes["ConnectedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on ConvertToDraftEvent']?: Omit<ResolverInputTypes["ConvertToDraftEvent"],keyof ResolverInputTypes["Node"]>;
		['...on ConvertedNoteToIssueEvent']?: Omit<ResolverInputTypes["ConvertedNoteToIssueEvent"],keyof ResolverInputTypes["Node"]>;
		['...on ConvertedToDiscussionEvent']?: Omit<ResolverInputTypes["ConvertedToDiscussionEvent"],keyof ResolverInputTypes["Node"]>;
		['...on CrossReferencedEvent']?: Omit<ResolverInputTypes["CrossReferencedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on DemilestonedEvent']?: Omit<ResolverInputTypes["DemilestonedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on DependencyGraphManifest']?: Omit<ResolverInputTypes["DependencyGraphManifest"],keyof ResolverInputTypes["Node"]>;
		['...on DeployKey']?: Omit<ResolverInputTypes["DeployKey"],keyof ResolverInputTypes["Node"]>;
		['...on DeployedEvent']?: Omit<ResolverInputTypes["DeployedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Deployment']?: Omit<ResolverInputTypes["Deployment"],keyof ResolverInputTypes["Node"]>;
		['...on DeploymentEnvironmentChangedEvent']?: Omit<ResolverInputTypes["DeploymentEnvironmentChangedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on DeploymentReview']?: Omit<ResolverInputTypes["DeploymentReview"],keyof ResolverInputTypes["Node"]>;
		['...on DeploymentStatus']?: Omit<ResolverInputTypes["DeploymentStatus"],keyof ResolverInputTypes["Node"]>;
		['...on DisconnectedEvent']?: Omit<ResolverInputTypes["DisconnectedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["Node"]>;
		['...on DiscussionCategory']?: Omit<ResolverInputTypes["DiscussionCategory"],keyof ResolverInputTypes["Node"]>;
		['...on DiscussionComment']?: Omit<ResolverInputTypes["DiscussionComment"],keyof ResolverInputTypes["Node"]>;
		['...on DiscussionPoll']?: Omit<ResolverInputTypes["DiscussionPoll"],keyof ResolverInputTypes["Node"]>;
		['...on DiscussionPollOption']?: Omit<ResolverInputTypes["DiscussionPollOption"],keyof ResolverInputTypes["Node"]>;
		['...on DraftIssue']?: Omit<ResolverInputTypes["DraftIssue"],keyof ResolverInputTypes["Node"]>;
		['...on Enterprise']?: Omit<ResolverInputTypes["Enterprise"],keyof ResolverInputTypes["Node"]>;
		['...on EnterpriseAdministratorInvitation']?: Omit<ResolverInputTypes["EnterpriseAdministratorInvitation"],keyof ResolverInputTypes["Node"]>;
		['...on EnterpriseIdentityProvider']?: Omit<ResolverInputTypes["EnterpriseIdentityProvider"],keyof ResolverInputTypes["Node"]>;
		['...on EnterpriseRepositoryInfo']?: Omit<ResolverInputTypes["EnterpriseRepositoryInfo"],keyof ResolverInputTypes["Node"]>;
		['...on EnterpriseServerInstallation']?: Omit<ResolverInputTypes["EnterpriseServerInstallation"],keyof ResolverInputTypes["Node"]>;
		['...on EnterpriseServerUserAccount']?: Omit<ResolverInputTypes["EnterpriseServerUserAccount"],keyof ResolverInputTypes["Node"]>;
		['...on EnterpriseServerUserAccountEmail']?: Omit<ResolverInputTypes["EnterpriseServerUserAccountEmail"],keyof ResolverInputTypes["Node"]>;
		['...on EnterpriseServerUserAccountsUpload']?: Omit<ResolverInputTypes["EnterpriseServerUserAccountsUpload"],keyof ResolverInputTypes["Node"]>;
		['...on EnterpriseUserAccount']?: Omit<ResolverInputTypes["EnterpriseUserAccount"],keyof ResolverInputTypes["Node"]>;
		['...on Environment']?: Omit<ResolverInputTypes["Environment"],keyof ResolverInputTypes["Node"]>;
		['...on ExternalIdentity']?: Omit<ResolverInputTypes["ExternalIdentity"],keyof ResolverInputTypes["Node"]>;
		['...on Gist']?: Omit<ResolverInputTypes["Gist"],keyof ResolverInputTypes["Node"]>;
		['...on GistComment']?: Omit<ResolverInputTypes["GistComment"],keyof ResolverInputTypes["Node"]>;
		['...on HeadRefDeletedEvent']?: Omit<ResolverInputTypes["HeadRefDeletedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on HeadRefForcePushedEvent']?: Omit<ResolverInputTypes["HeadRefForcePushedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on HeadRefRestoredEvent']?: Omit<ResolverInputTypes["HeadRefRestoredEvent"],keyof ResolverInputTypes["Node"]>;
		['...on IpAllowListEntry']?: Omit<ResolverInputTypes["IpAllowListEntry"],keyof ResolverInputTypes["Node"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["Node"]>;
		['...on IssueComment']?: Omit<ResolverInputTypes["IssueComment"],keyof ResolverInputTypes["Node"]>;
		['...on Label']?: Omit<ResolverInputTypes["Label"],keyof ResolverInputTypes["Node"]>;
		['...on LabeledEvent']?: Omit<ResolverInputTypes["LabeledEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Language']?: Omit<ResolverInputTypes["Language"],keyof ResolverInputTypes["Node"]>;
		['...on License']?: Omit<ResolverInputTypes["License"],keyof ResolverInputTypes["Node"]>;
		['...on LinkedBranch']?: Omit<ResolverInputTypes["LinkedBranch"],keyof ResolverInputTypes["Node"]>;
		['...on LockedEvent']?: Omit<ResolverInputTypes["LockedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Mannequin']?: Omit<ResolverInputTypes["Mannequin"],keyof ResolverInputTypes["Node"]>;
		['...on MarkedAsDuplicateEvent']?: Omit<ResolverInputTypes["MarkedAsDuplicateEvent"],keyof ResolverInputTypes["Node"]>;
		['...on MarketplaceCategory']?: Omit<ResolverInputTypes["MarketplaceCategory"],keyof ResolverInputTypes["Node"]>;
		['...on MarketplaceListing']?: Omit<ResolverInputTypes["MarketplaceListing"],keyof ResolverInputTypes["Node"]>;
		['...on MembersCanDeleteReposClearAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposClearAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on MembersCanDeleteReposDisableAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposDisableAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on MembersCanDeleteReposEnableAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposEnableAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on MentionedEvent']?: Omit<ResolverInputTypes["MentionedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on MergedEvent']?: Omit<ResolverInputTypes["MergedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on MigrationSource']?: Omit<ResolverInputTypes["MigrationSource"],keyof ResolverInputTypes["Node"]>;
		['...on Milestone']?: Omit<ResolverInputTypes["Milestone"],keyof ResolverInputTypes["Node"]>;
		['...on MilestonedEvent']?: Omit<ResolverInputTypes["MilestonedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on MovedColumnsInProjectEvent']?: Omit<ResolverInputTypes["MovedColumnsInProjectEvent"],keyof ResolverInputTypes["Node"]>;
		['...on OIDCProvider']?: Omit<ResolverInputTypes["OIDCProvider"],keyof ResolverInputTypes["Node"]>;
		['...on OauthApplicationCreateAuditEntry']?: Omit<ResolverInputTypes["OauthApplicationCreateAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgAddBillingManagerAuditEntry']?: Omit<ResolverInputTypes["OrgAddBillingManagerAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgAddMemberAuditEntry']?: Omit<ResolverInputTypes["OrgAddMemberAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgBlockUserAuditEntry']?: Omit<ResolverInputTypes["OrgBlockUserAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgCreateAuditEntry']?: Omit<ResolverInputTypes["OrgCreateAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgDisableOauthAppRestrictionsAuditEntry']?: Omit<ResolverInputTypes["OrgDisableOauthAppRestrictionsAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgDisableSamlAuditEntry']?: Omit<ResolverInputTypes["OrgDisableSamlAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgDisableTwoFactorRequirementAuditEntry']?: Omit<ResolverInputTypes["OrgDisableTwoFactorRequirementAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgEnableOauthAppRestrictionsAuditEntry']?: Omit<ResolverInputTypes["OrgEnableOauthAppRestrictionsAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgEnableSamlAuditEntry']?: Omit<ResolverInputTypes["OrgEnableSamlAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgEnableTwoFactorRequirementAuditEntry']?: Omit<ResolverInputTypes["OrgEnableTwoFactorRequirementAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgInviteMemberAuditEntry']?: Omit<ResolverInputTypes["OrgInviteMemberAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgInviteToBusinessAuditEntry']?: Omit<ResolverInputTypes["OrgInviteToBusinessAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgOauthAppAccessApprovedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessApprovedAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgOauthAppAccessDeniedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessDeniedAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgOauthAppAccessRequestedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessRequestedAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgRemoveBillingManagerAuditEntry']?: Omit<ResolverInputTypes["OrgRemoveBillingManagerAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["OrgRemoveMemberAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgRemoveOutsideCollaboratorAuditEntry']?: Omit<ResolverInputTypes["OrgRemoveOutsideCollaboratorAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgRestoreMemberAuditEntry']?: Omit<ResolverInputTypes["OrgRestoreMemberAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgUnblockUserAuditEntry']?: Omit<ResolverInputTypes["OrgUnblockUserAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgUpdateMemberAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateMemberAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["Node"]>;
		['...on OrganizationIdentityProvider']?: Omit<ResolverInputTypes["OrganizationIdentityProvider"],keyof ResolverInputTypes["Node"]>;
		['...on OrganizationInvitation']?: Omit<ResolverInputTypes["OrganizationInvitation"],keyof ResolverInputTypes["Node"]>;
		['...on Package']?: Omit<ResolverInputTypes["Package"],keyof ResolverInputTypes["Node"]>;
		['...on PackageFile']?: Omit<ResolverInputTypes["PackageFile"],keyof ResolverInputTypes["Node"]>;
		['...on PackageTag']?: Omit<ResolverInputTypes["PackageTag"],keyof ResolverInputTypes["Node"]>;
		['...on PackageVersion']?: Omit<ResolverInputTypes["PackageVersion"],keyof ResolverInputTypes["Node"]>;
		['...on PinnedDiscussion']?: Omit<ResolverInputTypes["PinnedDiscussion"],keyof ResolverInputTypes["Node"]>;
		['...on PinnedEvent']?: Omit<ResolverInputTypes["PinnedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on PinnedIssue']?: Omit<ResolverInputTypes["PinnedIssue"],keyof ResolverInputTypes["Node"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on Project']?: Omit<ResolverInputTypes["Project"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectCard']?: Omit<ResolverInputTypes["ProjectCard"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectColumn']?: Omit<ResolverInputTypes["ProjectColumn"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectNext']?: Omit<ResolverInputTypes["ProjectNext"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectNextField']?: Omit<ResolverInputTypes["ProjectNextField"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectNextItem']?: Omit<ResolverInputTypes["ProjectNextItem"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectNextItemFieldValue']?: Omit<ResolverInputTypes["ProjectNextItemFieldValue"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2']?: Omit<ResolverInputTypes["ProjectV2"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2Field']?: Omit<ResolverInputTypes["ProjectV2Field"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2Item']?: Omit<ResolverInputTypes["ProjectV2Item"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2ItemFieldDateValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldDateValue"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2ItemFieldIterationValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldIterationValue"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2ItemFieldNumberValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldNumberValue"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2ItemFieldSingleSelectValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldSingleSelectValue"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2ItemFieldTextValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldTextValue"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2IterationField']?: Omit<ResolverInputTypes["ProjectV2IterationField"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2SingleSelectField']?: Omit<ResolverInputTypes["ProjectV2SingleSelectField"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectV2View']?: Omit<ResolverInputTypes["ProjectV2View"],keyof ResolverInputTypes["Node"]>;
		['...on ProjectView']?: Omit<ResolverInputTypes["ProjectView"],keyof ResolverInputTypes["Node"]>;
		['...on PublicKey']?: Omit<ResolverInputTypes["PublicKey"],keyof ResolverInputTypes["Node"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["Node"]>;
		['...on PullRequestCommit']?: Omit<ResolverInputTypes["PullRequestCommit"],keyof ResolverInputTypes["Node"]>;
		['...on PullRequestCommitCommentThread']?: Omit<ResolverInputTypes["PullRequestCommitCommentThread"],keyof ResolverInputTypes["Node"]>;
		['...on PullRequestReview']?: Omit<ResolverInputTypes["PullRequestReview"],keyof ResolverInputTypes["Node"]>;
		['...on PullRequestReviewComment']?: Omit<ResolverInputTypes["PullRequestReviewComment"],keyof ResolverInputTypes["Node"]>;
		['...on PullRequestReviewThread']?: Omit<ResolverInputTypes["PullRequestReviewThread"],keyof ResolverInputTypes["Node"]>;
		['...on PullRequestThread']?: Omit<ResolverInputTypes["PullRequestThread"],keyof ResolverInputTypes["Node"]>;
		['...on Push']?: Omit<ResolverInputTypes["Push"],keyof ResolverInputTypes["Node"]>;
		['...on PushAllowance']?: Omit<ResolverInputTypes["PushAllowance"],keyof ResolverInputTypes["Node"]>;
		['...on Reaction']?: Omit<ResolverInputTypes["Reaction"],keyof ResolverInputTypes["Node"]>;
		['...on ReadyForReviewEvent']?: Omit<ResolverInputTypes["ReadyForReviewEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Ref']?: Omit<ResolverInputTypes["Ref"],keyof ResolverInputTypes["Node"]>;
		['...on ReferencedEvent']?: Omit<ResolverInputTypes["ReferencedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Release']?: Omit<ResolverInputTypes["Release"],keyof ResolverInputTypes["Node"]>;
		['...on ReleaseAsset']?: Omit<ResolverInputTypes["ReleaseAsset"],keyof ResolverInputTypes["Node"]>;
		['...on RemovedFromProjectEvent']?: Omit<ResolverInputTypes["RemovedFromProjectEvent"],keyof ResolverInputTypes["Node"]>;
		['...on RenamedTitleEvent']?: Omit<ResolverInputTypes["RenamedTitleEvent"],keyof ResolverInputTypes["Node"]>;
		['...on ReopenedEvent']?: Omit<ResolverInputTypes["ReopenedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on RepoAccessAuditEntry']?: Omit<ResolverInputTypes["RepoAccessAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoAddMemberAuditEntry']?: Omit<ResolverInputTypes["RepoAddMemberAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoAddTopicAuditEntry']?: Omit<ResolverInputTypes["RepoAddTopicAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoArchivedAuditEntry']?: Omit<ResolverInputTypes["RepoArchivedAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoChangeMergeSettingAuditEntry']?: Omit<ResolverInputTypes["RepoChangeMergeSettingAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigDisableAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigDisableContributorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableContributorsOnlyAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigEnableAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigEnableContributorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableContributorsOnlyAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigLockAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoCreateAuditEntry']?: Omit<ResolverInputTypes["RepoCreateAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoDestroyAuditEntry']?: Omit<ResolverInputTypes["RepoDestroyAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["RepoRemoveMemberAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ResolverInputTypes["RepoRemoveTopicAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on Repository']?: Omit<ResolverInputTypes["Repository"],keyof ResolverInputTypes["Node"]>;
		['...on RepositoryInvitation']?: Omit<ResolverInputTypes["RepositoryInvitation"],keyof ResolverInputTypes["Node"]>;
		['...on RepositoryMigration']?: Omit<ResolverInputTypes["RepositoryMigration"],keyof ResolverInputTypes["Node"]>;
		['...on RepositoryTopic']?: Omit<ResolverInputTypes["RepositoryTopic"],keyof ResolverInputTypes["Node"]>;
		['...on RepositoryVisibilityChangeDisableAuditEntry']?: Omit<ResolverInputTypes["RepositoryVisibilityChangeDisableAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepositoryVisibilityChangeEnableAuditEntry']?: Omit<ResolverInputTypes["RepositoryVisibilityChangeEnableAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on RepositoryVulnerabilityAlert']?: Omit<ResolverInputTypes["RepositoryVulnerabilityAlert"],keyof ResolverInputTypes["Node"]>;
		['...on ReviewDismissalAllowance']?: Omit<ResolverInputTypes["ReviewDismissalAllowance"],keyof ResolverInputTypes["Node"]>;
		['...on ReviewDismissedEvent']?: Omit<ResolverInputTypes["ReviewDismissedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on ReviewRequest']?: Omit<ResolverInputTypes["ReviewRequest"],keyof ResolverInputTypes["Node"]>;
		['...on ReviewRequestRemovedEvent']?: Omit<ResolverInputTypes["ReviewRequestRemovedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on ReviewRequestedEvent']?: Omit<ResolverInputTypes["ReviewRequestedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on SavedReply']?: Omit<ResolverInputTypes["SavedReply"],keyof ResolverInputTypes["Node"]>;
		['...on SecurityAdvisory']?: Omit<ResolverInputTypes["SecurityAdvisory"],keyof ResolverInputTypes["Node"]>;
		['...on SponsorsActivity']?: Omit<ResolverInputTypes["SponsorsActivity"],keyof ResolverInputTypes["Node"]>;
		['...on SponsorsListing']?: Omit<ResolverInputTypes["SponsorsListing"],keyof ResolverInputTypes["Node"]>;
		['...on SponsorsTier']?: Omit<ResolverInputTypes["SponsorsTier"],keyof ResolverInputTypes["Node"]>;
		['...on Sponsorship']?: Omit<ResolverInputTypes["Sponsorship"],keyof ResolverInputTypes["Node"]>;
		['...on SponsorshipNewsletter']?: Omit<ResolverInputTypes["SponsorshipNewsletter"],keyof ResolverInputTypes["Node"]>;
		['...on Status']?: Omit<ResolverInputTypes["Status"],keyof ResolverInputTypes["Node"]>;
		['...on StatusCheckRollup']?: Omit<ResolverInputTypes["StatusCheckRollup"],keyof ResolverInputTypes["Node"]>;
		['...on StatusContext']?: Omit<ResolverInputTypes["StatusContext"],keyof ResolverInputTypes["Node"]>;
		['...on SubscribedEvent']?: Omit<ResolverInputTypes["SubscribedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Tag']?: Omit<ResolverInputTypes["Tag"],keyof ResolverInputTypes["Node"]>;
		['...on Team']?: Omit<ResolverInputTypes["Team"],keyof ResolverInputTypes["Node"]>;
		['...on TeamAddMemberAuditEntry']?: Omit<ResolverInputTypes["TeamAddMemberAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamAddRepositoryAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on TeamChangeParentTeamAuditEntry']?: Omit<ResolverInputTypes["TeamChangeParentTeamAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on TeamDiscussion']?: Omit<ResolverInputTypes["TeamDiscussion"],keyof ResolverInputTypes["Node"]>;
		['...on TeamDiscussionComment']?: Omit<ResolverInputTypes["TeamDiscussionComment"],keyof ResolverInputTypes["Node"]>;
		['...on TeamRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["TeamRemoveMemberAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamRemoveRepositoryAuditEntry"],keyof ResolverInputTypes["Node"]>;
		['...on Topic']?: Omit<ResolverInputTypes["Topic"],keyof ResolverInputTypes["Node"]>;
		['...on TransferredEvent']?: Omit<ResolverInputTypes["TransferredEvent"],keyof ResolverInputTypes["Node"]>;
		['...on Tree']?: Omit<ResolverInputTypes["Tree"],keyof ResolverInputTypes["Node"]>;
		['...on UnassignedEvent']?: Omit<ResolverInputTypes["UnassignedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on UnlabeledEvent']?: Omit<ResolverInputTypes["UnlabeledEvent"],keyof ResolverInputTypes["Node"]>;
		['...on UnlockedEvent']?: Omit<ResolverInputTypes["UnlockedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on UnmarkedAsDuplicateEvent']?: Omit<ResolverInputTypes["UnmarkedAsDuplicateEvent"],keyof ResolverInputTypes["Node"]>;
		['...on UnpinnedEvent']?: Omit<ResolverInputTypes["UnpinnedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on UnsubscribedEvent']?: Omit<ResolverInputTypes["UnsubscribedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["Node"]>;
		['...on UserBlockedEvent']?: Omit<ResolverInputTypes["UserBlockedEvent"],keyof ResolverInputTypes["Node"]>;
		['...on UserContentEdit']?: Omit<ResolverInputTypes["UserContentEdit"],keyof ResolverInputTypes["Node"]>;
		['...on UserStatus']?: Omit<ResolverInputTypes["UserStatus"],keyof ResolverInputTypes["Node"]>;
		['...on VerifiableDomain']?: Omit<ResolverInputTypes["VerifiableDomain"],keyof ResolverInputTypes["Node"]>;
		['...on Workflow']?: Omit<ResolverInputTypes["Workflow"],keyof ResolverInputTypes["Node"]>;
		['...on WorkflowRun']?: Omit<ResolverInputTypes["WorkflowRun"],keyof ResolverInputTypes["Node"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The possible values for the notification restriction setting. */
["NotificationRestrictionSettingValue"]:NotificationRestrictionSettingValue;
	/** An OIDC identity provider configured to provision identities for an enterprise. */
["OIDCProvider"]: AliasType<{
	/** The enterprise this identity provider belongs to. */
	enterprise?:ResolverInputTypes["Enterprise"],
externalIdentities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter to external identities with the users login */
	login?: string | undefined | null,	/** Filter to external identities with valid org membership only */
	membersOnly?: boolean | undefined | null,	/** Filter to external identities with the users userName/NameID attribute */
	userName?: string | undefined | null},ResolverInputTypes["ExternalIdentityConnection"]],
	id?:boolean | `@${string}`,
	/** The OIDC identity provider type */
	providerType?:boolean | `@${string}`,
	/** The id of the tenant this provider is attached to */
	tenantId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The OIDC identity provider type */
["OIDCProviderType"]:OIDCProviderType;
	/** Metadata for an audit entry with action oauth_application.* */
["OauthApplicationAuditEntryData"]:AliasType<{
		/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`;
		['...on OauthApplicationCreateAuditEntry']?: Omit<ResolverInputTypes["OauthApplicationCreateAuditEntry"],keyof ResolverInputTypes["OauthApplicationAuditEntryData"]>;
		['...on OrgOauthAppAccessApprovedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessApprovedAuditEntry"],keyof ResolverInputTypes["OauthApplicationAuditEntryData"]>;
		['...on OrgOauthAppAccessDeniedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessDeniedAuditEntry"],keyof ResolverInputTypes["OauthApplicationAuditEntryData"]>;
		['...on OrgOauthAppAccessRequestedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessRequestedAuditEntry"],keyof ResolverInputTypes["OauthApplicationAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a oauth_application.create event. */
["OauthApplicationCreateAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The application URL of the OAuth Application. */
	applicationUrl?:boolean | `@${string}`,
	/** The callback URL of the OAuth Application. */
	callbackUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The rate limit of the OAuth Application. */
	rateLimit?:boolean | `@${string}`,
	/** The state of the OAuth Application. */
	state?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The state of an OAuth Application when it was created. */
["OauthApplicationCreateAuditEntryState"]:OauthApplicationCreateAuditEntryState;
	/** The corresponding operation type for the action */
["OperationType"]:OperationType;
	/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
["OrderDirection"]:OrderDirection;
	/** Audit log entry for a org.add_billing_manager */
["OrgAddBillingManagerAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The email address used to invite a billing manager for the organization. */
	invitationEmail?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.add_member */
["OrgAddMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The permission level of the member added to the organization. */
	permission?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The permissions available to members on an Organization. */
["OrgAddMemberAuditEntryPermission"]:OrgAddMemberAuditEntryPermission;
	/** Audit log entry for a org.block_user */
["OrgBlockUserAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The blocked user. */
	blockedUser?:ResolverInputTypes["User"],
	/** The username of the blocked user. */
	blockedUserName?:boolean | `@${string}`,
	/** The HTTP path for the blocked user. */
	blockedUserResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the blocked user. */
	blockedUserUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.config.disable_collaborators_only event. */
["OrgConfigDisableCollaboratorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.config.enable_collaborators_only event. */
["OrgConfigEnableCollaboratorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.create event. */
["OrgCreateAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The billing plan for the Organization. */
	billingPlan?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The billing plans available for organizations. */
["OrgCreateAuditEntryBillingPlan"]:OrgCreateAuditEntryBillingPlan;
	/** Audit log entry for a org.disable_oauth_app_restrictions event. */
["OrgDisableOauthAppRestrictionsAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.disable_saml event. */
["OrgDisableSamlAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The SAML provider's digest algorithm URL. */
	digestMethodUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The SAML provider's issuer URL. */
	issuerUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The SAML provider's signature algorithm URL. */
	signatureMethodUrl?:boolean | `@${string}`,
	/** The SAML provider's single sign-on URL. */
	singleSignOnUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.disable_two_factor_requirement event. */
["OrgDisableTwoFactorRequirementAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.enable_oauth_app_restrictions event. */
["OrgEnableOauthAppRestrictionsAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.enable_saml event. */
["OrgEnableSamlAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The SAML provider's digest algorithm URL. */
	digestMethodUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The SAML provider's issuer URL. */
	issuerUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The SAML provider's signature algorithm URL. */
	signatureMethodUrl?:boolean | `@${string}`,
	/** The SAML provider's single sign-on URL. */
	singleSignOnUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.enable_two_factor_requirement event. */
["OrgEnableTwoFactorRequirementAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for an organization's enterprise owner connections. */
["OrgEnterpriseOwnerOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order enterprise owners by. */
	field: ResolverInputTypes["OrgEnterpriseOwnerOrderField"]
};
	/** Properties by which enterprise owners can be ordered. */
["OrgEnterpriseOwnerOrderField"]:OrgEnterpriseOwnerOrderField;
	/** Audit log entry for a org.invite_member event. */
["OrgInviteMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The email address of the organization invitation. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The organization invitation. */
	organizationInvitation?:ResolverInputTypes["OrganizationInvitation"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.invite_to_business event. */
["OrgInviteToBusinessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.oauth_app_access_approved event. */
["OrgOauthAppAccessApprovedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.oauth_app_access_denied event. */
["OrgOauthAppAccessDeniedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.oauth_app_access_requested event. */
["OrgOauthAppAccessRequestedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the OAuth Application. */
	oauthApplicationName?:boolean | `@${string}`,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.remove_billing_manager event. */
["OrgRemoveBillingManagerAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The reason for the billing manager being removed. */
	reason?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The reason a billing manager was removed from an Organization. */
["OrgRemoveBillingManagerAuditEntryReason"]:OrgRemoveBillingManagerAuditEntryReason;
	/** Audit log entry for a org.remove_member event. */
["OrgRemoveMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The types of membership the member has with the organization. */
	membershipTypes?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The reason for the member being removed. */
	reason?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The type of membership a user has with an Organization. */
["OrgRemoveMemberAuditEntryMembershipType"]:OrgRemoveMemberAuditEntryMembershipType;
	/** The reason a member was removed from an Organization. */
["OrgRemoveMemberAuditEntryReason"]:OrgRemoveMemberAuditEntryReason;
	/** Audit log entry for a org.remove_outside_collaborator event. */
["OrgRemoveOutsideCollaboratorAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The types of membership the outside collaborator has with the organization. */
	membershipTypes?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The reason for the outside collaborator being removed from the Organization. */
	reason?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The type of membership a user has with an Organization. */
["OrgRemoveOutsideCollaboratorAuditEntryMembershipType"]:OrgRemoveOutsideCollaboratorAuditEntryMembershipType;
	/** The reason an outside collaborator was removed from an Organization. */
["OrgRemoveOutsideCollaboratorAuditEntryReason"]:OrgRemoveOutsideCollaboratorAuditEntryReason;
	/** Audit log entry for a org.restore_member event. */
["OrgRestoreMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The number of custom email routings for the restored member. */
	restoredCustomEmailRoutingsCount?:boolean | `@${string}`,
	/** The number of issue assignments for the restored member. */
	restoredIssueAssignmentsCount?:boolean | `@${string}`,
	/** Restored organization membership objects. */
	restoredMemberships?:ResolverInputTypes["OrgRestoreMemberAuditEntryMembership"],
	/** The number of restored memberships. */
	restoredMembershipsCount?:boolean | `@${string}`,
	/** The number of repositories of the restored member. */
	restoredRepositoriesCount?:boolean | `@${string}`,
	/** The number of starred repositories for the restored member. */
	restoredRepositoryStarsCount?:boolean | `@${string}`,
	/** The number of watched repositories for the restored member. */
	restoredRepositoryWatchesCount?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types of memberships that can be restored for an Organization member. */
["OrgRestoreMemberAuditEntryMembership"]: AliasType<{
	OrgRestoreMemberMembershipOrganizationAuditEntryData?:ResolverInputTypes["OrgRestoreMemberMembershipOrganizationAuditEntryData"],
	OrgRestoreMemberMembershipRepositoryAuditEntryData?:ResolverInputTypes["OrgRestoreMemberMembershipRepositoryAuditEntryData"],
	OrgRestoreMemberMembershipTeamAuditEntryData?:ResolverInputTypes["OrgRestoreMemberMembershipTeamAuditEntryData"],
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for an organization membership for org.restore_member actions */
["OrgRestoreMemberMembershipOrganizationAuditEntryData"]: AliasType<{
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for a repository membership for org.restore_member actions */
["OrgRestoreMemberMembershipRepositoryAuditEntryData"]: AliasType<{
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for a team membership for org.restore_member actions */
["OrgRestoreMemberMembershipTeamAuditEntryData"]: AliasType<{
	/** The team associated with the action */
	team?:ResolverInputTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.unblock_user */
["OrgUnblockUserAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The user being unblocked by the organization. */
	blockedUser?:ResolverInputTypes["User"],
	/** The username of the blocked user. */
	blockedUserName?:boolean | `@${string}`,
	/** The HTTP path for the blocked user. */
	blockedUserResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the blocked user. */
	blockedUserUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a org.update_default_repository_permission */
["OrgUpdateDefaultRepositoryPermissionAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The new base repository permission level for the organization. */
	permission?:boolean | `@${string}`,
	/** The former base repository permission level for the organization. */
	permissionWas?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The default permission a repository can have in an Organization. */
["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"]:OrgUpdateDefaultRepositoryPermissionAuditEntryPermission;
	/** Audit log entry for a org.update_member event. */
["OrgUpdateMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The new member permission level for the organization. */
	permission?:boolean | `@${string}`,
	/** The former member permission level for the organization. */
	permissionWas?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The permissions available to members on an Organization. */
["OrgUpdateMemberAuditEntryPermission"]:OrgUpdateMemberAuditEntryPermission;
	/** Audit log entry for a org.update_member_repository_creation_permission event. */
["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** Can members create repositories in the organization. */
	canCreateRepositories?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The permission for visibility level of repositories for this organization. */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The permissions available for repository creation on an Organization. */
["OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"]:OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility;
	/** Audit log entry for a org.update_member_repository_invitation_permission event. */
["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** Can outside collaborators be invited to repositories in the organization. */
	canInviteOutsideCollaboratorsToRepositories?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
["Organization"]: AliasType<{
anyPinnableItems?: [{	/** Filter to only a particular kind of pinnable item. */
	type?: ResolverInputTypes["PinnableItemType"] | undefined | null},boolean | `@${string}`],
auditLog?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the returned audit log entries. */
	orderBy?: ResolverInputTypes["AuditLogOrder"] | undefined | null,	/** The query string to filter audit entries */
	query?: string | undefined | null},ResolverInputTypes["OrganizationAuditEntryConnection"]],
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The organization's public profile description. */
	description?:boolean | `@${string}`,
	/** The organization's public profile description rendered to HTML. */
	descriptionHTML?:boolean | `@${string}`,
domains?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Filter by if the domain is approved. */
	isApproved?: boolean | undefined | null,	/** Filter by if the domain is verified. */
	isVerified?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for verifiable domains returned. */
	orderBy?: ResolverInputTypes["VerifiableDomainOrder"] | undefined | null},ResolverInputTypes["VerifiableDomainConnection"]],
	/** The organization's public email. */
	email?:boolean | `@${string}`,
enterpriseOwners?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for enterprise owners returned from the connection. */
	orderBy?: ResolverInputTypes["OrgEnterpriseOwnerOrder"] | undefined | null,	/** The organization role to filter by. */
	organizationRole?: ResolverInputTypes["RoleInOrganization"] | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null},ResolverInputTypes["OrganizationEnterpriseOwnerConnection"]],
	/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents?:boolean | `@${string}`,
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The interaction ability settings for this organization. */
	interactionAbility?:ResolverInputTypes["RepositoryInteractionAbility"],
	/** The setting value for whether the organization has an IP allow list enabled. */
	ipAllowListEnabledSetting?:boolean | `@${string}`,
ipAllowListEntries?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for IP allow list entries returned. */
	orderBy?: ResolverInputTypes["IpAllowListEntryOrder"] | undefined | null},ResolverInputTypes["IpAllowListEntryConnection"]],
	/** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
	ipAllowListForInstalledAppsEnabledSetting?:boolean | `@${string}`,
isSponsoredBy?: [{	/** The target account's login. */
	accountLogin: string},boolean | `@${string}`],
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer?:boolean | `@${string}`,
	/** Whether the organization has verified its profile email and website. */
	isVerified?:boolean | `@${string}`,
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase?:ResolverInputTypes["ProfileItemShowcase"],
	/** The organization's public profile location. */
	location?:boolean | `@${string}`,
	/** The organization's login name. */
	login?:boolean | `@${string}`,
memberStatuses?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for user statuses returned from the connection. */
	orderBy?: ResolverInputTypes["UserStatusOrder"] | undefined | null},ResolverInputTypes["UserStatusConnection"]],
	/** Members can fork private repositories in this organization */
	membersCanForkPrivateRepositories?:boolean | `@${string}`,
membersWithRole?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["OrganizationMemberConnection"]],
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents?:boolean | `@${string}`,
	/** The organization's public profile name. */
	name?:boolean | `@${string}`,
	/** The HTTP path creating a new team */
	newTeamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL creating a new team */
	newTeamUrl?:boolean | `@${string}`,
	/** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
	notificationDeliveryRestrictionEnabledSetting?:boolean | `@${string}`,
	/** The billing email for the organization. */
	organizationBillingEmail?:boolean | `@${string}`,
packages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Find packages by their names. */
	names?: Array<string | undefined | null> | undefined | null,	/** Ordering of the returned packages. */
	orderBy?: ResolverInputTypes["PackageOrder"] | undefined | null,	/** Filter registry package by type. */
	packageType?: ResolverInputTypes["PackageType"] | undefined | null,	/** Find packages in a repository by ID. */
	repositoryId?: string | undefined | null},ResolverInputTypes["PackageConnection"]],
pendingMembers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
pinnableItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter the types of pinnable items that are returned. */
	types?: Array<ResolverInputTypes["PinnableItemType"]> | undefined | null},ResolverInputTypes["PinnableItemConnection"]],
pinnedItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter the types of pinned items that are returned. */
	types?: Array<ResolverInputTypes["PinnableItemType"]> | undefined | null},ResolverInputTypes["PinnableItemConnection"]],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining?:boolean | `@${string}`,
project?: [{	/** The project number to find. */
	number: number},ResolverInputTypes["Project"]],
projectNext?: [{	/** The project (beta) number. */
	number: number},ResolverInputTypes["ProjectNext"]],
projectV2?: [{	/** The project number. */
	number: number},ResolverInputTypes["ProjectV2"]],
projects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for projects returned from the connection */
	orderBy?: ResolverInputTypes["ProjectOrder"] | undefined | null,	/** Query to search projects by, currently only searching by name. */
	search?: string | undefined | null,	/** A list of states to filter the projects by. */
	states?: Array<ResolverInputTypes["ProjectState"]> | undefined | null},ResolverInputTypes["ProjectConnection"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null,	/** How to order the returned projects (beta). */
	sortBy?: ResolverInputTypes["ProjectNextOrderField"] | undefined | null},ResolverInputTypes["ProjectNextConnection"]],
	/** The HTTP path listing organization's projects */
	projectsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing organization's projects */
	projectsUrl?:boolean | `@${string}`,
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** How to order the returned projects. */
	orderBy?: ResolverInputTypes["ProjectV2Order"] | undefined | null,	/** A project to search for under the the owner. */
	query?: string | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
recentProjects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
repositories?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** If non-null, filters repositories according to whether they are forks of another repository */
	isFork?: boolean | undefined | null,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories returned from the connection */
	orderBy?: ResolverInputTypes["RepositoryOrder"] | undefined | null,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** If non-null, filters repositories according to privacy */
	privacy?: ResolverInputTypes["RepositoryPrivacy"] | undefined | null},ResolverInputTypes["RepositoryConnection"]],
repository?: [{	/** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
	followRenames?: boolean | undefined | null,	/** Name of Repository to find. */
	name: string},ResolverInputTypes["Repository"]],
repositoryDiscussionComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter discussion comments to only those that were marked as the answer */
	onlyAnswers?: boolean | undefined | null,	/** Filter discussion comments to only those in a specific repository. */
	repositoryId?: string | undefined | null},ResolverInputTypes["DiscussionCommentConnection"]],
repositoryDiscussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Filter discussions to only those that have been answered or not. Defaults to
including both answered and unanswered discussions. */
	answered?: boolean | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for discussions returned from the connection. */
	orderBy?: ResolverInputTypes["DiscussionOrder"] | undefined | null,	/** Filter discussions to only those in a specific repository. */
	repositoryId?: string | undefined | null},ResolverInputTypes["DiscussionConnection"]],
repositoryMigrations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repository migrations returned. */
	orderBy?: ResolverInputTypes["RepositoryMigrationOrder"] | undefined | null,	/** Filter repository migrations by repository name. */
	repositoryName?: string | undefined | null,	/** Filter repository migrations by state. */
	state?: ResolverInputTypes["MigrationState"] | undefined | null},ResolverInputTypes["RepositoryMigrationConnection"]],
	/** When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication. */
	requiresTwoFactorAuthentication?:boolean | `@${string}`,
	/** The HTTP path for this organization. */
	resourcePath?:boolean | `@${string}`,
	/** The Organization's SAML identity providers */
	samlIdentityProvider?:ResolverInputTypes["OrganizationIdentityProvider"],
sponsoring?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the users and organizations returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorOrder"] | undefined | null},ResolverInputTypes["SponsorConnection"]],
sponsors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsors returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorOrder"] | undefined | null,	/** If given, will filter for sponsors at the given tier. Will only return
sponsors whose tier the viewer is permitted to see. */
	tierId?: string | undefined | null},ResolverInputTypes["SponsorConnection"]],
sponsorsActivities?: [{	/** Filter activities to only the specified actions. */
	actions?: Array<ResolverInputTypes["SponsorsActivityAction"]> | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for activity returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorsActivityOrder"] | undefined | null,	/** Filter activities returned to only those that occurred in the most recent
specified time period. Set to ALL to avoid filtering by when the activity occurred. */
	period?: ResolverInputTypes["SponsorsActivityPeriod"] | undefined | null},ResolverInputTypes["SponsorsActivityConnection"]],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?:ResolverInputTypes["SponsorsListing"],
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?:ResolverInputTypes["Sponsorship"],
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?:ResolverInputTypes["Sponsorship"],
sponsorshipNewsletters?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorship updates returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorshipNewsletterOrder"] | undefined | null},ResolverInputTypes["SponsorshipNewsletterConnection"]],
sponsorshipsAsMaintainer?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Whether or not to include private sponsorships in the result set */
	includePrivate?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ResolverInputTypes["SponsorshipOrder"] | undefined | null},ResolverInputTypes["SponsorshipConnection"]],
sponsorshipsAsSponsor?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ResolverInputTypes["SponsorshipOrder"] | undefined | null},ResolverInputTypes["SponsorshipConnection"]],
team?: [{	/** The name or slug of the team to find. */
	slug: string},ResolverInputTypes["Team"]],
teams?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** If true, filters teams that are mapped to an LDAP Group (Enterprise only) */
	ldapMapped?: boolean | undefined | null,	/** Ordering options for teams returned from the connection */
	orderBy?: ResolverInputTypes["TeamOrder"] | undefined | null,	/** If non-null, filters teams according to privacy */
	privacy?: ResolverInputTypes["TeamPrivacy"] | undefined | null,	/** If non-null, filters teams with query on team name and team slug */
	query?: string | undefined | null,	/** If non-null, filters teams according to whether the viewer is an admin or member on team */
	role?: ResolverInputTypes["TeamRole"] | undefined | null,	/** If true, restrict to only root teams */
	rootTeamsOnly?: boolean | undefined | null,	/** User logins to filter by */
	userLogins?: Array<string> | undefined | null},ResolverInputTypes["TeamConnection"]],
	/** The HTTP path listing organization's teams */
	teamsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing organization's teams */
	teamsUrl?:boolean | `@${string}`,
	/** The organization's Twitter username. */
	twitterUsername?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this organization. */
	url?:boolean | `@${string}`,
	/** Organization is adminable by the viewer. */
	viewerCanAdminister?:boolean | `@${string}`,
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems?:boolean | `@${string}`,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects?:boolean | `@${string}`,
	/** Viewer can create repositories on this organization */
	viewerCanCreateRepositories?:boolean | `@${string}`,
	/** Viewer can create teams on this organization. */
	viewerCanCreateTeams?:boolean | `@${string}`,
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor?:boolean | `@${string}`,
	/** Viewer is an active member of this organization. */
	viewerIsAMember?:boolean | `@${string}`,
	/** Whether or not this Organization is followed by the viewer. */
	viewerIsFollowing?:boolean | `@${string}`,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring?:boolean | `@${string}`,
	/** Whether contributors are required to sign off on web-based commits for repositories in this organization. */
	webCommitSignoffRequired?:boolean | `@${string}`,
	/** The organization's public profile URL. */
	websiteUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An audit entry in an organization audit log. */
["OrganizationAuditEntry"]: AliasType<{
	MembersCanDeleteReposClearAuditEntry?:ResolverInputTypes["MembersCanDeleteReposClearAuditEntry"],
	MembersCanDeleteReposDisableAuditEntry?:ResolverInputTypes["MembersCanDeleteReposDisableAuditEntry"],
	MembersCanDeleteReposEnableAuditEntry?:ResolverInputTypes["MembersCanDeleteReposEnableAuditEntry"],
	OauthApplicationCreateAuditEntry?:ResolverInputTypes["OauthApplicationCreateAuditEntry"],
	OrgAddBillingManagerAuditEntry?:ResolverInputTypes["OrgAddBillingManagerAuditEntry"],
	OrgAddMemberAuditEntry?:ResolverInputTypes["OrgAddMemberAuditEntry"],
	OrgBlockUserAuditEntry?:ResolverInputTypes["OrgBlockUserAuditEntry"],
	OrgConfigDisableCollaboratorsOnlyAuditEntry?:ResolverInputTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"],
	OrgConfigEnableCollaboratorsOnlyAuditEntry?:ResolverInputTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"],
	OrgCreateAuditEntry?:ResolverInputTypes["OrgCreateAuditEntry"],
	OrgDisableOauthAppRestrictionsAuditEntry?:ResolverInputTypes["OrgDisableOauthAppRestrictionsAuditEntry"],
	OrgDisableSamlAuditEntry?:ResolverInputTypes["OrgDisableSamlAuditEntry"],
	OrgDisableTwoFactorRequirementAuditEntry?:ResolverInputTypes["OrgDisableTwoFactorRequirementAuditEntry"],
	OrgEnableOauthAppRestrictionsAuditEntry?:ResolverInputTypes["OrgEnableOauthAppRestrictionsAuditEntry"],
	OrgEnableSamlAuditEntry?:ResolverInputTypes["OrgEnableSamlAuditEntry"],
	OrgEnableTwoFactorRequirementAuditEntry?:ResolverInputTypes["OrgEnableTwoFactorRequirementAuditEntry"],
	OrgInviteMemberAuditEntry?:ResolverInputTypes["OrgInviteMemberAuditEntry"],
	OrgInviteToBusinessAuditEntry?:ResolverInputTypes["OrgInviteToBusinessAuditEntry"],
	OrgOauthAppAccessApprovedAuditEntry?:ResolverInputTypes["OrgOauthAppAccessApprovedAuditEntry"],
	OrgOauthAppAccessDeniedAuditEntry?:ResolverInputTypes["OrgOauthAppAccessDeniedAuditEntry"],
	OrgOauthAppAccessRequestedAuditEntry?:ResolverInputTypes["OrgOauthAppAccessRequestedAuditEntry"],
	OrgRemoveBillingManagerAuditEntry?:ResolverInputTypes["OrgRemoveBillingManagerAuditEntry"],
	OrgRemoveMemberAuditEntry?:ResolverInputTypes["OrgRemoveMemberAuditEntry"],
	OrgRemoveOutsideCollaboratorAuditEntry?:ResolverInputTypes["OrgRemoveOutsideCollaboratorAuditEntry"],
	OrgRestoreMemberAuditEntry?:ResolverInputTypes["OrgRestoreMemberAuditEntry"],
	OrgUnblockUserAuditEntry?:ResolverInputTypes["OrgUnblockUserAuditEntry"],
	OrgUpdateDefaultRepositoryPermissionAuditEntry?:ResolverInputTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"],
	OrgUpdateMemberAuditEntry?:ResolverInputTypes["OrgUpdateMemberAuditEntry"],
	OrgUpdateMemberRepositoryCreationPermissionAuditEntry?:ResolverInputTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"],
	OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?:ResolverInputTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"],
	PrivateRepositoryForkingDisableAuditEntry?:ResolverInputTypes["PrivateRepositoryForkingDisableAuditEntry"],
	PrivateRepositoryForkingEnableAuditEntry?:ResolverInputTypes["PrivateRepositoryForkingEnableAuditEntry"],
	RepoAccessAuditEntry?:ResolverInputTypes["RepoAccessAuditEntry"],
	RepoAddMemberAuditEntry?:ResolverInputTypes["RepoAddMemberAuditEntry"],
	RepoAddTopicAuditEntry?:ResolverInputTypes["RepoAddTopicAuditEntry"],
	RepoArchivedAuditEntry?:ResolverInputTypes["RepoArchivedAuditEntry"],
	RepoChangeMergeSettingAuditEntry?:ResolverInputTypes["RepoChangeMergeSettingAuditEntry"],
	RepoConfigDisableAnonymousGitAccessAuditEntry?:ResolverInputTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],
	RepoConfigDisableCollaboratorsOnlyAuditEntry?:ResolverInputTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],
	RepoConfigDisableContributorsOnlyAuditEntry?:ResolverInputTypes["RepoConfigDisableContributorsOnlyAuditEntry"],
	RepoConfigDisableSockpuppetDisallowedAuditEntry?:ResolverInputTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],
	RepoConfigEnableAnonymousGitAccessAuditEntry?:ResolverInputTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],
	RepoConfigEnableCollaboratorsOnlyAuditEntry?:ResolverInputTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],
	RepoConfigEnableContributorsOnlyAuditEntry?:ResolverInputTypes["RepoConfigEnableContributorsOnlyAuditEntry"],
	RepoConfigEnableSockpuppetDisallowedAuditEntry?:ResolverInputTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],
	RepoConfigLockAnonymousGitAccessAuditEntry?:ResolverInputTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],
	RepoConfigUnlockAnonymousGitAccessAuditEntry?:ResolverInputTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],
	RepoCreateAuditEntry?:ResolverInputTypes["RepoCreateAuditEntry"],
	RepoDestroyAuditEntry?:ResolverInputTypes["RepoDestroyAuditEntry"],
	RepoRemoveMemberAuditEntry?:ResolverInputTypes["RepoRemoveMemberAuditEntry"],
	RepoRemoveTopicAuditEntry?:ResolverInputTypes["RepoRemoveTopicAuditEntry"],
	RepositoryVisibilityChangeDisableAuditEntry?:ResolverInputTypes["RepositoryVisibilityChangeDisableAuditEntry"],
	RepositoryVisibilityChangeEnableAuditEntry?:ResolverInputTypes["RepositoryVisibilityChangeEnableAuditEntry"],
	TeamAddMemberAuditEntry?:ResolverInputTypes["TeamAddMemberAuditEntry"],
	TeamAddRepositoryAuditEntry?:ResolverInputTypes["TeamAddRepositoryAuditEntry"],
	TeamChangeParentTeamAuditEntry?:ResolverInputTypes["TeamChangeParentTeamAuditEntry"],
	TeamRemoveMemberAuditEntry?:ResolverInputTypes["TeamRemoveMemberAuditEntry"],
	TeamRemoveRepositoryAuditEntry?:ResolverInputTypes["TeamRemoveRepositoryAuditEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for OrganizationAuditEntry. */
["OrganizationAuditEntryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["OrganizationAuditEntryEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["OrganizationAuditEntry"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for an audit entry with action org.* */
["OrganizationAuditEntryData"]:AliasType<{
		/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`;
		['...on MembersCanDeleteReposClearAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposClearAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on MembersCanDeleteReposDisableAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposDisableAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on MembersCanDeleteReposEnableAuditEntry']?: Omit<ResolverInputTypes["MembersCanDeleteReposEnableAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OauthApplicationCreateAuditEntry']?: Omit<ResolverInputTypes["OauthApplicationCreateAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgAddBillingManagerAuditEntry']?: Omit<ResolverInputTypes["OrgAddBillingManagerAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgAddMemberAuditEntry']?: Omit<ResolverInputTypes["OrgAddMemberAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgBlockUserAuditEntry']?: Omit<ResolverInputTypes["OrgBlockUserAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgCreateAuditEntry']?: Omit<ResolverInputTypes["OrgCreateAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgDisableOauthAppRestrictionsAuditEntry']?: Omit<ResolverInputTypes["OrgDisableOauthAppRestrictionsAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgDisableSamlAuditEntry']?: Omit<ResolverInputTypes["OrgDisableSamlAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgDisableTwoFactorRequirementAuditEntry']?: Omit<ResolverInputTypes["OrgDisableTwoFactorRequirementAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgEnableOauthAppRestrictionsAuditEntry']?: Omit<ResolverInputTypes["OrgEnableOauthAppRestrictionsAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgEnableSamlAuditEntry']?: Omit<ResolverInputTypes["OrgEnableSamlAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgEnableTwoFactorRequirementAuditEntry']?: Omit<ResolverInputTypes["OrgEnableTwoFactorRequirementAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgInviteMemberAuditEntry']?: Omit<ResolverInputTypes["OrgInviteMemberAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgInviteToBusinessAuditEntry']?: Omit<ResolverInputTypes["OrgInviteToBusinessAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgOauthAppAccessApprovedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessApprovedAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgOauthAppAccessDeniedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessDeniedAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgOauthAppAccessRequestedAuditEntry']?: Omit<ResolverInputTypes["OrgOauthAppAccessRequestedAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgRemoveBillingManagerAuditEntry']?: Omit<ResolverInputTypes["OrgRemoveBillingManagerAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["OrgRemoveMemberAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgRemoveOutsideCollaboratorAuditEntry']?: Omit<ResolverInputTypes["OrgRemoveOutsideCollaboratorAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgRestoreMemberAuditEntry']?: Omit<ResolverInputTypes["OrgRestoreMemberAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgRestoreMemberMembershipOrganizationAuditEntryData']?: Omit<ResolverInputTypes["OrgRestoreMemberMembershipOrganizationAuditEntryData"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgUnblockUserAuditEntry']?: Omit<ResolverInputTypes["OrgUnblockUserAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgUpdateMemberAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateMemberAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']?: Omit<ResolverInputTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoAccessAuditEntry']?: Omit<ResolverInputTypes["RepoAccessAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoAddMemberAuditEntry']?: Omit<ResolverInputTypes["RepoAddMemberAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoAddTopicAuditEntry']?: Omit<ResolverInputTypes["RepoAddTopicAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoArchivedAuditEntry']?: Omit<ResolverInputTypes["RepoArchivedAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoChangeMergeSettingAuditEntry']?: Omit<ResolverInputTypes["RepoChangeMergeSettingAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigDisableAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigDisableContributorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableContributorsOnlyAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigEnableAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigEnableContributorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableContributorsOnlyAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigLockAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoCreateAuditEntry']?: Omit<ResolverInputTypes["RepoCreateAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoDestroyAuditEntry']?: Omit<ResolverInputTypes["RepoDestroyAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["RepoRemoveMemberAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ResolverInputTypes["RepoRemoveTopicAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepositoryVisibilityChangeDisableAuditEntry']?: Omit<ResolverInputTypes["RepositoryVisibilityChangeDisableAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on RepositoryVisibilityChangeEnableAuditEntry']?: Omit<ResolverInputTypes["RepositoryVisibilityChangeEnableAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on TeamAddMemberAuditEntry']?: Omit<ResolverInputTypes["TeamAddMemberAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamAddRepositoryAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on TeamChangeParentTeamAuditEntry']?: Omit<ResolverInputTypes["TeamChangeParentTeamAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on TeamRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["TeamRemoveMemberAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamRemoveRepositoryAuditEntry"],keyof ResolverInputTypes["OrganizationAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["OrganizationAuditEntryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["OrganizationAuditEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** A list of organizations managed by an enterprise. */
["OrganizationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["OrganizationEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Organization"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["OrganizationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["OrganizationEnterpriseOwnerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["OrganizationEnterpriseOwnerEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An enterprise owner in the context of an organization that is part of the enterprise. */
["OrganizationEnterpriseOwnerEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["User"],
	/** The role of the owner with respect to the organization. */
	organizationRole?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
["OrganizationIdentityProvider"]: AliasType<{
	/** The digest algorithm used to sign SAML requests for the Identity Provider. */
	digestMethod?:boolean | `@${string}`,
externalIdentities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter to external identities with the users login */
	login?: string | undefined | null,	/** Filter to external identities with valid org membership only */
	membersOnly?: boolean | undefined | null,	/** Filter to external identities with the users userName/NameID attribute */
	userName?: string | undefined | null},ResolverInputTypes["ExternalIdentityConnection"]],
	id?:boolean | `@${string}`,
	/** The x509 certificate used by the Identity Provider to sign assertions and responses. */
	idpCertificate?:boolean | `@${string}`,
	/** The Issuer Entity ID for the SAML Identity Provider */
	issuer?:boolean | `@${string}`,
	/** Organization this Identity Provider belongs to */
	organization?:ResolverInputTypes["Organization"],
	/** The signature algorithm used to sign SAML requests for the Identity Provider. */
	signatureMethod?:boolean | `@${string}`,
	/** The URL endpoint for the Identity Provider's SAML SSO. */
	ssoUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An Invitation for a user to an organization. */
["OrganizationInvitation"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The email address of the user invited to the organization. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The type of invitation that was sent (e.g. email, user). */
	invitationType?:boolean | `@${string}`,
	/** The user who was invited to the organization. */
	invitee?:ResolverInputTypes["User"],
	/** The user who created the invitation. */
	inviter?:ResolverInputTypes["User"],
	/** The organization the invite is for */
	organization?:ResolverInputTypes["Organization"],
	/** The user's pending role in the organization (e.g. member, owner). */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for OrganizationInvitation. */
["OrganizationInvitationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["OrganizationInvitationEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["OrganizationInvitation"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["OrganizationInvitationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["OrganizationInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible organization invitation roles. */
["OrganizationInvitationRole"]:OrganizationInvitationRole;
	/** The possible organization invitation types. */
["OrganizationInvitationType"]:OrganizationInvitationType;
	/** The connection type for User. */
["OrganizationMemberConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["OrganizationMemberEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user within an organization. */
["OrganizationMemberEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
	hasTwoFactorEnabled?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["User"],
	/** The role this user has in the organization. */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible roles within an organization for its members. */
["OrganizationMemberRole"]:OrganizationMemberRole;
	/** The possible values for the members can create repositories setting on an organization. */
["OrganizationMembersCanCreateRepositoriesSettingValue"]:OrganizationMembersCanCreateRepositoriesSettingValue;
	/** Used for argument of CreateProjectV2 mutation. */
["OrganizationOrUser"]: AliasType<{
	Organization?:ResolverInputTypes["Organization"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for organization connections. */
["OrganizationOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order organizations by. */
	field: ResolverInputTypes["OrganizationOrderField"]
};
	/** Properties by which organization connections can be ordered. */
["OrganizationOrderField"]:OrganizationOrderField;
	/** An organization teams hovercard context */
["OrganizationTeamsHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
relevantTeams?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["TeamConnection"]],
	/** The path for the full team list for this user */
	teamsResourcePath?:boolean | `@${string}`,
	/** The URL for the full team list for this user */
	teamsUrl?:boolean | `@${string}`,
	/** The total number of teams the user is on in the organization */
	totalTeamCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An organization list hovercard context */
["OrganizationsHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
relevantOrganizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["OrganizationConnection"]],
	/** The total number of organizations this user is in */
	totalOrganizationCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Information for an uploaded package. */
["Package"]: AliasType<{
	id?:boolean | `@${string}`,
	/** Find the latest version for the package. */
	latestVersion?:ResolverInputTypes["PackageVersion"],
	/** Identifies the name of the package. */
	name?:boolean | `@${string}`,
	/** Identifies the type of the package. */
	packageType?:boolean | `@${string}`,
	/** The repository this package belongs to. */
	repository?:ResolverInputTypes["Repository"],
	/** Statistics about package activity. */
	statistics?:ResolverInputTypes["PackageStatistics"],
version?: [{	/** The package version. */
	version: string},ResolverInputTypes["PackageVersion"]],
versions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering of the returned packages. */
	orderBy?: ResolverInputTypes["PackageVersionOrder"] | undefined | null},ResolverInputTypes["PackageVersionConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Package. */
["PackageConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PackageEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Package"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PackageEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Package"],
		__typename?: boolean | `@${string}`
}>;
	/** A file in a package version. */
["PackageFile"]: AliasType<{
	id?:boolean | `@${string}`,
	/** MD5 hash of the file. */
	md5?:boolean | `@${string}`,
	/** Name of the file. */
	name?:boolean | `@${string}`,
	/** The package version this file belongs to. */
	packageVersion?:ResolverInputTypes["PackageVersion"],
	/** SHA1 hash of the file. */
	sha1?:boolean | `@${string}`,
	/** SHA256 hash of the file. */
	sha256?:boolean | `@${string}`,
	/** Size of the file in bytes. */
	size?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** URL to download the asset. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PackageFile. */
["PackageFileConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PackageFileEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PackageFile"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PackageFileEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PackageFile"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of package files can be ordered upon return. */
["PackageFileOrder"]: {
	/** The direction in which to order package files by the specified field. */
	direction?: ResolverInputTypes["OrderDirection"] | undefined | null,
	/** The field in which to order package files by. */
	field?: ResolverInputTypes["PackageFileOrderField"] | undefined | null
};
	/** Properties by which package file connections can be ordered. */
["PackageFileOrderField"]:PackageFileOrderField;
	/** Ways in which lists of packages can be ordered upon return. */
["PackageOrder"]: {
	/** The direction in which to order packages by the specified field. */
	direction?: ResolverInputTypes["OrderDirection"] | undefined | null,
	/** The field in which to order packages by. */
	field?: ResolverInputTypes["PackageOrderField"] | undefined | null
};
	/** Properties by which package connections can be ordered. */
["PackageOrderField"]:PackageOrderField;
	/** Represents an owner of a package. */
["PackageOwner"]:AliasType<{
		id?:boolean | `@${string}`,
packages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Find packages by their names. */
	names?: Array<string | undefined | null> | undefined | null,	/** Ordering of the returned packages. */
	orderBy?: ResolverInputTypes["PackageOrder"] | undefined | null,	/** Filter registry package by type. */
	packageType?: ResolverInputTypes["PackageType"] | undefined | null,	/** Find packages in a repository by ID. */
	repositoryId?: string | undefined | null},ResolverInputTypes["PackageConnection"]];
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["PackageOwner"]>;
		['...on Repository']?: Omit<ResolverInputTypes["Repository"],keyof ResolverInputTypes["PackageOwner"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["PackageOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a object that contains package activity statistics such as downloads. */
["PackageStatistics"]: AliasType<{
	/** Number of times the package was downloaded since it was created. */
	downloadsTotalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A version tag contains the mapping between a tag name and a version. */
["PackageTag"]: AliasType<{
	id?:boolean | `@${string}`,
	/** Identifies the tag name of the version. */
	name?:boolean | `@${string}`,
	/** Version that the tag is associated with. */
	version?:ResolverInputTypes["PackageVersion"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible types of a package. */
["PackageType"]:PackageType;
	/** Information about a specific package version. */
["PackageVersion"]: AliasType<{
files?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering of the returned package files. */
	orderBy?: ResolverInputTypes["PackageFileOrder"] | undefined | null},ResolverInputTypes["PackageFileConnection"]],
	id?:boolean | `@${string}`,
	/** The package associated with this version. */
	package?:ResolverInputTypes["Package"],
	/** The platform this version was built for. */
	platform?:boolean | `@${string}`,
	/** Whether or not this version is a pre-release. */
	preRelease?:boolean | `@${string}`,
	/** The README of this package version. */
	readme?:boolean | `@${string}`,
	/** The release associated with this package version. */
	release?:ResolverInputTypes["Release"],
	/** Statistics about package activity. */
	statistics?:ResolverInputTypes["PackageVersionStatistics"],
	/** The package version summary. */
	summary?:boolean | `@${string}`,
	/** The version string. */
	version?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PackageVersion. */
["PackageVersionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PackageVersionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PackageVersion"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PackageVersionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PackageVersion"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of package versions can be ordered upon return. */
["PackageVersionOrder"]: {
	/** The direction in which to order package versions by the specified field. */
	direction?: ResolverInputTypes["OrderDirection"] | undefined | null,
	/** The field in which to order package versions by. */
	field?: ResolverInputTypes["PackageVersionOrderField"] | undefined | null
};
	/** Properties by which package version connections can be ordered. */
["PackageVersionOrderField"]:PackageVersionOrderField;
	/** Represents a object that contains package version activity statistics such as downloads. */
["PackageVersionStatistics"]: AliasType<{
	/** Number of times the package was downloaded since it was created. */
	downloadsTotalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Information about pagination in a connection. */
["PageInfo"]: AliasType<{
	/** When paginating forwards, the cursor to continue. */
	endCursor?:boolean | `@${string}`,
	/** When paginating forwards, are there more items? */
	hasNextPage?:boolean | `@${string}`,
	/** When paginating backwards, are there more items? */
	hasPreviousPage?:boolean | `@${string}`,
	/** When paginating backwards, the cursor to continue. */
	startCursor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible types of patch statuses. */
["PatchStatus"]:PatchStatus;
	/** Types that can grant permissions on a repository to a user */
["PermissionGranter"]: AliasType<{
	Organization?:ResolverInputTypes["Organization"],
	Repository?:ResolverInputTypes["Repository"],
	Team?:ResolverInputTypes["Team"],
		__typename?: boolean | `@${string}`
}>;
	/** A level of permission and source for a user's access to a repository. */
["PermissionSource"]: AliasType<{
	/** The organization the repository belongs to. */
	organization?:ResolverInputTypes["Organization"],
	/** The level of access this source has granted to the user. */
	permission?:boolean | `@${string}`,
	/** The source of this permission. */
	source?:ResolverInputTypes["PermissionGranter"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of PinIssue */
["PinIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the issue to be pinned */
	issueId: string
};
	/** Autogenerated return type of PinIssue */
["PinIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was pinned */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be pinned to a profile page. */
["PinnableItem"]: AliasType<{
	Gist?:ResolverInputTypes["Gist"],
	Repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PinnableItem. */
["PinnableItemConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PinnableItemEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PinnableItem"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PinnableItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PinnableItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents items that can be pinned to a profile page or dashboard. */
["PinnableItemType"]:PinnableItemType;
	/** A Pinned Discussion is a discussion pinned to a repository's index page. */
["PinnedDiscussion"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The discussion that was pinned. */
	discussion?:ResolverInputTypes["Discussion"],
	/** Color stops of the chosen gradient */
	gradientStopColors?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Background texture pattern */
	pattern?:boolean | `@${string}`,
	/** The actor that pinned this discussion. */
	pinnedBy?:ResolverInputTypes["Actor"],
	/** Preconfigured background gradient option */
	preconfiguredGradient?:boolean | `@${string}`,
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PinnedDiscussion. */
["PinnedDiscussionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PinnedDiscussionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PinnedDiscussion"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PinnedDiscussionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PinnedDiscussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
["PinnedDiscussionGradient"]:PinnedDiscussionGradient;
	/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
["PinnedDiscussionPattern"]:PinnedDiscussionPattern;
	/** Represents a 'pinned' event on a given issue or pull request. */
["PinnedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the issue associated with the event. */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** A Pinned Issue is a issue pinned to a repository's index page. */
["PinnedIssue"]: AliasType<{
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The issue that was pinned. */
	issue?:ResolverInputTypes["Issue"],
	/** The actor that pinned this issue. */
	pinnedBy?:ResolverInputTypes["Actor"],
	/** The repository that this issue was pinned to. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PinnedIssue. */
["PinnedIssueConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PinnedIssueEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PinnedIssue"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PinnedIssueEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PinnedIssue"],
		__typename?: boolean | `@${string}`
}>;
	/** An ISO-8601 encoded UTC date string with millisecond precision. */
["PreciseDateTime"]:unknown;
	/** Audit log entry for a private_repository_forking.disable event. */
["PrivateRepositoryForkingDisableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a private_repository_forking.enable event. */
["PrivateRepositoryForkingEnableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own. */
["ProfileItemShowcase"]: AliasType<{
	/** Whether or not the owner has pinned any repositories or gists. */
	hasPinnedItems?:boolean | `@${string}`,
items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PinnableItemConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Represents any entity on GitHub that has a profile page. */
["ProfileOwner"]:AliasType<{
	anyPinnableItems?: [{	/** Filter to only a particular kind of pinnable item. */
	type?: ResolverInputTypes["PinnableItemType"] | undefined | null},boolean | `@${string}`],
	/** The public profile email. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase?:ResolverInputTypes["ProfileItemShowcase"],
	/** The public profile location. */
	location?:boolean | `@${string}`,
	/** The username used to login. */
	login?:boolean | `@${string}`,
	/** The public profile name. */
	name?:boolean | `@${string}`,
pinnableItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter the types of pinnable items that are returned. */
	types?: Array<ResolverInputTypes["PinnableItemType"]> | undefined | null},ResolverInputTypes["PinnableItemConnection"]],
pinnedItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter the types of pinned items that are returned. */
	types?: Array<ResolverInputTypes["PinnableItemType"]> | undefined | null},ResolverInputTypes["PinnableItemConnection"]],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining?:boolean | `@${string}`,
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems?:boolean | `@${string}`,
	/** The public profile website URL. */
	websiteUrl?:boolean | `@${string}`;
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["ProfileOwner"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["ProfileOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Projects manage issues, pull requests and notes within a project owner. */
["Project"]: AliasType<{
	/** The project's description body. */
	body?:boolean | `@${string}`,
	/** The projects description body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
columns?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectColumnConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who originally created the project. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project's name. */
	name?:boolean | `@${string}`,
	/** The project's number. */
	number?:boolean | `@${string}`,
	/** The project's owner. Currently limited to repositories, organizations, and users. */
	owner?:ResolverInputTypes["ProjectOwner"],
pendingCards?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** A list of archived states to filter the cards by */
	archivedStates?: Array<ResolverInputTypes["ProjectCardArchivedState"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectCardConnection"]],
	/** Project progress details. */
	progress?:ResolverInputTypes["ProjectProgress"],
	/** The HTTP path for this project */
	resourcePath?:boolean | `@${string}`,
	/** Whether the project is open or closed. */
	state?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this project */
	url?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A card in a project. */
["ProjectCard"]: AliasType<{
	/** The project column this card is associated under. A card may only belong to one
project column at a time. The column field will be null if the card is created
in a pending state and has yet to be associated with a column. Once cards are
associated with a column, they will not become pending in the future. */
	column?:ResolverInputTypes["ProjectColumn"],
	/** The card content item */
	content?:ResolverInputTypes["ProjectCardItem"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created this card */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the card is archived */
	isArchived?:boolean | `@${string}`,
	/** The card note */
	note?:boolean | `@${string}`,
	/** The project that contains this card. */
	project?:ResolverInputTypes["Project"],
	/** The HTTP path for this card */
	resourcePath?:boolean | `@${string}`,
	/** The state of ProjectCard */
	state?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this card */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible archived states of a project card. */
["ProjectCardArchivedState"]:ProjectCardArchivedState;
	/** The connection type for ProjectCard. */
["ProjectCardConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectCardEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectCard"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectCardEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectCard"],
		__typename?: boolean | `@${string}`
}>;
	/** An issue or PR and its owning repository to be used in a project card. */
["ProjectCardImport"]: {
	/** The issue or pull request number. */
	number: number,
	/** Repository name with owner (owner/repository). */
	repository: string
};
	/** Types that can be inside Project Cards. */
["ProjectCardItem"]: AliasType<{
	Issue?:ResolverInputTypes["Issue"],
	PullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Various content states of a ProjectCard */
["ProjectCardState"]:ProjectCardState;
	/** A column inside a project. */
["ProjectColumn"]: AliasType<{
cards?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** A list of archived states to filter the cards by */
	archivedStates?: Array<ResolverInputTypes["ProjectCardArchivedState"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectCardConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project column's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this column. */
	project?:ResolverInputTypes["Project"],
	/** The semantic purpose of the column */
	purpose?:boolean | `@${string}`,
	/** The HTTP path for this project column */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this project column */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectColumn. */
["ProjectColumnConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectColumnEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectColumn"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectColumnEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectColumn"],
		__typename?: boolean | `@${string}`
}>;
	/** A project column and a list of its issues and PRs. */
["ProjectColumnImport"]: {
	/** The name of the column. */
	columnName: string,
	/** A list of issues and pull requests in the column. */
	issues?: Array<ResolverInputTypes["ProjectCardImport"]> | undefined | null,
	/** The position of the column, starting from 0. */
	position: number
};
	/** The semantic purpose of the column - todo, in progress, or done. */
["ProjectColumnPurpose"]:ProjectColumnPurpose;
	/** A list of projects associated with the owner. */
["ProjectConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Project"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** The type of a project item. */
["ProjectItemType"]:ProjectItemType;
	/** New projects that manage issues, pull requests and drafts using tables and boards. */
["ProjectNext"]: AliasType<{
	/** Returns true if the project is closed. */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who originally created the project. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project's description. */
	description?:boolean | `@${string}`,
fields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectNextFieldConnection"]],
	id?:boolean | `@${string}`,
items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectNextItemConnection"]],
	/** The project's number. */
	number?:boolean | `@${string}`,
	/** The project's owner. Currently limited to organizations and users. */
	owner?:ResolverInputTypes["ProjectNextOwner"],
	/** Returns true if the project is public. */
	public?:boolean | `@${string}`,
repositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["RepositoryConnection"]],
	/** The HTTP path for this project */
	resourcePath?:boolean | `@${string}`,
	/** The project's short description. */
	shortDescription?:boolean | `@${string}`,
	/** The project's name. */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this project */
	url?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
views?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectViewConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectNext. */
["ProjectNextConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectNextEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectNext"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectNextEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectNext"],
		__typename?: boolean | `@${string}`
}>;
	/** A field inside a project. */
["ProjectNextField"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ResolverInputTypes["ProjectNext"],
	/** The field's settings. */
	settings?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Common fields across different field types */
["ProjectNextFieldCommon"]:AliasType<{
		/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ResolverInputTypes["ProjectNext"],
	/** The field's settings. */
	settings?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`;
		['...on ProjectNextField']?: Omit<ResolverInputTypes["ProjectNextField"],keyof ResolverInputTypes["ProjectNextFieldCommon"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectNextField. */
["ProjectNextFieldConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectNextFieldEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectNextField"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectNextFieldEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectNextField"],
		__typename?: boolean | `@${string}`
}>;
	/** The type of a project next field. */
["ProjectNextFieldType"]:ProjectNextFieldType;
	/** An item within a new Project. */
["ProjectNextItem"]: AliasType<{
	/** The content of the referenced draft issue, issue, or pull request */
	content?:ResolverInputTypes["ProjectNextItemContent"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
fieldValues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectNextItemFieldValueConnection"]],
	id?:boolean | `@${string}`,
	/** Whether the item is archived. */
	isArchived?:boolean | `@${string}`,
	/** The project that contains this item. */
	project?:ResolverInputTypes["ProjectNext"],
	/** The title of the item */
	title?:boolean | `@${string}`,
	/** The type of the item. */
	type?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectNextItem. */
["ProjectNextItemConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectNextItemEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectNextItem"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be inside Project Items. */
["ProjectNextItemContent"]: AliasType<{
	DraftIssue?:ResolverInputTypes["DraftIssue"],
	Issue?:ResolverInputTypes["Issue"],
	PullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectNextItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectNextItem"],
		__typename?: boolean | `@${string}`
}>;
	/** An value of a field in an item of a new Project. */
["ProjectNextItemFieldValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field that contains this value. */
	projectField?:ResolverInputTypes["ProjectNextField"],
	/** The project item that contains this value. */
	projectItem?:ResolverInputTypes["ProjectNextItem"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The value of a field */
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectNextItemFieldValue. */
["ProjectNextItemFieldValueConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectNextItemFieldValueEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectNextItemFieldValue"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectNextItemFieldValueEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectNextItemFieldValue"],
		__typename?: boolean | `@${string}`
}>;
	/** Properties by which the return project can be ordered. */
["ProjectNextOrderField"]:ProjectNextOrderField;
	/** Represents an owner of a project (beta). */
["ProjectNextOwner"]:AliasType<{
		id?:boolean | `@${string}`,
projectNext?: [{	/** The project (beta) number. */
	number: number},ResolverInputTypes["ProjectNext"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null,	/** How to order the returned projects (beta). */
	sortBy?: ResolverInputTypes["ProjectNextOrderField"] | undefined | null},ResolverInputTypes["ProjectNextConnection"]];
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["ProjectNextOwner"]>;
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["ProjectNextOwner"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["ProjectNextOwner"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["ProjectNextOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of projects can be ordered upon return. */
["ProjectOrder"]: {
	/** The direction in which to order projects by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order projects by. */
	field: ResolverInputTypes["ProjectOrderField"]
};
	/** Properties by which project connections can be ordered. */
["ProjectOrderField"]:ProjectOrderField;
	/** Represents an owner of a Project. */
["ProjectOwner"]:AliasType<{
		id?:boolean | `@${string}`,
project?: [{	/** The project number to find. */
	number: number},ResolverInputTypes["Project"]],
projects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for projects returned from the connection */
	orderBy?: ResolverInputTypes["ProjectOrder"] | undefined | null,	/** Query to search projects by, currently only searching by name. */
	search?: string | undefined | null,	/** A list of states to filter the projects by. */
	states?: Array<ResolverInputTypes["ProjectState"]> | undefined | null},ResolverInputTypes["ProjectConnection"]],
	/** The HTTP path listing owners projects */
	projectsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing owners projects */
	projectsUrl?:boolean | `@${string}`,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects?:boolean | `@${string}`;
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["ProjectOwner"]>;
		['...on Repository']?: Omit<ResolverInputTypes["Repository"],keyof ResolverInputTypes["ProjectOwner"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["ProjectOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Project progress stats. */
["ProjectProgress"]: AliasType<{
	/** The number of done cards. */
	doneCount?:boolean | `@${string}`,
	/** The percentage of done cards. */
	donePercentage?:boolean | `@${string}`,
	/** Whether progress tracking is enabled and cards with purpose exist for this project */
	enabled?:boolean | `@${string}`,
	/** The number of in-progress cards. */
	inProgressCount?:boolean | `@${string}`,
	/** The percentage of in-progress cards. */
	inProgressPercentage?:boolean | `@${string}`,
	/** The number of to do cards. */
	todoCount?:boolean | `@${string}`,
	/** The percentage of to do cards. */
	todoPercentage?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** State of the project; either 'open' or 'closed' */
["ProjectState"]:ProjectState;
	/** GitHub-provided templates for Projects */
["ProjectTemplate"]:ProjectTemplate;
	/** New projects that manage issues, pull requests and drafts using tables and boards. */
["ProjectV2"]: AliasType<{
	/** Returns true if the project is closed. */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who originally created the project. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
field?: [{	/** The name of the field */
	name: string},ResolverInputTypes["ProjectV2FieldConfiguration"]],
fields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for project v2 fields returned from the connection */
	orderBy?: ResolverInputTypes["ProjectV2FieldOrder"] | undefined | null},ResolverInputTypes["ProjectV2FieldConfigurationConnection"]],
	id?:boolean | `@${string}`,
items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for project v2 items returned from the connection */
	orderBy?: ResolverInputTypes["ProjectV2ItemOrder"] | undefined | null},ResolverInputTypes["ProjectV2ItemConnection"]],
	/** The project's number. */
	number?:boolean | `@${string}`,
	/** The project's owner. Currently limited to organizations and users. */
	owner?:ResolverInputTypes["ProjectV2Owner"],
	/** Returns true if the project is public. */
	public?:boolean | `@${string}`,
	/** The project's readme. */
	readme?:boolean | `@${string}`,
repositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories returned from the connection */
	orderBy?: ResolverInputTypes["RepositoryOrder"] | undefined | null},ResolverInputTypes["RepositoryConnection"]],
	/** The HTTP path for this project */
	resourcePath?:boolean | `@${string}`,
	/** The project's short description. */
	shortDescription?:boolean | `@${string}`,
teams?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for teams returned from this connection. */
	orderBy?: ResolverInputTypes["TeamOrder"] | undefined | null},ResolverInputTypes["TeamConnection"]],
	/** The project's name. */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this project */
	url?:boolean | `@${string}`,
view?: [{	/** The number of a view belonging to the project */
	number: number},ResolverInputTypes["ProjectV2View"]],
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
views?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for project v2 views returned from the connection */
	orderBy?: ResolverInputTypes["ProjectV2ViewOrder"] | undefined | null},ResolverInputTypes["ProjectV2ViewConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2. */
["ProjectV2Connection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectV2Edge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectV2"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2Edge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectV2"],
		__typename?: boolean | `@${string}`
}>;
	/** A field inside a project. */
["ProjectV2Field"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ResolverInputTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Common fields across different project field types */
["ProjectV2FieldCommon"]:AliasType<{
		/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ResolverInputTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`;
		['...on ProjectV2Field']?: Omit<ResolverInputTypes["ProjectV2Field"],keyof ResolverInputTypes["ProjectV2FieldCommon"]>;
		['...on ProjectV2IterationField']?: Omit<ResolverInputTypes["ProjectV2IterationField"],keyof ResolverInputTypes["ProjectV2FieldCommon"]>;
		['...on ProjectV2SingleSelectField']?: Omit<ResolverInputTypes["ProjectV2SingleSelectField"],keyof ResolverInputTypes["ProjectV2FieldCommon"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Configurations for project fields. */
["ProjectV2FieldConfiguration"]: AliasType<{
	ProjectV2Field?:ResolverInputTypes["ProjectV2Field"],
	ProjectV2IterationField?:ResolverInputTypes["ProjectV2IterationField"],
	ProjectV2SingleSelectField?:ResolverInputTypes["ProjectV2SingleSelectField"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2FieldConfiguration. */
["ProjectV2FieldConfigurationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectV2FieldConfigurationEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectV2FieldConfiguration"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2FieldConfigurationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectV2FieldConfiguration"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2Field. */
["ProjectV2FieldConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectV2FieldEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectV2Field"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2FieldEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectV2Field"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for project v2 field connections */
["ProjectV2FieldOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order the project v2 fields by. */
	field: ResolverInputTypes["ProjectV2FieldOrderField"]
};
	/** Properties by which project v2 field connections can be ordered. */
["ProjectV2FieldOrderField"]:ProjectV2FieldOrderField;
	/** The type of a project field. */
["ProjectV2FieldType"]:ProjectV2FieldType;
	/** The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time. */
["ProjectV2FieldValue"]: {
	/** The ISO 8601 date to set on the field. */
	date?: ResolverInputTypes["Date"] | undefined | null,
	/** The id of the iteration to set on the field. */
	iterationId?: string | undefined | null,
	/** The number to set on the field. */
	number?: number | undefined | null,
	/** The id of the single select option to set on the field. */
	singleSelectOptionId?: string | undefined | null,
	/** The text to set on the field. */
	text?: string | undefined | null
};
	/** An item within a Project. */
["ProjectV2Item"]: AliasType<{
	/** The content of the referenced draft issue, issue, or pull request */
	content?:ResolverInputTypes["ProjectV2ItemContent"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
fieldValueByName?: [{	/** The name of the field to return the field value of */
	name: string},ResolverInputTypes["ProjectV2ItemFieldValue"]],
fieldValues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for project v2 item field values returned from the connection */
	orderBy?: ResolverInputTypes["ProjectV2ItemFieldValueOrder"] | undefined | null},ResolverInputTypes["ProjectV2ItemFieldValueConnection"]],
	id?:boolean | `@${string}`,
	/** Whether the item is archived. */
	isArchived?:boolean | `@${string}`,
	/** The project that contains this item. */
	project?:ResolverInputTypes["ProjectV2"],
	/** The type of the item. */
	type?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2Item. */
["ProjectV2ItemConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectV2ItemEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectV2Item"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be inside Project Items. */
["ProjectV2ItemContent"]: AliasType<{
	DraftIssue?:ResolverInputTypes["DraftIssue"],
	Issue?:ResolverInputTypes["Issue"],
	PullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2ItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a date field in a Project item. */
["ProjectV2ItemFieldDateValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** Date value for the field */
	date?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ResolverInputTypes["ProjectV2Item"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of an iteration field in a Project item. */
["ProjectV2ItemFieldIterationValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The duration of the iteration in days. */
	duration?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ResolverInputTypes["ProjectV2Item"],
	/** The ID of the iteration. */
	iterationId?:boolean | `@${string}`,
	/** The start date of the iteration. */
	startDate?:boolean | `@${string}`,
	/** The title of the iteration. */
	title?:boolean | `@${string}`,
	/** The title of the iteration, with HTML. */
	titleHTML?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of the labels field in a Project item. */
["ProjectV2ItemFieldLabelValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["LabelConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a milestone field in a Project item. */
["ProjectV2ItemFieldMilestoneValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
	/** Milestone value of a field */
	milestone?:ResolverInputTypes["Milestone"],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a number field in a Project item. */
["ProjectV2ItemFieldNumberValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ResolverInputTypes["ProjectV2Item"],
	/** Number as a float(8) */
	number?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of a pull request field in a Project item. */
["ProjectV2ItemFieldPullRequestValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pull requests. */
	orderBy?: ResolverInputTypes["PullRequestOrder"] | undefined | null},ResolverInputTypes["PullRequestConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a repository field in a Project item. */
["ProjectV2ItemFieldRepositoryValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
	/** The repository for this field. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a reviewers field in a Project item. */
["ProjectV2ItemFieldReviewerValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
reviewers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["RequestedReviewerConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The value of a single select field in a Project item. */
["ProjectV2ItemFieldSingleSelectValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ResolverInputTypes["ProjectV2Item"],
	/** The name of the selected single select option. */
	name?:boolean | `@${string}`,
	/** The html name of the selected single select option. */
	nameHTML?:boolean | `@${string}`,
	/** The id of the selected single select option. */
	optionId?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of a text field in a Project item. */
["ProjectV2ItemFieldTextValue"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ResolverInputTypes["ProjectV2Item"],
	/** Text value of a field */
	text?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The value of a user field in a Project item. */
["ProjectV2ItemFieldUserValue"]: AliasType<{
	/** The field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
users?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Project field values */
["ProjectV2ItemFieldValue"]: AliasType<{
	ProjectV2ItemFieldDateValue?:ResolverInputTypes["ProjectV2ItemFieldDateValue"],
	ProjectV2ItemFieldIterationValue?:ResolverInputTypes["ProjectV2ItemFieldIterationValue"],
	ProjectV2ItemFieldLabelValue?:ResolverInputTypes["ProjectV2ItemFieldLabelValue"],
	ProjectV2ItemFieldMilestoneValue?:ResolverInputTypes["ProjectV2ItemFieldMilestoneValue"],
	ProjectV2ItemFieldNumberValue?:ResolverInputTypes["ProjectV2ItemFieldNumberValue"],
	ProjectV2ItemFieldPullRequestValue?:ResolverInputTypes["ProjectV2ItemFieldPullRequestValue"],
	ProjectV2ItemFieldRepositoryValue?:ResolverInputTypes["ProjectV2ItemFieldRepositoryValue"],
	ProjectV2ItemFieldReviewerValue?:ResolverInputTypes["ProjectV2ItemFieldReviewerValue"],
	ProjectV2ItemFieldSingleSelectValue?:ResolverInputTypes["ProjectV2ItemFieldSingleSelectValue"],
	ProjectV2ItemFieldTextValue?:ResolverInputTypes["ProjectV2ItemFieldTextValue"],
	ProjectV2ItemFieldUserValue?:ResolverInputTypes["ProjectV2ItemFieldUserValue"],
		__typename?: boolean | `@${string}`
}>;
	/** Common fields across different project field value types */
["ProjectV2ItemFieldValueCommon"]:AliasType<{
		/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created the item. */
	creator?:ResolverInputTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project field that contains this value. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
	id?:boolean | `@${string}`,
	/** The project item that contains this value. */
	item?:ResolverInputTypes["ProjectV2Item"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`;
		['...on ProjectV2ItemFieldDateValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldDateValue"],keyof ResolverInputTypes["ProjectV2ItemFieldValueCommon"]>;
		['...on ProjectV2ItemFieldIterationValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldIterationValue"],keyof ResolverInputTypes["ProjectV2ItemFieldValueCommon"]>;
		['...on ProjectV2ItemFieldNumberValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldNumberValue"],keyof ResolverInputTypes["ProjectV2ItemFieldValueCommon"]>;
		['...on ProjectV2ItemFieldSingleSelectValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldSingleSelectValue"],keyof ResolverInputTypes["ProjectV2ItemFieldValueCommon"]>;
		['...on ProjectV2ItemFieldTextValue']?: Omit<ResolverInputTypes["ProjectV2ItemFieldTextValue"],keyof ResolverInputTypes["ProjectV2ItemFieldValueCommon"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2ItemFieldValue. */
["ProjectV2ItemFieldValueConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectV2ItemFieldValueEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectV2ItemFieldValue"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2ItemFieldValueEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectV2ItemFieldValue"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for project v2 item field value connections */
["ProjectV2ItemFieldValueOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order the project v2 item field values by. */
	field: ResolverInputTypes["ProjectV2ItemFieldValueOrderField"]
};
	/** Properties by which project v2 item field value connections can be ordered. */
["ProjectV2ItemFieldValueOrderField"]:ProjectV2ItemFieldValueOrderField;
	/** Ordering options for project v2 item connections */
["ProjectV2ItemOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order the project v2 items by. */
	field: ResolverInputTypes["ProjectV2ItemOrderField"]
};
	/** Properties by which project v2 item connections can be ordered. */
["ProjectV2ItemOrderField"]:ProjectV2ItemOrderField;
	/** The type of a project item. */
["ProjectV2ItemType"]:ProjectV2ItemType;
	/** An iteration field inside a project. */
["ProjectV2IterationField"]: AliasType<{
	/** Iteration configuration settings */
	configuration?:ResolverInputTypes["ProjectV2IterationFieldConfiguration"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** The project that contains this field. */
	project?:ResolverInputTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Iteration field configuration for a project. */
["ProjectV2IterationFieldConfiguration"]: AliasType<{
	/** The iteration's completed iterations */
	completedIterations?:ResolverInputTypes["ProjectV2IterationFieldIteration"],
	/** The iteration's duration in days */
	duration?:boolean | `@${string}`,
	/** The iteration's iterations */
	iterations?:ResolverInputTypes["ProjectV2IterationFieldIteration"],
	/** The iteration's start day of the week */
	startDay?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Iteration field iteration settings for a project. */
["ProjectV2IterationFieldIteration"]: AliasType<{
	/** The iteration's duration in days */
	duration?:boolean | `@${string}`,
	/** The iteration's ID. */
	id?:boolean | `@${string}`,
	/** The iteration's start date */
	startDate?:boolean | `@${string}`,
	/** The iteration's title. */
	title?:boolean | `@${string}`,
	/** The iteration's html title. */
	titleHTML?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of projects can be ordered upon return. */
["ProjectV2Order"]: {
	/** The direction in which to order projects by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order projects by. */
	field: ResolverInputTypes["ProjectV2OrderField"]
};
	/** Properties by which projects can be ordered. */
["ProjectV2OrderField"]:ProjectV2OrderField;
	/** Represents an owner of a project (beta). */
["ProjectV2Owner"]:AliasType<{
		id?:boolean | `@${string}`,
projectV2?: [{	/** The project number. */
	number: number},ResolverInputTypes["ProjectV2"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** How to order the returned projects. */
	orderBy?: ResolverInputTypes["ProjectV2Order"] | undefined | null,	/** A project to search for under the the owner. */
	query?: string | undefined | null},ResolverInputTypes["ProjectV2Connection"]];
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["ProjectV2Owner"]>;
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["ProjectV2Owner"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["ProjectV2Owner"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["ProjectV2Owner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Recent projects for the owner. */
["ProjectV2Recent"]:AliasType<{
	recentProjects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2Connection"]];
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["ProjectV2Recent"]>;
		['...on Repository']?: Omit<ResolverInputTypes["Repository"],keyof ResolverInputTypes["ProjectV2Recent"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["ProjectV2Recent"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A single select field inside a project. */
["ProjectV2SingleSelectField"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The field's type. */
	dataType?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project field's name. */
	name?:boolean | `@${string}`,
	/** Options for the single select field */
	options?:ResolverInputTypes["ProjectV2SingleSelectFieldOption"],
	/** The project that contains this field. */
	project?:ResolverInputTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Single select field option for a configuration for a project. */
["ProjectV2SingleSelectFieldOption"]: AliasType<{
	/** The option's ID. */
	id?:boolean | `@${string}`,
	/** The option's name. */
	name?:boolean | `@${string}`,
	/** The option's html name. */
	nameHTML?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a sort by field and direction. */
["ProjectV2SortBy"]: AliasType<{
	/** The direction of the sorting. Possible values are ASC and DESC. */
	direction?:boolean | `@${string}`,
	/** The field by which items are sorted. */
	field?:ResolverInputTypes["ProjectV2Field"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2SortBy. */
["ProjectV2SortByConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectV2SortByEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectV2SortBy"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2SortByEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectV2SortBy"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a sort by field and direction. */
["ProjectV2SortByField"]: AliasType<{
	/** The direction of the sorting. Possible values are ASC and DESC. */
	direction?:boolean | `@${string}`,
	/** The field by which items are sorted. */
	field?:ResolverInputTypes["ProjectV2FieldConfiguration"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2SortByField. */
["ProjectV2SortByFieldConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectV2SortByFieldEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectV2SortByField"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2SortByFieldEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectV2SortByField"],
		__typename?: boolean | `@${string}`
}>;
	/** A view within a ProjectV2. */
["ProjectV2View"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
fields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ResolverInputTypes["ProjectV2FieldOrder"] | undefined | null},ResolverInputTypes["ProjectV2FieldConfigurationConnection"]],
	/** The project view's filter. */
	filter?:boolean | `@${string}`,
groupBy?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ResolverInputTypes["ProjectV2FieldOrder"] | undefined | null},ResolverInputTypes["ProjectV2FieldConnection"]],
groupByFields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ResolverInputTypes["ProjectV2FieldOrder"] | undefined | null},ResolverInputTypes["ProjectV2FieldConfigurationConnection"]],
	id?:boolean | `@${string}`,
	/** The project view's layout. */
	layout?:boolean | `@${string}`,
	/** The project view's name. */
	name?:boolean | `@${string}`,
	/** The project view's number. */
	number?:boolean | `@${string}`,
	/** The project that contains this view. */
	project?:ResolverInputTypes["ProjectV2"],
sortBy?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2SortByConnection"]],
sortByFields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2SortByFieldConnection"]],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
verticalGroupBy?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ResolverInputTypes["ProjectV2FieldOrder"] | undefined | null},ResolverInputTypes["ProjectV2FieldConnection"]],
verticalGroupByFields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ResolverInputTypes["ProjectV2FieldOrder"] | undefined | null},ResolverInputTypes["ProjectV2FieldConfigurationConnection"]],
visibleFields?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the project v2 fields returned from the connection. */
	orderBy?: ResolverInputTypes["ProjectV2FieldOrder"] | undefined | null},ResolverInputTypes["ProjectV2FieldConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectV2View. */
["ProjectV2ViewConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectV2ViewEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectV2View"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectV2ViewEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectV2View"],
		__typename?: boolean | `@${string}`
}>;
	/** The layout of a project v2 view. */
["ProjectV2ViewLayout"]:ProjectV2ViewLayout;
	/** Ordering options for project v2 view connections */
["ProjectV2ViewOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order the project v2 views by. */
	field: ResolverInputTypes["ProjectV2ViewOrderField"]
};
	/** Properties by which project v2 view connections can be ordered. */
["ProjectV2ViewOrderField"]:ProjectV2ViewOrderField;
	/** A view within a Project. */
["ProjectView"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The project view's filter. */
	filter?:boolean | `@${string}`,
	/** The view's group-by field. */
	groupBy?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The project view's layout. */
	layout?:boolean | `@${string}`,
	/** The project view's name. */
	name?:boolean | `@${string}`,
	/** The project view's number. */
	number?:boolean | `@${string}`,
	/** The project that contains this view. */
	project?:ResolverInputTypes["ProjectNext"],
	/** The view's sort-by config. */
	sortBy?:ResolverInputTypes["SortBy"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The view's vertical-group-by field. */
	verticalGroupBy?:boolean | `@${string}`,
	/** The view's visible fields. */
	visibleFields?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ProjectView. */
["ProjectViewConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ProjectViewEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ProjectView"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ProjectViewEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ProjectView"],
		__typename?: boolean | `@${string}`
}>;
	/** The layout of a project view. */
["ProjectViewLayout"]:ProjectViewLayout;
	/** A user's public key. */
["PublicKey"]: AliasType<{
	/** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
	accessedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the key was created. Keys created before
March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
	createdAt?:boolean | `@${string}`,
	/** The fingerprint for this PublicKey. */
	fingerprint?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
	isReadOnly?:boolean | `@${string}`,
	/** The public key string. */
	key?:boolean | `@${string}`,
	/** Identifies the date and time when the key was updated. Keys created before
March 5th, 2014 may have inaccurate values. Values will be null for keys not
owned by the user. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PublicKey. */
["PublicKeyConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PublicKeyEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PublicKey"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PublicKeyEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PublicKey"],
		__typename?: boolean | `@${string}`
}>;
	/** A repository pull request. */
["PullRequest"]: AliasType<{
	/** Reason that the conversation was locked. */
	activeLockReason?:boolean | `@${string}`,
	/** The number of additions in this pull request. */
	additions?:boolean | `@${string}`,
assignees?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** Returns the auto-merge request object if one exists for this pull request. */
	autoMergeRequest?:ResolverInputTypes["AutoMergeRequest"],
	/** Identifies the base Ref associated with the pull request. */
	baseRef?:ResolverInputTypes["Ref"],
	/** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
	baseRefName?:boolean | `@${string}`,
	/** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
	baseRefOid?:boolean | `@${string}`,
	/** The repository associated with this pull request's base Ref. */
	baseRepository?:ResolverInputTypes["Repository"],
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Whether or not the pull request is rebaseable. */
	canBeRebased?:boolean | `@${string}`,
	/** The number of changed files in this pull request. */
	changedFiles?:boolean | `@${string}`,
	/** The HTTP path for the checks of this pull request. */
	checksResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the checks of this pull request. */
	checksUrl?:boolean | `@${string}`,
	/** `true` if the pull request is closed */
	closed?:boolean | `@${string}`,
	/** Identifies the date and time when the object was closed. */
	closedAt?:boolean | `@${string}`,
closingIssuesReferences?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for issues returned from the connection */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** Return only manually linked Issues */
	userLinkedOnly?: boolean | undefined | null},ResolverInputTypes["IssueConnection"]],
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for issue comments returned from the connection. */
	orderBy?: ResolverInputTypes["IssueCommentOrder"] | undefined | null},ResolverInputTypes["IssueCommentConnection"]],
commits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PullRequestCommitConnection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The number of deletions in this pull request. */
	deletions?:boolean | `@${string}`,
	/** The actor who edited this pull request's body. */
	editor?:ResolverInputTypes["Actor"],
files?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PullRequestChangedFileConnection"]],
	/** Identifies the head Ref associated with the pull request. */
	headRef?:ResolverInputTypes["Ref"],
	/** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
	headRefName?:boolean | `@${string}`,
	/** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
	headRefOid?:boolean | `@${string}`,
	/** The repository associated with this pull request's head Ref. */
	headRepository?:ResolverInputTypes["Repository"],
	/** The owner of the repository associated with this pull request's head Ref. */
	headRepositoryOwner?:ResolverInputTypes["RepositoryOwner"],
hovercard?: [{	/** Whether or not to include notification contexts */
	includeNotificationContexts?: boolean | undefined | null},ResolverInputTypes["Hovercard"]],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** The head and base repositories are different. */
	isCrossRepository?:boolean | `@${string}`,
	/** Identifies if the pull request is a draft. */
	isDraft?:boolean | `@${string}`,
	/** Is this pull request read by the viewer */
	isReadByViewer?:boolean | `@${string}`,
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for labels returned from the connection. */
	orderBy?: ResolverInputTypes["LabelOrder"] | undefined | null},ResolverInputTypes["LabelConnection"]],
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
latestOpinionatedReviews?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Only return reviews from user who have write access to the repository */
	writersOnly?: boolean | undefined | null},ResolverInputTypes["PullRequestReviewConnection"]],
latestReviews?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PullRequestReviewConnection"]],
	/** `true` if the pull request is locked */
	locked?:boolean | `@${string}`,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?:boolean | `@${string}`,
	/** The commit that was created when this pull request was merged. */
	mergeCommit?:ResolverInputTypes["Commit"],
	/** Detailed information about the current pull request merge state status. */
	mergeStateStatus?:boolean | `@${string}`,
	/** Whether or not the pull request can be merged based on the existence of merge conflicts. */
	mergeable?:boolean | `@${string}`,
	/** Whether or not the pull request was merged. */
	merged?:boolean | `@${string}`,
	/** The date and time that the pull request was merged. */
	mergedAt?:boolean | `@${string}`,
	/** The actor who merged the pull request. */
	mergedBy?:ResolverInputTypes["Actor"],
	/** Identifies the milestone associated with the pull request. */
	milestone?:ResolverInputTypes["Milestone"],
	/** Identifies the pull request number. */
	number?:boolean | `@${string}`,
participants?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
	/** The permalink to the pull request. */
	permalink?:boolean | `@${string}`,
	/** The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request. */
	potentialMergeCommit?:ResolverInputTypes["Commit"],
projectCards?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** A list of archived states to filter the cards by */
	archivedStates?: Array<ResolverInputTypes["ProjectCardArchivedState"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectCardConnection"]],
projectItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Include archived items. */
	includeArchived?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2ItemConnection"]],
projectNext?: [{	/** The project (beta) number. */
	number: number},ResolverInputTypes["ProjectNext"]],
projectNextItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Include archived items. */
	includeArchived?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectNextItemConnection"]],
projectV2?: [{	/** The project number. */
	number: number},ResolverInputTypes["ProjectV2"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null,	/** How to order the returned projects (beta). */
	sortBy?: ResolverInputTypes["ProjectNextOrderField"] | undefined | null},ResolverInputTypes["ProjectNextConnection"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** How to order the returned projects. */
	orderBy?: ResolverInputTypes["ProjectV2Order"] | undefined | null,	/** A project to search for under the the owner. */
	query?: string | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this pull request. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP path for reverting this pull request. */
	revertResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for reverting this pull request. */
	revertUrl?:boolean | `@${string}`,
	/** The current status of this pull request with respect to code review. */
	reviewDecision?:boolean | `@${string}`,
reviewRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ReviewRequestConnection"]],
reviewThreads?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PullRequestReviewThreadConnection"]],
reviews?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Filter by author of the review. */
	author?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** A list of states to filter the reviews. */
	states?: Array<ResolverInputTypes["PullRequestReviewState"]> | undefined | null},ResolverInputTypes["PullRequestReviewConnection"]],
	/** Identifies the state of the pull request. */
	state?:boolean | `@${string}`,
	/** A list of reviewer suggestions based on commit history and past review comments. */
	suggestedReviewers?:ResolverInputTypes["SuggestedReviewer"],
timeline?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows filtering timeline events by a `since` timestamp. */
	since?: ResolverInputTypes["DateTime"] | undefined | null},ResolverInputTypes["PullRequestTimelineConnection"]],
timelineItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Filter timeline items by type. */
	itemTypes?: Array<ResolverInputTypes["PullRequestTimelineItemsItemType"]> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter timeline items by a `since` timestamp. */
	since?: ResolverInputTypes["DateTime"] | undefined | null,	/** Skips the first _n_ elements in the list. */
	skip?: number | undefined | null},ResolverInputTypes["PullRequestTimelineItemsConnection"]],
	/** Identifies the pull request title. */
	title?:boolean | `@${string}`,
	/** Identifies the pull request title rendered to HTML. */
	titleHTML?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this pull request. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Whether or not the viewer can apply suggestion. */
	viewerCanApplySuggestion?:boolean | `@${string}`,
	/** Check if the viewer can restore the deleted head ref. */
	viewerCanDeleteHeadRef?:boolean | `@${string}`,
	/** Whether or not the viewer can disable auto-merge */
	viewerCanDisableAutoMerge?:boolean | `@${string}`,
	/** Can the viewer edit files within this pull request. */
	viewerCanEditFiles?:boolean | `@${string}`,
	/** Whether or not the viewer can enable auto-merge */
	viewerCanEnableAutoMerge?:boolean | `@${string}`,
	/** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
	viewerCanMergeAsAdmin?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** The latest review given from the viewer. */
	viewerLatestReview?:ResolverInputTypes["PullRequestReview"],
	/** The person who has requested the viewer for review on this pull request. */
	viewerLatestReviewRequest?:ResolverInputTypes["ReviewRequest"],
viewerMergeBodyText?: [{	/** The merge method for the message. */
	mergeType?: ResolverInputTypes["PullRequestMergeMethod"] | undefined | null},boolean | `@${string}`],
viewerMergeHeadlineText?: [{	/** The merge method for the message. */
	mergeType?: ResolverInputTypes["PullRequestMergeMethod"] | undefined | null},boolean | `@${string}`],
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A file changed in a pull request. */
["PullRequestChangedFile"]: AliasType<{
	/** The number of additions to the file. */
	additions?:boolean | `@${string}`,
	/** How the file was changed in this PullRequest */
	changeType?:boolean | `@${string}`,
	/** The number of deletions to the file. */
	deletions?:boolean | `@${string}`,
	/** The path of the file. */
	path?:boolean | `@${string}`,
	/** The state of the file for the viewer. */
	viewerViewedState?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestChangedFile. */
["PullRequestChangedFileConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PullRequestChangedFileEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PullRequestChangedFile"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestChangedFileEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PullRequestChangedFile"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git commit part of a pull request. */
["PullRequestCommit"]: AliasType<{
	/** The Git commit object */
	commit?:ResolverInputTypes["Commit"],
	id?:boolean | `@${string}`,
	/** The pull request this commit belongs to */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The HTTP path for this pull request commit */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this pull request commit */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a commit comment thread part of a pull request. */
["PullRequestCommitCommentThread"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CommitCommentConnection"]],
	/** The commit the comments were made on. */
	commit?:ResolverInputTypes["Commit"],
	id?:boolean | `@${string}`,
	/** The file the comments were made on. */
	path?:boolean | `@${string}`,
	/** The position in the diff for the commit that the comment was made on. */
	position?:boolean | `@${string}`,
	/** The pull request this commit comment thread belongs to */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestCommit. */
["PullRequestCommitConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PullRequestCommitEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PullRequestCommit"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestCommitEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PullRequestCommit"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequest. */
["PullRequestConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PullRequestEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PullRequest"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** This aggregates pull requests opened by a user within one repository. */
["PullRequestContributionsByRepository"]: AliasType<{
contributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ResolverInputTypes["ContributionOrder"] | undefined | null},ResolverInputTypes["CreatedPullRequestContributionConnection"]],
	/** The repository in which the pull requests were opened. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents available types of methods to use when merging a pull request. */
["PullRequestMergeMethod"]:PullRequestMergeMethod;
	/** Ways in which lists of issues can be ordered upon return. */
["PullRequestOrder"]: {
	/** The direction in which to order pull requests by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order pull requests by. */
	field: ResolverInputTypes["PullRequestOrderField"]
};
	/** Properties by which pull_requests connections can be ordered. */
["PullRequestOrderField"]:PullRequestOrderField;
	/** A review object for a given pull request. */
["PullRequestReview"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** Indicates whether the author of this review has push access to the repository. */
	authorCanPushToRepository?:boolean | `@${string}`,
	/** Identifies the pull request review body. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body of this review rendered as plain text. */
	bodyText?:boolean | `@${string}`,
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PullRequestReviewCommentConnection"]],
	/** Identifies the commit associated with this pull request review. */
	commit?:ResolverInputTypes["Commit"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
onBehalfOf?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["TeamConnection"]],
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** Identifies the pull request associated with this pull request review. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path permalink for this PullRequestReview. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the current state of the pull request review. */
	state?:boolean | `@${string}`,
	/** Identifies when the Pull Request Review was submitted */
	submittedAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL permalink for this PullRequestReview. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A review comment associated with a given repository pull request. */
["PullRequestReviewComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the subject of the comment. */
	authorAssociation?:boolean | `@${string}`,
	/** The comment body of this review comment. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The comment body of this review comment rendered as plain text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the commit associated with the comment. */
	commit?:ResolverInputTypes["Commit"],
	/** Identifies when the comment was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The diff hunk to which the comment applies. */
	diffHunk?:boolean | `@${string}`,
	/** Identifies when the comment was created in a draft state. */
	draftedAt?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Returns whether or not a comment has been minimized. */
	isMinimized?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?:boolean | `@${string}`,
	/** Identifies the original commit associated with the comment. */
	originalCommit?:ResolverInputTypes["Commit"],
	/** The original line index in the diff to which the comment applies. */
	originalPosition?:boolean | `@${string}`,
	/** Identifies when the comment body is outdated */
	outdated?:boolean | `@${string}`,
	/** The path to which the comment applies. */
	path?:boolean | `@${string}`,
	/** The line index in the diff to which the comment applies. */
	position?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** The pull request associated with this review comment. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The pull request review associated with this review comment. */
	pullRequestReview?:ResolverInputTypes["PullRequestReview"],
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** The comment this is a reply to. */
	replyTo?:ResolverInputTypes["PullRequestReviewComment"],
	/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path permalink for this review comment. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the state of the comment. */
	state?:boolean | `@${string}`,
	/** Identifies when the comment was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL permalink for this review comment. */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestReviewComment. */
["PullRequestReviewCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PullRequestReviewCommentEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PullRequestReviewComment"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestReviewCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PullRequestReviewComment"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states of a pull request review comment. */
["PullRequestReviewCommentState"]:PullRequestReviewCommentState;
	/** The connection type for PullRequestReview. */
["PullRequestReviewConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PullRequestReviewEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PullRequestReview"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** This aggregates pull request reviews made by a user within one repository. */
["PullRequestReviewContributionsByRepository"]: AliasType<{
contributions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for contributions returned from the connection. */
	orderBy?: ResolverInputTypes["ContributionOrder"] | undefined | null},ResolverInputTypes["CreatedPullRequestReviewContributionConnection"]],
	/** The repository in which the pull request reviews were made. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** The review status of a pull request. */
["PullRequestReviewDecision"]:PullRequestReviewDecision;
	/** An edge in a connection. */
["PullRequestReviewEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible events to perform on a pull request review. */
["PullRequestReviewEvent"]:PullRequestReviewEvent;
	/** The possible states of a pull request review. */
["PullRequestReviewState"]:PullRequestReviewState;
	/** A threaded list of comments for a given pull request. */
["PullRequestReviewThread"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Skips the first _n_ elements in the list. */
	skip?: number | undefined | null},ResolverInputTypes["PullRequestReviewCommentConnection"]],
	/** The side of the diff on which this thread was placed. */
	diffSide?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the thread has been collapsed (resolved) */
	isCollapsed?:boolean | `@${string}`,
	/** Indicates whether this thread was outdated by newer changes. */
	isOutdated?:boolean | `@${string}`,
	/** Whether this thread has been resolved */
	isResolved?:boolean | `@${string}`,
	/** The line in the file to which this thread refers */
	line?:boolean | `@${string}`,
	/** The original line in the file to which this thread refers. */
	originalLine?:boolean | `@${string}`,
	/** The original start line in the file to which this thread refers (multi-line only). */
	originalStartLine?:boolean | `@${string}`,
	/** Identifies the file path of this thread. */
	path?:boolean | `@${string}`,
	/** Identifies the pull request associated with this thread. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** Identifies the repository associated with this thread. */
	repository?:ResolverInputTypes["Repository"],
	/** The user who resolved this thread */
	resolvedBy?:ResolverInputTypes["User"],
	/** The side of the diff that the first line of the thread starts on (multi-line only) */
	startDiffSide?:boolean | `@${string}`,
	/** The start line in the file to which this thread refers (multi-line only) */
	startLine?:boolean | `@${string}`,
	/** Indicates whether the current viewer can reply to this thread. */
	viewerCanReply?:boolean | `@${string}`,
	/** Whether or not the viewer can resolve this thread */
	viewerCanResolve?:boolean | `@${string}`,
	/** Whether or not the viewer can unresolve this thread */
	viewerCanUnresolve?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Review comment threads for a pull request review. */
["PullRequestReviewThreadConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PullRequestReviewThreadEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PullRequestReviewThread"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestReviewThreadEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PullRequestReviewThread"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
["PullRequestRevisionMarker"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The last commit the viewer has seen. */
	lastSeenCommit?:ResolverInputTypes["Commit"],
	/** The pull request to which the marker belongs. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states of a pull request. */
["PullRequestState"]:PullRequestState;
	/** A repository pull request template. */
["PullRequestTemplate"]: AliasType<{
	/** The body of the template */
	body?:boolean | `@${string}`,
	/** The filename of the template */
	filename?:boolean | `@${string}`,
	/** The repository the template belongs to */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A threaded list of comments for a given pull request. */
["PullRequestThread"]: AliasType<{
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Skips the first _n_ elements in the list. */
	skip?: number | undefined | null},ResolverInputTypes["PullRequestReviewCommentConnection"]],
	/** The side of the diff on which this thread was placed. */
	diffSide?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the thread has been collapsed (resolved) */
	isCollapsed?:boolean | `@${string}`,
	/** Indicates whether this thread was outdated by newer changes. */
	isOutdated?:boolean | `@${string}`,
	/** Whether this thread has been resolved */
	isResolved?:boolean | `@${string}`,
	/** The line in the file to which this thread refers */
	line?:boolean | `@${string}`,
	/** Identifies the pull request associated with this thread. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** Identifies the repository associated with this thread. */
	repository?:ResolverInputTypes["Repository"],
	/** The user who resolved this thread */
	resolvedBy?:ResolverInputTypes["User"],
	/** The side of the diff that the first line of the thread starts on (multi-line only) */
	startDiffSide?:boolean | `@${string}`,
	/** The line of the first file diff in the thread. */
	startLine?:boolean | `@${string}`,
	/** Indicates whether the current viewer can reply to this thread. */
	viewerCanReply?:boolean | `@${string}`,
	/** Whether or not the viewer can resolve this thread */
	viewerCanResolve?:boolean | `@${string}`,
	/** Whether or not the viewer can unresolve this thread */
	viewerCanUnresolve?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestTimelineItem. */
["PullRequestTimelineConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PullRequestTimelineItemEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PullRequestTimelineItem"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An item in a pull request timeline */
["PullRequestTimelineItem"]: AliasType<{
	AssignedEvent?:ResolverInputTypes["AssignedEvent"],
	BaseRefDeletedEvent?:ResolverInputTypes["BaseRefDeletedEvent"],
	BaseRefForcePushedEvent?:ResolverInputTypes["BaseRefForcePushedEvent"],
	ClosedEvent?:ResolverInputTypes["ClosedEvent"],
	Commit?:ResolverInputTypes["Commit"],
	CommitCommentThread?:ResolverInputTypes["CommitCommentThread"],
	CrossReferencedEvent?:ResolverInputTypes["CrossReferencedEvent"],
	DemilestonedEvent?:ResolverInputTypes["DemilestonedEvent"],
	DeployedEvent?:ResolverInputTypes["DeployedEvent"],
	DeploymentEnvironmentChangedEvent?:ResolverInputTypes["DeploymentEnvironmentChangedEvent"],
	HeadRefDeletedEvent?:ResolverInputTypes["HeadRefDeletedEvent"],
	HeadRefForcePushedEvent?:ResolverInputTypes["HeadRefForcePushedEvent"],
	HeadRefRestoredEvent?:ResolverInputTypes["HeadRefRestoredEvent"],
	IssueComment?:ResolverInputTypes["IssueComment"],
	LabeledEvent?:ResolverInputTypes["LabeledEvent"],
	LockedEvent?:ResolverInputTypes["LockedEvent"],
	MergedEvent?:ResolverInputTypes["MergedEvent"],
	MilestonedEvent?:ResolverInputTypes["MilestonedEvent"],
	PullRequestReview?:ResolverInputTypes["PullRequestReview"],
	PullRequestReviewComment?:ResolverInputTypes["PullRequestReviewComment"],
	PullRequestReviewThread?:ResolverInputTypes["PullRequestReviewThread"],
	ReferencedEvent?:ResolverInputTypes["ReferencedEvent"],
	RenamedTitleEvent?:ResolverInputTypes["RenamedTitleEvent"],
	ReopenedEvent?:ResolverInputTypes["ReopenedEvent"],
	ReviewDismissedEvent?:ResolverInputTypes["ReviewDismissedEvent"],
	ReviewRequestRemovedEvent?:ResolverInputTypes["ReviewRequestRemovedEvent"],
	ReviewRequestedEvent?:ResolverInputTypes["ReviewRequestedEvent"],
	SubscribedEvent?:ResolverInputTypes["SubscribedEvent"],
	UnassignedEvent?:ResolverInputTypes["UnassignedEvent"],
	UnlabeledEvent?:ResolverInputTypes["UnlabeledEvent"],
	UnlockedEvent?:ResolverInputTypes["UnlockedEvent"],
	UnsubscribedEvent?:ResolverInputTypes["UnsubscribedEvent"],
	UserBlockedEvent?:ResolverInputTypes["UserBlockedEvent"],
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestTimelineItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PullRequestTimelineItem"],
		__typename?: boolean | `@${string}`
}>;
	/** An item in a pull request timeline */
["PullRequestTimelineItems"]: AliasType<{
	AddedToProjectEvent?:ResolverInputTypes["AddedToProjectEvent"],
	AssignedEvent?:ResolverInputTypes["AssignedEvent"],
	AutoMergeDisabledEvent?:ResolverInputTypes["AutoMergeDisabledEvent"],
	AutoMergeEnabledEvent?:ResolverInputTypes["AutoMergeEnabledEvent"],
	AutoRebaseEnabledEvent?:ResolverInputTypes["AutoRebaseEnabledEvent"],
	AutoSquashEnabledEvent?:ResolverInputTypes["AutoSquashEnabledEvent"],
	AutomaticBaseChangeFailedEvent?:ResolverInputTypes["AutomaticBaseChangeFailedEvent"],
	AutomaticBaseChangeSucceededEvent?:ResolverInputTypes["AutomaticBaseChangeSucceededEvent"],
	BaseRefChangedEvent?:ResolverInputTypes["BaseRefChangedEvent"],
	BaseRefDeletedEvent?:ResolverInputTypes["BaseRefDeletedEvent"],
	BaseRefForcePushedEvent?:ResolverInputTypes["BaseRefForcePushedEvent"],
	ClosedEvent?:ResolverInputTypes["ClosedEvent"],
	CommentDeletedEvent?:ResolverInputTypes["CommentDeletedEvent"],
	ConnectedEvent?:ResolverInputTypes["ConnectedEvent"],
	ConvertToDraftEvent?:ResolverInputTypes["ConvertToDraftEvent"],
	ConvertedNoteToIssueEvent?:ResolverInputTypes["ConvertedNoteToIssueEvent"],
	ConvertedToDiscussionEvent?:ResolverInputTypes["ConvertedToDiscussionEvent"],
	CrossReferencedEvent?:ResolverInputTypes["CrossReferencedEvent"],
	DemilestonedEvent?:ResolverInputTypes["DemilestonedEvent"],
	DeployedEvent?:ResolverInputTypes["DeployedEvent"],
	DeploymentEnvironmentChangedEvent?:ResolverInputTypes["DeploymentEnvironmentChangedEvent"],
	DisconnectedEvent?:ResolverInputTypes["DisconnectedEvent"],
	HeadRefDeletedEvent?:ResolverInputTypes["HeadRefDeletedEvent"],
	HeadRefForcePushedEvent?:ResolverInputTypes["HeadRefForcePushedEvent"],
	HeadRefRestoredEvent?:ResolverInputTypes["HeadRefRestoredEvent"],
	IssueComment?:ResolverInputTypes["IssueComment"],
	LabeledEvent?:ResolverInputTypes["LabeledEvent"],
	LockedEvent?:ResolverInputTypes["LockedEvent"],
	MarkedAsDuplicateEvent?:ResolverInputTypes["MarkedAsDuplicateEvent"],
	MentionedEvent?:ResolverInputTypes["MentionedEvent"],
	MergedEvent?:ResolverInputTypes["MergedEvent"],
	MilestonedEvent?:ResolverInputTypes["MilestonedEvent"],
	MovedColumnsInProjectEvent?:ResolverInputTypes["MovedColumnsInProjectEvent"],
	PinnedEvent?:ResolverInputTypes["PinnedEvent"],
	PullRequestCommit?:ResolverInputTypes["PullRequestCommit"],
	PullRequestCommitCommentThread?:ResolverInputTypes["PullRequestCommitCommentThread"],
	PullRequestReview?:ResolverInputTypes["PullRequestReview"],
	PullRequestReviewThread?:ResolverInputTypes["PullRequestReviewThread"],
	PullRequestRevisionMarker?:ResolverInputTypes["PullRequestRevisionMarker"],
	ReadyForReviewEvent?:ResolverInputTypes["ReadyForReviewEvent"],
	ReferencedEvent?:ResolverInputTypes["ReferencedEvent"],
	RemovedFromProjectEvent?:ResolverInputTypes["RemovedFromProjectEvent"],
	RenamedTitleEvent?:ResolverInputTypes["RenamedTitleEvent"],
	ReopenedEvent?:ResolverInputTypes["ReopenedEvent"],
	ReviewDismissedEvent?:ResolverInputTypes["ReviewDismissedEvent"],
	ReviewRequestRemovedEvent?:ResolverInputTypes["ReviewRequestRemovedEvent"],
	ReviewRequestedEvent?:ResolverInputTypes["ReviewRequestedEvent"],
	SubscribedEvent?:ResolverInputTypes["SubscribedEvent"],
	TransferredEvent?:ResolverInputTypes["TransferredEvent"],
	UnassignedEvent?:ResolverInputTypes["UnassignedEvent"],
	UnlabeledEvent?:ResolverInputTypes["UnlabeledEvent"],
	UnlockedEvent?:ResolverInputTypes["UnlockedEvent"],
	UnmarkedAsDuplicateEvent?:ResolverInputTypes["UnmarkedAsDuplicateEvent"],
	UnpinnedEvent?:ResolverInputTypes["UnpinnedEvent"],
	UnsubscribedEvent?:ResolverInputTypes["UnsubscribedEvent"],
	UserBlockedEvent?:ResolverInputTypes["UserBlockedEvent"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PullRequestTimelineItems. */
["PullRequestTimelineItemsConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PullRequestTimelineItemsEdge"],
	/** Identifies the count of items after applying `before` and `after` filters. */
	filteredCount?:boolean | `@${string}`,
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PullRequestTimelineItems"],
	/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
	pageCount?:boolean | `@${string}`,
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** Identifies the date and time when the timeline was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PullRequestTimelineItemsEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PullRequestTimelineItems"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible item types found in a timeline. */
["PullRequestTimelineItemsItemType"]:PullRequestTimelineItemsItemType;
	/** The possible target states when updating a pull request. */
["PullRequestUpdateState"]:PullRequestUpdateState;
	/** A Git push. */
["Push"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The SHA after the push */
	nextSha?:boolean | `@${string}`,
	/** The permalink for this push. */
	permalink?:boolean | `@${string}`,
	/** The SHA before the push */
	previousSha?:boolean | `@${string}`,
	/** The actor who pushed */
	pusher?:ResolverInputTypes["Actor"],
	/** The repository that was pushed to */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A team, user, or app who has the ability to push to a protected branch. */
["PushAllowance"]: AliasType<{
	/** The actor that can push. */
	actor?:ResolverInputTypes["PushAllowanceActor"],
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?:ResolverInputTypes["BranchProtectionRule"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be an actor. */
["PushAllowanceActor"]: AliasType<{
	App?:ResolverInputTypes["App"],
	Team?:ResolverInputTypes["Team"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for PushAllowance. */
["PushAllowanceConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["PushAllowanceEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["PushAllowance"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["PushAllowanceEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["PushAllowance"],
		__typename?: boolean | `@${string}`
}>;
	/** The query root of GitHub's GraphQL interface. */
["Query"]: AliasType<{
codeOfConduct?: [{	/** The code of conduct's key */
	key: string},ResolverInputTypes["CodeOfConduct"]],
	/** Look up a code of conduct by its key */
	codesOfConduct?:ResolverInputTypes["CodeOfConduct"],
enterprise?: [{	/** The enterprise invitation token. */
	invitationToken?: string | undefined | null,	/** The enterprise URL slug. */
	slug: string},ResolverInputTypes["Enterprise"]],
enterpriseAdministratorInvitation?: [{	/** The slug of the enterprise the user was invited to join. */
	enterpriseSlug: string,	/** The role for the business member invitation. */
	role: ResolverInputTypes["EnterpriseAdministratorRole"],	/** The login of the user invited to join the business. */
	userLogin: string},ResolverInputTypes["EnterpriseAdministratorInvitation"]],
enterpriseAdministratorInvitationByToken?: [{	/** The invitation token sent with the invitation email. */
	invitationToken: string},ResolverInputTypes["EnterpriseAdministratorInvitation"]],
license?: [{	/** The license's downcased SPDX ID */
	key: string},ResolverInputTypes["License"]],
	/** Return a list of known open source licenses */
	licenses?:ResolverInputTypes["License"],
marketplaceCategories?: [{	/** Exclude categories with no listings. */
	excludeEmpty?: boolean | undefined | null,	/** Returns top level categories only, excluding any subcategories. */
	excludeSubcategories?: boolean | undefined | null,	/** Return only the specified categories. */
	includeCategories?: Array<string> | undefined | null},ResolverInputTypes["MarketplaceCategory"]],
marketplaceCategory?: [{	/** The URL slug of the category. */
	slug: string,	/** Also check topic aliases for the category slug */
	useTopicAliases?: boolean | undefined | null},ResolverInputTypes["MarketplaceCategory"]],
marketplaceListing?: [{	/** Select the listing that matches this slug. It's the short name of the listing used in its URL. */
	slug: string},ResolverInputTypes["MarketplaceListing"]],
marketplaceListings?: [{	/** Select listings that can be administered by the specified user. */
	adminId?: string | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Select listings visible to the viewer even if they are not approved. If omitted or
false, only approved listings will be returned. */
	allStates?: boolean | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Select only listings with the given category. */
	categorySlug?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Select listings for products owned by the specified organization. */
	organizationId?: string | undefined | null,	/** Select only listings where the primary category matches the given category slug. */
	primaryCategoryOnly?: boolean | undefined | null,	/** Select the listings with these slugs, if they are visible to the viewer. */
	slugs?: Array<string | undefined | null> | undefined | null,	/** Also check topic aliases for the category slug */
	useTopicAliases?: boolean | undefined | null,	/** Select listings to which user has admin access. If omitted, listings visible to the
viewer are returned. */
	viewerCanAdmin?: boolean | undefined | null,	/** Select only listings that offer a free trial. */
	withFreeTrialsOnly?: boolean | undefined | null},ResolverInputTypes["MarketplaceListingConnection"]],
	/** Return information about the GitHub instance */
	meta?:ResolverInputTypes["GitHubMetadata"],
node?: [{	/** ID of the object. */
	id: string},ResolverInputTypes["Node"]],
nodes?: [{	/** The list of node IDs. */
	ids: Array<string>},ResolverInputTypes["Node"]],
organization?: [{	/** The organization's login. */
	login: string},ResolverInputTypes["Organization"]],
rateLimit?: [{	/** If true, calculate the cost for the query without evaluating it */
	dryRun?: boolean | undefined | null},ResolverInputTypes["RateLimit"]],
	/** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
	relay?:ResolverInputTypes["Query"],
repository?: [{	/** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
	followRenames?: boolean | undefined | null,	/** The name of the repository */
	name: string,	/** The login field of a user or organization */
	owner: string},ResolverInputTypes["Repository"]],
repositoryOwner?: [{	/** The username to lookup the owner by. */
	login: string},ResolverInputTypes["RepositoryOwner"]],
resource?: [{	/** The URL. */
	url: ResolverInputTypes["URI"]},ResolverInputTypes["UniformResourceLocatable"]],
search?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** The search string to look for. */
	query: string,	/** The types of search items to search within. */
	type: ResolverInputTypes["SearchType"]},ResolverInputTypes["SearchResultItemConnection"]],
securityAdvisories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** A list of classifications to filter advisories by. */
	classifications?: Array<ResolverInputTypes["SecurityAdvisoryClassification"]> | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Filter advisories by identifier, e.g. GHSA or CVE. */
	identifier?: ResolverInputTypes["SecurityAdvisoryIdentifierFilter"] | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the returned topics. */
	orderBy?: ResolverInputTypes["SecurityAdvisoryOrder"] | undefined | null,	/** Filter advisories to those published since a time in the past. */
	publishedSince?: ResolverInputTypes["DateTime"] | undefined | null,	/** Filter advisories to those updated since a time in the past. */
	updatedSince?: ResolverInputTypes["DateTime"] | undefined | null},ResolverInputTypes["SecurityAdvisoryConnection"]],
securityAdvisory?: [{	/** GitHub Security Advisory ID. */
	ghsaId: string},ResolverInputTypes["SecurityAdvisory"]],
securityVulnerabilities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** A list of advisory classifications to filter vulnerabilities by. */
	classifications?: Array<ResolverInputTypes["SecurityAdvisoryClassification"]> | undefined | null,	/** An ecosystem to filter vulnerabilities by. */
	ecosystem?: ResolverInputTypes["SecurityAdvisoryEcosystem"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the returned topics. */
	orderBy?: ResolverInputTypes["SecurityVulnerabilityOrder"] | undefined | null,	/** A package name to filter vulnerabilities by. */
	package?: string | undefined | null,	/** A list of severities to filter vulnerabilities by. */
	severities?: Array<ResolverInputTypes["SecurityAdvisorySeverity"]> | undefined | null},ResolverInputTypes["SecurityVulnerabilityConnection"]],
sponsorables?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Optional filter for which dependencies should be checked for sponsorable
owners. Only sponsorable owners of dependencies in this ecosystem will be
included. Used when onlyDependencies = true.

**Upcoming Change on 2022-07-01 UTC**
**Description:** `dependencyEcosystem` will be removed. Use the ecosystem argument instead.
**Reason:** The type is switching from SecurityAdvisoryEcosystem to DependencyGraphEcosystem. */
	dependencyEcosystem?: ResolverInputTypes["SecurityAdvisoryEcosystem"] | undefined | null,	/** Optional filter for which dependencies should be checked for sponsorable
owners. Only sponsorable owners of dependencies in this ecosystem will be
included. Used when onlyDependencies = true. */
	ecosystem?: ResolverInputTypes["DependencyGraphEcosystem"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Whether only sponsorables who own the viewer's dependencies will be
returned. Must be authenticated to use. Can check an organization instead
for their dependencies owned by sponsorables by passing
orgLoginForDependencies. */
	onlyDependencies?: boolean | undefined | null,	/** Ordering options for users and organizations returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorableOrder"] | undefined | null,	/** Optional organization username for whose dependencies should be checked.
Used when onlyDependencies = true. Omit to check your own dependencies. If
you are not an administrator of the organization, only dependencies from its
public repositories will be considered. */
	orgLoginForDependencies?: string | undefined | null},ResolverInputTypes["SponsorableItemConnection"]],
topic?: [{	/** The topic's name. */
	name: string},ResolverInputTypes["Topic"]],
user?: [{	/** The user's login. */
	login: string},ResolverInputTypes["User"]],
	/** The currently authenticated user. */
	viewer?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the client's rate limit. */
["RateLimit"]: AliasType<{
	/** The point cost for the current query counting against the rate limit. */
	cost?:boolean | `@${string}`,
	/** The maximum number of points the client is permitted to consume in a 60 minute window. */
	limit?:boolean | `@${string}`,
	/** The maximum number of nodes this query may return */
	nodeCount?:boolean | `@${string}`,
	/** The number of points remaining in the current rate limit window. */
	remaining?:boolean | `@${string}`,
	/** The time at which the current rate limit window resets in UTC epoch seconds. */
	resetAt?:boolean | `@${string}`,
	/** The number of points used in the current rate limit window. */
	used?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a subject that can be reacted on. */
["Reactable"]:AliasType<{
		/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ResolverInputTypes["CommitComment"],keyof ResolverInputTypes["Reactable"]>;
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["Reactable"]>;
		['...on DiscussionComment']?: Omit<ResolverInputTypes["DiscussionComment"],keyof ResolverInputTypes["Reactable"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["Reactable"]>;
		['...on IssueComment']?: Omit<ResolverInputTypes["IssueComment"],keyof ResolverInputTypes["Reactable"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["Reactable"]>;
		['...on PullRequestReview']?: Omit<ResolverInputTypes["PullRequestReview"],keyof ResolverInputTypes["Reactable"]>;
		['...on PullRequestReviewComment']?: Omit<ResolverInputTypes["PullRequestReviewComment"],keyof ResolverInputTypes["Reactable"]>;
		['...on Release']?: Omit<ResolverInputTypes["Release"],keyof ResolverInputTypes["Reactable"]>;
		['...on TeamDiscussion']?: Omit<ResolverInputTypes["TeamDiscussion"],keyof ResolverInputTypes["Reactable"]>;
		['...on TeamDiscussionComment']?: Omit<ResolverInputTypes["TeamDiscussionComment"],keyof ResolverInputTypes["Reactable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["ReactingUserConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ReactingUserEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user that's made a reaction. */
["ReactingUserEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ResolverInputTypes["User"],
	/** The moment when the user made the reaction. */
	reactedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An emoji reaction to a particular piece of content. */
["Reaction"]: AliasType<{
	/** Identifies the emoji reaction. */
	content?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The reactable piece of content */
	reactable?:ResolverInputTypes["Reactable"],
	/** Identifies the user who created this reaction. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A list of reactions that have been left on the subject. */
["ReactionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ReactionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Reaction"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** Whether or not the authenticated user has left a reaction on the subject. */
	viewerHasReacted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Emojis that can be attached to Issues, Pull Requests and Comments. */
["ReactionContent"]:ReactionContent;
	/** An edge in a connection. */
["ReactionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Reaction"],
		__typename?: boolean | `@${string}`
}>;
	/** A group of emoji reactions to a particular piece of content. */
["ReactionGroup"]: AliasType<{
	/** Identifies the emoji reaction. */
	content?:boolean | `@${string}`,
	/** Identifies when the reaction was created. */
	createdAt?:boolean | `@${string}`,
reactors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ReactorConnection"]],
	/** The subject that was reacted to. */
	subject?:ResolverInputTypes["Reactable"],
users?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ReactingUserConnection"]],
	/** Whether or not the authenticated user has left a reaction on the subject. */
	viewerHasReacted?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of reactions can be ordered upon return. */
["ReactionOrder"]: {
	/** The direction in which to order reactions by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order reactions by. */
	field: ResolverInputTypes["ReactionOrderField"]
};
	/** A list of fields that reactions can be ordered by. */
["ReactionOrderField"]:ReactionOrderField;
	/** Types that can be assigned to reactions. */
["Reactor"]: AliasType<{
	Bot?:ResolverInputTypes["Bot"],
	Mannequin?:ResolverInputTypes["Mannequin"],
	Organization?:ResolverInputTypes["Organization"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Reactor. */
["ReactorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ReactorEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Reactor"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents an author of a reaction. */
["ReactorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The author of the reaction. */
	node?:ResolverInputTypes["Reactor"],
	/** The moment when the user made the reaction. */
	reactedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'ready_for_review' event on a given pull request. */
["ReadyForReviewEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The HTTP path for this ready for review event. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this ready for review event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git reference. */
["Ref"]: AliasType<{
associatedPullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the pull requests by. */
	states?: Array<ResolverInputTypes["PullRequestState"]> | undefined | null},ResolverInputTypes["PullRequestConnection"]],
	/** Branch protection rules for this ref */
	branchProtectionRule?:ResolverInputTypes["BranchProtectionRule"],
compare?: [{	/** The head ref to compare against. */
	headRef: string},ResolverInputTypes["Comparison"]],
	id?:boolean | `@${string}`,
	/** The ref name. */
	name?:boolean | `@${string}`,
	/** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
	prefix?:boolean | `@${string}`,
	/** Branch protection rules that are viewable by non-admins */
	refUpdateRule?:ResolverInputTypes["RefUpdateRule"],
	/** The repository the ref belongs to. */
	repository?:ResolverInputTypes["Repository"],
	/** The object the ref points to. Returns null when object does not exist. */
	target?:ResolverInputTypes["GitObject"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Ref. */
["RefConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["RefEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Ref"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RefEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of git refs can be ordered upon return. */
["RefOrder"]: {
	/** The direction in which to order refs by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order refs by. */
	field: ResolverInputTypes["RefOrderField"]
};
	/** Properties by which ref connections can be ordered. */
["RefOrderField"]:RefOrderField;
	/** A ref update */
["RefUpdate"]: {
	/** The value this ref should be updated to. */
	afterOid: ResolverInputTypes["GitObjectID"],
	/** The value this ref needs to point to before the update. */
	beforeOid?: ResolverInputTypes["GitObjectID"] | undefined | null,
	/** Force a non fast-forward update. */
	force?: boolean | undefined | null,
	/** The fully qualified name of the ref to be update. For example `refs/heads/branch-name` */
	name: ResolverInputTypes["GitRefname"]
};
	/** A ref update rules for a viewer. */
["RefUpdateRule"]: AliasType<{
	/** Can this branch be deleted. */
	allowsDeletions?:boolean | `@${string}`,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?:boolean | `@${string}`,
	/** Can matching branches be created. */
	blocksCreations?:boolean | `@${string}`,
	/** Identifies the protection rule pattern. */
	pattern?:boolean | `@${string}`,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?:boolean | `@${string}`,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?:boolean | `@${string}`,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?:boolean | `@${string}`,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?:boolean | `@${string}`,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?:boolean | `@${string}`,
	/** Are commits required to be signed. */
	requiresSignatures?:boolean | `@${string}`,
	/** Is the viewer allowed to dismiss reviews. */
	viewerAllowedToDismissReviews?:boolean | `@${string}`,
	/** Can the viewer push to the branch */
	viewerCanPush?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'referenced' event on a given `ReferencedSubject`. */
["ReferencedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the commit associated with the 'referenced' event. */
	commit?:ResolverInputTypes["Commit"],
	/** Identifies the repository associated with the 'referenced' event. */
	commitRepository?:ResolverInputTypes["Repository"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Reference originated in a different repository. */
	isCrossRepository?:boolean | `@${string}`,
	/** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
	isDirectReference?:boolean | `@${string}`,
	/** Object referenced by event. */
	subject?:ResolverInputTypes["ReferencedSubject"],
		__typename?: boolean | `@${string}`
}>;
	/** Any referencable object */
["ReferencedSubject"]: AliasType<{
	Issue?:ResolverInputTypes["Issue"],
	PullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
["RegenerateEnterpriseIdentityProviderRecoveryCodesInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set an identity provider. */
	enterpriseId: string
};
	/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
["RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The identity provider for the enterprise. */
	identityProvider?:ResolverInputTypes["EnterpriseIdentityProvider"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RegenerateVerifiableDomainToken */
["RegenerateVerifiableDomainTokenInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the verifiable domain to regenerate the verification token of. */
	id: string
};
	/** Autogenerated return type of RegenerateVerifiableDomainToken */
["RegenerateVerifiableDomainTokenPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The verification token that was generated. */
	verificationToken?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RejectDeployments */
["RejectDeploymentsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Optional comment for rejecting deployments */
	comment?: string | undefined | null,
	/** The ids of environments to reject deployments */
	environmentIds: Array<string>,
	/** The node ID of the workflow run containing the pending deployments. */
	workflowRunId: string
};
	/** Autogenerated return type of RejectDeployments */
["RejectDeploymentsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The affected deployments. */
	deployments?:ResolverInputTypes["Deployment"],
		__typename?: boolean | `@${string}`
}>;
	/** A release contains the content for a release. */
["Release"]: AliasType<{
	/** The author of the release */
	author?:ResolverInputTypes["User"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The description of the release. */
	description?:boolean | `@${string}`,
	/** The description of this release rendered to HTML. */
	descriptionHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the release is a draft */
	isDraft?:boolean | `@${string}`,
	/** Whether or not the release is the latest releast */
	isLatest?:boolean | `@${string}`,
	/** Whether or not the release is a prerelease */
	isPrerelease?:boolean | `@${string}`,
mentions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
	/** The title of the release. */
	name?:boolean | `@${string}`,
	/** Identifies the date and time when the release was created. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
releaseAssets?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** A list of names to filter the assets by. */
	name?: string | undefined | null},ResolverInputTypes["ReleaseAssetConnection"]],
	/** The repository that the release belongs to. */
	repository?:ResolverInputTypes["Repository"],
	/** The HTTP path for this issue */
	resourcePath?:boolean | `@${string}`,
shortDescriptionHTML?: [{	/** How many characters to return. */
	limit?: number | undefined | null},boolean | `@${string}`],
	/** The Git tag the release points to */
	tag?:ResolverInputTypes["Ref"],
	/** The tag commit for this release. */
	tagCommit?:ResolverInputTypes["Commit"],
	/** The name of the release's Git tag */
	tagName?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this issue */
	url?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A release asset contains the content for a release asset. */
["ReleaseAsset"]: AliasType<{
	/** The asset's content-type */
	contentType?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The number of times this asset was downloaded */
	downloadCount?:boolean | `@${string}`,
	/** Identifies the URL where you can download the release asset via the browser. */
	downloadUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the title of the release asset. */
	name?:boolean | `@${string}`,
	/** Release that the asset is associated with */
	release?:ResolverInputTypes["Release"],
	/** The size (in bytes) of the asset */
	size?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The user that performed the upload */
	uploadedBy?:ResolverInputTypes["User"],
	/** Identifies the URL of the release asset. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ReleaseAsset. */
["ReleaseAssetConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ReleaseAssetEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ReleaseAsset"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ReleaseAssetEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ReleaseAsset"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Release. */
["ReleaseConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ReleaseEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Release"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ReleaseEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Release"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of releases can be ordered upon return. */
["ReleaseOrder"]: {
	/** The direction in which to order releases by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order releases by. */
	field: ResolverInputTypes["ReleaseOrderField"]
};
	/** Properties by which release connections can be ordered. */
["ReleaseOrderField"]:ReleaseOrderField;
	/** Autogenerated input type of RemoveAssigneesFromAssignable */
["RemoveAssigneesFromAssignableInput"]: {
	/** The id of the assignable object to remove assignees from. */
	assignableId: string,
	/** The id of users to remove as assignees. */
	assigneeIds: Array<string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null
};
	/** Autogenerated return type of RemoveAssigneesFromAssignable */
["RemoveAssigneesFromAssignablePayload"]: AliasType<{
	/** The item that was unassigned. */
	assignable?:ResolverInputTypes["Assignable"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveEnterpriseAdmin */
["RemoveEnterpriseAdminInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Enterprise ID from which to remove the administrator. */
	enterpriseId: string,
	/** The login of the user to remove as an administrator. */
	login: string
};
	/** Autogenerated return type of RemoveEnterpriseAdmin */
["RemoveEnterpriseAdminPayload"]: AliasType<{
	/** The user who was removed as an administrator. */
	admin?:ResolverInputTypes["User"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated enterprise. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of removing an administrator. */
	message?:boolean | `@${string}`,
	/** The viewer performing the mutation. */
	viewer?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
["RemoveEnterpriseIdentityProviderInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise from which to remove the identity provider. */
	enterpriseId: string
};
	/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
["RemoveEnterpriseIdentityProviderPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The identity provider that was removed from the enterprise. */
	identityProvider?:ResolverInputTypes["EnterpriseIdentityProvider"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveEnterpriseOrganization */
["RemoveEnterpriseOrganizationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise from which the organization should be removed. */
	enterpriseId: string,
	/** The ID of the organization to remove from the enterprise. */
	organizationId: string
};
	/** Autogenerated return type of RemoveEnterpriseOrganization */
["RemoveEnterpriseOrganizationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated enterprise. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** The organization that was removed from the enterprise. */
	organization?:ResolverInputTypes["Organization"],
	/** The viewer performing the mutation. */
	viewer?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
["RemoveEnterpriseSupportEntitlementInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string,
	/** The login of a member who will lose the support entitlement. */
	login: string
};
	/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */
["RemoveEnterpriseSupportEntitlementPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of removing the support entitlement. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveLabelsFromLabelable */
["RemoveLabelsFromLabelableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ids of labels to remove. */
	labelIds: Array<string>,
	/** The id of the Labelable to remove labels from. */
	labelableId: string
};
	/** Autogenerated return type of RemoveLabelsFromLabelable */
["RemoveLabelsFromLabelablePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The Labelable the labels were removed from. */
	labelable?:ResolverInputTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveOutsideCollaborator */
["RemoveOutsideCollaboratorInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the organization to remove the outside collaborator from. */
	organizationId: string,
	/** The ID of the outside collaborator to remove. */
	userId: string
};
	/** Autogenerated return type of RemoveOutsideCollaborator */
["RemoveOutsideCollaboratorPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The user that was removed as an outside collaborator. */
	removedUser?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveReaction */
["RemoveReactionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of the emoji reaction to remove. */
	content: ResolverInputTypes["ReactionContent"],
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of RemoveReaction */
["RemoveReactionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The reaction object. */
	reaction?:ResolverInputTypes["Reaction"],
	/** The reactable subject. */
	subject?:ResolverInputTypes["Reactable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveStar */
["RemoveStarInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Starrable ID to unstar. */
	starrableId: string
};
	/** Autogenerated return type of RemoveStar */
["RemoveStarPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The starrable. */
	starrable?:ResolverInputTypes["Starrable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RemoveUpvote */
["RemoveUpvoteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the discussion or comment to remove upvote. */
	subjectId: string
};
	/** Autogenerated return type of RemoveUpvote */
["RemoveUpvotePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The votable subject. */
	subject?:ResolverInputTypes["Votable"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'removed_from_project' event on a given issue or pull request. */
["RemovedFromProjectEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Project referenced by event. */
	project?:ResolverInputTypes["Project"],
	/** Column name referenced by this project event. */
	projectColumnName?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'renamed' event on a given issue or pull request */
["RenamedTitleEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the current title of the issue or pull request. */
	currentTitle?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the previous title of the issue or pull request. */
	previousTitle?:boolean | `@${string}`,
	/** Subject that was renamed. */
	subject?:ResolverInputTypes["RenamedTitleSubject"],
		__typename?: boolean | `@${string}`
}>;
	/** An object which has a renamable title */
["RenamedTitleSubject"]: AliasType<{
	Issue?:ResolverInputTypes["Issue"],
	PullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ReopenIssue */
["ReopenIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the issue to be opened. */
	issueId: string
};
	/** Autogenerated return type of ReopenIssue */
["ReopenIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was opened. */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ReopenPullRequest */
["ReopenPullRequestInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the pull request to be reopened. */
	pullRequestId: string
};
	/** Autogenerated return type of ReopenPullRequest */
["ReopenPullRequestPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that was reopened. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'reopened' event on any `Closable`. */
["ReopenedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Object that was reopened. */
	closable?:ResolverInputTypes["Closable"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The reason the issue state was changed to open. */
	stateReason?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.access event. */
["RepoAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoAccessAuditEntryVisibility"]:RepoAccessAuditEntryVisibility;
	/** Audit log entry for a repo.add_member event. */
["RepoAddMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoAddMemberAuditEntryVisibility"]:RepoAddMemberAuditEntryVisibility;
	/** Audit log entry for a repo.add_topic event. */
["RepoAddTopicAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The name of the topic added to the repository */
	topic?:ResolverInputTypes["Topic"],
	/** The name of the topic added to the repository */
	topicName?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.archived event. */
["RepoArchivedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoArchivedAuditEntryVisibility"]:RepoArchivedAuditEntryVisibility;
	/** Audit log entry for a repo.change_merge_setting event. */
["RepoChangeMergeSettingAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the change was to enable (true) or disable (false) the merge type */
	isEnabled?:boolean | `@${string}`,
	/** The merge method affected by the change */
	mergeType?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The merge options available for pull requests to this repository. */
["RepoChangeMergeSettingAuditEntryMergeType"]:RepoChangeMergeSettingAuditEntryMergeType;
	/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
["RepoConfigDisableAnonymousGitAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.disable_collaborators_only event. */
["RepoConfigDisableCollaboratorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.disable_contributors_only event. */
["RepoConfigDisableContributorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
["RepoConfigDisableSockpuppetDisallowedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
["RepoConfigEnableAnonymousGitAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.enable_collaborators_only event. */
["RepoConfigEnableCollaboratorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.enable_contributors_only event. */
["RepoConfigEnableContributorsOnlyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
["RepoConfigEnableSockpuppetDisallowedAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
["RepoConfigLockAnonymousGitAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
["RepoConfigUnlockAnonymousGitAccessAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repo.create event. */
["RepoCreateAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The name of the parent repository for this forked repository. */
	forkParentName?:boolean | `@${string}`,
	/** The name of the root repository for this network. */
	forkSourceName?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoCreateAuditEntryVisibility"]:RepoCreateAuditEntryVisibility;
	/** Audit log entry for a repo.destroy event. */
["RepoDestroyAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoDestroyAuditEntryVisibility"]:RepoDestroyAuditEntryVisibility;
	/** Audit log entry for a repo.remove_member event. */
["RepoRemoveMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
	/** The visibility of the repository */
	visibility?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The privacy of a repository */
["RepoRemoveMemberAuditEntryVisibility"]:RepoRemoveMemberAuditEntryVisibility;
	/** Audit log entry for a repo.remove_topic event. */
["RepoRemoveTopicAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The name of the topic added to the repository */
	topic?:ResolverInputTypes["Topic"],
	/** The name of the topic added to the repository */
	topicName?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The reasons a piece of content can be reported or minimized. */
["ReportedContentClassifiers"]:ReportedContentClassifiers;
	/** A repository contains the content for a project. */
["Repository"]: AliasType<{
	/** Whether or not a pull request head branch that is behind its base branch can
always be updated even if it is not required to be up to date before merging. */
	allowUpdateBranch?:boolean | `@${string}`,
assignableUsers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filters users with query on user name and login */
	query?: string | undefined | null},ResolverInputTypes["UserConnection"]],
	/** Whether or not Auto-merge can be enabled on pull requests in this repository. */
	autoMergeAllowed?:boolean | `@${string}`,
branchProtectionRules?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["BranchProtectionRuleConnection"]],
	/** Returns the code of conduct for this repository */
	codeOfConduct?:ResolverInputTypes["CodeOfConduct"],
codeowners?: [{	/** The ref name used to return the associated `CODEOWNERS` file. */
	refName?: string | undefined | null},ResolverInputTypes["RepositoryCodeowners"]],
collaborators?: [{	/** Collaborators affiliation level with a repository. */
	affiliation?: ResolverInputTypes["CollaboratorAffiliation"] | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filters users with query on user name and login */
	query?: string | undefined | null},ResolverInputTypes["RepositoryCollaboratorConnection"]],
commitComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CommitCommentConnection"]],
	/** Returns a list of contact links associated to the repository */
	contactLinks?:ResolverInputTypes["RepositoryContactLink"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The Ref associated with the repository's default branch. */
	defaultBranchRef?:ResolverInputTypes["Ref"],
	/** Whether or not branches are automatically deleted when merged in this repository. */
	deleteBranchOnMerge?:boolean | `@${string}`,
dependencyGraphManifests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Cursor to paginate dependencies */
	dependenciesAfter?: string | undefined | null,	/** Number of dependencies to fetch */
	dependenciesFirst?: number | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Flag to scope to only manifests with dependencies */
	withDependencies?: boolean | undefined | null},ResolverInputTypes["DependencyGraphManifestConnection"]],
deployKeys?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DeployKeyConnection"]],
deployments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Environments to list deployments for */
	environments?: Array<string> | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for deployments returned from the connection. */
	orderBy?: ResolverInputTypes["DeploymentOrder"] | undefined | null},ResolverInputTypes["DeploymentConnection"]],
	/** The description of the repository. */
	description?:boolean | `@${string}`,
	/** The description of the repository rendered to HTML. */
	descriptionHTML?:boolean | `@${string}`,
discussion?: [{	/** The number for the discussion to be returned. */
	number: number},ResolverInputTypes["Discussion"]],
discussionCategories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Filter by categories that are assignable by the viewer. */
	filterByAssignable?: boolean | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DiscussionCategoryConnection"]],
discussionCategory?: [{	/** The slug of the discussion category to be returned. */
	slug: string},ResolverInputTypes["DiscussionCategory"]],
discussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Only include discussions that belong to the category with this ID. */
	categoryId?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for discussions returned from the connection. */
	orderBy?: ResolverInputTypes["DiscussionOrder"] | undefined | null},ResolverInputTypes["DiscussionConnection"]],
	/** The number of kilobytes this repository occupies on disk. */
	diskUsage?:boolean | `@${string}`,
environment?: [{	/** The name of the environment to be returned. */
	name: string},ResolverInputTypes["Environment"]],
environments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["EnvironmentConnection"]],
	/** Returns how many forks there are of this repository in the whole network. */
	forkCount?:boolean | `@${string}`,
	/** Whether this repository allows forks. */
	forkingAllowed?:boolean | `@${string}`,
forks?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories returned from the connection */
	orderBy?: ResolverInputTypes["RepositoryOrder"] | undefined | null,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** If non-null, filters repositories according to privacy */
	privacy?: ResolverInputTypes["RepositoryPrivacy"] | undefined | null},ResolverInputTypes["RepositoryConnection"]],
	/** The funding links for this repository */
	fundingLinks?:ResolverInputTypes["FundingLink"],
	/** Indicates if the repository has issues feature enabled. */
	hasIssuesEnabled?:boolean | `@${string}`,
	/** Indicates if the repository has the Projects feature enabled. */
	hasProjectsEnabled?:boolean | `@${string}`,
	/** Indicates if the repository has wiki feature enabled. */
	hasWikiEnabled?:boolean | `@${string}`,
	/** The repository's URL. */
	homepageUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The interaction ability settings for this repository. */
	interactionAbility?:ResolverInputTypes["RepositoryInteractionAbility"],
	/** Indicates if the repository is unmaintained. */
	isArchived?:boolean | `@${string}`,
	/** Returns true if blank issue creation is allowed */
	isBlankIssuesEnabled?:boolean | `@${string}`,
	/** Returns whether or not this repository disabled. */
	isDisabled?:boolean | `@${string}`,
	/** Returns whether or not this repository is empty. */
	isEmpty?:boolean | `@${string}`,
	/** Identifies if the repository is a fork. */
	isFork?:boolean | `@${string}`,
	/** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
	isInOrganization?:boolean | `@${string}`,
	/** Indicates if the repository has been locked or not. */
	isLocked?:boolean | `@${string}`,
	/** Identifies if the repository is a mirror. */
	isMirror?:boolean | `@${string}`,
	/** Identifies if the repository is private or internal. */
	isPrivate?:boolean | `@${string}`,
	/** Returns true if this repository has a security policy */
	isSecurityPolicyEnabled?:boolean | `@${string}`,
	/** Identifies if the repository is a template that can be used to generate new repositories. */
	isTemplate?:boolean | `@${string}`,
	/** Is this repository a user configuration repository? */
	isUserConfigurationRepository?:boolean | `@${string}`,
issue?: [{	/** The number for the issue to be returned. */
	number: number},ResolverInputTypes["Issue"]],
issueOrPullRequest?: [{	/** The number for the issue to be returned. */
	number: number},ResolverInputTypes["IssueOrPullRequest"]],
	/** Returns a list of issue templates associated to the repository */
	issueTemplates?:ResolverInputTypes["IssueTemplate"],
issues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Filtering options for issues returned from the connection. */
	filterBy?: ResolverInputTypes["IssueFilters"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for issues returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the issues by. */
	states?: Array<ResolverInputTypes["IssueState"]> | undefined | null},ResolverInputTypes["IssueConnection"]],
label?: [{	/** Label name */
	name: string},ResolverInputTypes["Label"]],
labels?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for labels returned from the connection. */
	orderBy?: ResolverInputTypes["LabelOrder"] | undefined | null,	/** If provided, searches labels by name and description. */
	query?: string | undefined | null},ResolverInputTypes["LabelConnection"]],
languages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["LanguageOrder"] | undefined | null},ResolverInputTypes["LanguageConnection"]],
	/** Get the latest release for the repository if one exists. */
	latestRelease?:ResolverInputTypes["Release"],
	/** The license associated with the repository */
	licenseInfo?:ResolverInputTypes["License"],
	/** The reason the repository has been locked. */
	lockReason?:boolean | `@${string}`,
mentionableUsers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filters users with query on user name and login */
	query?: string | undefined | null},ResolverInputTypes["UserConnection"]],
	/** Whether or not PRs are merged with a merge commit on this repository. */
	mergeCommitAllowed?:boolean | `@${string}`,
	/** How the default commit message will be generated when merging a pull request. */
	mergeCommitMessage?:boolean | `@${string}`,
	/** How the default commit title will be generated when merging a pull request. */
	mergeCommitTitle?:boolean | `@${string}`,
milestone?: [{	/** The number for the milestone to be returned. */
	number: number},ResolverInputTypes["Milestone"]],
milestones?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for milestones. */
	orderBy?: ResolverInputTypes["MilestoneOrder"] | undefined | null,	/** Filters milestones with a query on the title */
	query?: string | undefined | null,	/** Filter by the state of the milestones. */
	states?: Array<ResolverInputTypes["MilestoneState"]> | undefined | null},ResolverInputTypes["MilestoneConnection"]],
	/** The repository's original mirror URL. */
	mirrorUrl?:boolean | `@${string}`,
	/** The name of the repository. */
	name?:boolean | `@${string}`,
	/** The repository's name with owner. */
	nameWithOwner?:boolean | `@${string}`,
object?: [{	/** A Git revision expression suitable for rev-parse */
	expression?: string | undefined | null,	/** The Git object ID */
	oid?: ResolverInputTypes["GitObjectID"] | undefined | null},ResolverInputTypes["GitObject"]],
	/** The image used to represent this repository in Open Graph data. */
	openGraphImageUrl?:boolean | `@${string}`,
	/** The User owner of the repository. */
	owner?:ResolverInputTypes["RepositoryOwner"],
packages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Find packages by their names. */
	names?: Array<string | undefined | null> | undefined | null,	/** Ordering of the returned packages. */
	orderBy?: ResolverInputTypes["PackageOrder"] | undefined | null,	/** Filter registry package by type. */
	packageType?: ResolverInputTypes["PackageType"] | undefined | null,	/** Find packages in a repository by ID. */
	repositoryId?: string | undefined | null},ResolverInputTypes["PackageConnection"]],
	/** The repository parent, if this is a fork. */
	parent?:ResolverInputTypes["Repository"],
pinnedDiscussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PinnedDiscussionConnection"]],
pinnedIssues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PinnedIssueConnection"]],
	/** The primary language of the repository's code. */
	primaryLanguage?:ResolverInputTypes["Language"],
project?: [{	/** The project number to find. */
	number: number},ResolverInputTypes["Project"]],
projectNext?: [{	/** The ProjectNext number. */
	number: number},ResolverInputTypes["ProjectNext"]],
projectV2?: [{	/** The Project number. */
	number: number},ResolverInputTypes["ProjectV2"]],
projects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for projects returned from the connection */
	orderBy?: ResolverInputTypes["ProjectOrder"] | undefined | null,	/** Query to search projects by, currently only searching by name. */
	search?: string | undefined | null,	/** A list of states to filter the projects by. */
	states?: Array<ResolverInputTypes["ProjectState"]> | undefined | null},ResolverInputTypes["ProjectConnection"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** A project (beta) to search for linked to the repo. */
	query?: string | undefined | null,	/** How to order the returned project (beta) objects. */
	sortBy?: ResolverInputTypes["ProjectNextOrderField"] | undefined | null},ResolverInputTypes["ProjectNextConnection"]],
	/** The HTTP path listing the repository's projects */
	projectsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing the repository's projects */
	projectsUrl?:boolean | `@${string}`,
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** How to order the returned projects. */
	orderBy?: ResolverInputTypes["ProjectV2Order"] | undefined | null,	/** A project to search for linked to the repo. */
	query?: string | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
pullRequest?: [{	/** The number for the pull request to be returned. */
	number: number},ResolverInputTypes["PullRequest"]],
	/** Returns a list of pull request templates associated to the repository */
	pullRequestTemplates?:ResolverInputTypes["PullRequestTemplate"],
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the pull requests by. */
	states?: Array<ResolverInputTypes["PullRequestState"]> | undefined | null},ResolverInputTypes["PullRequestConnection"]],
	/** Identifies when the repository was last pushed to. */
	pushedAt?:boolean | `@${string}`,
	/** Whether or not rebase-merging is enabled on this repository. */
	rebaseMergeAllowed?:boolean | `@${string}`,
recentProjects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
ref?: [{	/** The ref to retrieve. Fully qualified matches are checked in order
(`refs/heads/master`) before falling back onto checks for short name matches (`master`). */
	qualifiedName: string},ResolverInputTypes["Ref"]],
refs?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** DEPRECATED: use orderBy. The ordering direction. */
	direction?: ResolverInputTypes["OrderDirection"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for refs returned from the connection. */
	orderBy?: ResolverInputTypes["RefOrder"] | undefined | null,	/** Filters refs with query on name */
	query?: string | undefined | null,	/** A ref name prefix like `refs/heads/`, `refs/tags/`, etc. */
	refPrefix: string},ResolverInputTypes["RefConnection"]],
release?: [{	/** The name of the Tag the Release was created from */
	tagName: string},ResolverInputTypes["Release"]],
releases?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["ReleaseOrder"] | undefined | null},ResolverInputTypes["ReleaseConnection"]],
repositoryTopics?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["RepositoryTopicConnection"]],
	/** The HTTP path for this repository */
	resourcePath?:boolean | `@${string}`,
	/** The security policy URL. */
	securityPolicyUrl?:boolean | `@${string}`,
shortDescriptionHTML?: [{	/** How many characters to return. */
	limit?: number | undefined | null},boolean | `@${string}`],
	/** Whether or not squash-merging is enabled on this repository. */
	squashMergeAllowed?:boolean | `@${string}`,
	/** How the default commit message will be generated when squash merging a pull request. */
	squashMergeCommitMessage?:boolean | `@${string}`,
	/** How the default commit title will be generated when squash merging a pull request. */
	squashMergeCommitTitle?:boolean | `@${string}`,
	/** Whether a squash merge commit can use the pull request title as default. */
	squashPrTitleUsedAsDefault?:boolean | `@${string}`,
	/** The SSH URL to clone this repository */
	sshUrl?:boolean | `@${string}`,
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount?:boolean | `@${string}`,
stargazers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["StarOrder"] | undefined | null},ResolverInputTypes["StargazerConnection"]],
submodules?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["SubmoduleConnection"]],
	/** Temporary authentication token for cloning this repository. */
	tempCloneToken?:boolean | `@${string}`,
	/** The repository from which this repository was generated, if any. */
	templateRepository?:ResolverInputTypes["Repository"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this repository */
	url?:boolean | `@${string}`,
	/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
	usesCustomOpenGraphImage?:boolean | `@${string}`,
	/** Indicates whether the viewer has admin permissions on this repository. */
	viewerCanAdminister?:boolean | `@${string}`,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Indicates whether the viewer can update the topics of this repository. */
	viewerCanUpdateTopics?:boolean | `@${string}`,
	/** The last commit email for the viewer. */
	viewerDefaultCommitEmail?:boolean | `@${string}`,
	/** The last used merge method by the viewer or the default for the repository. */
	viewerDefaultMergeMethod?:boolean | `@${string}`,
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred?:boolean | `@${string}`,
	/** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
	viewerPermission?:boolean | `@${string}`,
	/** A list of emails this viewer can commit with. */
	viewerPossibleCommitEmails?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
	/** Indicates the repository's visibility level. */
	visibility?:boolean | `@${string}`,
vulnerabilityAlerts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Filter by the scope of the alert's dependency */
	dependencyScopes?: Array<ResolverInputTypes["RepositoryVulnerabilityAlertDependencyScope"]> | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter by the state of the alert */
	states?: Array<ResolverInputTypes["RepositoryVulnerabilityAlertState"]> | undefined | null},ResolverInputTypes["RepositoryVulnerabilityAlertConnection"]],
watchers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserConnection"]],
	/** Whether contributors are required to sign off on web-based commits in this repository. */
	webCommitSignoffRequired?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The affiliation of a user to a repository */
["RepositoryAffiliation"]:RepositoryAffiliation;
	/** Metadata for an audit entry with action repo.* */
["RepositoryAuditEntryData"]:AliasType<{
		/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`;
		['...on OrgRestoreMemberMembershipRepositoryAuditEntryData']?: Omit<ResolverInputTypes["OrgRestoreMemberMembershipRepositoryAuditEntryData"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on PrivateRepositoryForkingDisableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingDisableAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on PrivateRepositoryForkingEnableAuditEntry']?: Omit<ResolverInputTypes["PrivateRepositoryForkingEnableAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoAccessAuditEntry']?: Omit<ResolverInputTypes["RepoAccessAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoAddMemberAuditEntry']?: Omit<ResolverInputTypes["RepoAddMemberAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoAddTopicAuditEntry']?: Omit<ResolverInputTypes["RepoAddTopicAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoArchivedAuditEntry']?: Omit<ResolverInputTypes["RepoArchivedAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoChangeMergeSettingAuditEntry']?: Omit<ResolverInputTypes["RepoChangeMergeSettingAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigDisableAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigDisableContributorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableContributorsOnlyAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']?: Omit<ResolverInputTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigEnableAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigEnableContributorsOnlyAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableContributorsOnlyAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']?: Omit<ResolverInputTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigLockAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigLockAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']?: Omit<ResolverInputTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoCreateAuditEntry']?: Omit<ResolverInputTypes["RepoCreateAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoDestroyAuditEntry']?: Omit<ResolverInputTypes["RepoDestroyAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["RepoRemoveMemberAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ResolverInputTypes["RepoRemoveTopicAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamAddRepositoryAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamRemoveRepositoryAuditEntry"],keyof ResolverInputTypes["RepositoryAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Information extracted from a repository's `CODEOWNERS` file. */
["RepositoryCodeowners"]: AliasType<{
	/** Any problems that were encountered while parsing the `CODEOWNERS` file. */
	errors?:ResolverInputTypes["RepositoryCodeownersError"],
		__typename?: boolean | `@${string}`
}>;
	/** An error in a `CODEOWNERS` file. */
["RepositoryCodeownersError"]: AliasType<{
	/** The column number where the error occurs. */
	column?:boolean | `@${string}`,
	/** A short string describing the type of error. */
	kind?:boolean | `@${string}`,
	/** The line number where the error occurs. */
	line?:boolean | `@${string}`,
	/** A complete description of the error, combining information from other fields. */
	message?:boolean | `@${string}`,
	/** The path to the file when the error occurs. */
	path?:boolean | `@${string}`,
	/** The content of the line where the error occurs. */
	source?:boolean | `@${string}`,
	/** A suggestion of how to fix the error. */
	suggestion?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["RepositoryCollaboratorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["RepositoryCollaboratorEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user who is a collaborator of a repository. */
["RepositoryCollaboratorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ResolverInputTypes["User"],
	/** The permission the user has on the repository. */
	permission?:boolean | `@${string}`,
	/** A list of sources for the user's access to the repository. */
	permissionSources?:ResolverInputTypes["PermissionSource"],
		__typename?: boolean | `@${string}`
}>;
	/** A list of repositories owned by the subject. */
["RepositoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["RepositoryEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Repository"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** The total size in kilobytes of all repositories in the connection. */
	totalDiskUsage?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A repository contact link. */
["RepositoryContactLink"]: AliasType<{
	/** The contact link purpose. */
	about?:boolean | `@${string}`,
	/** The contact link name. */
	name?:boolean | `@${string}`,
	/** The contact link URL. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The reason a repository is listed as 'contributed'. */
["RepositoryContributionType"]:RepositoryContributionType;
	/** Represents an author of discussions in repositories. */
["RepositoryDiscussionAuthor"]:AliasType<{
	repositoryDiscussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Filter discussions to only those that have been answered or not. Defaults to
including both answered and unanswered discussions. */
	answered?: boolean | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for discussions returned from the connection. */
	orderBy?: ResolverInputTypes["DiscussionOrder"] | undefined | null,	/** Filter discussions to only those in a specific repository. */
	repositoryId?: string | undefined | null},ResolverInputTypes["DiscussionConnection"]];
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["RepositoryDiscussionAuthor"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["RepositoryDiscussionAuthor"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents an author of discussion comments in repositories. */
["RepositoryDiscussionCommentAuthor"]:AliasType<{
	repositoryDiscussionComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter discussion comments to only those that were marked as the answer */
	onlyAnswers?: boolean | undefined | null,	/** Filter discussion comments to only those in a specific repository. */
	repositoryId?: string | undefined | null},ResolverInputTypes["DiscussionCommentConnection"]];
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["RepositoryDiscussionCommentAuthor"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["RepositoryDiscussionCommentAuthor"]>;
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RepositoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A subset of repository info. */
["RepositoryInfo"]:AliasType<{
		/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The description of the repository. */
	description?:boolean | `@${string}`,
	/** The description of the repository rendered to HTML. */
	descriptionHTML?:boolean | `@${string}`,
	/** Returns how many forks there are of this repository in the whole network. */
	forkCount?:boolean | `@${string}`,
	/** Indicates if the repository has issues feature enabled. */
	hasIssuesEnabled?:boolean | `@${string}`,
	/** Indicates if the repository has the Projects feature enabled. */
	hasProjectsEnabled?:boolean | `@${string}`,
	/** Indicates if the repository has wiki feature enabled. */
	hasWikiEnabled?:boolean | `@${string}`,
	/** The repository's URL. */
	homepageUrl?:boolean | `@${string}`,
	/** Indicates if the repository is unmaintained. */
	isArchived?:boolean | `@${string}`,
	/** Identifies if the repository is a fork. */
	isFork?:boolean | `@${string}`,
	/** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
	isInOrganization?:boolean | `@${string}`,
	/** Indicates if the repository has been locked or not. */
	isLocked?:boolean | `@${string}`,
	/** Identifies if the repository is a mirror. */
	isMirror?:boolean | `@${string}`,
	/** Identifies if the repository is private or internal. */
	isPrivate?:boolean | `@${string}`,
	/** Identifies if the repository is a template that can be used to generate new repositories. */
	isTemplate?:boolean | `@${string}`,
	/** The license associated with the repository */
	licenseInfo?:ResolverInputTypes["License"],
	/** The reason the repository has been locked. */
	lockReason?:boolean | `@${string}`,
	/** The repository's original mirror URL. */
	mirrorUrl?:boolean | `@${string}`,
	/** The name of the repository. */
	name?:boolean | `@${string}`,
	/** The repository's name with owner. */
	nameWithOwner?:boolean | `@${string}`,
	/** The image used to represent this repository in Open Graph data. */
	openGraphImageUrl?:boolean | `@${string}`,
	/** The User owner of the repository. */
	owner?:ResolverInputTypes["RepositoryOwner"],
	/** Identifies when the repository was last pushed to. */
	pushedAt?:boolean | `@${string}`,
	/** The HTTP path for this repository */
	resourcePath?:boolean | `@${string}`,
shortDescriptionHTML?: [{	/** How many characters to return. */
	limit?: number | undefined | null},boolean | `@${string}`],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this repository */
	url?:boolean | `@${string}`,
	/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
	usesCustomOpenGraphImage?:boolean | `@${string}`,
	/** Indicates the repository's visibility level. */
	visibility?:boolean | `@${string}`;
		['...on Repository']?: Omit<ResolverInputTypes["Repository"],keyof ResolverInputTypes["RepositoryInfo"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Repository interaction limit that applies to this object. */
["RepositoryInteractionAbility"]: AliasType<{
	/** The time the currently active limit expires. */
	expiresAt?:boolean | `@${string}`,
	/** The current limit that is enabled on this object. */
	limit?:boolean | `@${string}`,
	/** The origin of the currently active interaction limit. */
	origin?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A repository interaction limit. */
["RepositoryInteractionLimit"]:RepositoryInteractionLimit;
	/** The length for a repository interaction limit to be enabled for. */
["RepositoryInteractionLimitExpiry"]:RepositoryInteractionLimitExpiry;
	/** Indicates where an interaction limit is configured. */
["RepositoryInteractionLimitOrigin"]:RepositoryInteractionLimitOrigin;
	/** An invitation for a user to be added to a repository. */
["RepositoryInvitation"]: AliasType<{
	/** The email address that received the invitation. */
	email?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The user who received the invitation. */
	invitee?:ResolverInputTypes["User"],
	/** The user who created the invitation. */
	inviter?:ResolverInputTypes["User"],
	/** The permalink for this repository invitation. */
	permalink?:boolean | `@${string}`,
	/** The permission granted on this repository by this invitation. */
	permission?:boolean | `@${string}`,
	/** The Repository the user is invited to. */
	repository?:ResolverInputTypes["RepositoryInfo"],
		__typename?: boolean | `@${string}`
}>;
	/** A list of repository invitations. */
["RepositoryInvitationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["RepositoryInvitationEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["RepositoryInvitation"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RepositoryInvitationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["RepositoryInvitation"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for repository invitation connections. */
["RepositoryInvitationOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order repository invitations by. */
	field: ResolverInputTypes["RepositoryInvitationOrderField"]
};
	/** Properties by which repository invitation connections can be ordered. */
["RepositoryInvitationOrderField"]:RepositoryInvitationOrderField;
	/** The possible reasons a given repository could be in a locked state. */
["RepositoryLockReason"]:RepositoryLockReason;
	/** An Octoshift repository migration. */
["RepositoryMigration"]: AliasType<{
	/** The Octoshift migration flag to continue on error. */
	continueOnError?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The reason the migration failed. */
	failureReason?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The URL for the migration log (expires 1 day after migration completes). */
	migrationLogUrl?:boolean | `@${string}`,
	/** The Octoshift migration source. */
	migrationSource?:ResolverInputTypes["MigrationSource"],
	/** The target repository name. */
	repositoryName?:boolean | `@${string}`,
	/** The Octoshift migration source URL. */
	sourceUrl?:boolean | `@${string}`,
	/** The Octoshift migration state. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for RepositoryMigration. */
["RepositoryMigrationConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["RepositoryMigrationEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["RepositoryMigration"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a repository migration. */
["RepositoryMigrationEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["RepositoryMigration"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for repository migrations. */
["RepositoryMigrationOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["RepositoryMigrationOrderDirection"],
	/** The field to order repository migrations by. */
	field: ResolverInputTypes["RepositoryMigrationOrderField"]
};
	/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
["RepositoryMigrationOrderDirection"]:RepositoryMigrationOrderDirection;
	/** Properties by which repository migrations can be ordered. */
["RepositoryMigrationOrderField"]:RepositoryMigrationOrderField;
	/** Represents a object that belongs to a repository. */
["RepositoryNode"]:AliasType<{
		/** The repository associated with this node. */
	repository?:ResolverInputTypes["Repository"];
		['...on CommitComment']?: Omit<ResolverInputTypes["CommitComment"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on CommitCommentThread']?: Omit<ResolverInputTypes["CommitCommentThread"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on DependabotUpdate']?: Omit<ResolverInputTypes["DependabotUpdate"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on DiscussionCategory']?: Omit<ResolverInputTypes["DiscussionCategory"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on IssueComment']?: Omit<ResolverInputTypes["IssueComment"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on PinnedDiscussion']?: Omit<ResolverInputTypes["PinnedDiscussion"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on PullRequestCommitCommentThread']?: Omit<ResolverInputTypes["PullRequestCommitCommentThread"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on PullRequestReview']?: Omit<ResolverInputTypes["PullRequestReview"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on PullRequestReviewComment']?: Omit<ResolverInputTypes["PullRequestReviewComment"],keyof ResolverInputTypes["RepositoryNode"]>;
		['...on RepositoryVulnerabilityAlert']?: Omit<ResolverInputTypes["RepositoryVulnerabilityAlert"],keyof ResolverInputTypes["RepositoryNode"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for repository connections */
["RepositoryOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order repositories by. */
	field: ResolverInputTypes["RepositoryOrderField"]
};
	/** Properties by which repository connections can be ordered. */
["RepositoryOrderField"]:RepositoryOrderField;
	/** Represents an owner of a Repository. */
["RepositoryOwner"]:AliasType<{
	avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	id?:boolean | `@${string}`,
	/** The username used to login. */
	login?:boolean | `@${string}`,
repositories?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** If non-null, filters repositories according to whether they are forks of another repository */
	isFork?: boolean | undefined | null,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories returned from the connection */
	orderBy?: ResolverInputTypes["RepositoryOrder"] | undefined | null,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** If non-null, filters repositories according to privacy */
	privacy?: ResolverInputTypes["RepositoryPrivacy"] | undefined | null},ResolverInputTypes["RepositoryConnection"]],
repository?: [{	/** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
	followRenames?: boolean | undefined | null,	/** Name of Repository to find. */
	name: string},ResolverInputTypes["Repository"]],
	/** The HTTP URL for the owner. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the owner. */
	url?:boolean | `@${string}`;
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["RepositoryOwner"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["RepositoryOwner"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The access level to a repository */
["RepositoryPermission"]:RepositoryPermission;
	/** The privacy of a repository */
["RepositoryPrivacy"]:RepositoryPrivacy;
	/** A repository-topic connects a repository to a topic. */
["RepositoryTopic"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The HTTP path for this repository-topic. */
	resourcePath?:boolean | `@${string}`,
	/** The topic. */
	topic?:ResolverInputTypes["Topic"],
	/** The HTTP URL for this repository-topic. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for RepositoryTopic. */
["RepositoryTopicConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["RepositoryTopicEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["RepositoryTopic"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RepositoryTopicEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["RepositoryTopic"],
		__typename?: boolean | `@${string}`
}>;
	/** The repository's visibility level. */
["RepositoryVisibility"]:RepositoryVisibility;
	/** Audit log entry for a repository_visibility_change.disable event. */
["RepositoryVisibilityChangeDisableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a repository_visibility_change.enable event. */
["RepositoryVisibilityChangeEnableAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?:boolean | `@${string}`,
	/** The slug of the enterprise. */
	enterpriseSlug?:boolean | `@${string}`,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
["RepositoryVulnerabilityAlert"]: AliasType<{
	/** When was the alert created? */
	createdAt?:boolean | `@${string}`,
	/** The associated Dependabot update */
	dependabotUpdate?:ResolverInputTypes["DependabotUpdate"],
	/** The scope of an alert's dependency */
	dependencyScope?:boolean | `@${string}`,
	/** Comment explaining the reason the alert was dismissed */
	dismissComment?:boolean | `@${string}`,
	/** The reason the alert was dismissed */
	dismissReason?:boolean | `@${string}`,
	/** When was the alert dismissed? */
	dismissedAt?:boolean | `@${string}`,
	/** The user who dismissed the alert */
	dismisser?:ResolverInputTypes["User"],
	/** The reason the alert was marked as fixed. */
	fixReason?:boolean | `@${string}`,
	/** When was the alert fixed? */
	fixedAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the alert number. */
	number?:boolean | `@${string}`,
	/** The associated repository */
	repository?:ResolverInputTypes["Repository"],
	/** The associated security advisory */
	securityAdvisory?:ResolverInputTypes["SecurityAdvisory"],
	/** The associated security vulnerability */
	securityVulnerability?:ResolverInputTypes["SecurityVulnerability"],
	/** Identifies the state of the alert. */
	state?:boolean | `@${string}`,
	/** The vulnerable manifest filename */
	vulnerableManifestFilename?:boolean | `@${string}`,
	/** The vulnerable manifest path */
	vulnerableManifestPath?:boolean | `@${string}`,
	/** The vulnerable requirements */
	vulnerableRequirements?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for RepositoryVulnerabilityAlert. */
["RepositoryVulnerabilityAlertConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["RepositoryVulnerabilityAlertEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["RepositoryVulnerabilityAlert"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible scopes of an alert's dependency. */
["RepositoryVulnerabilityAlertDependencyScope"]:RepositoryVulnerabilityAlertDependencyScope;
	/** An edge in a connection. */
["RepositoryVulnerabilityAlertEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["RepositoryVulnerabilityAlert"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states of an alert */
["RepositoryVulnerabilityAlertState"]:RepositoryVulnerabilityAlertState;
	/** Autogenerated input type of RequestReviews */
["RequestReviewsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the pull request to modify. */
	pullRequestId: string,
	/** The Node IDs of the team to request. */
	teamIds?: Array<string> | undefined | null,
	/** Add users to the set rather than replace. */
	union?: boolean | undefined | null,
	/** The Node IDs of the user to request. */
	userIds?: Array<string> | undefined | null
};
	/** Autogenerated return type of RequestReviews */
["RequestReviewsPayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The pull request that is getting requests. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The edge from the pull request to the requested reviewers. */
	requestedReviewersEdge?:ResolverInputTypes["UserEdge"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states that can be requested when creating a check run. */
["RequestableCheckStatusState"]:RequestableCheckStatusState;
	/** Types that can be requested reviewers. */
["RequestedReviewer"]: AliasType<{
	Mannequin?:ResolverInputTypes["Mannequin"],
	Team?:ResolverInputTypes["Team"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for RequestedReviewer. */
["RequestedReviewerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["RequestedReviewerEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["RequestedReviewer"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["RequestedReviewerEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["RequestedReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a type that can be required by a pull request for merging. */
["RequirableByPullRequest"]:AliasType<{
	isRequired?: [{	/** The id of the pull request this is required for */
	pullRequestId?: string | undefined | null,	/** The number of the pull request this is required for */
	pullRequestNumber?: number | undefined | null},boolean | `@${string}`];
		['...on CheckRun']?: Omit<ResolverInputTypes["CheckRun"],keyof ResolverInputTypes["RequirableByPullRequest"]>;
		['...on StatusContext']?: Omit<ResolverInputTypes["StatusContext"],keyof ResolverInputTypes["RequirableByPullRequest"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a required status check for a protected branch, but not any specific run of that check. */
["RequiredStatusCheckDescription"]: AliasType<{
	/** The App that must provide this status in order for it to be accepted. */
	app?:ResolverInputTypes["App"],
	/** The name of this status. */
	context?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Specifies the attributes for a new or updated required status check. */
["RequiredStatusCheckInput"]: {
	/** The ID of the App that must set the status in order for it to be accepted.
Omit this value to use whichever app has recently been setting this status, or
use "any" to allow any app to set the status. */
	appId?: string | undefined | null,
	/** Status check context that must pass for commits to be accepted to the matching branch. */
	context: string
};
	/** Autogenerated input type of RerequestCheckSuite */
["RerequestCheckSuiteInput"]: {
	/** The Node ID of the check suite. */
	checkSuiteId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of RerequestCheckSuite */
["RerequestCheckSuitePayload"]: AliasType<{
	/** The requested check suite. */
	checkSuite?:ResolverInputTypes["CheckSuite"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of ResolveReviewThread */
["ResolveReviewThreadInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the thread to resolve */
	threadId: string
};
	/** Autogenerated return type of ResolveReviewThread */
["ResolveReviewThreadPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The thread to resolve. */
	thread?:ResolverInputTypes["PullRequestReviewThread"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a private contribution a user made on GitHub. */
["RestrictedContribution"]: AliasType<{
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted?:boolean | `@${string}`,
	/** When this contribution was made. */
	occurredAt?:boolean | `@${string}`,
	/** The HTTP path for this contribution. */
	resourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this contribution. */
	url?:boolean | `@${string}`,
	/** The user who made this contribution. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A user, team, or app who has the ability to dismiss a review on a protected branch. */
["ReviewDismissalAllowance"]: AliasType<{
	/** The actor that can dismiss. */
	actor?:ResolverInputTypes["ReviewDismissalAllowanceActor"],
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?:ResolverInputTypes["BranchProtectionRule"],
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be an actor. */
["ReviewDismissalAllowanceActor"]: AliasType<{
	App?:ResolverInputTypes["App"],
	Team?:ResolverInputTypes["Team"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ReviewDismissalAllowance. */
["ReviewDismissalAllowanceConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ReviewDismissalAllowanceEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ReviewDismissalAllowance"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ReviewDismissalAllowanceEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ReviewDismissalAllowance"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'review_dismissed' event on a given issue or pull request. */
["ReviewDismissedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** Identifies the optional message associated with the 'review_dismissed' event. */
	dismissalMessage?:boolean | `@${string}`,
	/** Identifies the optional message associated with the event, rendered to HTML. */
	dismissalMessageHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the previous state of the review with the 'review_dismissed' event. */
	previousReviewState?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** Identifies the commit which caused the review to become stale. */
	pullRequestCommit?:ResolverInputTypes["PullRequestCommit"],
	/** The HTTP path for this review dismissed event. */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the review associated with the 'review_dismissed' event. */
	review?:ResolverInputTypes["PullRequestReview"],
	/** The HTTP URL for this review dismissed event. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A request for a user to review a pull request. */
["ReviewRequest"]: AliasType<{
	/** Whether this request was created for a code owner */
	asCodeOwner?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the pull request associated with this review request. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** The reviewer that is requested. */
	requestedReviewer?:ResolverInputTypes["RequestedReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for ReviewRequest. */
["ReviewRequestConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["ReviewRequestEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["ReviewRequest"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["ReviewRequestEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["ReviewRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'review_request_removed' event on a given pull request. */
["ReviewRequestRemovedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** Identifies the reviewer whose review request was removed. */
	requestedReviewer?:ResolverInputTypes["RequestedReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'review_requested' event on a given pull request. */
["ReviewRequestedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** PullRequest referenced by event. */
	pullRequest?:ResolverInputTypes["PullRequest"],
	/** Identifies the reviewer whose review was requested. */
	requestedReviewer?:ResolverInputTypes["RequestedReviewer"],
		__typename?: boolean | `@${string}`
}>;
	/** A hovercard context with a message describing the current code review state of the pull
request. */
["ReviewStatusHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
	/** The current status of the pull request with respect to code review. */
	reviewDecision?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
["RevokeEnterpriseOrganizationsMigratorRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
	enterpriseId: string,
	/** The login of the user to revoke the migrator role */
	login: string
};
	/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
["RevokeEnterpriseOrganizationsMigratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["OrganizationConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of RevokeMigratorRole */
["RevokeMigratorRoleInput"]: {
	/** The user login or Team slug to revoke the migrator role from. */
	actor: string,
	/** Specifies the type of the actor, can be either USER or TEAM. */
	actorType: ResolverInputTypes["ActorType"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the organization that the user/team belongs to. */
	organizationId: string
};
	/** Autogenerated return type of RevokeMigratorRole */
["RevokeMigratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Did the operation succeed? */
	success?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Possible roles a user may have in relation to an organization. */
["RoleInOrganization"]:RoleInOrganization;
	/** The possible digest algorithms used to sign SAML requests for an identity provider. */
["SamlDigestAlgorithm"]:SamlDigestAlgorithm;
	/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
["SamlSignatureAlgorithm"]:SamlSignatureAlgorithm;
	/** A Saved Reply is text a user can use to reply quickly. */
["SavedReply"]: AliasType<{
	/** The body of the saved reply. */
	body?:boolean | `@${string}`,
	/** The saved reply body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The title of the saved reply. */
	title?:boolean | `@${string}`,
	/** The user that saved this reply. */
	user?:ResolverInputTypes["Actor"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SavedReply. */
["SavedReplyConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SavedReplyEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["SavedReply"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SavedReplyEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["SavedReply"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for saved reply connections. */
["SavedReplyOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order saved replies by. */
	field: ResolverInputTypes["SavedReplyOrderField"]
};
	/** Properties by which saved reply connections can be ordered. */
["SavedReplyOrderField"]:SavedReplyOrderField;
	/** The results of a search. */
["SearchResultItem"]: AliasType<{
	App?:ResolverInputTypes["App"],
	Discussion?:ResolverInputTypes["Discussion"],
	Issue?:ResolverInputTypes["Issue"],
	MarketplaceListing?:ResolverInputTypes["MarketplaceListing"],
	Organization?:ResolverInputTypes["Organization"],
	PullRequest?:ResolverInputTypes["PullRequest"],
	Repository?:ResolverInputTypes["Repository"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages. */
["SearchResultItemConnection"]: AliasType<{
	/** The total number of pieces of code that matched the search query. Regardless
of the total number of matches, a maximum of 1,000 results will be available
across all types. */
	codeCount?:boolean | `@${string}`,
	/** The total number of discussions that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	discussionCount?:boolean | `@${string}`,
	/** A list of edges. */
	edges?:ResolverInputTypes["SearchResultItemEdge"],
	/** The total number of issues that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types. */
	issueCount?:boolean | `@${string}`,
	/** A list of nodes. */
	nodes?:ResolverInputTypes["SearchResultItem"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** The total number of repositories that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	repositoryCount?:boolean | `@${string}`,
	/** The total number of users that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types. */
	userCount?:boolean | `@${string}`,
	/** The total number of wiki pages that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	wikiCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SearchResultItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["SearchResultItem"],
	/** Text matches on the result found. */
	textMatches?:ResolverInputTypes["TextMatch"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents the individual results of a search. */
["SearchType"]:SearchType;
	/** A GitHub Security Advisory */
["SecurityAdvisory"]: AliasType<{
	/** The classification of the advisory */
	classification?:boolean | `@${string}`,
	/** The CVSS associated with this advisory */
	cvss?:ResolverInputTypes["CVSS"],
cwes?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CWEConnection"]],
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** This is a long plaintext description of the advisory */
	description?:boolean | `@${string}`,
	/** The GitHub Security Advisory ID */
	ghsaId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** A list of identifiers for this advisory */
	identifiers?:ResolverInputTypes["SecurityAdvisoryIdentifier"],
	/** The permalink for the advisory's dependabot alerts page */
	notificationsPermalink?:boolean | `@${string}`,
	/** The organization that originated the advisory */
	origin?:boolean | `@${string}`,
	/** The permalink for the advisory */
	permalink?:boolean | `@${string}`,
	/** When the advisory was published */
	publishedAt?:boolean | `@${string}`,
	/** A list of references for this advisory */
	references?:ResolverInputTypes["SecurityAdvisoryReference"],
	/** The severity of the advisory */
	severity?:boolean | `@${string}`,
	/** A short plaintext summary of the advisory */
	summary?:boolean | `@${string}`,
	/** When the advisory was last updated */
	updatedAt?:boolean | `@${string}`,
vulnerabilities?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** A list of advisory classifications to filter vulnerabilities by. */
	classifications?: Array<ResolverInputTypes["SecurityAdvisoryClassification"]> | undefined | null,	/** An ecosystem to filter vulnerabilities by. */
	ecosystem?: ResolverInputTypes["SecurityAdvisoryEcosystem"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the returned topics. */
	orderBy?: ResolverInputTypes["SecurityVulnerabilityOrder"] | undefined | null,	/** A package name to filter vulnerabilities by. */
	package?: string | undefined | null,	/** A list of severities to filter vulnerabilities by. */
	severities?: Array<ResolverInputTypes["SecurityAdvisorySeverity"]> | undefined | null},ResolverInputTypes["SecurityVulnerabilityConnection"]],
	/** When the advisory was withdrawn, if it has been withdrawn */
	withdrawnAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Classification of the advisory. */
["SecurityAdvisoryClassification"]:SecurityAdvisoryClassification;
	/** The connection type for SecurityAdvisory. */
["SecurityAdvisoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SecurityAdvisoryEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["SecurityAdvisory"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible ecosystems of a security vulnerability's package. */
["SecurityAdvisoryEcosystem"]:SecurityAdvisoryEcosystem;
	/** An edge in a connection. */
["SecurityAdvisoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["SecurityAdvisory"],
		__typename?: boolean | `@${string}`
}>;
	/** A GitHub Security Advisory Identifier */
["SecurityAdvisoryIdentifier"]: AliasType<{
	/** The identifier type, e.g. GHSA, CVE */
	type?:boolean | `@${string}`,
	/** The identifier */
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An advisory identifier to filter results on. */
["SecurityAdvisoryIdentifierFilter"]: {
	/** The identifier type. */
	type: ResolverInputTypes["SecurityAdvisoryIdentifierType"],
	/** The identifier string. Supports exact or partial matching. */
	value: string
};
	/** Identifier formats available for advisories. */
["SecurityAdvisoryIdentifierType"]:SecurityAdvisoryIdentifierType;
	/** Ordering options for security advisory connections */
["SecurityAdvisoryOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order security advisories by. */
	field: ResolverInputTypes["SecurityAdvisoryOrderField"]
};
	/** Properties by which security advisory connections can be ordered. */
["SecurityAdvisoryOrderField"]:SecurityAdvisoryOrderField;
	/** An individual package */
["SecurityAdvisoryPackage"]: AliasType<{
	/** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
	ecosystem?:boolean | `@${string}`,
	/** The package name */
	name?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An individual package version */
["SecurityAdvisoryPackageVersion"]: AliasType<{
	/** The package name or version */
	identifier?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A GitHub Security Advisory Reference */
["SecurityAdvisoryReference"]: AliasType<{
	/** A publicly accessible reference */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Severity of the vulnerability. */
["SecurityAdvisorySeverity"]:SecurityAdvisorySeverity;
	/** An individual vulnerability within an Advisory */
["SecurityVulnerability"]: AliasType<{
	/** The Advisory associated with this Vulnerability */
	advisory?:ResolverInputTypes["SecurityAdvisory"],
	/** The first version containing a fix for the vulnerability */
	firstPatchedVersion?:ResolverInputTypes["SecurityAdvisoryPackageVersion"],
	/** A description of the vulnerable package */
	package?:ResolverInputTypes["SecurityAdvisoryPackage"],
	/** The severity of the vulnerability within this package */
	severity?:boolean | `@${string}`,
	/** When the vulnerability was last updated */
	updatedAt?:boolean | `@${string}`,
	/** A string that describes the vulnerable package versions.
This string follows a basic syntax with a few forms.
+ `= 0.2.0` denotes a single vulnerable version.
+ `<= 1.0.8` denotes a version range up to and including the specified version
+ `< 0.1.11` denotes a version range up to, but excluding, the specified version
+ `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
+ `>= 0.0.1` denotes a version range with a known minimum, but no known maximum */
	vulnerableVersionRange?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SecurityVulnerability. */
["SecurityVulnerabilityConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SecurityVulnerabilityEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["SecurityVulnerability"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SecurityVulnerabilityEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["SecurityVulnerability"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for security vulnerability connections */
["SecurityVulnerabilityOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order security vulnerabilities by. */
	field: ResolverInputTypes["SecurityVulnerabilityOrderField"]
};
	/** Properties by which security vulnerability connections can be ordered. */
["SecurityVulnerabilityOrderField"]:SecurityVulnerabilityOrderField;
	/** Autogenerated input type of SetEnterpriseIdentityProvider */
["SetEnterpriseIdentityProviderInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The digest algorithm used to sign SAML requests for the identity provider. */
	digestMethod: ResolverInputTypes["SamlDigestAlgorithm"],
	/** The ID of the enterprise on which to set an identity provider. */
	enterpriseId: string,
	/** The x509 certificate used by the identity provider to sign assertions and responses. */
	idpCertificate: string,
	/** The Issuer Entity ID for the SAML identity provider */
	issuer?: string | undefined | null,
	/** The signature algorithm used to sign SAML requests for the identity provider. */
	signatureMethod: ResolverInputTypes["SamlSignatureAlgorithm"],
	/** The URL endpoint for the identity provider's SAML SSO. */
	ssoUrl: ResolverInputTypes["URI"]
};
	/** Autogenerated return type of SetEnterpriseIdentityProvider */
["SetEnterpriseIdentityProviderPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The identity provider for the enterprise. */
	identityProvider?:ResolverInputTypes["EnterpriseIdentityProvider"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of SetOrganizationInteractionLimit */
["SetOrganizationInteractionLimitInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** When this limit should expire. */
	expiry?: ResolverInputTypes["RepositoryInteractionLimitExpiry"] | undefined | null,
	/** The limit to set. */
	limit: ResolverInputTypes["RepositoryInteractionLimit"],
	/** The ID of the organization to set a limit for. */
	organizationId: string
};
	/** Autogenerated return type of SetOrganizationInteractionLimit */
["SetOrganizationInteractionLimitPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The organization that the interaction limit was set for. */
	organization?:ResolverInputTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of SetRepositoryInteractionLimit */
["SetRepositoryInteractionLimitInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** When this limit should expire. */
	expiry?: ResolverInputTypes["RepositoryInteractionLimitExpiry"] | undefined | null,
	/** The limit to set. */
	limit: ResolverInputTypes["RepositoryInteractionLimit"],
	/** The ID of the repository to set a limit for. */
	repositoryId: string
};
	/** Autogenerated return type of SetRepositoryInteractionLimit */
["SetRepositoryInteractionLimitPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository that the interaction limit was set for. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of SetUserInteractionLimit */
["SetUserInteractionLimitInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** When this limit should expire. */
	expiry?: ResolverInputTypes["RepositoryInteractionLimitExpiry"] | undefined | null,
	/** The limit to set. */
	limit: ResolverInputTypes["RepositoryInteractionLimit"],
	/** The ID of the user to set a limit for. */
	userId: string
};
	/** Autogenerated return type of SetUserInteractionLimit */
["SetUserInteractionLimitPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The user that the interaction limit was set for. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an S/MIME signature on a Commit or Tag. */
["SmimeSignature"]: AliasType<{
	/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ResolverInputTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a sort by field and direction. */
["SortBy"]: AliasType<{
	/** The direction of the sorting. Possible values are ASC and DESC. */
	direction?:boolean | `@${string}`,
	/** The id of the field by which the column is sorted. */
	field?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can sponsor others via GitHub Sponsors */
["Sponsor"]: AliasType<{
	Organization?:ResolverInputTypes["Organization"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Sponsor. */
["SponsorConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SponsorEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Sponsor"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
["SponsorEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Sponsor"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
["SponsorOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order sponsor entities by. */
	field: ResolverInputTypes["SponsorOrderField"]
};
	/** Properties by which sponsor connections can be ordered. */
["SponsorOrderField"]:SponsorOrderField;
	/** Entities that can be sponsored through GitHub Sponsors */
["Sponsorable"]:AliasType<{
		/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents?:boolean | `@${string}`,
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing?:boolean | `@${string}`,
isSponsoredBy?: [{	/** The target account's login. */
	accountLogin: string},boolean | `@${string}`],
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer?:boolean | `@${string}`,
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents?:boolean | `@${string}`,
sponsoring?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the users and organizations returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorOrder"] | undefined | null},ResolverInputTypes["SponsorConnection"]],
sponsors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsors returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorOrder"] | undefined | null,	/** If given, will filter for sponsors at the given tier. Will only return
sponsors whose tier the viewer is permitted to see. */
	tierId?: string | undefined | null},ResolverInputTypes["SponsorConnection"]],
sponsorsActivities?: [{	/** Filter activities to only the specified actions. */
	actions?: Array<ResolverInputTypes["SponsorsActivityAction"]> | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for activity returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorsActivityOrder"] | undefined | null,	/** Filter activities returned to only those that occurred in the most recent
specified time period. Set to ALL to avoid filtering by when the activity occurred. */
	period?: ResolverInputTypes["SponsorsActivityPeriod"] | undefined | null},ResolverInputTypes["SponsorsActivityConnection"]],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?:ResolverInputTypes["SponsorsListing"],
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?:ResolverInputTypes["Sponsorship"],
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?:ResolverInputTypes["Sponsorship"],
sponsorshipNewsletters?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorship updates returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorshipNewsletterOrder"] | undefined | null},ResolverInputTypes["SponsorshipNewsletterConnection"]],
sponsorshipsAsMaintainer?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Whether or not to include private sponsorships in the result set */
	includePrivate?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ResolverInputTypes["SponsorshipOrder"] | undefined | null},ResolverInputTypes["SponsorshipConnection"]],
sponsorshipsAsSponsor?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ResolverInputTypes["SponsorshipOrder"] | undefined | null},ResolverInputTypes["SponsorshipConnection"]],
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor?:boolean | `@${string}`,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring?:boolean | `@${string}`;
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["Sponsorable"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["Sponsorable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can be sponsored via GitHub Sponsors */
["SponsorableItem"]: AliasType<{
	Organization?:ResolverInputTypes["Organization"],
	User?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SponsorableItem. */
["SponsorableItemConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SponsorableItemEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["SponsorableItem"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorableItemEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["SponsorableItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
["SponsorableOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order sponsorable entities by. */
	field: ResolverInputTypes["SponsorableOrderField"]
};
	/** Properties by which sponsorable connections can be ordered. */
["SponsorableOrderField"]:SponsorableOrderField;
	/** An event related to sponsorship activity. */
["SponsorsActivity"]: AliasType<{
	/** What action this activity indicates took place. */
	action?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The tier that the sponsorship used to use, for tier change events. */
	previousSponsorsTier?:ResolverInputTypes["SponsorsTier"],
	/** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
	sponsor?:ResolverInputTypes["Sponsor"],
	/** The user or organization that is being sponsored, the maintainer. */
	sponsorable?:ResolverInputTypes["Sponsorable"],
	/** The associated sponsorship tier. */
	sponsorsTier?:ResolverInputTypes["SponsorsTier"],
	/** The timestamp of this event. */
	timestamp?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible actions that GitHub Sponsors activities can represent. */
["SponsorsActivityAction"]:SponsorsActivityAction;
	/** The connection type for SponsorsActivity. */
["SponsorsActivityConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SponsorsActivityEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["SponsorsActivity"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorsActivityEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["SponsorsActivity"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for GitHub Sponsors activity connections. */
["SponsorsActivityOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order activity by. */
	field: ResolverInputTypes["SponsorsActivityOrderField"]
};
	/** Properties by which GitHub Sponsors activity connections can be ordered. */
["SponsorsActivityOrderField"]:SponsorsActivityOrderField;
	/** The possible time periods for which Sponsors activities can be requested. */
["SponsorsActivityPeriod"]:SponsorsActivityPeriod;
	/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
["SponsorsGoal"]: AliasType<{
	/** A description of the goal from the maintainer. */
	description?:boolean | `@${string}`,
	/** What the objective of this goal is. */
	kind?:boolean | `@${string}`,
	/** The percentage representing how complete this goal is, between 0-100. */
	percentComplete?:boolean | `@${string}`,
	/** What the goal amount is. Represents an amount in USD for monthly sponsorship
amount goals. Represents a count of unique sponsors for total sponsors count goals. */
	targetValue?:boolean | `@${string}`,
	/** A brief summary of the kind and target value of this goal. */
	title?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The different kinds of goals a GitHub Sponsors member can have. */
["SponsorsGoalKind"]:SponsorsGoalKind;
	/** A GitHub Sponsors listing. */
["SponsorsListing"]: AliasType<{
	/** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
	activeGoal?:ResolverInputTypes["SponsorsGoal"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The HTTP path for the Sponsors dashboard for this Sponsors listing. */
	dashboardResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the Sponsors dashboard for this Sponsors listing. */
	dashboardUrl?:boolean | `@${string}`,
	/** The full description of the listing. */
	fullDescription?:boolean | `@${string}`,
	/** The full description of the listing rendered to HTML. */
	fullDescriptionHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this listing is publicly visible. */
	isPublic?:boolean | `@${string}`,
	/** The listing's full name. */
	name?:boolean | `@${string}`,
	/** A future date on which this listing is eligible to receive a payout. */
	nextPayoutDate?:boolean | `@${string}`,
	/** The HTTP path for this Sponsors listing. */
	resourcePath?:boolean | `@${string}`,
	/** The short description of the listing. */
	shortDescription?:boolean | `@${string}`,
	/** The short name of the listing. */
	slug?:boolean | `@${string}`,
	/** The entity this listing represents who can be sponsored on GitHub Sponsors. */
	sponsorable?:ResolverInputTypes["Sponsorable"],
tiers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for Sponsors tiers returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorsTierOrder"] | undefined | null},ResolverInputTypes["SponsorsTierConnection"]],
	/** The HTTP URL for this Sponsors listing. */
	url?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
["SponsorsTier"]: AliasType<{
	/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
	adminInfo?:ResolverInputTypes["SponsorsTierAdminInfo"],
	/** Get a different tier for this tier's maintainer that is at the same frequency
as this tier but with an equal or lesser cost. Returns the published tier with
the monthly price closest to this tier's without going over. */
	closestLesserValueTier?:ResolverInputTypes["SponsorsTier"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The description of the tier. */
	description?:boolean | `@${string}`,
	/** The tier description rendered to HTML */
	descriptionHTML?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this tier was chosen at checkout time by the sponsor rather than
defined ahead of time by the maintainer who manages the Sponsors listing. */
	isCustomAmount?:boolean | `@${string}`,
	/** Whether this tier is only for use with one-time sponsorships. */
	isOneTime?:boolean | `@${string}`,
	/** How much this tier costs per month in cents. */
	monthlyPriceInCents?:boolean | `@${string}`,
	/** How much this tier costs per month in USD. */
	monthlyPriceInDollars?:boolean | `@${string}`,
	/** The name of the tier. */
	name?:boolean | `@${string}`,
	/** The sponsors listing that this tier belongs to. */
	sponsorsListing?:ResolverInputTypes["SponsorsListing"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
["SponsorsTierAdminInfo"]: AliasType<{
sponsorships?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Whether or not to include private sponsorships in the result set */
	includePrivate?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ResolverInputTypes["SponsorshipOrder"] | undefined | null},ResolverInputTypes["SponsorshipConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SponsorsTier. */
["SponsorsTierConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SponsorsTierEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["SponsorsTier"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorsTierEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["SponsorsTier"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for Sponsors tiers connections. */
["SponsorsTierOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order tiers by. */
	field: ResolverInputTypes["SponsorsTierOrderField"]
};
	/** Properties by which Sponsors tiers connections can be ordered. */
["SponsorsTierOrderField"]:SponsorsTierOrderField;
	/** A sponsorship relationship between a sponsor and a maintainer */
["Sponsorship"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
	isOneTimePayment?:boolean | `@${string}`,
	/** Check if the sponsor has chosen to receive sponsorship update emails sent from
the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
	isSponsorOptedIntoEmail?:boolean | `@${string}`,
	/** The entity that is being sponsored */
	maintainer?:ResolverInputTypes["User"],
	/** The privacy level for this sponsorship. */
	privacyLevel?:boolean | `@${string}`,
	/** The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user. */
	sponsor?:ResolverInputTypes["User"],
	/** The user or organization that is sponsoring, if you have permission to view them. */
	sponsorEntity?:ResolverInputTypes["Sponsor"],
	/** The entity that is being sponsored */
	sponsorable?:ResolverInputTypes["Sponsorable"],
	/** The associated sponsorship tier */
	tier?:ResolverInputTypes["SponsorsTier"],
	/** Identifies the date and time when the current tier was chosen for this sponsorship. */
	tierSelectedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Sponsorship. */
["SponsorshipConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SponsorshipEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Sponsorship"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
	/** The total amount in cents of all recurring sponsorships in the connection
whose amount you can view. Does not include one-time sponsorships. */
	totalRecurringMonthlyPriceInCents?:boolean | `@${string}`,
	/** The total amount in USD of all recurring sponsorships in the connection whose
amount you can view. Does not include one-time sponsorships. */
	totalRecurringMonthlyPriceInDollars?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorshipEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Sponsorship"],
		__typename?: boolean | `@${string}`
}>;
	/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
["SponsorshipNewsletter"]: AliasType<{
	/** The contents of the newsletter, the message the sponsorable wanted to give. */
	body?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Indicates if the newsletter has been made available to sponsors. */
	isPublished?:boolean | `@${string}`,
	/** The user or organization this newsletter is from. */
	sponsorable?:ResolverInputTypes["Sponsorable"],
	/** The subject of the newsletter, what it's about. */
	subject?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for SponsorshipNewsletter. */
["SponsorshipNewsletterConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SponsorshipNewsletterEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["SponsorshipNewsletter"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SponsorshipNewsletterEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["SponsorshipNewsletter"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for sponsorship newsletter connections. */
["SponsorshipNewsletterOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order sponsorship newsletters by. */
	field: ResolverInputTypes["SponsorshipNewsletterOrderField"]
};
	/** Properties by which sponsorship update connections can be ordered. */
["SponsorshipNewsletterOrderField"]:SponsorshipNewsletterOrderField;
	/** Ordering options for sponsorship connections. */
["SponsorshipOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order sponsorship by. */
	field: ResolverInputTypes["SponsorshipOrderField"]
};
	/** Properties by which sponsorship connections can be ordered. */
["SponsorshipOrderField"]:SponsorshipOrderField;
	/** The privacy of a sponsorship */
["SponsorshipPrivacy"]:SponsorshipPrivacy;
	/** The possible default commit messages for squash merges. */
["SquashMergeCommitMessage"]:SquashMergeCommitMessage;
	/** The possible default commit titles for squash merges. */
["SquashMergeCommitTitle"]:SquashMergeCommitTitle;
	/** Represents an SSH signature on a Commit or Tag. */
["SshSignature"]: AliasType<{
	/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Hex-encoded fingerprint of the key that signed this object. */
	keyFingerprint?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ResolverInputTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which star connections can be ordered. */
["StarOrder"]: {
	/** The direction in which to order nodes. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order nodes by. */
	field: ResolverInputTypes["StarOrderField"]
};
	/** Properties by which star connections can be ordered. */
["StarOrderField"]:StarOrderField;
	/** The connection type for User. */
["StargazerConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["StargazerEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user that's starred a repository. */
["StargazerEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ResolverInputTypes["User"],
	/** Identifies when the item was starred. */
	starredAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Things that can be starred. */
["Starrable"]:AliasType<{
		id?:boolean | `@${string}`,
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount?:boolean | `@${string}`,
stargazers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["StarOrder"] | undefined | null},ResolverInputTypes["StargazerConnection"]],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred?:boolean | `@${string}`;
		['...on Gist']?: Omit<ResolverInputTypes["Gist"],keyof ResolverInputTypes["Starrable"]>;
		['...on Repository']?: Omit<ResolverInputTypes["Repository"],keyof ResolverInputTypes["Starrable"]>;
		['...on Topic']?: Omit<ResolverInputTypes["Topic"],keyof ResolverInputTypes["Starrable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Repository. */
["StarredRepositoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["StarredRepositoryEdge"],
	/** Is the list of stars for this user truncated? This is true for users that have many stars. */
	isOverLimit?:boolean | `@${string}`,
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Repository"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a starred repository. */
["StarredRepositoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ResolverInputTypes["Repository"],
	/** Identifies when the item was starred. */
	starredAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of StartRepositoryMigration */
["StartRepositoryMigrationInput"]: {
	/** The Octoshift migration source access token. */
	accessToken: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Whether to continue the migration on error */
	continueOnError?: boolean | undefined | null,
	/** The signed URL to access the user-uploaded git archive */
	gitArchiveUrl?: string | undefined | null,
	/** The GitHub personal access token of the user importing to the target repository. */
	githubPat?: string | undefined | null,
	/** Whether to lock the source repository. */
	lockSource?: boolean | undefined | null,
	/** The signed URL to access the user-uploaded metadata archive */
	metadataArchiveUrl?: string | undefined | null,
	/** The ID of the organization that will own the imported repository. */
	ownerId: string,
	/** The name of the imported repository. */
	repositoryName: string,
	/** Whether to skip migrating releases for the repository. */
	skipReleases?: boolean | undefined | null,
	/** The ID of the Octoshift migration source. */
	sourceId: string,
	/** The Octoshift migration source repository URL. */
	sourceRepositoryUrl: ResolverInputTypes["URI"],
	/** The visibility of the imported repository. */
	targetRepoVisibility?: string | undefined | null
};
	/** Autogenerated return type of StartRepositoryMigration */
["StartRepositoryMigrationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The new Octoshift repository migration. */
	repositoryMigration?:ResolverInputTypes["RepositoryMigration"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a commit status. */
["Status"]: AliasType<{
combinedContexts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["StatusCheckRollupContextConnection"]],
	/** The commit this status is attached to. */
	commit?:ResolverInputTypes["Commit"],
context?: [{	/** The context name. */
	name: string},ResolverInputTypes["StatusContext"]],
	/** The individual status contexts for this commit. */
	contexts?:ResolverInputTypes["StatusContext"],
	id?:boolean | `@${string}`,
	/** The combined commit status. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents the rollup for both the check runs and status for a commit. */
["StatusCheckRollup"]: AliasType<{
	/** The commit the status and check runs are attached to. */
	commit?:ResolverInputTypes["Commit"],
contexts?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["StatusCheckRollupContextConnection"]],
	id?:boolean | `@${string}`,
	/** The combined status for the commit. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Types that can be inside a StatusCheckRollup context. */
["StatusCheckRollupContext"]: AliasType<{
	CheckRun?:ResolverInputTypes["CheckRun"],
	StatusContext?:ResolverInputTypes["StatusContext"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for StatusCheckRollupContext. */
["StatusCheckRollupContextConnection"]: AliasType<{
	/** The number of check runs in this rollup. */
	checkRunCount?:boolean | `@${string}`,
	/** Counts of check runs by state. */
	checkRunCountsByState?:ResolverInputTypes["CheckRunStateCount"],
	/** A list of edges. */
	edges?:ResolverInputTypes["StatusCheckRollupContextEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["StatusCheckRollupContext"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** The number of status contexts in this rollup. */
	statusContextCount?:boolean | `@${string}`,
	/** Counts of status contexts by state. */
	statusContextCountsByState?:ResolverInputTypes["StatusContextStateCount"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["StatusCheckRollupContextEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["StatusCheckRollupContext"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an individual commit status context */
["StatusContext"]: AliasType<{
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** This commit this status context is attached to. */
	commit?:ResolverInputTypes["Commit"],
	/** The name of this status context. */
	context?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The actor who created this status context. */
	creator?:ResolverInputTypes["Actor"],
	/** The description for this status context. */
	description?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
isRequired?: [{	/** The id of the pull request this is required for */
	pullRequestId?: string | undefined | null,	/** The number of the pull request this is required for */
	pullRequestNumber?: number | undefined | null},boolean | `@${string}`],
	/** The state of this status context. */
	state?:boolean | `@${string}`,
	/** The URL for this status context. */
	targetUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a count of the state of a status context. */
["StatusContextStateCount"]: AliasType<{
	/** The number of statuses with this state. */
	count?:boolean | `@${string}`,
	/** The state of a status context. */
	state?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible commit status states. */
["StatusState"]:StatusState;
	/** Autogenerated input type of SubmitPullRequestReview */
["SubmitPullRequestReviewInput"]: {
	/** The text field to set on the Pull Request Review. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The event to send to the Pull Request Review. */
	event: ResolverInputTypes["PullRequestReviewEvent"],
	/** The Pull Request ID to submit any pending reviews. */
	pullRequestId?: string | undefined | null,
	/** The Pull Request Review ID to submit. */
	pullRequestReviewId?: string | undefined | null
};
	/** Autogenerated return type of SubmitPullRequestReview */
["SubmitPullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The submitted pull request review. */
	pullRequestReview?:ResolverInputTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** A pointer to a repository at a specific revision embedded inside another repository. */
["Submodule"]: AliasType<{
	/** The branch of the upstream submodule for tracking updates */
	branch?:boolean | `@${string}`,
	/** The git URL of the submodule repository */
	gitUrl?:boolean | `@${string}`,
	/** The name of the submodule in .gitmodules */
	name?:boolean | `@${string}`,
	/** The path in the superproject that this submodule is located in */
	path?:boolean | `@${string}`,
	/** The commit revision of the subproject repository being tracked by the submodule */
	subprojectCommitOid?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Submodule. */
["SubmoduleConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["SubmoduleEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Submodule"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["SubmoduleEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Submodule"],
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can be subscribed to for web and email notifications. */
["Subscribable"]:AliasType<{
		id?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`;
		['...on Commit']?: Omit<ResolverInputTypes["Commit"],keyof ResolverInputTypes["Subscribable"]>;
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["Subscribable"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["Subscribable"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["Subscribable"]>;
		['...on Repository']?: Omit<ResolverInputTypes["Repository"],keyof ResolverInputTypes["Subscribable"]>;
		['...on Team']?: Omit<ResolverInputTypes["Team"],keyof ResolverInputTypes["Subscribable"]>;
		['...on TeamDiscussion']?: Omit<ResolverInputTypes["TeamDiscussion"],keyof ResolverInputTypes["Subscribable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'subscribed' event on a given `Subscribable`. */
["SubscribedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Object referenced by event. */
	subscribable?:ResolverInputTypes["Subscribable"],
		__typename?: boolean | `@${string}`
}>;
	/** The possible states of a subscription. */
["SubscriptionState"]:SubscriptionState;
	/** A suggestion to review a pull request based on a user's commit history and review comments. */
["SuggestedReviewer"]: AliasType<{
	/** Is this suggestion based on past commits? */
	isAuthor?:boolean | `@${string}`,
	/** Is this suggestion based on past review comments? */
	isCommenter?:boolean | `@${string}`,
	/** Identifies the user suggested to review the pull request. */
	reviewer?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git tag. */
["Tag"]: AliasType<{
	/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The Git tag message. */
	message?:boolean | `@${string}`,
	/** The Git tag name. */
	name?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The Repository the Git object belongs to */
	repository?:ResolverInputTypes["Repository"],
	/** Details about the tag author. */
	tagger?:ResolverInputTypes["GitActor"],
	/** The Git object the tag points to. */
	target?:ResolverInputTypes["GitObject"],
		__typename?: boolean | `@${string}`
}>;
	/** A team of users in an organization. */
["Team"]: AliasType<{
ancestors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["TeamConnection"]],
avatarUrl?: [{	/** The size in pixels of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
childTeams?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Whether to list immediate child teams or all descendant child teams. */
	immediateOnly?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["TeamOrder"] | undefined | null,	/** User logins to filter by */
	userLogins?: Array<string> | undefined | null},ResolverInputTypes["TeamConnection"]],
	/** The slug corresponding to the organization and team. */
	combinedSlug?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The description of the team. */
	description?:boolean | `@${string}`,
discussion?: [{	/** The sequence number of the discussion to find. */
	number: number},ResolverInputTypes["TeamDiscussion"]],
discussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** If provided, filters discussions according to whether or not they are pinned. */
	isPinned?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["TeamDiscussionOrder"] | undefined | null},ResolverInputTypes["TeamDiscussionConnection"]],
	/** The HTTP path for team discussions */
	discussionsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for team discussions */
	discussionsUrl?:boolean | `@${string}`,
	/** The HTTP path for editing this team */
	editTeamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for editing this team */
	editTeamUrl?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
invitations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["OrganizationInvitationConnection"]],
memberStatuses?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for user statuses returned from the connection. */
	orderBy?: ResolverInputTypes["UserStatusOrder"] | undefined | null},ResolverInputTypes["UserStatusConnection"]],
members?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter by membership type */
	membership?: ResolverInputTypes["TeamMembershipType"] | undefined | null,	/** Order for the connection. */
	orderBy?: ResolverInputTypes["TeamMemberOrder"] | undefined | null,	/** The search string to look for. */
	query?: string | undefined | null,	/** Filter by team member role */
	role?: ResolverInputTypes["TeamMemberRole"] | undefined | null},ResolverInputTypes["TeamMemberConnection"]],
	/** The HTTP path for the team' members */
	membersResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the team' members */
	membersUrl?:boolean | `@${string}`,
	/** The name of the team. */
	name?:boolean | `@${string}`,
	/** The HTTP path creating a new team */
	newTeamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL creating a new team */
	newTeamUrl?:boolean | `@${string}`,
	/** The organization that owns this team. */
	organization?:ResolverInputTypes["Organization"],
	/** The parent team of the team. */
	parentTeam?:ResolverInputTypes["Team"],
	/** The level of privacy the team has. */
	privacy?:boolean | `@${string}`,
projectV2?: [{	/** The Project number. */
	number: number},ResolverInputTypes["ProjectV2"]],
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** How to order the returned projects. */
	orderBy?: ResolverInputTypes["ProjectV2Order"] | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
repositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for the connection. */
	orderBy?: ResolverInputTypes["TeamRepositoryOrder"] | undefined | null,	/** The search string to look for. Repositories will be returned where the name contains your search string. */
	query?: string | undefined | null},ResolverInputTypes["TeamRepositoryConnection"]],
	/** The HTTP path for this team's repositories */
	repositoriesResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team's repositories */
	repositoriesUrl?:boolean | `@${string}`,
	/** The HTTP path for this team */
	resourcePath?:boolean | `@${string}`,
	/** What algorithm is used for review assignment for this team */
	reviewRequestDelegationAlgorithm?:boolean | `@${string}`,
	/** True if review assignment is enabled for this team */
	reviewRequestDelegationEnabled?:boolean | `@${string}`,
	/** How many team members are required for review assignment for this team */
	reviewRequestDelegationMemberCount?:boolean | `@${string}`,
	/** When assigning team members via delegation, whether the entire team should be notified as well. */
	reviewRequestDelegationNotifyTeam?:boolean | `@${string}`,
	/** The slug corresponding to the team. */
	slug?:boolean | `@${string}`,
	/** The HTTP path for this team's teams */
	teamsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team's teams */
	teamsUrl?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	url?:boolean | `@${string}`,
	/** Team is adminable by the viewer. */
	viewerCanAdminister?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a team.add_member event. */
["TeamAddMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ResolverInputTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a team.add_repository event. */
["TeamAddRepositoryAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ResolverInputTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for an audit entry with action team.* */
["TeamAuditEntryData"]:AliasType<{
		/** The team associated with the action */
	team?:ResolverInputTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`;
		['...on OrgRestoreMemberMembershipTeamAuditEntryData']?: Omit<ResolverInputTypes["OrgRestoreMemberMembershipTeamAuditEntryData"],keyof ResolverInputTypes["TeamAuditEntryData"]>;
		['...on TeamAddMemberAuditEntry']?: Omit<ResolverInputTypes["TeamAddMemberAuditEntry"],keyof ResolverInputTypes["TeamAuditEntryData"]>;
		['...on TeamAddRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamAddRepositoryAuditEntry"],keyof ResolverInputTypes["TeamAuditEntryData"]>;
		['...on TeamChangeParentTeamAuditEntry']?: Omit<ResolverInputTypes["TeamChangeParentTeamAuditEntry"],keyof ResolverInputTypes["TeamAuditEntryData"]>;
		['...on TeamRemoveMemberAuditEntry']?: Omit<ResolverInputTypes["TeamRemoveMemberAuditEntry"],keyof ResolverInputTypes["TeamAuditEntryData"]>;
		['...on TeamRemoveRepositoryAuditEntry']?: Omit<ResolverInputTypes["TeamRemoveRepositoryAuditEntry"],keyof ResolverInputTypes["TeamAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a team.change_parent_team event. */
["TeamChangeParentTeamAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The new parent team. */
	parentTeam?:ResolverInputTypes["Team"],
	/** The name of the new parent team */
	parentTeamName?:boolean | `@${string}`,
	/** The name of the former parent team */
	parentTeamNameWas?:boolean | `@${string}`,
	/** The HTTP path for the parent team */
	parentTeamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the parent team */
	parentTeamUrl?:boolean | `@${string}`,
	/** The former parent team. */
	parentTeamWas?:ResolverInputTypes["Team"],
	/** The HTTP path for the previous parent team */
	parentTeamWasResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the previous parent team */
	parentTeamWasUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ResolverInputTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Team. */
["TeamConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["TeamEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Team"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A team discussion. */
["TeamDiscussion"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the discussion's team. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** Identifies the discussion body hash. */
	bodyVersion?:boolean | `@${string}`,
comments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** When provided, filters the connection such that results begin with the comment with this number. */
	fromComment?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["TeamDiscussionCommentOrder"] | undefined | null},ResolverInputTypes["TeamDiscussionCommentConnection"]],
	/** The HTTP path for discussion comments */
	commentsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for discussion comments */
	commentsUrl?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** Whether or not the discussion is pinned. */
	isPinned?:boolean | `@${string}`,
	/** Whether or not the discussion is only visible to team members and org admins. */
	isPrivate?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Identifies the discussion within its team. */
	number?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** The HTTP path for this discussion */
	resourcePath?:boolean | `@${string}`,
	/** The team that defines the context of this discussion. */
	team?:ResolverInputTypes["Team"],
	/** The title of the discussion */
	title?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this discussion */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Whether or not the current viewer can pin this discussion. */
	viewerCanPin?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A comment on a team discussion. */
["TeamDiscussionComment"]: AliasType<{
	/** The actor who authored the comment. */
	author?:ResolverInputTypes["Actor"],
	/** Author's association with the comment's team. */
	authorAssociation?:boolean | `@${string}`,
	/** The body as Markdown. */
	body?:boolean | `@${string}`,
	/** The body rendered to HTML. */
	bodyHTML?:boolean | `@${string}`,
	/** The body rendered to text. */
	bodyText?:boolean | `@${string}`,
	/** The current version of the body content. */
	bodyVersion?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Check if this comment was created via an email reply. */
	createdViaEmail?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The discussion this comment is about. */
	discussion?:ResolverInputTypes["TeamDiscussion"],
	/** The actor who edited the comment. */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit?:boolean | `@${string}`,
	/** The moment the editor made the last edit */
	lastEditedAt?:boolean | `@${string}`,
	/** Identifies the comment number. */
	number?:boolean | `@${string}`,
	/** Identifies when the comment was published at. */
	publishedAt?:boolean | `@${string}`,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?:ResolverInputTypes["ReactionGroup"],
reactions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Allows filtering Reactions by emoji. */
	content?: ResolverInputTypes["ReactionContent"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Allows specifying the order in which reactions are returned. */
	orderBy?: ResolverInputTypes["ReactionOrder"] | undefined | null},ResolverInputTypes["ReactionConnection"]],
	/** The HTTP path for this comment */
	resourcePath?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this comment */
	url?:boolean | `@${string}`,
userContentEdits?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["UserContentEditConnection"]],
	/** Check if the current viewer can delete this object. */
	viewerCanDelete?:boolean | `@${string}`,
	/** Can user react to this subject */
	viewerCanReact?:boolean | `@${string}`,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`,
	/** Did the viewer author this comment. */
	viewerDidAuthor?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for TeamDiscussionComment. */
["TeamDiscussionCommentConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["TeamDiscussionCommentEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["TeamDiscussionComment"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["TeamDiscussionCommentEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["TeamDiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which team discussion comment connections can be ordered. */
["TeamDiscussionCommentOrder"]: {
	/** The direction in which to order nodes. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field by which to order nodes. */
	field: ResolverInputTypes["TeamDiscussionCommentOrderField"]
};
	/** Properties by which team discussion comment connections can be ordered. */
["TeamDiscussionCommentOrderField"]:TeamDiscussionCommentOrderField;
	/** The connection type for TeamDiscussion. */
["TeamDiscussionConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["TeamDiscussionEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["TeamDiscussion"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["TeamDiscussionEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["TeamDiscussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which team discussion connections can be ordered. */
["TeamDiscussionOrder"]: {
	/** The direction in which to order nodes. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field by which to order nodes. */
	field: ResolverInputTypes["TeamDiscussionOrderField"]
};
	/** Properties by which team discussion connections can be ordered. */
["TeamDiscussionOrderField"]:TeamDiscussionOrderField;
	/** An edge in a connection. */
["TeamEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["Team"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["TeamMemberConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["TeamMemberEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user who is a member of a team. */
["TeamMemberEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The HTTP path to the organization's member access page. */
	memberAccessResourcePath?:boolean | `@${string}`,
	/** The HTTP URL to the organization's member access page. */
	memberAccessUrl?:boolean | `@${string}`,
	node?:ResolverInputTypes["User"],
	/** The role the member has on the team. */
	role?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for team member connections */
["TeamMemberOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order team members by. */
	field: ResolverInputTypes["TeamMemberOrderField"]
};
	/** Properties by which team member connections can be ordered. */
["TeamMemberOrderField"]:TeamMemberOrderField;
	/** The possible team member roles; either 'maintainer' or 'member'. */
["TeamMemberRole"]:TeamMemberRole;
	/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
["TeamMembershipType"]:TeamMembershipType;
	/** Ways in which team connections can be ordered. */
["TeamOrder"]: {
	/** The direction in which to order nodes. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field in which to order nodes by. */
	field: ResolverInputTypes["TeamOrderField"]
};
	/** Properties by which team connections can be ordered. */
["TeamOrderField"]:TeamOrderField;
	/** The possible team privacy values. */
["TeamPrivacy"]:TeamPrivacy;
	/** Audit log entry for a team.remove_member event. */
["TeamRemoveMemberAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ResolverInputTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Audit log entry for a team.remove_repository event. */
["TeamRemoveRepositoryAuditEntry"]: AliasType<{
	/** The action name */
	action?:boolean | `@${string}`,
	/** The user who initiated the action */
	actor?:ResolverInputTypes["AuditEntryActor"],
	/** The IP address of the actor */
	actorIp?:boolean | `@${string}`,
	/** A readable representation of the actor's location */
	actorLocation?:ResolverInputTypes["ActorLocation"],
	/** The username of the user who initiated the action */
	actorLogin?:boolean | `@${string}`,
	/** The HTTP path for the actor. */
	actorResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the actor. */
	actorUrl?:boolean | `@${string}`,
	/** The time the action was initiated */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?:boolean | `@${string}`,
	/** The corresponding operation type for the action */
	operationType?:boolean | `@${string}`,
	/** The Organization associated with the Audit Entry. */
	organization?:ResolverInputTypes["Organization"],
	/** The name of the Organization. */
	organizationName?:boolean | `@${string}`,
	/** The HTTP path for the organization */
	organizationResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the organization */
	organizationUrl?:boolean | `@${string}`,
	/** The repository associated with the action */
	repository?:ResolverInputTypes["Repository"],
	/** The name of the repository */
	repositoryName?:boolean | `@${string}`,
	/** The HTTP path for the repository */
	repositoryResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the repository */
	repositoryUrl?:boolean | `@${string}`,
	/** The team associated with the action */
	team?:ResolverInputTypes["Team"],
	/** The name of the team */
	teamName?:boolean | `@${string}`,
	/** The HTTP path for this team */
	teamResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this team */
	teamUrl?:boolean | `@${string}`,
	/** The user affected by the action */
	user?:ResolverInputTypes["User"],
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?:boolean | `@${string}`,
	/** The HTTP path for the user. */
	userResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for the user. */
	userUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for Repository. */
["TeamRepositoryConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["TeamRepositoryEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["Repository"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a team repository. */
["TeamRepositoryEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	node?:ResolverInputTypes["Repository"],
	/** The permission level the team has on the repository */
	permission?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for team repository connections */
["TeamRepositoryOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order repositories by. */
	field: ResolverInputTypes["TeamRepositoryOrderField"]
};
	/** Properties by which team repository connections can be ordered. */
["TeamRepositoryOrderField"]:TeamRepositoryOrderField;
	/** The possible team review assignment algorithms */
["TeamReviewAssignmentAlgorithm"]:TeamReviewAssignmentAlgorithm;
	/** The role of a user on a team. */
["TeamRole"]:TeamRole;
	/** A text match within a search result. */
["TextMatch"]: AliasType<{
	/** The specific text fragment within the property matched on. */
	fragment?:boolean | `@${string}`,
	/** Highlights within the matched fragment. */
	highlights?:ResolverInputTypes["TextMatchHighlight"],
	/** The property matched on. */
	property?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents a single highlight in a search result match. */
["TextMatchHighlight"]: AliasType<{
	/** The indice in the fragment where the matched text begins. */
	beginIndice?:boolean | `@${string}`,
	/** The indice in the fragment where the matched text ends. */
	endIndice?:boolean | `@${string}`,
	/** The text matched. */
	text?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A topic aggregates entities that are related to a subject. */
["Topic"]: AliasType<{
	id?:boolean | `@${string}`,
	/** The topic's name. */
	name?:boolean | `@${string}`,
relatedTopics?: [{	/** How many topics to return. */
	first?: number | undefined | null},ResolverInputTypes["Topic"]],
repositories?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories returned from the connection */
	orderBy?: ResolverInputTypes["RepositoryOrder"] | undefined | null,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** If non-null, filters repositories according to privacy */
	privacy?: ResolverInputTypes["RepositoryPrivacy"] | undefined | null,	/** If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned. */
	sponsorableOnly?: boolean | undefined | null},ResolverInputTypes["RepositoryConnection"]],
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount?:boolean | `@${string}`,
stargazers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["StarOrder"] | undefined | null},ResolverInputTypes["StargazerConnection"]],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Metadata for an audit entry with a topic. */
["TopicAuditEntryData"]:AliasType<{
		/** The name of the topic added to the repository */
	topic?:ResolverInputTypes["Topic"],
	/** The name of the topic added to the repository */
	topicName?:boolean | `@${string}`;
		['...on RepoAddTopicAuditEntry']?: Omit<ResolverInputTypes["RepoAddTopicAuditEntry"],keyof ResolverInputTypes["TopicAuditEntryData"]>;
		['...on RepoRemoveTopicAuditEntry']?: Omit<ResolverInputTypes["RepoRemoveTopicAuditEntry"],keyof ResolverInputTypes["TopicAuditEntryData"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Reason that the suggested topic is declined. */
["TopicSuggestionDeclineReason"]:TopicSuggestionDeclineReason;
	/** The possible states of a tracked issue. */
["TrackedIssueStates"]:TrackedIssueStates;
	/** Autogenerated input type of TransferIssue */
["TransferIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Whether to create labels if they don't exist in the target repository (matched by name) */
	createLabelsIfMissing?: boolean | undefined | null,
	/** The Node ID of the issue to be transferred */
	issueId: string,
	/** The Node ID of the repository the issue should be transferred to */
	repositoryId: string
};
	/** Autogenerated return type of TransferIssue */
["TransferIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was transferred */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a 'transferred' event on a given issue or pull request. */
["TransferredEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The repository this came from */
	fromRepository?:ResolverInputTypes["Repository"],
	id?:boolean | `@${string}`,
	/** Identifies the issue associated with the event. */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git tree. */
["Tree"]: AliasType<{
	/** An abbreviated version of the Git object ID */
	abbreviatedOid?:boolean | `@${string}`,
	/** The HTTP path for this Git object */
	commitResourcePath?:boolean | `@${string}`,
	/** The HTTP URL for this Git object */
	commitUrl?:boolean | `@${string}`,
	/** A list of tree entries. */
	entries?:ResolverInputTypes["TreeEntry"],
	id?:boolean | `@${string}`,
	/** The Git object ID */
	oid?:boolean | `@${string}`,
	/** The Repository the Git object belongs to */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a Git tree entry. */
["TreeEntry"]: AliasType<{
	/** The extension of the file */
	extension?:boolean | `@${string}`,
	/** Whether or not this tree entry is generated */
	isGenerated?:boolean | `@${string}`,
	/** The programming language this file is written in. */
	language?:ResolverInputTypes["Language"],
	/** Number of lines in the file. */
	lineCount?:boolean | `@${string}`,
	/** Entry file mode. */
	mode?:boolean | `@${string}`,
	/** Entry file name. */
	name?:boolean | `@${string}`,
	/** Entry file object. */
	object?:ResolverInputTypes["GitObject"],
	/** Entry file Git object ID. */
	oid?:boolean | `@${string}`,
	/** The full path of the file. */
	path?:boolean | `@${string}`,
	/** The Repository the tree entry belongs to */
	repository?:ResolverInputTypes["Repository"],
	/** Entry byte size */
	size?:boolean | `@${string}`,
	/** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
	submodule?:ResolverInputTypes["Submodule"],
	/** Entry file type. */
	type?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
["URI"]:unknown;
	/** Autogenerated input type of UnarchiveRepository */
["UnarchiveRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the repository to unarchive. */
	repositoryId: string
};
	/** Autogenerated return type of UnarchiveRepository */
["UnarchiveRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository that was unarchived. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unassigned' event on any assignable object. */
["UnassignedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the assignable associated with the event. */
	assignable?:ResolverInputTypes["Assignable"],
	/** Identifies the user or mannequin that was unassigned. */
	assignee?:ResolverInputTypes["Assignee"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the subject (user) who was unassigned. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnfollowOrganization */
["UnfollowOrganizationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the organization to unfollow. */
	organizationId: string
};
	/** Autogenerated return type of UnfollowOrganization */
["UnfollowOrganizationPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The organization that was unfollowed. */
	organization?:ResolverInputTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnfollowUser */
["UnfollowUserInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the user to unfollow. */
	userId: string
};
	/** Autogenerated return type of UnfollowUser */
["UnfollowUserPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The user that was unfollowed. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a type that can be retrieved by a URL. */
["UniformResourceLocatable"]:AliasType<{
		/** The HTML path to this resource. */
	resourcePath?:boolean | `@${string}`,
	/** The URL to this resource. */
	url?:boolean | `@${string}`;
		['...on Bot']?: Omit<ResolverInputTypes["Bot"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on CheckRun']?: Omit<ResolverInputTypes["CheckRun"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on ClosedEvent']?: Omit<ResolverInputTypes["ClosedEvent"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on Commit']?: Omit<ResolverInputTypes["Commit"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on ConvertToDraftEvent']?: Omit<ResolverInputTypes["ConvertToDraftEvent"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on CrossReferencedEvent']?: Omit<ResolverInputTypes["CrossReferencedEvent"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on Gist']?: Omit<ResolverInputTypes["Gist"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on Mannequin']?: Omit<ResolverInputTypes["Mannequin"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on MergedEvent']?: Omit<ResolverInputTypes["MergedEvent"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on Milestone']?: Omit<ResolverInputTypes["Milestone"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on Organization']?: Omit<ResolverInputTypes["Organization"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on PullRequestCommit']?: Omit<ResolverInputTypes["PullRequestCommit"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on ReadyForReviewEvent']?: Omit<ResolverInputTypes["ReadyForReviewEvent"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on Release']?: Omit<ResolverInputTypes["Release"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on Repository']?: Omit<ResolverInputTypes["Repository"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on RepositoryTopic']?: Omit<ResolverInputTypes["RepositoryTopic"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on ReviewDismissedEvent']?: Omit<ResolverInputTypes["ReviewDismissedEvent"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on TeamDiscussion']?: Omit<ResolverInputTypes["TeamDiscussion"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on TeamDiscussionComment']?: Omit<ResolverInputTypes["TeamDiscussionComment"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		['...on User']?: Omit<ResolverInputTypes["User"],keyof ResolverInputTypes["UniformResourceLocatable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Represents an unknown signature on a Commit or Tag. */
["UnknownSignature"]: AliasType<{
	/** Email used to sign this object. */
	email?:boolean | `@${string}`,
	/** True if the signature is valid and verified by GitHub. */
	isValid?:boolean | `@${string}`,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload?:boolean | `@${string}`,
	/** ASCII-armored signature header from object. */
	signature?:boolean | `@${string}`,
	/** GitHub user corresponding to the email signing this commit. */
	signer?:ResolverInputTypes["User"],
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state?:boolean | `@${string}`,
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unlabeled' event on a given issue or pull request. */
["UnlabeledEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the label associated with the 'unlabeled' event. */
	label?:ResolverInputTypes["Label"],
	/** Identifies the `Labelable` associated with the event. */
	labelable?:ResolverInputTypes["Labelable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnlinkRepositoryFromProject */
["UnlinkRepositoryFromProjectInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the Project linked to the Repository. */
	projectId: string,
	/** The ID of the Repository linked to the Project. */
	repositoryId: string
};
	/** Autogenerated return type of UnlinkRepositoryFromProject */
["UnlinkRepositoryFromProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The linked Project. */
	project?:ResolverInputTypes["Project"],
	/** The linked Repository. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnlockLockable */
["UnlockLockableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the item to be unlocked. */
	lockableId: string
};
	/** Autogenerated return type of UnlockLockable */
["UnlockLockablePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The item that was unlocked. */
	unlockedRecord?:ResolverInputTypes["Lockable"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unlocked' event on a given issue or pull request. */
["UnlockedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Object that was unlocked. */
	lockable?:ResolverInputTypes["Lockable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
["UnmarkDiscussionCommentAsAnswerInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the discussion comment to unmark as an answer. */
	id: string
};
	/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */
["UnmarkDiscussionCommentAsAnswerPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The discussion that includes the comment. */
	discussion?:ResolverInputTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnmarkFileAsViewed */
["UnmarkFileAsViewedInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The path of the file to mark as unviewed */
	path: string,
	/** The Node ID of the pull request. */
	pullRequestId: string
};
	/** Autogenerated return type of UnmarkFileAsViewed */
["UnmarkFileAsViewedPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnmarkIssueAsDuplicate */
["UnmarkIssueAsDuplicateInput"]: {
	/** ID of the issue or pull request currently considered canonical/authoritative/original. */
	canonicalId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** ID of the issue or pull request currently marked as a duplicate. */
	duplicateId: string
};
	/** Autogenerated return type of UnmarkIssueAsDuplicate */
["UnmarkIssueAsDuplicatePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue or pull request that was marked as a duplicate. */
	duplicate?:ResolverInputTypes["IssueOrPullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
["UnmarkedAsDuplicateEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** The authoritative issue or pull request which has been duplicated by another. */
	canonical?:ResolverInputTypes["IssueOrPullRequest"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** The issue or pull request which has been marked as a duplicate of another. */
	duplicate?:ResolverInputTypes["IssueOrPullRequest"],
	id?:boolean | `@${string}`,
	/** Canonical and duplicate belong to different repositories. */
	isCrossRepository?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnminimizeComment */
["UnminimizeCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of UnminimizeComment */
["UnminimizeCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The comment that was unminimized. */
	unminimizedComment?:ResolverInputTypes["Minimizable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnpinIssue */
["UnpinIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the issue to be unpinned */
	issueId: string
};
	/** Autogenerated return type of UnpinIssue */
["UnpinIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue that was unpinned */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unpinned' event on a given issue or pull request. */
["UnpinnedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Identifies the issue associated with the event. */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UnresolveReviewThread */
["UnresolveReviewThreadInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the thread to unresolve */
	threadId: string
};
	/** Autogenerated return type of UnresolveReviewThread */
["UnresolveReviewThreadPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The thread to resolve. */
	thread?:ResolverInputTypes["PullRequestReviewThread"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents an 'unsubscribed' event on a given `Subscribable`. */
["UnsubscribedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Object referenced by event. */
	subscribable?:ResolverInputTypes["Subscribable"],
		__typename?: boolean | `@${string}`
}>;
	/** Entities that can be updated. */
["Updatable"]:AliasType<{
		/** Check if the current viewer can update this object. */
	viewerCanUpdate?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ResolverInputTypes["CommitComment"],keyof ResolverInputTypes["Updatable"]>;
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["Updatable"]>;
		['...on DiscussionComment']?: Omit<ResolverInputTypes["DiscussionComment"],keyof ResolverInputTypes["Updatable"]>;
		['...on GistComment']?: Omit<ResolverInputTypes["GistComment"],keyof ResolverInputTypes["Updatable"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["Updatable"]>;
		['...on IssueComment']?: Omit<ResolverInputTypes["IssueComment"],keyof ResolverInputTypes["Updatable"]>;
		['...on Project']?: Omit<ResolverInputTypes["Project"],keyof ResolverInputTypes["Updatable"]>;
		['...on ProjectNext']?: Omit<ResolverInputTypes["ProjectNext"],keyof ResolverInputTypes["Updatable"]>;
		['...on ProjectV2']?: Omit<ResolverInputTypes["ProjectV2"],keyof ResolverInputTypes["Updatable"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["Updatable"]>;
		['...on PullRequestReview']?: Omit<ResolverInputTypes["PullRequestReview"],keyof ResolverInputTypes["Updatable"]>;
		['...on PullRequestReviewComment']?: Omit<ResolverInputTypes["PullRequestReviewComment"],keyof ResolverInputTypes["Updatable"]>;
		['...on TeamDiscussion']?: Omit<ResolverInputTypes["TeamDiscussion"],keyof ResolverInputTypes["Updatable"]>;
		['...on TeamDiscussionComment']?: Omit<ResolverInputTypes["TeamDiscussionComment"],keyof ResolverInputTypes["Updatable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Comments that can be updated. */
["UpdatableComment"]:AliasType<{
		/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons?:boolean | `@${string}`;
		['...on CommitComment']?: Omit<ResolverInputTypes["CommitComment"],keyof ResolverInputTypes["UpdatableComment"]>;
		['...on DiscussionComment']?: Omit<ResolverInputTypes["DiscussionComment"],keyof ResolverInputTypes["UpdatableComment"]>;
		['...on GistComment']?: Omit<ResolverInputTypes["GistComment"],keyof ResolverInputTypes["UpdatableComment"]>;
		['...on Issue']?: Omit<ResolverInputTypes["Issue"],keyof ResolverInputTypes["UpdatableComment"]>;
		['...on IssueComment']?: Omit<ResolverInputTypes["IssueComment"],keyof ResolverInputTypes["UpdatableComment"]>;
		['...on PullRequest']?: Omit<ResolverInputTypes["PullRequest"],keyof ResolverInputTypes["UpdatableComment"]>;
		['...on PullRequestReview']?: Omit<ResolverInputTypes["PullRequestReview"],keyof ResolverInputTypes["UpdatableComment"]>;
		['...on PullRequestReviewComment']?: Omit<ResolverInputTypes["PullRequestReviewComment"],keyof ResolverInputTypes["UpdatableComment"]>;
		['...on TeamDiscussion']?: Omit<ResolverInputTypes["TeamDiscussion"],keyof ResolverInputTypes["UpdatableComment"]>;
		['...on TeamDiscussionComment']?: Omit<ResolverInputTypes["TeamDiscussionComment"],keyof ResolverInputTypes["UpdatableComment"]>;
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateBranchProtectionRule */
["UpdateBranchProtectionRuleInput"]: {
	/** Can this branch be deleted. */
	allowsDeletions?: boolean | undefined | null,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?: boolean | undefined | null,
	/** Is branch creation a protected operation. */
	blocksCreations?: boolean | undefined | null,
	/** The global relay id of the branch protection rule to be updated. */
	branchProtectionRuleId: string,
	/** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
	bypassForcePushActorIds?: Array<string> | undefined | null,
	/** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
	bypassPullRequestActorIds?: Array<string> | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?: boolean | undefined | null,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?: boolean | undefined | null,
	/** The glob-like pattern used to determine matching branches. */
	pattern?: string | undefined | null,
	/** A list of User, Team, or App IDs allowed to push to matching branches. */
	pushActorIds?: Array<string> | undefined | null,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined | null,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string> | undefined | null,
	/** The list of required status checks */
	requiredStatusChecks?: Array<ResolverInputTypes["RequiredStatusCheckInput"]> | undefined | null,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?: boolean | undefined | null,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?: boolean | undefined | null,
	/** Are commits required to be signed. */
	requiresCommitSignatures?: boolean | undefined | null,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?: boolean | undefined | null,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?: boolean | undefined | null,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?: boolean | undefined | null,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?: boolean | undefined | null,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?: boolean | undefined | null,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?: boolean | undefined | null,
	/** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
	reviewDismissalActorIds?: Array<string> | undefined | null
};
	/** Autogenerated return type of UpdateBranchProtectionRule */
["UpdateBranchProtectionRulePayload"]: AliasType<{
	/** The newly created BranchProtectionRule. */
	branchProtectionRule?:ResolverInputTypes["BranchProtectionRule"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateCheckRun */
["UpdateCheckRunInput"]: {
	/** Possible further actions the integrator can perform, which a user may trigger. */
	actions?: Array<ResolverInputTypes["CheckRunAction"]> | undefined | null,
	/** The node of the check. */
	checkRunId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The time that the check run finished. */
	completedAt?: ResolverInputTypes["DateTime"] | undefined | null,
	/** The final conclusion of the check. */
	conclusion?: ResolverInputTypes["CheckConclusionState"] | undefined | null,
	/** The URL of the integrator's site that has the full details of the check. */
	detailsUrl?: ResolverInputTypes["URI"] | undefined | null,
	/** A reference for the run on the integrator's system. */
	externalId?: string | undefined | null,
	/** The name of the check. */
	name?: string | undefined | null,
	/** Descriptive details about the run. */
	output?: ResolverInputTypes["CheckRunOutput"] | undefined | null,
	/** The node ID of the repository. */
	repositoryId: string,
	/** The time that the check run began. */
	startedAt?: ResolverInputTypes["DateTime"] | undefined | null,
	/** The current status. */
	status?: ResolverInputTypes["RequestableCheckStatusState"] | undefined | null
};
	/** Autogenerated return type of UpdateCheckRun */
["UpdateCheckRunPayload"]: AliasType<{
	/** The updated check run. */
	checkRun?:ResolverInputTypes["CheckRun"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateCheckSuitePreferences */
["UpdateCheckSuitePreferencesInput"]: {
	/** The check suite preferences to modify. */
	autoTriggerPreferences: Array<ResolverInputTypes["CheckSuiteAutoTriggerPreference"]>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of UpdateCheckSuitePreferences */
["UpdateCheckSuitePreferencesPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated repository. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateDiscussionComment */
["UpdateDiscussionCommentInput"]: {
	/** The new contents of the comment body. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the discussion comment to update. */
	commentId: string
};
	/** Autogenerated return type of UpdateDiscussionComment */
["UpdateDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The modified discussion comment. */
	comment?:ResolverInputTypes["DiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateDiscussion */
["UpdateDiscussionInput"]: {
	/** The new contents of the discussion body. */
	body?: string | undefined | null,
	/** The Node ID of a discussion category within the same repository to change this discussion to. */
	categoryId?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the discussion to update. */
	discussionId: string,
	/** The new discussion title. */
	title?: string | undefined | null
};
	/** Autogenerated return type of UpdateDiscussion */
["UpdateDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The modified discussion. */
	discussion?:ResolverInputTypes["Discussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
["UpdateEnterpriseAdministratorRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string,
	/** The login of a administrator whose role is being changed. */
	login: string,
	/** The new role for the Enterprise administrator. */
	role: ResolverInputTypes["EnterpriseAdministratorRole"]
};
	/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
["UpdateEnterpriseAdministratorRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of changing the administrator's role. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
["UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the allow private repository forking setting. */
	enterpriseId: string,
	/** The value for the allow private repository forking policy on the enterprise. */
	policyValue?: ResolverInputTypes["EnterpriseAllowPrivateRepositoryForkingPolicyValue"] | undefined | null,
	/** The value for the allow private repository forking setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
["UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated allow private repository forking setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the allow private repository forking setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
["UpdateEnterpriseDefaultRepositoryPermissionSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the base repository permission setting. */
	enterpriseId: string,
	/** The value for the base repository permission setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseDefaultRepositoryPermissionSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
["UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated base repository permission setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the base repository permission setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the members can change repository visibility setting. */
	enterpriseId: string,
	/** The value for the members can change repository visibility setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can change repository visibility setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the members can change repository visibility setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
["UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the members can create repositories setting. */
	enterpriseId: string,
	/** Allow members to create internal repositories. Defaults to current value. */
	membersCanCreateInternalRepositories?: boolean | undefined | null,
	/** Allow members to create private repositories. Defaults to current value. */
	membersCanCreatePrivateRepositories?: boolean | undefined | null,
	/** Allow members to create public repositories. Defaults to current value. */
	membersCanCreatePublicRepositories?: boolean | undefined | null,
	/** When false, allow member organizations to set their own repository creation member privileges. */
	membersCanCreateRepositoriesPolicyEnabled?: boolean | undefined | null,
	/** Value for the members can create repositories setting on the enterprise. This
or the granular public/private/internal allowed fields (but not both) must be provided. */
	settingValue?: ResolverInputTypes["EnterpriseMembersCanCreateRepositoriesSettingValue"] | undefined | null
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
["UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can create repositories setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the members can create repositories setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
["UpdateEnterpriseMembersCanDeleteIssuesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the members can delete issues setting. */
	enterpriseId: string,
	/** The value for the members can delete issues setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
["UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can delete issues setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the members can delete issues setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
["UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the members can delete repositories setting. */
	enterpriseId: string,
	/** The value for the members can delete repositories setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
["UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can delete repositories setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the members can delete repositories setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
["UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the members can invite collaborators setting. */
	enterpriseId: string,
	/** The value for the members can invite collaborators setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
["UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can invite collaborators setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the members can invite collaborators setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
["UpdateEnterpriseMembersCanMakePurchasesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the members can make purchases setting. */
	enterpriseId: string,
	/** The value for the members can make purchases setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseMembersCanMakePurchasesSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
["UpdateEnterpriseMembersCanMakePurchasesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can make purchases setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the members can make purchases setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the members can update protected branches setting. */
	enterpriseId: string,
	/** The value for the members can update protected branches setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can update protected branches setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the members can update protected branches setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
["UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the members can view dependency insights setting. */
	enterpriseId: string,
	/** The value for the members can view dependency insights setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
["UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated members can view dependency insights setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the members can view dependency insights setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
["UpdateEnterpriseOrganizationProjectsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the organization projects setting. */
	enterpriseId: string,
	/** The value for the organization projects setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
["UpdateEnterpriseOrganizationProjectsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated organization projects setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the organization projects setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
["UpdateEnterpriseOwnerOrganizationRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the Enterprise which the owner belongs to. */
	enterpriseId: string,
	/** The ID of the organization for membership change. */
	organizationId: string,
	/** The role to assume in the organization. */
	organizationRole: ResolverInputTypes["RoleInOrganization"]
};
	/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */
["UpdateEnterpriseOwnerOrganizationRolePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of changing the owner's organization role. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseProfile */
["UpdateEnterpriseProfileInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The description of the enterprise. */
	description?: string | undefined | null,
	/** The Enterprise ID to update. */
	enterpriseId: string,
	/** The location of the enterprise. */
	location?: string | undefined | null,
	/** The name of the enterprise. */
	name?: string | undefined | null,
	/** The URL of the enterprise's website. */
	websiteUrl?: string | undefined | null
};
	/** Autogenerated return type of UpdateEnterpriseProfile */
["UpdateEnterpriseProfilePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated enterprise. */
	enterprise?:ResolverInputTypes["Enterprise"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
["UpdateEnterpriseRepositoryProjectsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the repository projects setting. */
	enterpriseId: string,
	/** The value for the repository projects setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
["UpdateEnterpriseRepositoryProjectsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated repository projects setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the repository projects setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
["UpdateEnterpriseTeamDiscussionsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the team discussions setting. */
	enterpriseId: string,
	/** The value for the team discussions setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
["UpdateEnterpriseTeamDiscussionsSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated team discussions setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the team discussions setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the enterprise on which to set the two factor authentication required setting. */
	enterpriseId: string,
	/** The value for the two factor authentication required setting on the enterprise. */
	settingValue: ResolverInputTypes["EnterpriseEnabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The enterprise with the updated two factor authentication required setting. */
	enterprise?:ResolverInputTypes["Enterprise"],
	/** A message confirming the result of updating the two factor authentication required setting. */
	message?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateEnvironment */
["UpdateEnvironmentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The node ID of the environment. */
	environmentId: string,
	/** The ids of users or teams that can approve deployments to this environment */
	reviewers?: Array<string> | undefined | null,
	/** The wait timer in minutes. */
	waitTimer?: number | undefined | null
};
	/** Autogenerated return type of UpdateEnvironment */
["UpdateEnvironmentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated environment. */
	environment?:ResolverInputTypes["Environment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
["UpdateIpAllowListEnabledSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the owner on which to set the IP allow list enabled setting. */
	ownerId: string,
	/** The value for the IP allow list enabled setting. */
	settingValue: ResolverInputTypes["IpAllowListEnabledSettingValue"]
};
	/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
["UpdateIpAllowListEnabledSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list owner on which the setting was updated. */
	owner?:ResolverInputTypes["IpAllowListOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIpAllowListEntry */
["UpdateIpAllowListEntryInput"]: {
	/** An IP address or range of addresses in CIDR notation. */
	allowListValue: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the IP allow list entry to update. */
	ipAllowListEntryId: string,
	/** Whether the IP allow list entry is active when an IP allow list is enabled. */
	isActive: boolean,
	/** An optional name for the IP allow list entry. */
	name?: string | undefined | null
};
	/** Autogenerated return type of UpdateIpAllowListEntry */
["UpdateIpAllowListEntryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list entry that was updated. */
	ipAllowListEntry?:ResolverInputTypes["IpAllowListEntry"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
["UpdateIpAllowListForInstalledAppsEnabledSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the owner. */
	ownerId: string,
	/** The value for the IP allow list configuration for installed GitHub Apps setting. */
	settingValue: ResolverInputTypes["IpAllowListForInstalledAppsEnabledSettingValue"]
};
	/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */
["UpdateIpAllowListForInstalledAppsEnabledSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The IP allow list owner on which the setting was updated. */
	owner?:ResolverInputTypes["IpAllowListOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIssueComment */
["UpdateIssueCommentInput"]: {
	/** The updated text of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the IssueComment to modify. */
	id: string
};
	/** Autogenerated return type of UpdateIssueComment */
["UpdateIssueCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated comment. */
	issueComment?:ResolverInputTypes["IssueComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateIssue */
["UpdateIssueInput"]: {
	/** An array of Node IDs of users for this issue. */
	assigneeIds?: Array<string> | undefined | null,
	/** The body for the issue description. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the Issue to modify. */
	id: string,
	/** An array of Node IDs of labels for this issue. */
	labelIds?: Array<string> | undefined | null,
	/** The Node ID of the milestone for this issue. */
	milestoneId?: string | undefined | null,
	/** An array of Node IDs for projects associated with this issue. */
	projectIds?: Array<string> | undefined | null,
	/** The desired issue state. */
	state?: ResolverInputTypes["IssueState"] | undefined | null,
	/** The title for the issue. */
	title?: string | undefined | null
};
	/** Autogenerated return type of UpdateIssue */
["UpdateIssuePayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The issue. */
	issue?:ResolverInputTypes["Issue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateLabel */
["UpdateLabelInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** A 6 character hex code, without the leading #, identifying the updated color of the label. */
	color?: string | undefined | null,
	/** A brief description of the label, such as its purpose. */
	description?: string | undefined | null,
	/** The Node ID of the label to be updated. */
	id: string,
	/** The updated name of the label. */
	name?: string | undefined | null
};
	/** Autogenerated return type of UpdateLabel */
["UpdateLabelPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated label. */
	label?:ResolverInputTypes["Label"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateNotificationRestrictionSetting */
["UpdateNotificationRestrictionSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the owner on which to set the restrict notifications setting. */
	ownerId: string,
	/** The value for the restrict notifications setting. */
	settingValue: ResolverInputTypes["NotificationRestrictionSettingValue"]
};
	/** Autogenerated return type of UpdateNotificationRestrictionSetting */
["UpdateNotificationRestrictionSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The owner on which the setting was updated. */
	owner?:ResolverInputTypes["VerifiableDomainOwner"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
["UpdateOrganizationAllowPrivateRepositoryForkingSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Enable forking of private repositories in the organization? */
	forkingEnabled: boolean,
	/** The ID of the organization on which to set the allow private repository forking setting. */
	organizationId: string
};
	/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
["UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of updating the allow private repository forking setting. */
	message?:boolean | `@${string}`,
	/** The organization with the updated allow private repository forking setting. */
	organization?:ResolverInputTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting */
["UpdateOrganizationWebCommitSignoffSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the organization on which to set the web commit signoff setting. */
	organizationId: string,
	/** Enable signoff on web-based commits for repositories in the organization? */
	webCommitSignoffRequired: boolean
};
	/** Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting */
["UpdateOrganizationWebCommitSignoffSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of updating the web commit signoff setting. */
	message?:boolean | `@${string}`,
	/** The organization with the updated web commit signoff setting. */
	organization?:ResolverInputTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectCard */
["UpdateProjectCardInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Whether or not the ProjectCard should be archived */
	isArchived?: boolean | undefined | null,
	/** The note of ProjectCard. */
	note?: string | undefined | null,
	/** The ProjectCard ID to update. */
	projectCardId: string
};
	/** Autogenerated return type of UpdateProjectCard */
["UpdateProjectCardPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated ProjectCard. */
	projectCard?:ResolverInputTypes["ProjectCard"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectColumn */
["UpdateProjectColumnInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of project column. */
	name: string,
	/** The ProjectColumn ID to update. */
	projectColumnId: string
};
	/** Autogenerated return type of UpdateProjectColumn */
["UpdateProjectColumnPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated project column. */
	projectColumn?:ResolverInputTypes["ProjectColumn"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectDraftIssue */
["UpdateProjectDraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined | null,
	/** The body of the draft issue. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the draft issue to update. */
	draftIssueId: string,
	/** The title of the draft issue. */
	title?: string | undefined | null
};
	/** Autogenerated return type of UpdateProjectDraftIssue */
["UpdateProjectDraftIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The draft issue updated in the project. */
	draftIssue?:ResolverInputTypes["DraftIssue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProject */
["UpdateProjectInput"]: {
	/** The description of project. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The name of project. */
	name?: string | undefined | null,
	/** The Project ID to update. */
	projectId: string,
	/** Whether the project is public or not. */
	public?: boolean | undefined | null,
	/** Whether the project is open or closed. */
	state?: ResolverInputTypes["ProjectState"] | undefined | null
};
	/** Autogenerated input type of UpdateProjectNext */
["UpdateProjectNextInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Set the project to closed or open.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `closed` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	closed?: boolean | undefined | null,
	/** Set the readme description of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `description` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	description?: string | undefined | null,
	/** The ID of the Project to update. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined | null,
	/** Set the project to public or private.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `public` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	public?: boolean | undefined | null,
	/** Set the short description of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `shortDescription` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	shortDescription?: string | undefined | null,
	/** Set the title of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	title?: string | undefined | null
};
	/** Autogenerated input type of UpdateProjectNextItemField */
["UpdateProjectNextItemFieldInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The id of the field to be updated.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `fieldId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	fieldId?: string | undefined | null,
	/** The id of the item to be updated. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	itemId?: string | undefined | null,
	/** The ID of the Project. This field is required. */
	projectId?: string | undefined | null,
	/** The value which will be set on the field. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `value` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	value?: string | undefined | null
};
	/** Autogenerated return type of UpdateProjectNextItemField */
["UpdateProjectNextItemFieldPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated item. */
	projectNextItem?:ResolverInputTypes["ProjectNextItem"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated return type of UpdateProjectNext */
["UpdateProjectNextPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated Project. */
	projectNext?:ResolverInputTypes["ProjectNext"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated return type of UpdateProject */
["UpdateProjectPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated project. */
	project?:ResolverInputTypes["Project"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectV2DraftIssue */
["UpdateProjectV2DraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined | null,
	/** The body of the draft issue. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the draft issue to update. */
	draftIssueId: string,
	/** The title of the draft issue. */
	title?: string | undefined | null
};
	/** Autogenerated return type of UpdateProjectV2DraftIssue */
["UpdateProjectV2DraftIssuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The draft issue updated in the project. */
	draftIssue?:ResolverInputTypes["DraftIssue"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectV2 */
["UpdateProjectV2Input"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Set the project to closed or open. */
	closed?: boolean | undefined | null,
	/** The ID of the Project to update. */
	projectId: string,
	/** Set the project to public or private. */
	public?: boolean | undefined | null,
	/** Set the readme description of the project. */
	readme?: string | undefined | null,
	/** Set the short description of the project. */
	shortDescription?: string | undefined | null,
	/** Set the title of the project. */
	title?: string | undefined | null
};
	/** Autogenerated input type of UpdateProjectV2ItemFieldValue */
["UpdateProjectV2ItemFieldValueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the field to be updated. */
	fieldId: string,
	/** The ID of the item to be updated. */
	itemId: string,
	/** The ID of the Project. */
	projectId: string,
	/** The value which will be set on the field. */
	value: ResolverInputTypes["ProjectV2FieldValue"]
};
	/** Autogenerated return type of UpdateProjectV2ItemFieldValue */
["UpdateProjectV2ItemFieldValuePayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated item. */
	projectV2Item?:ResolverInputTypes["ProjectV2Item"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateProjectV2ItemPosition */
["UpdateProjectV2ItemPositionInput"]: {
	/** The ID of the item to position this item after. If omitted or set to null the item will be moved to top. */
	afterId?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the item to be moved. */
	itemId: string,
	/** The ID of the Project. */
	projectId: string
};
	/** Autogenerated return type of UpdateProjectV2ItemPosition */
["UpdateProjectV2ItemPositionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
items?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2ItemConnection"]],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated return type of UpdateProjectV2 */
["UpdateProjectV2Payload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated Project. */
	projectV2?:ResolverInputTypes["ProjectV2"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdatePullRequestBranch */
["UpdatePullRequestBranchInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The head ref oid for the upstream branch. */
	expectedHeadOid?: ResolverInputTypes["GitObjectID"] | undefined | null,
	/** The Node ID of the pull request. */
	pullRequestId: string
};
	/** Autogenerated return type of UpdatePullRequestBranch */
["UpdatePullRequestBranchPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdatePullRequest */
["UpdatePullRequestInput"]: {
	/** An array of Node IDs of users for this pull request. */
	assigneeIds?: Array<string> | undefined | null,
	/** The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository. */
	baseRefName?: string | undefined | null,
	/** The contents of the pull request. */
	body?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** An array of Node IDs of labels for this pull request. */
	labelIds?: Array<string> | undefined | null,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?: boolean | undefined | null,
	/** The Node ID of the milestone for this pull request. */
	milestoneId?: string | undefined | null,
	/** An array of Node IDs for projects associated with this pull request. */
	projectIds?: Array<string> | undefined | null,
	/** The Node ID of the pull request. */
	pullRequestId: string,
	/** The target state of the pull request. */
	state?: ResolverInputTypes["PullRequestUpdateState"] | undefined | null,
	/** The title of the pull request. */
	title?: string | undefined | null
};
	/** Autogenerated return type of UpdatePullRequest */
["UpdatePullRequestPayload"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request. */
	pullRequest?:ResolverInputTypes["PullRequest"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdatePullRequestReviewComment */
["UpdatePullRequestReviewCommentInput"]: {
	/** The text of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the comment to modify. */
	pullRequestReviewCommentId: string
};
	/** Autogenerated return type of UpdatePullRequestReviewComment */
["UpdatePullRequestReviewCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated comment. */
	pullRequestReviewComment?:ResolverInputTypes["PullRequestReviewComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdatePullRequestReview */
["UpdatePullRequestReviewInput"]: {
	/** The contents of the pull request review body. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the pull request review to modify. */
	pullRequestReviewId: string
};
	/** Autogenerated return type of UpdatePullRequestReview */
["UpdatePullRequestReviewPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated pull request review. */
	pullRequestReview?:ResolverInputTypes["PullRequestReview"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateRef */
["UpdateRefInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Permit updates of branch Refs that are not fast-forwards? */
	force?: boolean | undefined | null,
	/** The GitObjectID that the Ref shall be updated to target. */
	oid: ResolverInputTypes["GitObjectID"],
	/** The Node ID of the Ref to be updated. */
	refId: string
};
	/** Autogenerated return type of UpdateRef */
["UpdateRefPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated Ref. */
	ref?:ResolverInputTypes["Ref"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateRefs */
["UpdateRefsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** A list of ref updates. */
	refUpdates: Array<ResolverInputTypes["RefUpdate"]>,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of UpdateRefs */
["UpdateRefsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateRepository */
["UpdateRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** A new description for the repository. Pass an empty string to erase the existing description. */
	description?: string | undefined | null,
	/** Indicates if the repository should have the issues feature enabled. */
	hasIssuesEnabled?: boolean | undefined | null,
	/** Indicates if the repository should have the project boards feature enabled. */
	hasProjectsEnabled?: boolean | undefined | null,
	/** Indicates if the repository should have the wiki feature enabled. */
	hasWikiEnabled?: boolean | undefined | null,
	/** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
	homepageUrl?: ResolverInputTypes["URI"] | undefined | null,
	/** The new name of the repository. */
	name?: string | undefined | null,
	/** The ID of the repository to update. */
	repositoryId: string,
	/** Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure. */
	template?: boolean | undefined | null
};
	/** Autogenerated return type of UpdateRepository */
["UpdateRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated repository. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting */
["UpdateRepositoryWebCommitSignoffSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the repository to update. */
	repositoryId: string,
	/** Indicates if the repository should require signoff on web-based commits. */
	webCommitSignoffRequired: boolean
};
	/** Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting */
["UpdateRepositoryWebCommitSignoffSettingPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** A message confirming the result of updating the web commit signoff setting. */
	message?:boolean | `@${string}`,
	/** The updated repository. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateSponsorshipPreferences */
["UpdateSponsorshipPreferencesInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Specify whether others should be able to see that the sponsor is sponsoring
the sponsorable. Public visibility still does not reveal which tier is used. */
	privacyLevel?: ResolverInputTypes["SponsorshipPrivacy"] | undefined | null,
	/** Whether the sponsor should receive email updates from the sponsorable. */
	receiveEmails?: boolean | undefined | null,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined | null,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined | null,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined | null,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined | null
};
	/** Autogenerated return type of UpdateSponsorshipPreferences */
["UpdateSponsorshipPreferencesPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The sponsorship that was updated. */
	sponsorship?:ResolverInputTypes["Sponsorship"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateSubscription */
["UpdateSubscriptionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The new state of the subscription. */
	state: ResolverInputTypes["SubscriptionState"],
	/** The Node ID of the subscribable object to modify. */
	subscribableId: string
};
	/** Autogenerated return type of UpdateSubscription */
["UpdateSubscriptionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The input subscribable entity. */
	subscribable?:ResolverInputTypes["Subscribable"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTeamDiscussionComment */
["UpdateTeamDiscussionCommentInput"]: {
	/** The updated text of the comment. */
	body: string,
	/** The current version of the body content. */
	bodyVersion?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the comment to modify. */
	id: string
};
	/** Autogenerated return type of UpdateTeamDiscussionComment */
["UpdateTeamDiscussionCommentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated comment. */
	teamDiscussionComment?:ResolverInputTypes["TeamDiscussionComment"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTeamDiscussion */
["UpdateTeamDiscussionInput"]: {
	/** The updated text of the discussion. */
	body?: string | undefined | null,
	/** The current version of the body content. If provided, this update operation
will be rejected if the given version does not match the latest version on the server. */
	bodyVersion?: string | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the discussion to modify. */
	id: string,
	/** If provided, sets the pinned state of the updated discussion. */
	pinned?: boolean | undefined | null,
	/** The updated title of the discussion. */
	title?: string | undefined | null
};
	/** Autogenerated return type of UpdateTeamDiscussion */
["UpdateTeamDiscussionPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The updated discussion. */
	teamDiscussion?:ResolverInputTypes["TeamDiscussion"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTeamReviewAssignment */
["UpdateTeamReviewAssignmentInput"]: {
	/** The algorithm to use for review assignment */
	algorithm?: ResolverInputTypes["TeamReviewAssignmentAlgorithm"] | undefined | null,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Turn on or off review assignment */
	enabled: boolean,
	/** An array of team member IDs to exclude */
	excludedTeamMemberIds?: Array<string> | undefined | null,
	/** The Node ID of the team to update review assignments of */
	id: string,
	/** Notify the entire team of the PR if it is delegated */
	notifyTeam?: boolean | undefined | null,
	/** The number of team members to assign */
	teamMemberCount?: number | undefined | null
};
	/** Autogenerated return type of UpdateTeamReviewAssignment */
["UpdateTeamReviewAssignmentPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The team that was modified */
	team?:ResolverInputTypes["Team"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTeamsRepository */
["UpdateTeamsRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** Permission that should be granted to the teams. */
	permission: ResolverInputTypes["RepositoryPermission"],
	/** Repository ID being granted access to. */
	repositoryId: string,
	/** A list of teams being granted access. Limit: 10 */
	teamIds: Array<string>
};
	/** Autogenerated return type of UpdateTeamsRepository */
["UpdateTeamsRepositoryPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The repository that was updated. */
	repository?:ResolverInputTypes["Repository"],
	/** The teams granted permission on the repository. */
	teams?:ResolverInputTypes["Team"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of UpdateTopics */
["UpdateTopicsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The Node ID of the repository. */
	repositoryId: string,
	/** An array of topic names. */
	topicNames: Array<string>
};
	/** Autogenerated return type of UpdateTopics */
["UpdateTopicsPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** Names of the provided topics that are not valid. */
	invalidTopicNames?:boolean | `@${string}`,
	/** The updated repository. */
	repository?:ResolverInputTypes["Repository"],
		__typename?: boolean | `@${string}`
}>;
	/** A user is an individual's account on GitHub that owns repositories and can make new content. */
["User"]: AliasType<{
anyPinnableItems?: [{	/** Filter to only a particular kind of pinnable item. */
	type?: ResolverInputTypes["PinnableItemType"] | undefined | null},boolean | `@${string}`],
avatarUrl?: [{	/** The size of the resulting square image. */
	size?: number | undefined | null},boolean | `@${string}`],
	/** The user's public profile bio. */
	bio?:boolean | `@${string}`,
	/** The user's public profile bio as HTML. */
	bioHTML?:boolean | `@${string}`,
canReceiveOrganizationEmailsWhenNotificationsRestricted?: [{	/** The login of the organization to check. */
	login: string},boolean | `@${string}`],
commitComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["CommitCommentConnection"]],
	/** The user's public profile company. */
	company?:boolean | `@${string}`,
	/** The user's public profile company as HTML. */
	companyHTML?:boolean | `@${string}`,
contributionsCollection?: [{	/** Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. */
	from?: ResolverInputTypes["DateTime"] | undefined | null,	/** The ID of the organization used to filter contributions. */
	organizationID?: string | undefined | null,	/** Only contributions made before and up to (including) this time will be
counted. If omitted, defaults to the current time or one year from the
provided from argument. */
	to?: ResolverInputTypes["DateTime"] | undefined | null},ResolverInputTypes["ContributionsCollection"]],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The user's publicly visible profile email. */
	email?:boolean | `@${string}`,
	/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents?:boolean | `@${string}`,
followers?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["FollowerConnection"]],
following?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["FollowingConnection"]],
gist?: [{	/** The gist name to find. */
	name: string},ResolverInputTypes["Gist"]],
gistComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["GistCommentConnection"]],
gists?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for gists returned from the connection */
	orderBy?: ResolverInputTypes["GistOrder"] | undefined | null,	/** Filters Gists according to privacy. */
	privacy?: ResolverInputTypes["GistPrivacy"] | undefined | null},ResolverInputTypes["GistConnection"]],
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing?:boolean | `@${string}`,
hovercard?: [{	/** The ID of the subject to get the hovercard in the context of */
	primarySubjectId?: string | undefined | null},ResolverInputTypes["Hovercard"]],
	id?:boolean | `@${string}`,
	/** The interaction ability settings for this user. */
	interactionAbility?:ResolverInputTypes["RepositoryInteractionAbility"],
	/** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
	isBountyHunter?:boolean | `@${string}`,
	/** Whether or not this user is a participant in the GitHub Campus Experts Program. */
	isCampusExpert?:boolean | `@${string}`,
	/** Whether or not this user is a GitHub Developer Program member. */
	isDeveloperProgramMember?:boolean | `@${string}`,
	/** Whether or not this user is a GitHub employee. */
	isEmployee?:boolean | `@${string}`,
	/** Whether or not this user is following the viewer. Inverse of viewer_is_following */
	isFollowingViewer?:boolean | `@${string}`,
	/** Whether or not this user is a member of the GitHub Stars Program. */
	isGitHubStar?:boolean | `@${string}`,
	/** Whether or not the user has marked themselves as for hire. */
	isHireable?:boolean | `@${string}`,
	/** Whether or not this user is a site administrator. */
	isSiteAdmin?:boolean | `@${string}`,
isSponsoredBy?: [{	/** The target account's login. */
	accountLogin: string},boolean | `@${string}`],
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer?:boolean | `@${string}`,
	/** Whether or not this user is the viewing user. */
	isViewer?:boolean | `@${string}`,
issueComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for issue comments returned from the connection. */
	orderBy?: ResolverInputTypes["IssueCommentOrder"] | undefined | null},ResolverInputTypes["IssueCommentConnection"]],
issues?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Filtering options for issues returned from the connection. */
	filterBy?: ResolverInputTypes["IssueFilters"] | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for issues returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the issues by. */
	states?: Array<ResolverInputTypes["IssueState"]> | undefined | null},ResolverInputTypes["IssueConnection"]],
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase?:ResolverInputTypes["ProfileItemShowcase"],
	/** The user's public profile location. */
	location?:boolean | `@${string}`,
	/** The username used to login. */
	login?:boolean | `@${string}`,
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents?:boolean | `@${string}`,
	/** The user's public profile name. */
	name?:boolean | `@${string}`,
organization?: [{	/** The login of the organization to find. */
	login: string},ResolverInputTypes["Organization"]],
organizationVerifiedDomainEmails?: [{	/** The login of the organization to match verified domains from. */
	login: string},boolean | `@${string}`],
organizations?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["OrganizationConnection"]],
packages?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Find packages by their names. */
	names?: Array<string | undefined | null> | undefined | null,	/** Ordering of the returned packages. */
	orderBy?: ResolverInputTypes["PackageOrder"] | undefined | null,	/** Filter registry package by type. */
	packageType?: ResolverInputTypes["PackageType"] | undefined | null,	/** Find packages in a repository by ID. */
	repositoryId?: string | undefined | null},ResolverInputTypes["PackageConnection"]],
pinnableItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter the types of pinnable items that are returned. */
	types?: Array<ResolverInputTypes["PinnableItemType"]> | undefined | null},ResolverInputTypes["PinnableItemConnection"]],
pinnedItems?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter the types of pinned items that are returned. */
	types?: Array<ResolverInputTypes["PinnableItemType"]> | undefined | null},ResolverInputTypes["PinnableItemConnection"]],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining?:boolean | `@${string}`,
project?: [{	/** The project number to find. */
	number: number},ResolverInputTypes["Project"]],
projectNext?: [{	/** The project (beta) number. */
	number: number},ResolverInputTypes["ProjectNext"]],
projectV2?: [{	/** The project number. */
	number: number},ResolverInputTypes["ProjectV2"]],
projects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for projects returned from the connection */
	orderBy?: ResolverInputTypes["ProjectOrder"] | undefined | null,	/** Query to search projects by, currently only searching by name. */
	search?: string | undefined | null,	/** A list of states to filter the projects by. */
	states?: Array<ResolverInputTypes["ProjectState"]> | undefined | null},ResolverInputTypes["ProjectConnection"]],
projectsNext?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** A project (beta) to search for under the the owner. */
	query?: string | undefined | null,	/** How to order the returned projects (beta). */
	sortBy?: ResolverInputTypes["ProjectNextOrderField"] | undefined | null},ResolverInputTypes["ProjectNextConnection"]],
	/** The HTTP path listing user's projects */
	projectsResourcePath?:boolean | `@${string}`,
	/** The HTTP URL listing user's projects */
	projectsUrl?:boolean | `@${string}`,
projectsV2?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** How to order the returned projects. */
	orderBy?: ResolverInputTypes["ProjectV2Order"] | undefined | null,	/** A project to search for under the the owner. */
	query?: string | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
publicKeys?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["PublicKeyConnection"]],
pullRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** The base ref name to filter the pull requests by. */
	baseRefName?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** The head ref name to filter the pull requests by. */
	headRefName?: string | undefined | null,	/** A list of label names to filter the pull requests by. */
	labels?: Array<string> | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for pull requests returned from the connection. */
	orderBy?: ResolverInputTypes["IssueOrder"] | undefined | null,	/** A list of states to filter the pull requests by. */
	states?: Array<ResolverInputTypes["PullRequestState"]> | undefined | null},ResolverInputTypes["PullRequestConnection"]],
recentProjects?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["ProjectV2Connection"]],
repositories?: [{	/** Array of viewer's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
current viewer owns. */
	affiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** If non-null, filters repositories according to whether they are forks of another repository */
	isFork?: boolean | undefined | null,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories returned from the connection */
	orderBy?: ResolverInputTypes["RepositoryOrder"] | undefined | null,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** If non-null, filters repositories according to privacy */
	privacy?: ResolverInputTypes["RepositoryPrivacy"] | undefined | null},ResolverInputTypes["RepositoryConnection"]],
repositoriesContributedTo?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** If non-null, include only the specified types of contributions. The
GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY] */
	contributionTypes?: Array<ResolverInputTypes["RepositoryContributionType"] | undefined | null> | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** If true, include user repositories */
	includeUserRepositories?: boolean | undefined | null,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories returned from the connection */
	orderBy?: ResolverInputTypes["RepositoryOrder"] | undefined | null,	/** If non-null, filters repositories according to privacy */
	privacy?: ResolverInputTypes["RepositoryPrivacy"] | undefined | null},ResolverInputTypes["RepositoryConnection"]],
repository?: [{	/** Follow repository renames. If disabled, a repository referenced by its old name will return an error. */
	followRenames?: boolean | undefined | null,	/** Name of Repository to find. */
	name: string},ResolverInputTypes["Repository"]],
repositoryDiscussionComments?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Filter discussion comments to only those that were marked as the answer */
	onlyAnswers?: boolean | undefined | null,	/** Filter discussion comments to only those in a specific repository. */
	repositoryId?: string | undefined | null},ResolverInputTypes["DiscussionCommentConnection"]],
repositoryDiscussions?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Filter discussions to only those that have been answered or not. Defaults to
including both answered and unanswered discussions. */
	answered?: boolean | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for discussions returned from the connection. */
	orderBy?: ResolverInputTypes["DiscussionOrder"] | undefined | null,	/** Filter discussions to only those in a specific repository. */
	repositoryId?: string | undefined | null},ResolverInputTypes["DiscussionConnection"]],
	/** The HTTP path for this user */
	resourcePath?:boolean | `@${string}`,
savedReplies?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** The field to order saved replies by. */
	orderBy?: ResolverInputTypes["SavedReplyOrder"] | undefined | null},ResolverInputTypes["SavedReplyConnection"]],
sponsoring?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the users and organizations returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorOrder"] | undefined | null},ResolverInputTypes["SponsorConnection"]],
sponsors?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsors returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorOrder"] | undefined | null,	/** If given, will filter for sponsors at the given tier. Will only return
sponsors whose tier the viewer is permitted to see. */
	tierId?: string | undefined | null},ResolverInputTypes["SponsorConnection"]],
sponsorsActivities?: [{	/** Filter activities to only the specified actions. */
	actions?: Array<ResolverInputTypes["SponsorsActivityAction"]> | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for activity returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorsActivityOrder"] | undefined | null,	/** Filter activities returned to only those that occurred in the most recent
specified time period. Set to ALL to avoid filtering by when the activity occurred. */
	period?: ResolverInputTypes["SponsorsActivityPeriod"] | undefined | null},ResolverInputTypes["SponsorsActivityConnection"]],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?:ResolverInputTypes["SponsorsListing"],
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?:ResolverInputTypes["Sponsorship"],
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?:ResolverInputTypes["Sponsorship"],
sponsorshipNewsletters?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorship updates returned from the connection. */
	orderBy?: ResolverInputTypes["SponsorshipNewsletterOrder"] | undefined | null},ResolverInputTypes["SponsorshipNewsletterConnection"]],
sponsorshipsAsMaintainer?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Whether or not to include private sponsorships in the result set */
	includePrivate?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ResolverInputTypes["SponsorshipOrder"] | undefined | null},ResolverInputTypes["SponsorshipConnection"]],
sponsorshipsAsSponsor?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for sponsorships returned from this connection. If left
blank, the sponsorships will be ordered based on relevancy to the viewer. */
	orderBy?: ResolverInputTypes["SponsorshipOrder"] | undefined | null},ResolverInputTypes["SponsorshipConnection"]],
starredRepositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Order for connection */
	orderBy?: ResolverInputTypes["StarOrder"] | undefined | null,	/** Filters starred repositories to only return repositories owned by the viewer. */
	ownedByViewer?: boolean | undefined | null},ResolverInputTypes["StarredRepositoryConnection"]],
	/** The user's description of what they're currently doing. */
	status?:ResolverInputTypes["UserStatus"],
topRepositories?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories returned from the connection */
	orderBy: ResolverInputTypes["RepositoryOrder"],	/** How far back in time to fetch contributed repositories */
	since?: ResolverInputTypes["DateTime"] | undefined | null},ResolverInputTypes["RepositoryConnection"]],
	/** The user's Twitter username. */
	twitterUsername?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this user */
	url?:boolean | `@${string}`,
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems?:boolean | `@${string}`,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects?:boolean | `@${string}`,
	/** Whether or not the viewer is able to follow the user. */
	viewerCanFollow?:boolean | `@${string}`,
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor?:boolean | `@${string}`,
	/** Whether or not this user is followed by the viewer. Inverse of is_following_viewer. */
	viewerIsFollowing?:boolean | `@${string}`,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring?:boolean | `@${string}`,
watching?: [{	/** Affiliation options for repositories returned from the connection. If none
specified, the results will include repositories for which the current
viewer is an owner or collaborator, or member. */
	affiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** If non-null, filters repositories according to whether they have been locked */
	isLocked?: boolean | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for repositories returned from the connection */
	orderBy?: ResolverInputTypes["RepositoryOrder"] | undefined | null,	/** Array of owner's affiliation options for repositories returned from the
connection. For example, OWNER will include only repositories that the
organization or user being viewed owns. */
	ownerAffiliations?: Array<ResolverInputTypes["RepositoryAffiliation"] | undefined | null> | undefined | null,	/** If non-null, filters repositories according to privacy */
	privacy?: ResolverInputTypes["RepositoryPrivacy"] | undefined | null},ResolverInputTypes["RepositoryConnection"]],
	/** A URL pointing to the user's public website/blog. */
	websiteUrl?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The possible durations that a user can be blocked for. */
["UserBlockDuration"]:UserBlockDuration;
	/** Represents a 'user_blocked' event on a given user. */
["UserBlockedEvent"]: AliasType<{
	/** Identifies the actor who performed the event. */
	actor?:ResolverInputTypes["Actor"],
	/** Number of days that the user was blocked for. */
	blockDuration?:boolean | `@${string}`,
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The user who was blocked. */
	subject?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for User. */
["UserConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["UserEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["User"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edit on user content */
["UserContentEdit"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the date and time when the object was deleted. */
	deletedAt?:boolean | `@${string}`,
	/** The actor who deleted this content */
	deletedBy?:ResolverInputTypes["Actor"],
	/** A summary of the changes for this edit */
	diff?:boolean | `@${string}`,
	/** When this content was edited */
	editedAt?:boolean | `@${string}`,
	/** The actor who edited this content */
	editor?:ResolverInputTypes["Actor"],
	id?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A list of edits to content. */
["UserContentEditConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["UserContentEditEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["UserContentEdit"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["UserContentEditEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["UserContentEdit"],
		__typename?: boolean | `@${string}`
}>;
	/** Represents a user. */
["UserEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** Email attributes from External Identity */
["UserEmailMetadata"]: AliasType<{
	/** Boolean to identify primary emails */
	primary?:boolean | `@${string}`,
	/** Type of email */
	type?:boolean | `@${string}`,
	/** Email id */
	value?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The user's description of what they're currently doing. */
["UserStatus"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** An emoji summarizing the user's status. */
	emoji?:boolean | `@${string}`,
	/** The status emoji as HTML. */
	emojiHTML?:boolean | `@${string}`,
	/** If set, the status will not be shown after this date. */
	expiresAt?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether this status indicates the user is not fully available on GitHub. */
	indicatesLimitedAvailability?:boolean | `@${string}`,
	/** A brief message describing what the user is doing. */
	message?:boolean | `@${string}`,
	/** The organization whose members can see this status. If null, this status is publicly visible. */
	organization?:ResolverInputTypes["Organization"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The user who has this status. */
	user?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for UserStatus. */
["UserStatusConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["UserStatusEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["UserStatus"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["UserStatusEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["UserStatus"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for user status connections. */
["UserStatusOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order user statuses by. */
	field: ResolverInputTypes["UserStatusOrderField"]
};
	/** Properties by which user status connections can be ordered. */
["UserStatusOrderField"]:UserStatusOrderField;
	/** A domain that can be verified or approved for an organization or an enterprise. */
["VerifiableDomain"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	/** The DNS host name that should be used for verification. */
	dnsHostName?:boolean | `@${string}`,
	/** The unicode encoded domain. */
	domain?:boolean | `@${string}`,
	/** Whether a TXT record for verification with the expected host name was found. */
	hasFoundHostName?:boolean | `@${string}`,
	/** Whether a TXT record for verification with the expected verification token was found. */
	hasFoundVerificationToken?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** Whether or not the domain is approved. */
	isApproved?:boolean | `@${string}`,
	/** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
	isRequiredForPolicyEnforcement?:boolean | `@${string}`,
	/** Whether or not the domain is verified. */
	isVerified?:boolean | `@${string}`,
	/** The owner of the domain. */
	owner?:ResolverInputTypes["VerifiableDomainOwner"],
	/** The punycode encoded domain. */
	punycodeEncodedDomain?:boolean | `@${string}`,
	/** The time that the current verification token will expire. */
	tokenExpirationTime?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The current verification token for the domain. */
	verificationToken?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for VerifiableDomain. */
["VerifiableDomainConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["VerifiableDomainEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["VerifiableDomain"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["VerifiableDomainEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["VerifiableDomain"],
		__typename?: boolean | `@${string}`
}>;
	/** Ordering options for verifiable domain connections. */
["VerifiableDomainOrder"]: {
	/** The ordering direction. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field to order verifiable domains by. */
	field: ResolverInputTypes["VerifiableDomainOrderField"]
};
	/** Properties by which verifiable domain connections can be ordered. */
["VerifiableDomainOrderField"]:VerifiableDomainOrderField;
	/** Types that can own a verifiable domain. */
["VerifiableDomainOwner"]: AliasType<{
	Enterprise?:ResolverInputTypes["Enterprise"],
	Organization?:ResolverInputTypes["Organization"],
		__typename?: boolean | `@${string}`
}>;
	/** Autogenerated input type of VerifyVerifiableDomain */
["VerifyVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined | null,
	/** The ID of the verifiable domain to verify. */
	id: string
};
	/** Autogenerated return type of VerifyVerifiableDomain */
["VerifyVerifiableDomainPayload"]: AliasType<{
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?:boolean | `@${string}`,
	/** The verifiable domain that was verified. */
	domain?:ResolverInputTypes["VerifiableDomain"],
		__typename?: boolean | `@${string}`
}>;
	/** A hovercard context with a message describing how the viewer is related. */
["ViewerHovercardContext"]: AliasType<{
	/** A string describing this context */
	message?:boolean | `@${string}`,
	/** An octicon to accompany this context */
	octicon?:boolean | `@${string}`,
	/** Identifies the user who is related to this context. */
	viewer?:ResolverInputTypes["User"],
		__typename?: boolean | `@${string}`
}>;
	/** A subject that may be upvoted. */
["Votable"]:AliasType<{
		/** Number of upvotes that this subject has received. */
	upvoteCount?:boolean | `@${string}`,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote?:boolean | `@${string}`,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted?:boolean | `@${string}`;
		['...on Discussion']?: Omit<ResolverInputTypes["Discussion"],keyof ResolverInputTypes["Votable"]>;
		['...on DiscussionComment']?: Omit<ResolverInputTypes["DiscussionComment"],keyof ResolverInputTypes["Votable"]>;
		__typename?: boolean | `@${string}`
}>;
	/** A workflow contains meta information about an Actions workflow file. */
["Workflow"]: AliasType<{
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** The name of the workflow. */
	name?:boolean | `@${string}`,
runs?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null,	/** Ordering options for the connection */
	orderBy?: ResolverInputTypes["WorkflowRunOrder"] | undefined | null},ResolverInputTypes["WorkflowRunConnection"]],
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** A workflow run. */
["WorkflowRun"]: AliasType<{
	/** The check suite this workflow run belongs to. */
	checkSuite?:ResolverInputTypes["CheckSuite"],
	/** Identifies the date and time when the object was created. */
	createdAt?:boolean | `@${string}`,
	/** Identifies the primary key from the database. */
	databaseId?:boolean | `@${string}`,
deploymentReviews?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DeploymentReviewConnection"]],
	id?:boolean | `@${string}`,
pendingDeploymentRequests?: [{	/** Returns the elements in the list that come after the specified cursor. */
	after?: string | undefined | null,	/** Returns the elements in the list that come before the specified cursor. */
	before?: string | undefined | null,	/** Returns the first _n_ elements from the list. */
	first?: number | undefined | null,	/** Returns the last _n_ elements from the list. */
	last?: number | undefined | null},ResolverInputTypes["DeploymentRequestConnection"]],
	/** The HTTP path for this workflow run */
	resourcePath?:boolean | `@${string}`,
	/** A number that uniquely identifies this workflow run in its parent workflow. */
	runNumber?:boolean | `@${string}`,
	/** Identifies the date and time when the object was last updated. */
	updatedAt?:boolean | `@${string}`,
	/** The HTTP URL for this workflow run */
	url?:boolean | `@${string}`,
	/** The workflow executed in this workflow run. */
	workflow?:ResolverInputTypes["Workflow"],
		__typename?: boolean | `@${string}`
}>;
	/** The connection type for WorkflowRun. */
["WorkflowRunConnection"]: AliasType<{
	/** A list of edges. */
	edges?:ResolverInputTypes["WorkflowRunEdge"],
	/** A list of nodes. */
	nodes?:ResolverInputTypes["WorkflowRun"],
	/** Information to aid in pagination. */
	pageInfo?:ResolverInputTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** An edge in a connection. */
["WorkflowRunEdge"]: AliasType<{
	/** A cursor for use in pagination. */
	cursor?:boolean | `@${string}`,
	/** The item at the end of the edge. */
	node?:ResolverInputTypes["WorkflowRun"],
		__typename?: boolean | `@${string}`
}>;
	/** Ways in which lists of workflow runs can be ordered upon return. */
["WorkflowRunOrder"]: {
	/** The direction in which to order workflow runs by the specified field. */
	direction: ResolverInputTypes["OrderDirection"],
	/** The field by which to order workflows. */
	field: ResolverInputTypes["WorkflowRunOrderField"]
};
	/** Properties by which workflow run connections can be ordered. */
["WorkflowRunOrderField"]:WorkflowRunOrderField;
	/** A valid x509 certificate string */
["X509Certificate"]:unknown
  }

export type ModelTypes = {
    /** Autogenerated input type of AbortQueuedMigrations */
["AbortQueuedMigrationsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization that is running the migrations. */
	ownerId: string
};
	/** Autogenerated return type of AbortQueuedMigrations */
["AbortQueuedMigrationsPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Did the operation succeed? */
	success?: boolean | undefined
};
	/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
["AcceptEnterpriseAdministratorInvitationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the invitation being accepted */
	invitationId: string
};
	/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
["AcceptEnterpriseAdministratorInvitationPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The invitation that was accepted. */
	invitation?: ModelTypes["EnterpriseAdministratorInvitation"] | undefined,
	/** A message confirming the result of accepting an administrator invitation. */
	message?: string | undefined
};
	/** Autogenerated input type of AcceptTopicSuggestion */
["AcceptTopicSuggestionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the suggested topic. */
	name: string,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of AcceptTopicSuggestion */
["AcceptTopicSuggestionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The accepted topic. */
	topic?: ModelTypes["Topic"] | undefined
};
	/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
["Actor"]: ModelTypes["Bot"] | ModelTypes["EnterpriseUserAccount"] | ModelTypes["Mannequin"] | ModelTypes["Organization"] | ModelTypes["User"];
	/** Location information for an actor */
["ActorLocation"]: {
		/** City */
	city?: string | undefined,
	/** Country name */
	country?: string | undefined,
	/** Country code */
	countryCode?: string | undefined,
	/** Region name */
	region?: string | undefined,
	/** Region or state code */
	regionCode?: string | undefined
};
	["ActorType"]:ActorType;
	/** Autogenerated input type of AddAssigneesToAssignable */
["AddAssigneesToAssignableInput"]: {
	/** The id of the assignable object to add assignees to. */
	assignableId: string,
	/** The id of users to add as assignees. */
	assigneeIds: Array<string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated return type of AddAssigneesToAssignable */
["AddAssigneesToAssignablePayload"]: {
		/** The item that was assigned. */
	assignable?: ModelTypes["Assignable"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of AddComment */
["AddCommentInput"]: {
	/** The contents of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of AddComment */
["AddCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The edge from the subject's comment connection. */
	commentEdge?: ModelTypes["IssueCommentEdge"] | undefined,
	/** The subject */
	subject?: ModelTypes["Node"] | undefined,
	/** The edge from the subject's timeline connection. */
	timelineEdge?: ModelTypes["IssueTimelineItemEdge"] | undefined
};
	/** Autogenerated input type of AddDiscussionComment */
["AddDiscussionCommentInput"]: {
	/** The contents of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion to comment on. */
	discussionId: string,
	/** The Node ID of the discussion comment within this discussion to reply to. */
	replyToId?: string | undefined
};
	/** Autogenerated return type of AddDiscussionComment */
["AddDiscussionCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created discussion comment. */
	comment?: ModelTypes["DiscussionComment"] | undefined
};
	/** Autogenerated input type of AddDiscussionPollVote */
["AddDiscussionPollVoteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion poll option to vote for. */
	pollOptionId: string
};
	/** Autogenerated return type of AddDiscussionPollVote */
["AddDiscussionPollVotePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The poll option that a vote was added to. */
	pollOption?: ModelTypes["DiscussionPollOption"] | undefined
};
	/** Autogenerated input type of AddEnterpriseSupportEntitlement */
["AddEnterpriseSupportEntitlementInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string,
	/** The login of a member who will receive the support entitlement. */
	login: string
};
	/** Autogenerated return type of AddEnterpriseSupportEntitlement */
["AddEnterpriseSupportEntitlementPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of adding the support entitlement. */
	message?: string | undefined
};
	/** Autogenerated input type of AddLabelsToLabelable */
["AddLabelsToLabelableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ids of the labels to add. */
	labelIds: Array<string>,
	/** The id of the labelable object to add labels to. */
	labelableId: string
};
	/** Autogenerated return type of AddLabelsToLabelable */
["AddLabelsToLabelablePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item that was labeled. */
	labelable?: ModelTypes["Labelable"] | undefined
};
	/** Autogenerated input type of AddProjectCard */
["AddProjectCardInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The content of the card. Must be a member of the ProjectCardItem union */
	contentId?: string | undefined,
	/** The note on the card. */
	note?: string | undefined,
	/** The Node ID of the ProjectColumn. */
	projectColumnId: string
};
	/** Autogenerated return type of AddProjectCard */
["AddProjectCardPayload"]: {
		/** The edge from the ProjectColumn's card connection. */
	cardEdge?: ModelTypes["ProjectCardEdge"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ProjectColumn */
	projectColumn?: ModelTypes["ProjectColumn"] | undefined
};
	/** Autogenerated input type of AddProjectColumn */
["AddProjectColumnInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the column. */
	name: string,
	/** The Node ID of the project. */
	projectId: string
};
	/** Autogenerated return type of AddProjectColumn */
["AddProjectColumnPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The edge from the project's column connection. */
	columnEdge?: ModelTypes["ProjectColumnEdge"] | undefined,
	/** The project */
	project?: ModelTypes["Project"] | undefined
};
	/** Autogenerated input type of AddProjectDraftIssue */
["AddProjectDraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `assigneeIds` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	assigneeIds?: Array<string> | undefined,
	/** The body of the draft issue.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `body` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Project to add the draft issue to. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined,
	/** The title of the draft issue. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	title?: string | undefined
};
	/** Autogenerated return type of AddProjectDraftIssue */
["AddProjectDraftIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The draft issue added to the project. */
	projectNextItem?: ModelTypes["ProjectNextItem"] | undefined
};
	/** Autogenerated input type of AddProjectNextItem */
["AddProjectNextItemInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The content id of the item (Issue or PullRequest). This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `contentId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	contentId?: string | undefined,
	/** The ID of the Project to add the item to. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined
};
	/** Autogenerated return type of AddProjectNextItem */
["AddProjectNextItemPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item added to the project. */
	projectNextItem?: ModelTypes["ProjectNextItem"] | undefined
};
	/** Autogenerated input type of AddProjectV2DraftIssue */
["AddProjectV2DraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body of the draft issue. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Project to add the draft issue to. */
	projectId: string,
	/** The title of the draft issue. */
	title: string
};
	/** Autogenerated return type of AddProjectV2DraftIssue */
["AddProjectV2DraftIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The draft issue added to the project. */
	projectItem?: ModelTypes["ProjectV2Item"] | undefined
};
	/** Autogenerated input type of AddProjectV2ItemById */
["AddProjectV2ItemByIdInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the Issue or Pull Request to add. */
	contentId: string,
	/** The ID of the Project to add the item to. */
	projectId: string
};
	/** Autogenerated return type of AddProjectV2ItemById */
["AddProjectV2ItemByIdPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item added to the project. */
	item?: ModelTypes["ProjectV2Item"] | undefined
};
	/** Autogenerated input type of AddPullRequestReviewComment */
["AddPullRequestReviewCommentInput"]: {
	/** The text of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The SHA of the commit to comment on. */
	commitOID?: ModelTypes["GitObjectID"] | undefined,
	/** The comment id to reply to. */
	inReplyTo?: string | undefined,
	/** The relative path of the file to comment on. */
	path?: string | undefined,
	/** The line index in the diff to comment on. */
	position?: number | undefined,
	/** The node ID of the pull request reviewing */
	pullRequestId?: string | undefined,
	/** The Node ID of the review to modify. */
	pullRequestReviewId?: string | undefined
};
	/** Autogenerated return type of AddPullRequestReviewComment */
["AddPullRequestReviewCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created comment. */
	comment?: ModelTypes["PullRequestReviewComment"] | undefined,
	/** The edge from the review's comment connection. */
	commentEdge?: ModelTypes["PullRequestReviewCommentEdge"] | undefined
};
	/** Autogenerated input type of AddPullRequestReview */
["AddPullRequestReviewInput"]: {
	/** The contents of the review body comment. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The review line comments. */
	comments?: Array<ModelTypes["DraftPullRequestReviewComment"] | undefined> | undefined,
	/** The commit OID the review pertains to. */
	commitOID?: ModelTypes["GitObjectID"] | undefined,
	/** The event to perform on the pull request review. */
	event?: ModelTypes["PullRequestReviewEvent"] | undefined,
	/** The Node ID of the pull request to modify. */
	pullRequestId: string,
	/** The review line comment threads. */
	threads?: Array<ModelTypes["DraftPullRequestReviewThread"] | undefined> | undefined
};
	/** Autogenerated return type of AddPullRequestReview */
["AddPullRequestReviewPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created pull request review. */
	pullRequestReview?: ModelTypes["PullRequestReview"] | undefined,
	/** The edge from the pull request's review connection. */
	reviewEdge?: ModelTypes["PullRequestReviewEdge"] | undefined
};
	/** Autogenerated input type of AddPullRequestReviewThread */
["AddPullRequestReviewThreadInput"]: {
	/** Body of the thread's first comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
	line: number,
	/** Path to the file being commented on. */
	path: string,
	/** The node ID of the pull request reviewing */
	pullRequestId?: string | undefined,
	/** The Node ID of the review to modify. */
	pullRequestReviewId?: string | undefined,
	/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
	side?: ModelTypes["DiffSide"] | undefined,
	/** The first line of the range to which the comment refers. */
	startLine?: number | undefined,
	/** The side of the diff on which the start line resides. */
	startSide?: ModelTypes["DiffSide"] | undefined
};
	/** Autogenerated return type of AddPullRequestReviewThread */
["AddPullRequestReviewThreadPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created thread. */
	thread?: ModelTypes["PullRequestReviewThread"] | undefined
};
	/** Autogenerated input type of AddReaction */
["AddReactionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the emoji to react with. */
	content: ModelTypes["ReactionContent"],
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of AddReaction */
["AddReactionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The reaction object. */
	reaction?: ModelTypes["Reaction"] | undefined,
	/** The reactable subject. */
	subject?: ModelTypes["Reactable"] | undefined
};
	/** Autogenerated input type of AddStar */
["AddStarInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Starrable ID to star. */
	starrableId: string
};
	/** Autogenerated return type of AddStar */
["AddStarPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The starrable. */
	starrable?: ModelTypes["Starrable"] | undefined
};
	/** Autogenerated input type of AddUpvote */
["AddUpvoteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion or comment to upvote. */
	subjectId: string
};
	/** Autogenerated return type of AddUpvote */
["AddUpvotePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The votable subject. */
	subject?: ModelTypes["Votable"] | undefined
};
	/** Autogenerated input type of AddVerifiableDomain */
["AddVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The URL of the domain */
	domain: ModelTypes["URI"],
	/** The ID of the owner to add the domain to */
	ownerId: string
};
	/** Autogenerated return type of AddVerifiableDomain */
["AddVerifiableDomainPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The verifiable domain that was added. */
	domain?: ModelTypes["VerifiableDomain"] | undefined
};
	/** Represents a 'added_to_project' event on a given issue or pull request. */
["AddedToProjectEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Project referenced by event. */
	project?: ModelTypes["Project"] | undefined,
	/** Project card referenced by this project event. */
	projectCard?: ModelTypes["ProjectCard"] | undefined,
	/** Column name referenced by this project event. */
	projectColumnName: string
};
	/** A GitHub App. */
["App"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The description of the app. */
	description?: string | undefined,
	id: string,
	/** The IP addresses of the app. */
	ipAllowListEntries: ModelTypes["IpAllowListEntryConnection"],
	/** The hex color code, without the leading '#', for the logo background. */
	logoBackgroundColor: string,
	/** A URL pointing to the app's logo. */
	logoUrl: ModelTypes["URI"],
	/** The name of the app. */
	name: string,
	/** A slug based on the name of the app for use in URLs. */
	slug: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The URL to the app's homepage. */
	url: ModelTypes["URI"]
};
	/** Autogenerated input type of ApproveDeployments */
["ApproveDeploymentsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Optional comment for approving deployments */
	comment?: string | undefined,
	/** The ids of environments to reject deployments */
	environmentIds: Array<string>,
	/** The node ID of the workflow run containing the pending deployments. */
	workflowRunId: string
};
	/** Autogenerated return type of ApproveDeployments */
["ApproveDeploymentsPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The affected deployments. */
	deployments?: Array<ModelTypes["Deployment"]> | undefined
};
	/** Autogenerated input type of ApproveVerifiableDomain */
["ApproveVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the verifiable domain to approve. */
	id: string
};
	/** Autogenerated return type of ApproveVerifiableDomain */
["ApproveVerifiableDomainPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The verifiable domain that was approved. */
	domain?: ModelTypes["VerifiableDomain"] | undefined
};
	/** Autogenerated input type of ArchiveRepository */
["ArchiveRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the repository to mark as archived. */
	repositoryId: string
};
	/** Autogenerated return type of ArchiveRepository */
["ArchiveRepositoryPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository that was marked as archived. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** An object that can have users assigned to it. */
["Assignable"]: ModelTypes["Issue"] | ModelTypes["PullRequest"];
	/** Represents an 'assigned' event on any assignable object. */
["AssignedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the assignable associated with the event. */
	assignable: ModelTypes["Assignable"],
	/** Identifies the user or mannequin that was assigned. */
	assignee?: ModelTypes["Assignee"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Identifies the user who was assigned. */
	user?: ModelTypes["User"] | undefined
};
	/** Types that can be assigned to issues. */
["Assignee"]:ModelTypes["Bot"] | ModelTypes["Mannequin"] | ModelTypes["Organization"] | ModelTypes["User"];
	/** An entry in the audit log. */
["AuditEntry"]: ModelTypes["MembersCanDeleteReposClearAuditEntry"] | ModelTypes["MembersCanDeleteReposDisableAuditEntry"] | ModelTypes["MembersCanDeleteReposEnableAuditEntry"] | ModelTypes["OauthApplicationCreateAuditEntry"] | ModelTypes["OrgAddBillingManagerAuditEntry"] | ModelTypes["OrgAddMemberAuditEntry"] | ModelTypes["OrgBlockUserAuditEntry"] | ModelTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"] | ModelTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"] | ModelTypes["OrgCreateAuditEntry"] | ModelTypes["OrgDisableOauthAppRestrictionsAuditEntry"] | ModelTypes["OrgDisableSamlAuditEntry"] | ModelTypes["OrgDisableTwoFactorRequirementAuditEntry"] | ModelTypes["OrgEnableOauthAppRestrictionsAuditEntry"] | ModelTypes["OrgEnableSamlAuditEntry"] | ModelTypes["OrgEnableTwoFactorRequirementAuditEntry"] | ModelTypes["OrgInviteMemberAuditEntry"] | ModelTypes["OrgInviteToBusinessAuditEntry"] | ModelTypes["OrgOauthAppAccessApprovedAuditEntry"] | ModelTypes["OrgOauthAppAccessDeniedAuditEntry"] | ModelTypes["OrgOauthAppAccessRequestedAuditEntry"] | ModelTypes["OrgRemoveBillingManagerAuditEntry"] | ModelTypes["OrgRemoveMemberAuditEntry"] | ModelTypes["OrgRemoveOutsideCollaboratorAuditEntry"] | ModelTypes["OrgRestoreMemberAuditEntry"] | ModelTypes["OrgUnblockUserAuditEntry"] | ModelTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"] | ModelTypes["OrgUpdateMemberAuditEntry"] | ModelTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"] | ModelTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"] | ModelTypes["PrivateRepositoryForkingDisableAuditEntry"] | ModelTypes["PrivateRepositoryForkingEnableAuditEntry"] | ModelTypes["RepoAccessAuditEntry"] | ModelTypes["RepoAddMemberAuditEntry"] | ModelTypes["RepoAddTopicAuditEntry"] | ModelTypes["RepoArchivedAuditEntry"] | ModelTypes["RepoChangeMergeSettingAuditEntry"] | ModelTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigLockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoCreateAuditEntry"] | ModelTypes["RepoDestroyAuditEntry"] | ModelTypes["RepoRemoveMemberAuditEntry"] | ModelTypes["RepoRemoveTopicAuditEntry"] | ModelTypes["RepositoryVisibilityChangeDisableAuditEntry"] | ModelTypes["RepositoryVisibilityChangeEnableAuditEntry"] | ModelTypes["TeamAddMemberAuditEntry"] | ModelTypes["TeamAddRepositoryAuditEntry"] | ModelTypes["TeamChangeParentTeamAuditEntry"] | ModelTypes["TeamRemoveMemberAuditEntry"] | ModelTypes["TeamRemoveRepositoryAuditEntry"];
	/** Types that can initiate an audit log event. */
["AuditEntryActor"]:ModelTypes["Bot"] | ModelTypes["Organization"] | ModelTypes["User"];
	/** Ordering options for Audit Log connections. */
["AuditLogOrder"]: {
	/** The ordering direction. */
	direction?: ModelTypes["OrderDirection"] | undefined,
	/** The field to order Audit Logs by. */
	field?: ModelTypes["AuditLogOrderField"] | undefined
};
	["AuditLogOrderField"]:AuditLogOrderField;
	/** Represents a 'auto_merge_disabled' event on a given pull request. */
["AutoMergeDisabledEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The user who disabled auto-merge for this Pull Request */
	disabler?: ModelTypes["User"] | undefined,
	id: string,
	/** PullRequest referenced by event */
	pullRequest?: ModelTypes["PullRequest"] | undefined,
	/** The reason auto-merge was disabled */
	reason?: string | undefined,
	/** The reason_code relating to why auto-merge was disabled */
	reasonCode?: string | undefined
};
	/** Represents a 'auto_merge_enabled' event on a given pull request. */
["AutoMergeEnabledEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The user who enabled auto-merge for this Pull Request */
	enabler?: ModelTypes["User"] | undefined,
	id: string,
	/** PullRequest referenced by event. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Represents an auto-merge request for a pull request */
["AutoMergeRequest"]: {
		/** The email address of the author of this auto-merge request. */
	authorEmail?: string | undefined,
	/** The commit message of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging. */
	commitBody?: string | undefined,
	/** The commit title of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging */
	commitHeadline?: string | undefined,
	/** When was this auto-merge request was enabled. */
	enabledAt?: ModelTypes["DateTime"] | undefined,
	/** The actor who created the auto-merge request. */
	enabledBy?: ModelTypes["Actor"] | undefined,
	/** The merge method of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging. */
	mergeMethod: ModelTypes["PullRequestMergeMethod"],
	/** The pull request that this auto-merge request is set against. */
	pullRequest: ModelTypes["PullRequest"]
};
	/** Represents a 'auto_rebase_enabled' event on a given pull request. */
["AutoRebaseEnabledEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The user who enabled auto-merge (rebase) for this Pull Request */
	enabler?: ModelTypes["User"] | undefined,
	id: string,
	/** PullRequest referenced by event. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Represents a 'auto_squash_enabled' event on a given pull request. */
["AutoSquashEnabledEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The user who enabled auto-merge (squash) for this Pull Request */
	enabler?: ModelTypes["User"] | undefined,
	id: string,
	/** PullRequest referenced by event. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Represents a 'automatic_base_change_failed' event on a given pull request. */
["AutomaticBaseChangeFailedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** The new base for this PR */
	newBase: string,
	/** The old base for this PR */
	oldBase: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"]
};
	/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
["AutomaticBaseChangeSucceededEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** The new base for this PR */
	newBase: string,
	/** The old base for this PR */
	oldBase: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"]
};
	/** A (potentially binary) string encoded using base64. */
["Base64String"]:any;
	/** Represents a 'base_ref_changed' event on a given issue or pull request. */
["BaseRefChangedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the name of the base ref for the pull request after it was changed. */
	currentRefName: string,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Identifies the name of the base ref for the pull request before it was changed. */
	previousRefName: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"]
};
	/** Represents a 'base_ref_deleted' event on a given pull request. */
["BaseRefDeletedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
	baseRefName?: string | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Represents a 'base_ref_force_pushed' event on a given pull request. */
["BaseRefForcePushedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
	afterCommit?: ModelTypes["Commit"] | undefined,
	/** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
	beforeCommit?: ModelTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"],
	/** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
	ref?: ModelTypes["Ref"] | undefined
};
	/** Represents a Git blame. */
["Blame"]: {
		/** The list of ranges from a Git blame. */
	ranges: Array<ModelTypes["BlameRange"]>
};
	/** Represents a range of information from a Git blame. */
["BlameRange"]: {
		/** Identifies the recency of the change, from 1 (new) to 10 (old). This is
calculated as a 2-quantile and determines the length of distance between the
median age of all the changes in the file and the recency of the current
range's change. */
	age: number,
	/** Identifies the line author */
	commit: ModelTypes["Commit"],
	/** The ending line for the range */
	endingLine: number,
	/** The starting line for the range */
	startingLine: number
};
	/** Represents a Git blob. */
["Blob"]: {
		/** An abbreviated version of the Git object ID */
	abbreviatedOid: string,
	/** Byte size of Blob object */
	byteSize: number,
	/** The HTTP path for this Git object */
	commitResourcePath: ModelTypes["URI"],
	/** The HTTP URL for this Git object */
	commitUrl: ModelTypes["URI"],
	id: string,
	/** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
	isBinary?: boolean | undefined,
	/** Indicates whether the contents is truncated */
	isTruncated: boolean,
	/** The Git object ID */
	oid: ModelTypes["GitObjectID"],
	/** The Repository the Git object belongs to */
	repository: ModelTypes["Repository"],
	/** UTF8 text data or null if the Blob is binary */
	text?: string | undefined
};
	/** A special type of user which takes actions on behalf of GitHub Apps. */
["Bot"]: {
		/** A URL pointing to the GitHub App's public avatar. */
	avatarUrl: ModelTypes["URI"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The username of the actor. */
	login: string,
	/** The HTTP path for this bot */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this bot */
	url: ModelTypes["URI"]
};
	/** Types which can be actors for `BranchActorAllowance` objects. */
["BranchActorAllowanceActor"]:ModelTypes["App"] | ModelTypes["Team"] | ModelTypes["User"];
	/** A branch protection rule. */
["BranchProtectionRule"]: {
		/** Can this branch be deleted. */
	allowsDeletions: boolean,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes: boolean,
	/** Is branch creation a protected operation. */
	blocksCreations: boolean,
	/** A list of conflicts matching branches protection rule and other branch protection rules */
	branchProtectionRuleConflicts: ModelTypes["BranchProtectionRuleConflictConnection"],
	/** A list of actors able to force push for this branch protection rule. */
	bypassForcePushAllowances: ModelTypes["BypassForcePushAllowanceConnection"],
	/** A list of actors able to bypass PRs for this branch protection rule. */
	bypassPullRequestAllowances: ModelTypes["BypassPullRequestAllowanceConnection"],
	/** The actor who created this branch protection rule. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews: boolean,
	id: string,
	/** Can admins overwrite branch protection. */
	isAdminEnforced: boolean,
	/** Repository refs that are protected by this rule */
	matchingRefs: ModelTypes["RefConnection"],
	/** Identifies the protection rule pattern. */
	pattern: string,
	/** A list push allowances for this branch protection rule. */
	pushAllowances: ModelTypes["PushAllowanceConnection"],
	/** The repository associated with this branch protection rule. */
	repository?: ModelTypes["Repository"] | undefined,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string | undefined> | undefined,
	/** List of required status checks that must pass for commits to be accepted to matching branches. */
	requiredStatusChecks?: Array<ModelTypes["RequiredStatusCheckDescription"]> | undefined,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews: boolean,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews: boolean,
	/** Are commits required to be signed. */
	requiresCommitSignatures: boolean,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution: boolean,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory: boolean,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks: boolean,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks: boolean,
	/** Is pushing to matching branches restricted. */
	restrictsPushes: boolean,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals: boolean,
	/** A list review dismissal allowances for this branch protection rule. */
	reviewDismissalAllowances: ModelTypes["ReviewDismissalAllowanceConnection"]
};
	/** A conflict between two branch protection rules. */
["BranchProtectionRuleConflict"]: {
		/** Identifies the branch protection rule. */
	branchProtectionRule?: ModelTypes["BranchProtectionRule"] | undefined,
	/** Identifies the conflicting branch protection rule. */
	conflictingBranchProtectionRule?: ModelTypes["BranchProtectionRule"] | undefined,
	/** Identifies the branch ref that has conflicting rules */
	ref?: ModelTypes["Ref"] | undefined
};
	/** The connection type for BranchProtectionRuleConflict. */
["BranchProtectionRuleConflictConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["BranchProtectionRuleConflictEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["BranchProtectionRuleConflict"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["BranchProtectionRuleConflictEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["BranchProtectionRuleConflict"] | undefined
};
	/** The connection type for BranchProtectionRule. */
["BranchProtectionRuleConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["BranchProtectionRuleEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["BranchProtectionRule"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["BranchProtectionRuleEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["BranchProtectionRule"] | undefined
};
	/** A user, team, or app who has the ability to bypass a force push requirement on a protected branch. */
["BypassForcePushAllowance"]: {
		/** The actor that can force push. */
	actor?: ModelTypes["BranchActorAllowanceActor"] | undefined,
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?: ModelTypes["BranchProtectionRule"] | undefined,
	id: string
};
	/** The connection type for BypassForcePushAllowance. */
["BypassForcePushAllowanceConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["BypassForcePushAllowanceEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["BypassForcePushAllowance"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["BypassForcePushAllowanceEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["BypassForcePushAllowance"] | undefined
};
	/** A user, team, or app who has the ability to bypass a pull request requirement on a protected branch. */
["BypassPullRequestAllowance"]: {
		/** The actor that can bypass. */
	actor?: ModelTypes["BranchActorAllowanceActor"] | undefined,
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?: ModelTypes["BranchProtectionRule"] | undefined,
	id: string
};
	/** The connection type for BypassPullRequestAllowance. */
["BypassPullRequestAllowanceConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["BypassPullRequestAllowanceEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["BypassPullRequestAllowance"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["BypassPullRequestAllowanceEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["BypassPullRequestAllowance"] | undefined
};
	/** The Common Vulnerability Scoring System */
["CVSS"]: {
		/** The CVSS score associated with this advisory */
	score: number,
	/** The CVSS vector string associated with this advisory */
	vectorString?: string | undefined
};
	/** A common weakness enumeration */
["CWE"]: {
		/** The id of the CWE */
	cweId: string,
	/** A detailed description of this CWE */
	description: string,
	id: string,
	/** The name of this CWE */
	name: string
};
	/** The connection type for CWE. */
["CWEConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CWEEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CWE"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CWEEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CWE"] | undefined
};
	/** Autogenerated input type of CancelEnterpriseAdminInvitation */
["CancelEnterpriseAdminInvitationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the pending enterprise administrator invitation. */
	invitationId: string
};
	/** Autogenerated return type of CancelEnterpriseAdminInvitation */
["CancelEnterpriseAdminInvitationPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The invitation that was canceled. */
	invitation?: ModelTypes["EnterpriseAdministratorInvitation"] | undefined,
	/** A message confirming the result of canceling an administrator invitation. */
	message?: string | undefined
};
	/** Autogenerated input type of CancelSponsorship */
["CancelSponsorshipInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined
};
	/** Autogenerated return type of CancelSponsorship */
["CancelSponsorshipPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The tier that was being used at the time of cancellation. */
	sponsorsTier?: ModelTypes["SponsorsTier"] | undefined
};
	/** Autogenerated input type of ChangeUserStatus */
["ChangeUserStatusInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
	emoji?: string | undefined,
	/** If set, the user status will not be shown after this date. */
	expiresAt?: ModelTypes["DateTime"] | undefined,
	/** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
	limitedAvailability?: boolean | undefined,
	/** A short description of your current status. */
	message?: string | undefined,
	/** The ID of the organization whose members will be allowed to see the status. If
omitted, the status will be publicly visible. */
	organizationId?: string | undefined
};
	/** Autogenerated return type of ChangeUserStatus */
["ChangeUserStatusPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Your updated status. */
	status?: ModelTypes["UserStatus"] | undefined
};
	/** A single check annotation. */
["CheckAnnotation"]: {
		/** The annotation's severity level. */
	annotationLevel?: ModelTypes["CheckAnnotationLevel"] | undefined,
	/** The path to the file that this annotation was made on. */
	blobUrl: ModelTypes["URI"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The position of this annotation. */
	location: ModelTypes["CheckAnnotationSpan"],
	/** The annotation's message. */
	message: string,
	/** The path that this annotation was made on. */
	path: string,
	/** Additional information about the annotation. */
	rawDetails?: string | undefined,
	/** The annotation's title */
	title?: string | undefined
};
	/** The connection type for CheckAnnotation. */
["CheckAnnotationConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CheckAnnotationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CheckAnnotation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Information from a check run analysis to specific lines of code. */
["CheckAnnotationData"]: {
	/** Represents an annotation's information level */
	annotationLevel: ModelTypes["CheckAnnotationLevel"],
	/** The location of the annotation */
	location: ModelTypes["CheckAnnotationRange"],
	/** A short description of the feedback for these lines of code. */
	message: string,
	/** The path of the file to add an annotation to. */
	path: string,
	/** Details about this annotation. */
	rawDetails?: string | undefined,
	/** The title that represents the annotation. */
	title?: string | undefined
};
	/** An edge in a connection. */
["CheckAnnotationEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CheckAnnotation"] | undefined
};
	["CheckAnnotationLevel"]:CheckAnnotationLevel;
	/** A character position in a check annotation. */
["CheckAnnotationPosition"]: {
		/** Column number (1 indexed). */
	column?: number | undefined,
	/** Line number (1 indexed). */
	line: number
};
	/** Information from a check run analysis to specific lines of code. */
["CheckAnnotationRange"]: {
	/** The ending column of the range. */
	endColumn?: number | undefined,
	/** The ending line of the range. */
	endLine: number,
	/** The starting column of the range. */
	startColumn?: number | undefined,
	/** The starting line of the range. */
	startLine: number
};
	/** An inclusive pair of positions for a check annotation. */
["CheckAnnotationSpan"]: {
		/** End position (inclusive). */
	end: ModelTypes["CheckAnnotationPosition"],
	/** Start position (inclusive). */
	start: ModelTypes["CheckAnnotationPosition"]
};
	["CheckConclusionState"]:CheckConclusionState;
	/** A check run. */
["CheckRun"]: {
		/** The check run's annotations */
	annotations?: ModelTypes["CheckAnnotationConnection"] | undefined,
	/** The check suite that this run is a part of. */
	checkSuite: ModelTypes["CheckSuite"],
	/** Identifies the date and time when the check run was completed. */
	completedAt?: ModelTypes["DateTime"] | undefined,
	/** The conclusion of the check run. */
	conclusion?: ModelTypes["CheckConclusionState"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The corresponding deployment for this job, if any */
	deployment?: ModelTypes["Deployment"] | undefined,
	/** The URL from which to find full details of the check run on the integrator's site. */
	detailsUrl?: ModelTypes["URI"] | undefined,
	/** A reference for the check run on the integrator's system. */
	externalId?: string | undefined,
	id: string,
	/** Whether this is required to pass before merging for a specific pull request. */
	isRequired: boolean,
	/** The name of the check for this check run. */
	name: string,
	/** Information about a pending deployment, if any, in this check run */
	pendingDeploymentRequest?: ModelTypes["DeploymentRequest"] | undefined,
	/** The permalink to the check run summary. */
	permalink: ModelTypes["URI"],
	/** The repository associated with this check run. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this check run. */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the check run was started. */
	startedAt?: ModelTypes["DateTime"] | undefined,
	/** The current status of the check run. */
	status: ModelTypes["CheckStatusState"],
	/** The check run's steps */
	steps?: ModelTypes["CheckStepConnection"] | undefined,
	/** A string representing the check run's summary */
	summary?: string | undefined,
	/** A string representing the check run's text */
	text?: string | undefined,
	/** A string representing the check run */
	title?: string | undefined,
	/** The HTTP URL for this check run. */
	url: ModelTypes["URI"]
};
	/** Possible further actions the integrator can perform. */
["CheckRunAction"]: {
	/** A short explanation of what this action would do. */
	description: string,
	/** A reference for the action on the integrator's system. */
	identifier: string,
	/** The text to be displayed on a button in the web UI. */
	label: string
};
	/** The connection type for CheckRun. */
["CheckRunConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CheckRunEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CheckRun"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CheckRunEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CheckRun"] | undefined
};
	/** The filters that are available when fetching check runs. */
["CheckRunFilter"]: {
	/** Filters the check runs created by this application ID. */
	appId?: number | undefined,
	/** Filters the check runs by this name. */
	checkName?: string | undefined,
	/** Filters the check runs by this type. */
	checkType?: ModelTypes["CheckRunType"] | undefined,
	/** Filters the check runs by these conclusions. */
	conclusions?: Array<ModelTypes["CheckConclusionState"]> | undefined,
	/** Filters the check runs by this status. Superceded by statuses. */
	status?: ModelTypes["CheckStatusState"] | undefined,
	/** Filters the check runs by this status. Overrides status. */
	statuses?: Array<ModelTypes["CheckStatusState"]> | undefined
};
	/** Descriptive details about the check run. */
["CheckRunOutput"]: {
	/** The annotations that are made as part of the check run. */
	annotations?: Array<ModelTypes["CheckAnnotationData"]> | undefined,
	/** Images attached to the check run output displayed in the GitHub pull request UI. */
	images?: Array<ModelTypes["CheckRunOutputImage"]> | undefined,
	/** The summary of the check run (supports Commonmark). */
	summary: string,
	/** The details of the check run (supports Commonmark). */
	text?: string | undefined,
	/** A title to provide for this check run. */
	title: string
};
	/** Images attached to the check run output displayed in the GitHub pull request UI. */
["CheckRunOutputImage"]: {
	/** The alternative text for the image. */
	alt: string,
	/** A short image description. */
	caption?: string | undefined,
	/** The full URL of the image. */
	imageUrl: ModelTypes["URI"]
};
	["CheckRunState"]:CheckRunState;
	/** Represents a count of the state of a check run. */
["CheckRunStateCount"]: {
		/** The number of check runs with this state. */
	count: number,
	/** The state of a check run. */
	state: ModelTypes["CheckRunState"]
};
	["CheckRunType"]:CheckRunType;
	["CheckStatusState"]:CheckStatusState;
	/** A single check step. */
["CheckStep"]: {
		/** Identifies the date and time when the check step was completed. */
	completedAt?: ModelTypes["DateTime"] | undefined,
	/** The conclusion of the check step. */
	conclusion?: ModelTypes["CheckConclusionState"] | undefined,
	/** A reference for the check step on the integrator's system. */
	externalId?: string | undefined,
	/** The step's name. */
	name: string,
	/** The index of the step in the list of steps of the parent check run. */
	number: number,
	/** Number of seconds to completion. */
	secondsToCompletion?: number | undefined,
	/** Identifies the date and time when the check step was started. */
	startedAt?: ModelTypes["DateTime"] | undefined,
	/** The current status of the check step. */
	status: ModelTypes["CheckStatusState"]
};
	/** The connection type for CheckStep. */
["CheckStepConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CheckStepEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CheckStep"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CheckStepEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CheckStep"] | undefined
};
	/** A check suite. */
["CheckSuite"]: {
		/** The GitHub App which created this check suite. */
	app?: ModelTypes["App"] | undefined,
	/** The name of the branch for this check suite. */
	branch?: ModelTypes["Ref"] | undefined,
	/** The check runs associated with a check suite. */
	checkRuns?: ModelTypes["CheckRunConnection"] | undefined,
	/** The commit for this check suite */
	commit: ModelTypes["Commit"],
	/** The conclusion of this check suite. */
	conclusion?: ModelTypes["CheckConclusionState"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The user who triggered the check suite. */
	creator?: ModelTypes["User"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** A list of open pull requests matching the check suite. */
	matchingPullRequests?: ModelTypes["PullRequestConnection"] | undefined,
	/** The push that triggered this check suite. */
	push?: ModelTypes["Push"] | undefined,
	/** The repository associated with this check suite. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this check suite */
	resourcePath: ModelTypes["URI"],
	/** The status of this check suite. */
	status: ModelTypes["CheckStatusState"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this check suite */
	url: ModelTypes["URI"],
	/** The workflow run associated with this check suite. */
	workflowRun?: ModelTypes["WorkflowRun"] | undefined
};
	/** The auto-trigger preferences that are available for check suites. */
["CheckSuiteAutoTriggerPreference"]: {
	/** The node ID of the application that owns the check suite. */
	appId: string,
	/** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
	setting: boolean
};
	/** The connection type for CheckSuite. */
["CheckSuiteConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CheckSuiteEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CheckSuite"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CheckSuiteEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CheckSuite"] | undefined
};
	/** The filters that are available when fetching check suites. */
["CheckSuiteFilter"]: {
	/** Filters the check suites created by this application ID. */
	appId?: number | undefined,
	/** Filters the check suites by this name. */
	checkName?: string | undefined
};
	/** Autogenerated input type of ClearLabelsFromLabelable */
["ClearLabelsFromLabelableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the labelable object to clear the labels from. */
	labelableId: string
};
	/** Autogenerated return type of ClearLabelsFromLabelable */
["ClearLabelsFromLabelablePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item that was unlabeled. */
	labelable?: ModelTypes["Labelable"] | undefined
};
	/** Autogenerated input type of ClearProjectV2ItemFieldValue */
["ClearProjectV2ItemFieldValueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the field to be cleared. */
	fieldId: string,
	/** The ID of the item to be cleared. */
	itemId: string,
	/** The ID of the Project. */
	projectId: string
};
	/** Autogenerated return type of ClearProjectV2ItemFieldValue */
["ClearProjectV2ItemFieldValuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated item. */
	projectV2Item?: ModelTypes["ProjectV2Item"] | undefined
};
	/** Autogenerated input type of CloneProject */
["CloneProjectInput"]: {
	/** The description of the project. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether or not to clone the source project's workflows. */
	includeWorkflows: boolean,
	/** The name of the project. */
	name: string,
	/** The visibility of the project, defaults to false (private). */
	public?: boolean | undefined,
	/** The source project to clone. */
	sourceId: string,
	/** The owner ID to create the project under. */
	targetOwnerId: string
};
	/** Autogenerated return type of CloneProject */
["CloneProjectPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the JobStatus for populating cloned fields. */
	jobStatusId?: string | undefined,
	/** The new cloned project. */
	project?: ModelTypes["Project"] | undefined
};
	/** Autogenerated input type of CloneTemplateRepository */
["CloneTemplateRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A short description of the new repository. */
	description?: string | undefined,
	/** Whether to copy all branches from the template to the new repository. Defaults
to copying only the default branch of the template. */
	includeAllBranches?: boolean | undefined,
	/** The name of the new repository. */
	name: string,
	/** The ID of the owner for the new repository. */
	ownerId: string,
	/** The Node ID of the template repository. */
	repositoryId: string,
	/** Indicates the repository's visibility level. */
	visibility: ModelTypes["RepositoryVisibility"]
};
	/** Autogenerated return type of CloneTemplateRepository */
["CloneTemplateRepositoryPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new repository. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** An object that can be closed */
["Closable"]: ModelTypes["Issue"] | ModelTypes["Milestone"] | ModelTypes["Project"] | ModelTypes["ProjectNext"] | ModelTypes["ProjectV2"] | ModelTypes["PullRequest"];
	/** Autogenerated input type of CloseIssue */
["CloseIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the issue to be closed. */
	issueId: string,
	/** The reason the issue is to be closed. */
	stateReason?: ModelTypes["IssueClosedStateReason"] | undefined
};
	/** Autogenerated return type of CloseIssue */
["CloseIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was closed. */
	issue?: ModelTypes["Issue"] | undefined
};
	/** Autogenerated input type of ClosePullRequest */
["ClosePullRequestInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to be closed. */
	pullRequestId: string
};
	/** Autogenerated return type of ClosePullRequest */
["ClosePullRequestPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that was closed. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Represents a 'closed' event on any `Closable`. */
["ClosedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Object that was closed. */
	closable: ModelTypes["Closable"],
	/** Object which triggered the creation of this event. */
	closer?: ModelTypes["Closer"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** The HTTP path for this closed event. */
	resourcePath: ModelTypes["URI"],
	/** The reason the issue state was changed to closed. */
	stateReason?: ModelTypes["IssueStateReason"] | undefined,
	/** The HTTP URL for this closed event. */
	url: ModelTypes["URI"]
};
	/** The object which triggered a `ClosedEvent`. */
["Closer"]:ModelTypes["Commit"] | ModelTypes["PullRequest"];
	/** The Code of Conduct for a repository */
["CodeOfConduct"]: {
		/** The body of the Code of Conduct */
	body?: string | undefined,
	id: string,
	/** The key for the Code of Conduct */
	key: string,
	/** The formal name of the Code of Conduct */
	name: string,
	/** The HTTP path for this Code of Conduct */
	resourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for this Code of Conduct */
	url?: ModelTypes["URI"] | undefined
};
	["CollaboratorAffiliation"]:CollaboratorAffiliation;
	/** Represents a comment. */
["Comment"]: ModelTypes["CommitComment"] | ModelTypes["Discussion"] | ModelTypes["DiscussionComment"] | ModelTypes["GistComment"] | ModelTypes["Issue"] | ModelTypes["IssueComment"] | ModelTypes["PullRequest"] | ModelTypes["PullRequestReview"] | ModelTypes["PullRequestReviewComment"] | ModelTypes["TeamDiscussion"] | ModelTypes["TeamDiscussionComment"];
	["CommentAuthorAssociation"]:CommentAuthorAssociation;
	["CommentCannotUpdateReason"]:CommentCannotUpdateReason;
	/** Represents a 'comment_deleted' event on a given issue or pull request. */
["CommentDeletedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The user who authored the deleted comment. */
	deletedCommentAuthor?: ModelTypes["Actor"] | undefined,
	id: string
};
	/** Represents a Git commit. */
["Commit"]: {
		/** An abbreviated version of the Git object ID */
	abbreviatedOid: string,
	/** The number of additions in this commit. */
	additions: number,
	/** The merged Pull Request that introduced the commit to the repository. If the
commit is not present in the default branch, additionally returns open Pull
Requests associated with the commit */
	associatedPullRequests?: ModelTypes["PullRequestConnection"] | undefined,
	/** Authorship details of the commit. */
	author?: ModelTypes["GitActor"] | undefined,
	/** Check if the committer and the author match. */
	authoredByCommitter: boolean,
	/** The datetime when this commit was authored. */
	authoredDate: ModelTypes["DateTime"],
	/** The list of authors for this commit based on the git author and the Co-authored-by
message trailer. The git author will always be first. */
	authors: ModelTypes["GitActorConnection"],
	/** Fetches `git blame` information. */
	blame: ModelTypes["Blame"],
	/** We recommend using the `changedFielsIfAvailable` field instead of
`changedFiles`, as `changedFiles` will cause your request to return an error
if GitHub is unable to calculate the number of changed files. */
	changedFiles: number,
	/** The number of changed files in this commit. If GitHub is unable to calculate
the number of changed files (for example due to a timeout), this will return
`null`. We recommend using this field instead of `changedFiles`. */
	changedFilesIfAvailable?: number | undefined,
	/** The check suites associated with a commit. */
	checkSuites?: ModelTypes["CheckSuiteConnection"] | undefined,
	/** Comments made on the commit. */
	comments: ModelTypes["CommitCommentConnection"],
	/** The HTTP path for this Git object */
	commitResourcePath: ModelTypes["URI"],
	/** The HTTP URL for this Git object */
	commitUrl: ModelTypes["URI"],
	/** The datetime when this commit was committed. */
	committedDate: ModelTypes["DateTime"],
	/** Check if committed via GitHub web UI. */
	committedViaWeb: boolean,
	/** Committer details of the commit. */
	committer?: ModelTypes["GitActor"] | undefined,
	/** The number of deletions in this commit. */
	deletions: number,
	/** The deployments associated with a commit. */
	deployments?: ModelTypes["DeploymentConnection"] | undefined,
	/** The tree entry representing the file located at the given path. */
	file?: ModelTypes["TreeEntry"] | undefined,
	/** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
	history: ModelTypes["CommitHistoryConnection"],
	id: string,
	/** The Git commit message */
	message: string,
	/** The Git commit message body */
	messageBody: string,
	/** The commit message body rendered to HTML. */
	messageBodyHTML: ModelTypes["HTML"],
	/** The Git commit message headline */
	messageHeadline: string,
	/** The commit message headline rendered to HTML. */
	messageHeadlineHTML: ModelTypes["HTML"],
	/** The Git object ID */
	oid: ModelTypes["GitObjectID"],
	/** The organization this commit was made on behalf of. */
	onBehalfOf?: ModelTypes["Organization"] | undefined,
	/** The parents of a commit. */
	parents: ModelTypes["CommitConnection"],
	/** The datetime when this commit was pushed. */
	pushedDate?: ModelTypes["DateTime"] | undefined,
	/** The Repository this commit belongs to */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this commit */
	resourcePath: ModelTypes["URI"],
	/** Commit signing information, if present. */
	signature?: ModelTypes["GitSignature"] | undefined,
	/** Status information for this commit */
	status?: ModelTypes["Status"] | undefined,
	/** Check and Status rollup information for this commit. */
	statusCheckRollup?: ModelTypes["StatusCheckRollup"] | undefined,
	/** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
	submodules: ModelTypes["SubmoduleConnection"],
	/** Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes. */
	tarballUrl: ModelTypes["URI"],
	/** Commit's root Tree */
	tree: ModelTypes["Tree"],
	/** The HTTP path for the tree of this commit */
	treeResourcePath: ModelTypes["URI"],
	/** The HTTP URL for the tree of this commit */
	treeUrl: ModelTypes["URI"],
	/** The HTTP URL for this commit */
	url: ModelTypes["URI"],
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: ModelTypes["SubscriptionState"] | undefined,
	/** Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes. */
	zipballUrl: ModelTypes["URI"]
};
	/** Specifies an author for filtering Git commits. */
["CommitAuthor"]: {
	/** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
	emails?: Array<string> | undefined,
	/** ID of a User to filter by. If non-null, only commits authored by this user
will be returned. This field takes precedence over emails. */
	id?: string | undefined
};
	/** Represents a comment on a given Commit. */
["CommitComment"]: {
		/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** Identifies the comment body. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the commit associated with the comment, if the commit exists. */
	commit?: ModelTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies the file path associated with the comment. */
	path?: string | undefined,
	/** Identifies the line position associated with the comment. */
	position?: number | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"],
	/** The HTTP path permalink for this commit comment. */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL permalink for this commit comment. */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for CommitComment. */
["CommitCommentConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CommitCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CommitComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CommitCommentEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CommitComment"] | undefined
};
	/** A thread of comments on a commit. */
["CommitCommentThread"]: {
		/** The comments that exist in this thread. */
	comments: ModelTypes["CommitCommentConnection"],
	/** The commit the comments were made on. */
	commit?: ModelTypes["Commit"] | undefined,
	id: string,
	/** The file the comments were made on. */
	path?: string | undefined,
	/** The position in the diff for the commit that the comment was made on. */
	position?: number | undefined,
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"]
};
	/** The connection type for Commit. */
["CommitConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CommitEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Commit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Ordering options for commit contribution connections. */
["CommitContributionOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field by which to order commit contributions. */
	field: ModelTypes["CommitContributionOrderField"]
};
	["CommitContributionOrderField"]:CommitContributionOrderField;
	/** This aggregates commits made by a user within one repository. */
["CommitContributionsByRepository"]: {
		/** The commit contributions, each representing a day. */
	contributions: ModelTypes["CreatedCommitContributionConnection"],
	/** The repository in which the commits were made. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for the user's commits to the repository in this time range. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for the user's commits to the repository in this time range. */
	url: ModelTypes["URI"]
};
	/** An edge in a connection. */
["CommitEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Commit"] | undefined
};
	/** The connection type for Commit. */
["CommitHistoryConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CommitEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Commit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A message to include with a new commit */
["CommitMessage"]: {
	/** The body of the message. */
	body?: string | undefined,
	/** The headline of the message. */
	headline: string
};
	/** A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    } */
["CommittableBranch"]: {
	/** The unqualified name of the branch to append the commit to. */
	branchName?: string | undefined,
	/** The Node ID of the Ref to be updated. */
	id?: string | undefined,
	/** The nameWithOwner of the repository to commit to. */
	repositoryNameWithOwner?: string | undefined
};
	/** Represents a comparison between two commit revisions. */
["Comparison"]: {
		/** The number of commits ahead of the base branch. */
	aheadBy: number,
	/** The base revision of this comparison. */
	baseTarget: ModelTypes["GitObject"],
	/** The number of commits behind the base branch. */
	behindBy: number,
	/** The commits which compose this comparison. */
	commits: ModelTypes["ComparisonCommitConnection"],
	/** The head revision of this comparison. */
	headTarget: ModelTypes["GitObject"],
	id: string,
	/** The status of this comparison. */
	status: ModelTypes["ComparisonStatus"]
};
	/** The connection type for Commit. */
["ComparisonCommitConnection"]: {
		/** The total count of authors and co-authors across all commits. */
	authorCount: number,
	/** A list of edges. */
	edges?: Array<ModelTypes["CommitEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Commit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	["ComparisonStatus"]:ComparisonStatus;
	/** Represents a 'connected' event on a given issue or pull request. */
["ConnectedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Reference originated in a different repository. */
	isCrossRepository: boolean,
	/** Issue or pull request that made the reference. */
	source: ModelTypes["ReferencedSubject"],
	/** Issue or pull request which was connected. */
	subject: ModelTypes["ReferencedSubject"]
};
	/** Represents a contribution a user made on GitHub, such as opening an issue. */
["Contribution"]: ModelTypes["CreatedCommitContribution"] | ModelTypes["CreatedIssueContribution"] | ModelTypes["CreatedPullRequestContribution"] | ModelTypes["CreatedPullRequestReviewContribution"] | ModelTypes["CreatedRepositoryContribution"] | ModelTypes["JoinedGitHubContribution"] | ModelTypes["RestrictedContribution"];
	/** A calendar of contributions made on GitHub by a user. */
["ContributionCalendar"]: {
		/** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
	colors: Array<string>,
	/** Determine if the color set was chosen because it's currently Halloween. */
	isHalloween: boolean,
	/** A list of the months of contributions in this calendar. */
	months: Array<ModelTypes["ContributionCalendarMonth"]>,
	/** The count of total contributions in the calendar. */
	totalContributions: number,
	/** A list of the weeks of contributions in this calendar. */
	weeks: Array<ModelTypes["ContributionCalendarWeek"]>
};
	/** Represents a single day of contributions on GitHub by a user. */
["ContributionCalendarDay"]: {
		/** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
	color: string,
	/** How many contributions were made by the user on this day. */
	contributionCount: number,
	/** Indication of contributions, relative to other days. Can be used to indicate
which color to represent this day on a calendar. */
	contributionLevel: ModelTypes["ContributionLevel"],
	/** The day this square represents. */
	date: ModelTypes["Date"],
	/** A number representing which day of the week this square represents, e.g., 1 is Monday. */
	weekday: number
};
	/** A month of contributions in a user's contribution graph. */
["ContributionCalendarMonth"]: {
		/** The date of the first day of this month. */
	firstDay: ModelTypes["Date"],
	/** The name of the month. */
	name: string,
	/** How many weeks started in this month. */
	totalWeeks: number,
	/** The year the month occurred in. */
	year: number
};
	/** A week of contributions in a user's contribution graph. */
["ContributionCalendarWeek"]: {
		/** The days of contributions in this week. */
	contributionDays: Array<ModelTypes["ContributionCalendarDay"]>,
	/** The date of the earliest square in this week. */
	firstDay: ModelTypes["Date"]
};
	["ContributionLevel"]:ContributionLevel;
	/** Ordering options for contribution connections. */
["ContributionOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"]
};
	/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
["ContributionsCollection"]: {
		/** Commit contributions made by the user, grouped by repository. */
	commitContributionsByRepository: Array<ModelTypes["CommitContributionsByRepository"]>,
	/** A calendar of this user's contributions on GitHub. */
	contributionCalendar: ModelTypes["ContributionCalendar"],
	/** The years the user has been making contributions with the most recent year first. */
	contributionYears: Array<number>,
	/** Determine if this collection's time span ends in the current month. */
	doesEndInCurrentMonth: boolean,
	/** The date of the first restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts. */
	earliestRestrictedContributionDate?: ModelTypes["Date"] | undefined,
	/** The ending date and time of this collection. */
	endedAt: ModelTypes["DateTime"],
	/** The first issue the user opened on GitHub. This will be null if that issue was
opened outside the collection's time range and ignoreTimeRange is false. If
the issue is not visible but the user has opted to show private contributions,
a RestrictedContribution will be returned. */
	firstIssueContribution?: ModelTypes["CreatedIssueOrRestrictedContribution"] | undefined,
	/** The first pull request the user opened on GitHub. This will be null if that
pull request was opened outside the collection's time range and
ignoreTimeRange is not true. If the pull request is not visible but the user
has opted to show private contributions, a RestrictedContribution will be returned. */
	firstPullRequestContribution?: ModelTypes["CreatedPullRequestOrRestrictedContribution"] | undefined,
	/** The first repository the user created on GitHub. This will be null if that
first repository was created outside the collection's time range and
ignoreTimeRange is false. If the repository is not visible, then a
RestrictedContribution is returned. */
	firstRepositoryContribution?: ModelTypes["CreatedRepositoryOrRestrictedContribution"] | undefined,
	/** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
	hasActivityInThePast: boolean,
	/** Determine if there are any contributions in this collection. */
	hasAnyContributions: boolean,
	/** Determine if the user made any contributions in this time frame whose details
are not visible because they were made in a private repository. Can only be
true if the user enabled private contribution counts. */
	hasAnyRestrictedContributions: boolean,
	/** Whether or not the collector's time span is all within the same day. */
	isSingleDay: boolean,
	/** A list of issues the user opened. */
	issueContributions: ModelTypes["CreatedIssueContributionConnection"],
	/** Issue contributions made by the user, grouped by repository. */
	issueContributionsByRepository: Array<ModelTypes["IssueContributionsByRepository"]>,
	/** When the user signed up for GitHub. This will be null if that sign up date
falls outside the collection's time range and ignoreTimeRange is false. */
	joinedGitHubContribution?: ModelTypes["JoinedGitHubContribution"] | undefined,
	/** The date of the most recent restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts. */
	latestRestrictedContributionDate?: ModelTypes["Date"] | undefined,
	/** When this collection's time range does not include any activity from the user, use this
to get a different collection from an earlier time range that does have activity. */
	mostRecentCollectionWithActivity?: ModelTypes["ContributionsCollection"] | undefined,
	/** Returns a different contributions collection from an earlier time range than this one
that does not have any contributions. */
	mostRecentCollectionWithoutActivity?: ModelTypes["ContributionsCollection"] | undefined,
	/** The issue the user opened on GitHub that received the most comments in the specified
time frame. */
	popularIssueContribution?: ModelTypes["CreatedIssueContribution"] | undefined,
	/** The pull request the user opened on GitHub that received the most comments in the
specified time frame. */
	popularPullRequestContribution?: ModelTypes["CreatedPullRequestContribution"] | undefined,
	/** Pull request contributions made by the user. */
	pullRequestContributions: ModelTypes["CreatedPullRequestContributionConnection"],
	/** Pull request contributions made by the user, grouped by repository. */
	pullRequestContributionsByRepository: Array<ModelTypes["PullRequestContributionsByRepository"]>,
	/** Pull request review contributions made by the user. Returns the most recently
submitted review for each PR reviewed by the user. */
	pullRequestReviewContributions: ModelTypes["CreatedPullRequestReviewContributionConnection"],
	/** Pull request review contributions made by the user, grouped by repository. */
	pullRequestReviewContributionsByRepository: Array<ModelTypes["PullRequestReviewContributionsByRepository"]>,
	/** A list of repositories owned by the user that the user created in this time range. */
	repositoryContributions: ModelTypes["CreatedRepositoryContributionConnection"],
	/** A count of contributions made by the user that the viewer cannot access. Only
non-zero when the user has chosen to share their private contribution counts. */
	restrictedContributionsCount: number,
	/** The beginning date and time of this collection. */
	startedAt: ModelTypes["DateTime"],
	/** How many commits were made by the user in this time span. */
	totalCommitContributions: number,
	/** How many issues the user opened. */
	totalIssueContributions: number,
	/** How many pull requests the user opened. */
	totalPullRequestContributions: number,
	/** How many pull request reviews the user left. */
	totalPullRequestReviewContributions: number,
	/** How many different repositories the user committed to. */
	totalRepositoriesWithContributedCommits: number,
	/** How many different repositories the user opened issues in. */
	totalRepositoriesWithContributedIssues: number,
	/** How many different repositories the user left pull request reviews in. */
	totalRepositoriesWithContributedPullRequestReviews: number,
	/** How many different repositories the user opened pull requests in. */
	totalRepositoriesWithContributedPullRequests: number,
	/** How many repositories the user created. */
	totalRepositoryContributions: number,
	/** The user who made the contributions in this collection. */
	user: ModelTypes["User"]
};
	/** Autogenerated input type of ConvertProjectCardNoteToIssue */
["ConvertProjectCardNoteToIssueInput"]: {
	/** The body of the newly created issue. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ProjectCard ID to convert. */
	projectCardId: string,
	/** The ID of the repository to create the issue in. */
	repositoryId: string,
	/** The title of the newly created issue. Defaults to the card's note text. */
	title?: string | undefined
};
	/** Autogenerated return type of ConvertProjectCardNoteToIssue */
["ConvertProjectCardNoteToIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated ProjectCard. */
	projectCard?: ModelTypes["ProjectCard"] | undefined
};
	/** Autogenerated input type of ConvertPullRequestToDraft */
["ConvertPullRequestToDraftInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to convert to draft */
	pullRequestId: string
};
	/** Autogenerated return type of ConvertPullRequestToDraft */
["ConvertPullRequestToDraftPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that is now a draft. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Represents a 'convert_to_draft' event on a given pull request. */
["ConvertToDraftEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"],
	/** The HTTP path for this convert to draft event. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this convert to draft event. */
	url: ModelTypes["URI"]
};
	/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
["ConvertedNoteToIssueEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Project referenced by event. */
	project?: ModelTypes["Project"] | undefined,
	/** Project card referenced by this project event. */
	projectCard?: ModelTypes["ProjectCard"] | undefined,
	/** Column name referenced by this project event. */
	projectColumnName: string
};
	/** Represents a 'converted_to_discussion' event on a given issue. */
["ConvertedToDiscussionEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The discussion that the issue was converted into. */
	discussion?: ModelTypes["Discussion"] | undefined,
	id: string
};
	/** Autogenerated input type of CreateBranchProtectionRule */
["CreateBranchProtectionRuleInput"]: {
	/** Can this branch be deleted. */
	allowsDeletions?: boolean | undefined,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?: boolean | undefined,
	/** Is branch creation a protected operation. */
	blocksCreations?: boolean | undefined,
	/** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
	bypassForcePushActorIds?: Array<string> | undefined,
	/** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
	bypassPullRequestActorIds?: Array<string> | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?: boolean | undefined,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?: boolean | undefined,
	/** The glob-like pattern used to determine matching branches. */
	pattern: string,
	/** A list of User, Team, or App IDs allowed to push to matching branches. */
	pushActorIds?: Array<string> | undefined,
	/** The global relay id of the repository in which a new branch protection rule should be created in. */
	repositoryId: string,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string> | undefined,
	/** The list of required status checks */
	requiredStatusChecks?: Array<ModelTypes["RequiredStatusCheckInput"]> | undefined,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?: boolean | undefined,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?: boolean | undefined,
	/** Are commits required to be signed. */
	requiresCommitSignatures?: boolean | undefined,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?: boolean | undefined,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?: boolean | undefined,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?: boolean | undefined,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?: boolean | undefined,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?: boolean | undefined,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?: boolean | undefined,
	/** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
	reviewDismissalActorIds?: Array<string> | undefined
};
	/** Autogenerated return type of CreateBranchProtectionRule */
["CreateBranchProtectionRulePayload"]: {
		/** The newly created BranchProtectionRule. */
	branchProtectionRule?: ModelTypes["BranchProtectionRule"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of CreateCheckRun */
["CreateCheckRunInput"]: {
	/** Possible further actions the integrator can perform, which a user may trigger. */
	actions?: Array<ModelTypes["CheckRunAction"]> | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The time that the check run finished. */
	completedAt?: ModelTypes["DateTime"] | undefined,
	/** The final conclusion of the check. */
	conclusion?: ModelTypes["CheckConclusionState"] | undefined,
	/** The URL of the integrator's site that has the full details of the check. */
	detailsUrl?: ModelTypes["URI"] | undefined,
	/** A reference for the run on the integrator's system. */
	externalId?: string | undefined,
	/** The SHA of the head commit. */
	headSha: ModelTypes["GitObjectID"],
	/** The name of the check. */
	name: string,
	/** Descriptive details about the run. */
	output?: ModelTypes["CheckRunOutput"] | undefined,
	/** The node ID of the repository. */
	repositoryId: string,
	/** The time that the check run began. */
	startedAt?: ModelTypes["DateTime"] | undefined,
	/** The current status. */
	status?: ModelTypes["RequestableCheckStatusState"] | undefined
};
	/** Autogenerated return type of CreateCheckRun */
["CreateCheckRunPayload"]: {
		/** The newly created check run. */
	checkRun?: ModelTypes["CheckRun"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of CreateCheckSuite */
["CreateCheckSuiteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The SHA of the head commit. */
	headSha: ModelTypes["GitObjectID"],
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of CreateCheckSuite */
["CreateCheckSuitePayload"]: {
		/** The newly created check suite. */
	checkSuite?: ModelTypes["CheckSuite"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of CreateCommitOnBranch */
["CreateCommitOnBranchInput"]: {
	/** The Ref to be updated.  Must be a branch. */
	branch: ModelTypes["CommittableBranch"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The git commit oid expected at the head of the branch prior to the commit */
	expectedHeadOid: ModelTypes["GitObjectID"],
	/** A description of changes to files in this commit. */
	fileChanges?: ModelTypes["FileChanges"] | undefined,
	/** The commit message the be included with the commit. */
	message: ModelTypes["CommitMessage"]
};
	/** Autogenerated return type of CreateCommitOnBranch */
["CreateCommitOnBranchPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new commit. */
	commit?: ModelTypes["Commit"] | undefined,
	/** The ref which has been updated to point to the new commit. */
	ref?: ModelTypes["Ref"] | undefined
};
	/** Autogenerated input type of CreateDeployment */
["CreateDeploymentInput"]: {
	/** Attempt to automatically merge the default branch into the requested ref, defaults to true. */
	autoMerge?: boolean | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Short description of the deployment. */
	description?: string | undefined,
	/** Name for the target deployment environment. */
	environment?: string | undefined,
	/** JSON payload with extra information about the deployment. */
	payload?: string | undefined,
	/** The node ID of the ref to be deployed. */
	refId: string,
	/** The node ID of the repository. */
	repositoryId: string,
	/** The status contexts to verify against commit status checks. To bypass required
contexts, pass an empty array. Defaults to all unique contexts. */
	requiredContexts?: Array<string> | undefined,
	/** Specifies a task to execute. */
	task?: string | undefined
};
	/** Autogenerated return type of CreateDeployment */
["CreateDeploymentPayload"]: {
		/** True if the default branch has been auto-merged into the deployment ref. */
	autoMerged?: boolean | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new deployment. */
	deployment?: ModelTypes["Deployment"] | undefined
};
	/** Autogenerated input type of CreateDeploymentStatus */
["CreateDeploymentStatusInput"]: {
	/** Adds a new inactive status to all non-transient, non-production environment
deployments with the same repository and environment name as the created
status's deployment. */
	autoInactive?: boolean | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The node ID of the deployment. */
	deploymentId: string,
	/** A short description of the status. Maximum length of 140 characters. */
	description?: string | undefined,
	/** If provided, updates the environment of the deploy. Otherwise, does not modify the environment. */
	environment?: string | undefined,
	/** Sets the URL for accessing your environment. */
	environmentUrl?: string | undefined,
	/** The log URL to associate with this status.       This URL should contain
output to keep the user updated while the task is running       or serve as
historical information for what happened in the deployment. */
	logUrl?: string | undefined,
	/** The state of the deployment. */
	state: ModelTypes["DeploymentStatusState"]
};
	/** Autogenerated return type of CreateDeploymentStatus */
["CreateDeploymentStatusPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new deployment status. */
	deploymentStatus?: ModelTypes["DeploymentStatus"] | undefined
};
	/** Autogenerated input type of CreateDiscussion */
["CreateDiscussionInput"]: {
	/** The body of the discussion. */
	body: string,
	/** The id of the discussion category to associate with this discussion. */
	categoryId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the repository on which to create the discussion. */
	repositoryId: string,
	/** The title of the discussion. */
	title: string
};
	/** Autogenerated return type of CreateDiscussion */
["CreateDiscussionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion that was just created. */
	discussion?: ModelTypes["Discussion"] | undefined
};
	/** Autogenerated input type of CreateEnterpriseOrganization */
["CreateEnterpriseOrganizationInput"]: {
	/** The logins for the administrators of the new organization. */
	adminLogins: Array<string>,
	/** The email used for sending billing receipts. */
	billingEmail: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise owning the new organization. */
	enterpriseId: string,
	/** The login of the new organization. */
	login: string,
	/** The profile name of the new organization. */
	profileName: string
};
	/** Autogenerated return type of CreateEnterpriseOrganization */
["CreateEnterpriseOrganizationPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise that owns the created organization. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** The organization that was created. */
	organization?: ModelTypes["Organization"] | undefined
};
	/** Autogenerated input type of CreateEnvironment */
["CreateEnvironmentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the environment. */
	name: string,
	/** The node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of CreateEnvironment */
["CreateEnvironmentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new or existing environment. */
	environment?: ModelTypes["Environment"] | undefined
};
	/** Autogenerated input type of CreateIpAllowListEntry */
["CreateIpAllowListEntryInput"]: {
	/** An IP address or range of addresses in CIDR notation. */
	allowListValue: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether the IP allow list entry is active when an IP allow list is enabled. */
	isActive: boolean,
	/** An optional name for the IP allow list entry. */
	name?: string | undefined,
	/** The ID of the owner for which to create the new IP allow list entry. */
	ownerId: string
};
	/** Autogenerated return type of CreateIpAllowListEntry */
["CreateIpAllowListEntryPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list entry that was created. */
	ipAllowListEntry?: ModelTypes["IpAllowListEntry"] | undefined
};
	/** Autogenerated input type of CreateIssue */
["CreateIssueInput"]: {
	/** The Node ID for the user assignee for this issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body for the issue description. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
	issueTemplate?: string | undefined,
	/** An array of Node IDs of labels for this issue. */
	labelIds?: Array<string> | undefined,
	/** The Node ID of the milestone for this issue. */
	milestoneId?: string | undefined,
	/** An array of Node IDs for projects associated with this issue. */
	projectIds?: Array<string> | undefined,
	/** The Node ID of the repository. */
	repositoryId: string,
	/** The title for the issue. */
	title: string
};
	/** Autogenerated return type of CreateIssue */
["CreateIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new issue. */
	issue?: ModelTypes["Issue"] | undefined
};
	/** Autogenerated input type of CreateLabel */
["CreateLabelInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A 6 character hex code, without the leading #, identifying the color of the label. */
	color: string,
	/** A brief description of the label, such as its purpose. */
	description?: string | undefined,
	/** The name of the label. */
	name: string,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of CreateLabel */
["CreateLabelPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new label. */
	label?: ModelTypes["Label"] | undefined
};
	/** Autogenerated input type of CreateLinkedBranch */
["CreateLinkedBranchInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the issue to link to. */
	issueId: string,
	/** The name of the new branch. Defaults to issue number and title. */
	name?: string | undefined,
	/** The commit SHA to base the new branch on. */
	oid: ModelTypes["GitObjectID"],
	/** ID of the repository to create the branch in. Defaults to the issue repository. */
	repositoryId?: string | undefined
};
	/** Autogenerated return type of CreateLinkedBranch */
["CreateLinkedBranchPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new branch issue reference. */
	linkedBranch?: ModelTypes["LinkedBranch"] | undefined
};
	/** Autogenerated input type of CreateMigrationSource */
["CreateMigrationSourceInput"]: {
	/** The Octoshift migration source access token. */
	accessToken?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The GitHub personal access token of the user importing to the target repository. */
	githubPat?: string | undefined,
	/** The Octoshift migration source name. */
	name: string,
	/** The ID of the organization that will own the Octoshift migration source. */
	ownerId: string,
	/** The Octoshift migration source type. */
	type: ModelTypes["MigrationSourceType"],
	/** The Octoshift migration source URL. */
	url: string
};
	/** Autogenerated return type of CreateMigrationSource */
["CreateMigrationSourcePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The created Octoshift migration source. */
	migrationSource?: ModelTypes["MigrationSource"] | undefined
};
	/** Autogenerated input type of CreateProject */
["CreateProjectInput"]: {
	/** The description of project. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of project. */
	name: string,
	/** The owner ID to create the project under. */
	ownerId: string,
	/** A list of repository IDs to create as linked repositories for the project */
	repositoryIds?: Array<string> | undefined,
	/** The name of the GitHub-provided template. */
	template?: ModelTypes["ProjectTemplate"] | undefined
};
	/** Autogenerated return type of CreateProject */
["CreateProjectPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new project. */
	project?: ModelTypes["Project"] | undefined
};
	/** Autogenerated input type of CreateProjectV2 */
["CreateProjectV2Input"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The owner ID to create the project under. */
	ownerId: string,
	/** The title of the project. */
	title: string
};
	/** Autogenerated return type of CreateProjectV2 */
["CreateProjectV2Payload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new project. */
	projectV2?: ModelTypes["ProjectV2"] | undefined
};
	/** Autogenerated input type of CreatePullRequest */
["CreatePullRequestInput"]: {
	/** The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository. You cannot update the base branch on a pull request to point
to another repository. */
	baseRefName: string,
	/** The contents of the pull request. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Indicates whether this pull request should be a draft. */
	draft?: boolean | undefined,
	/** The name of the branch where your changes are implemented. For cross-repository pull requests
in the same network, namespace `head_ref_name` with a user like this: `username:branch`. */
	headRefName: string,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?: boolean | undefined,
	/** The Node ID of the repository. */
	repositoryId: string,
	/** The title of the pull request. */
	title: string
};
	/** Autogenerated return type of CreatePullRequest */
["CreatePullRequestPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new pull request. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of CreateRef */
["CreateRefInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
	name: string,
	/** The GitObjectID that the new Ref shall target. Must point to a commit. */
	oid: ModelTypes["GitObjectID"],
	/** The Node ID of the Repository to create the Ref in. */
	repositoryId: string
};
	/** Autogenerated return type of CreateRef */
["CreateRefPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created ref. */
	ref?: ModelTypes["Ref"] | undefined
};
	/** Autogenerated input type of CreateRepository */
["CreateRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A short description of the new repository. */
	description?: string | undefined,
	/** Indicates if the repository should have the issues feature enabled. */
	hasIssuesEnabled?: boolean | undefined,
	/** Indicates if the repository should have the wiki feature enabled. */
	hasWikiEnabled?: boolean | undefined,
	/** The URL for a web page about this repository. */
	homepageUrl?: ModelTypes["URI"] | undefined,
	/** The name of the new repository. */
	name: string,
	/** The ID of the owner for the new repository. */
	ownerId?: string | undefined,
	/** When an organization is specified as the owner, this ID identifies the team
that should be granted access to the new repository. */
	teamId?: string | undefined,
	/** Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure. */
	template?: boolean | undefined,
	/** Indicates the repository's visibility level. */
	visibility: ModelTypes["RepositoryVisibility"]
};
	/** Autogenerated return type of CreateRepository */
["CreateRepositoryPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new repository. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** Autogenerated input type of CreateSponsorsTier */
["CreateSponsorsTierInput"]: {
	/** The value of the new tier in US dollars. Valid values: 1-12000. */
	amount: number,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
	description: string,
	/** Whether sponsorships using this tier should happen monthly/yearly or just once. */
	isRecurring?: boolean | undefined,
	/** Whether to make the tier available immediately for sponsors to choose.
Defaults to creating a draft tier that will not be publicly visible. */
	publish?: boolean | undefined,
	/** Optional ID of the private repository that sponsors at this tier should gain
read-only access to. Must be owned by an organization. */
	repositoryId?: string | undefined,
	/** Optional name of the private repository that sponsors at this tier should gain
read-only access to. Must be owned by an organization. Necessary if
repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
	repositoryName?: string | undefined,
	/** Optional login of the organization owner of the private repository that
sponsors at this tier should gain read-only access to. Necessary if
repositoryName is given. Will be ignored if repositoryId is given. */
	repositoryOwnerLogin?: string | undefined,
	/** The ID of the user or organization who owns the GitHub Sponsors profile.
Defaults to the current user if omitted and sponsorableLogin is not given. */
	sponsorableId?: string | undefined,
	/** The username of the user or organization who owns the GitHub Sponsors profile.
Defaults to the current user if omitted and sponsorableId is not given. */
	sponsorableLogin?: string | undefined,
	/** Optional message new sponsors at this tier will receive. */
	welcomeMessage?: string | undefined
};
	/** Autogenerated return type of CreateSponsorsTier */
["CreateSponsorsTierPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new tier. */
	sponsorsTier?: ModelTypes["SponsorsTier"] | undefined
};
	/** Autogenerated input type of CreateSponsorship */
["CreateSponsorshipInput"]: {
	/** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
	amount?: number | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
	isRecurring?: boolean | undefined,
	/** Specify whether others should be able to see that the sponsor is sponsoring
the sponsorable. Public visibility still does not reveal which tier is used. */
	privacyLevel?: ModelTypes["SponsorshipPrivacy"] | undefined,
	/** Whether the sponsor should receive email updates from the sponsorable. */
	receiveEmails?: boolean | undefined,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined,
	/** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
	tierId?: string | undefined
};
	/** Autogenerated return type of CreateSponsorship */
["CreateSponsorshipPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The sponsorship that was started. */
	sponsorship?: ModelTypes["Sponsorship"] | undefined
};
	/** Autogenerated input type of CreateTeamDiscussionComment */
["CreateTeamDiscussionCommentInput"]: {
	/** The content of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the discussion to which the comment belongs. */
	discussionId: string
};
	/** Autogenerated return type of CreateTeamDiscussionComment */
["CreateTeamDiscussionCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new comment. */
	teamDiscussionComment?: ModelTypes["TeamDiscussionComment"] | undefined
};
	/** Autogenerated input type of CreateTeamDiscussion */
["CreateTeamDiscussionInput"]: {
	/** The content of the discussion. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** If true, restricts the visibility of this discussion to team members and
organization admins. If false or not specified, allows any organization member
to view this discussion. */
	private?: boolean | undefined,
	/** The ID of the team to which the discussion belongs. */
	teamId: string,
	/** The title of the discussion. */
	title: string
};
	/** Autogenerated return type of CreateTeamDiscussion */
["CreateTeamDiscussionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new discussion. */
	teamDiscussion?: ModelTypes["TeamDiscussion"] | undefined
};
	/** Represents the contribution a user made by committing to a repository. */
["CreatedCommitContribution"]: {
		/** How many commits were made on this day to this repository by the user. */
	commitCount: number,
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: ModelTypes["DateTime"],
	/** The repository the user made a commit in. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: ModelTypes["URI"],
	/** The user who made this contribution. */
	user: ModelTypes["User"]
};
	/** The connection type for CreatedCommitContribution. */
["CreatedCommitContributionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CreatedCommitContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CreatedCommitContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of commits across days and repositories in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedCommitContributionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CreatedCommitContribution"] | undefined
};
	/** Represents the contribution a user made on GitHub by opening an issue. */
["CreatedIssueContribution"]: {
		/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** The issue that was opened. */
	issue: ModelTypes["Issue"],
	/** When this contribution was made. */
	occurredAt: ModelTypes["DateTime"],
	/** The HTTP path for this contribution. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: ModelTypes["URI"],
	/** The user who made this contribution. */
	user: ModelTypes["User"]
};
	/** The connection type for CreatedIssueContribution. */
["CreatedIssueContributionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CreatedIssueContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CreatedIssueContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedIssueContributionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CreatedIssueContribution"] | undefined
};
	/** Represents either a issue the viewer can access or a restricted contribution. */
["CreatedIssueOrRestrictedContribution"]:ModelTypes["CreatedIssueContribution"] | ModelTypes["RestrictedContribution"];
	/** Represents the contribution a user made on GitHub by opening a pull request. */
["CreatedPullRequestContribution"]: {
		/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: ModelTypes["DateTime"],
	/** The pull request that was opened. */
	pullRequest: ModelTypes["PullRequest"],
	/** The HTTP path for this contribution. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: ModelTypes["URI"],
	/** The user who made this contribution. */
	user: ModelTypes["User"]
};
	/** The connection type for CreatedPullRequestContribution. */
["CreatedPullRequestContributionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CreatedPullRequestContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CreatedPullRequestContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedPullRequestContributionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CreatedPullRequestContribution"] | undefined
};
	/** Represents either a pull request the viewer can access or a restricted contribution. */
["CreatedPullRequestOrRestrictedContribution"]:ModelTypes["CreatedPullRequestContribution"] | ModelTypes["RestrictedContribution"];
	/** Represents the contribution a user made by leaving a review on a pull request. */
["CreatedPullRequestReviewContribution"]: {
		/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: ModelTypes["DateTime"],
	/** The pull request the user reviewed. */
	pullRequest: ModelTypes["PullRequest"],
	/** The review the user left on the pull request. */
	pullRequestReview: ModelTypes["PullRequestReview"],
	/** The repository containing the pull request that the user reviewed. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: ModelTypes["URI"],
	/** The user who made this contribution. */
	user: ModelTypes["User"]
};
	/** The connection type for CreatedPullRequestReviewContribution. */
["CreatedPullRequestReviewContributionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CreatedPullRequestReviewContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CreatedPullRequestReviewContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedPullRequestReviewContributionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CreatedPullRequestReviewContribution"] | undefined
};
	/** Represents the contribution a user made on GitHub by creating a repository. */
["CreatedRepositoryContribution"]: {
		/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: ModelTypes["DateTime"],
	/** The repository that was created. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: ModelTypes["URI"],
	/** The user who made this contribution. */
	user: ModelTypes["User"]
};
	/** The connection type for CreatedRepositoryContribution. */
["CreatedRepositoryContributionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["CreatedRepositoryContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["CreatedRepositoryContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedRepositoryContributionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["CreatedRepositoryContribution"] | undefined
};
	/** Represents either a repository the viewer can access or a restricted contribution. */
["CreatedRepositoryOrRestrictedContribution"]:ModelTypes["CreatedRepositoryContribution"] | ModelTypes["RestrictedContribution"];
	/** Represents a mention made by one issue or pull request to another. */
["CrossReferencedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Reference originated in a different repository. */
	isCrossRepository: boolean,
	/** Identifies when the reference was made. */
	referencedAt: ModelTypes["DateTime"],
	/** The HTTP path for this pull request. */
	resourcePath: ModelTypes["URI"],
	/** Issue or pull request that made the reference. */
	source: ModelTypes["ReferencedSubject"],
	/** Issue or pull request to which the reference was made. */
	target: ModelTypes["ReferencedSubject"],
	/** The HTTP URL for this pull request. */
	url: ModelTypes["URI"],
	/** Checks if the target will be closed when the source is merged. */
	willCloseTarget: boolean
};
	/** An ISO-8601 encoded date string. */
["Date"]:any;
	/** An ISO-8601 encoded UTC date string. */
["DateTime"]:any;
	/** Autogenerated input type of DeclineTopicSuggestion */
["DeclineTopicSuggestionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the suggested topic. */
	name: string,
	/** The reason why the suggested topic is declined. */
	reason: ModelTypes["TopicSuggestionDeclineReason"],
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of DeclineTopicSuggestion */
["DeclineTopicSuggestionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The declined topic. */
	topic?: ModelTypes["Topic"] | undefined
};
	["DefaultRepositoryPermissionField"]:DefaultRepositoryPermissionField;
	/** Entities that can be deleted. */
["Deletable"]: ModelTypes["CommitComment"] | ModelTypes["Discussion"] | ModelTypes["DiscussionComment"] | ModelTypes["GistComment"] | ModelTypes["IssueComment"] | ModelTypes["PullRequestReview"] | ModelTypes["PullRequestReviewComment"] | ModelTypes["TeamDiscussion"] | ModelTypes["TeamDiscussionComment"];
	/** Autogenerated input type of DeleteBranchProtectionRule */
["DeleteBranchProtectionRuleInput"]: {
	/** The global relay id of the branch protection rule to be deleted. */
	branchProtectionRuleId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated return type of DeleteBranchProtectionRule */
["DeleteBranchProtectionRulePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteDeployment */
["DeleteDeploymentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the deployment to be deleted. */
	id: string
};
	/** Autogenerated return type of DeleteDeployment */
["DeleteDeploymentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteDiscussionComment */
["DeleteDiscussionCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node id of the discussion comment to delete. */
	id: string
};
	/** Autogenerated return type of DeleteDiscussionComment */
["DeleteDiscussionCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion comment that was just deleted. */
	comment?: ModelTypes["DiscussionComment"] | undefined
};
	/** Autogenerated input type of DeleteDiscussion */
["DeleteDiscussionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the discussion to delete. */
	id: string
};
	/** Autogenerated return type of DeleteDiscussion */
["DeleteDiscussionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion that was just deleted. */
	discussion?: ModelTypes["Discussion"] | undefined
};
	/** Autogenerated input type of DeleteEnvironment */
["DeleteEnvironmentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the environment to be deleted. */
	id: string
};
	/** Autogenerated return type of DeleteEnvironment */
["DeleteEnvironmentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteIpAllowListEntry */
["DeleteIpAllowListEntryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the IP allow list entry to delete. */
	ipAllowListEntryId: string
};
	/** Autogenerated return type of DeleteIpAllowListEntry */
["DeleteIpAllowListEntryPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list entry that was deleted. */
	ipAllowListEntry?: ModelTypes["IpAllowListEntry"] | undefined
};
	/** Autogenerated input type of DeleteIssueComment */
["DeleteIssueCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the comment to delete. */
	id: string
};
	/** Autogenerated return type of DeleteIssueComment */
["DeleteIssueCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteIssue */
["DeleteIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the issue to delete. */
	issueId: string
};
	/** Autogenerated return type of DeleteIssue */
["DeleteIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository the issue belonged to */
	repository?: ModelTypes["Repository"] | undefined
};
	/** Autogenerated input type of DeleteLabel */
["DeleteLabelInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the label to be deleted. */
	id: string
};
	/** Autogenerated return type of DeleteLabel */
["DeleteLabelPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteLinkedBranch */
["DeleteLinkedBranchInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the linked branch */
	linkedBranchId: string
};
	/** Autogenerated return type of DeleteLinkedBranch */
["DeleteLinkedBranchPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue the linked branch was unlinked from. */
	issue?: ModelTypes["Issue"] | undefined
};
	/** Autogenerated input type of DeletePackageVersion */
["DeletePackageVersionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the package version to be deleted. */
	packageVersionId: string
};
	/** Autogenerated return type of DeletePackageVersion */
["DeletePackageVersionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether or not the operation succeeded. */
	success?: boolean | undefined
};
	/** Autogenerated input type of DeleteProjectCard */
["DeleteProjectCardInput"]: {
	/** The id of the card to delete. */
	cardId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated return type of DeleteProjectCard */
["DeleteProjectCardPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The column the deleted card was in. */
	column?: ModelTypes["ProjectColumn"] | undefined,
	/** The deleted card ID. */
	deletedCardId?: string | undefined
};
	/** Autogenerated input type of DeleteProjectColumn */
["DeleteProjectColumnInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the column to delete. */
	columnId: string
};
	/** Autogenerated return type of DeleteProjectColumn */
["DeleteProjectColumnPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The deleted column ID. */
	deletedColumnId?: string | undefined,
	/** The project the deleted column was in. */
	project?: ModelTypes["Project"] | undefined
};
	/** Autogenerated input type of DeleteProject */
["DeleteProjectInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Project ID to update. */
	projectId: string
};
	/** Autogenerated input type of DeleteProjectNextItem */
["DeleteProjectNextItemInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the item to be removed. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	itemId?: string | undefined,
	/** The ID of the Project from which the item should be removed. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined
};
	/** Autogenerated return type of DeleteProjectNextItem */
["DeleteProjectNextItemPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the deleted item. */
	deletedItemId?: string | undefined
};
	/** Autogenerated return type of DeleteProject */
["DeleteProjectPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository or organization the project was removed from. */
	owner?: ModelTypes["ProjectOwner"] | undefined
};
	/** Autogenerated input type of DeleteProjectV2Item */
["DeleteProjectV2ItemInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the item to be removed. */
	itemId: string,
	/** The ID of the Project from which the item should be removed. */
	projectId: string
};
	/** Autogenerated return type of DeleteProjectV2Item */
["DeleteProjectV2ItemPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the deleted item. */
	deletedItemId?: string | undefined
};
	/** Autogenerated input type of DeletePullRequestReviewComment */
["DeletePullRequestReviewCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the comment to delete. */
	id: string
};
	/** Autogenerated return type of DeletePullRequestReviewComment */
["DeletePullRequestReviewCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request review the deleted comment belonged to. */
	pullRequestReview?: ModelTypes["PullRequestReview"] | undefined,
	/** The deleted pull request review comment. */
	pullRequestReviewComment?: ModelTypes["PullRequestReviewComment"] | undefined
};
	/** Autogenerated input type of DeletePullRequestReview */
["DeletePullRequestReviewInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the pull request review to delete. */
	pullRequestReviewId: string
};
	/** Autogenerated return type of DeletePullRequestReview */
["DeletePullRequestReviewPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The deleted pull request review. */
	pullRequestReview?: ModelTypes["PullRequestReview"] | undefined
};
	/** Autogenerated input type of DeleteRef */
["DeleteRefInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the Ref to be deleted. */
	refId: string
};
	/** Autogenerated return type of DeleteRef */
["DeleteRefPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteTeamDiscussionComment */
["DeleteTeamDiscussionCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the comment to delete. */
	id: string
};
	/** Autogenerated return type of DeleteTeamDiscussionComment */
["DeleteTeamDiscussionCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteTeamDiscussion */
["DeleteTeamDiscussionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion ID to delete. */
	id: string
};
	/** Autogenerated return type of DeleteTeamDiscussion */
["DeleteTeamDiscussionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteVerifiableDomain */
["DeleteVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the verifiable domain to delete. */
	id: string
};
	/** Autogenerated return type of DeleteVerifiableDomain */
["DeleteVerifiableDomainPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The owning account from which the domain was deleted. */
	owner?: ModelTypes["VerifiableDomainOwner"] | undefined
};
	/** Represents a 'demilestoned' event on a given issue or pull request. */
["DemilestonedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Identifies the milestone title associated with the 'demilestoned' event. */
	milestoneTitle: string,
	/** Object referenced by event. */
	subject: ModelTypes["MilestoneItem"]
};
	/** A Dependabot Update for a dependency in a repository */
["DependabotUpdate"]: {
		/** The error from a dependency update */
	error?: ModelTypes["DependabotUpdateError"] | undefined,
	/** The associated pull request */
	pullRequest?: ModelTypes["PullRequest"] | undefined,
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"]
};
	/** An error produced from a Dependabot Update */
["DependabotUpdateError"]: {
		/** The body of the error */
	body: string,
	/** The error code */
	errorType: string,
	/** The title of the error */
	title: string
};
	/** A dependency manifest entry */
["DependencyGraphDependency"]: {
		/** Does the dependency itself have dependencies? */
	hasDependencies: boolean,
	/** The original name of the package, as it appears in the manifest. */
	packageLabel: string,
	/** The dependency package manager */
	packageManager?: string | undefined,
	/** The name of the package in the canonical form used by the package manager.
This may differ from the original textual form (see packageLabel), for example
in a package manager that uses case-insensitive comparisons. */
	packageName: string,
	/** The repository containing the package */
	repository?: ModelTypes["Repository"] | undefined,
	/** The dependency version requirements */
	requirements: string
};
	/** The connection type for DependencyGraphDependency. */
["DependencyGraphDependencyConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DependencyGraphDependencyEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DependencyGraphDependency"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DependencyGraphDependencyEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DependencyGraphDependency"] | undefined
};
	["DependencyGraphEcosystem"]:DependencyGraphEcosystem;
	/** Dependency manifest for a repository */
["DependencyGraphManifest"]: {
		/** Path to view the manifest file blob */
	blobPath: string,
	/** A list of manifest dependencies */
	dependencies?: ModelTypes["DependencyGraphDependencyConnection"] | undefined,
	/** The number of dependencies listed in the manifest */
	dependenciesCount?: number | undefined,
	/** Is the manifest too big to parse? */
	exceedsMaxSize: boolean,
	/** Fully qualified manifest filename */
	filename: string,
	id: string,
	/** Were we able to parse the manifest? */
	parseable: boolean,
	/** The repository containing the manifest */
	repository: ModelTypes["Repository"]
};
	/** The connection type for DependencyGraphManifest. */
["DependencyGraphManifestConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DependencyGraphManifestEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DependencyGraphManifest"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DependencyGraphManifestEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DependencyGraphManifest"] | undefined
};
	/** A repository deploy key. */
["DeployKey"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** The deploy key. */
	key: string,
	/** Whether or not the deploy key is read only. */
	readOnly: boolean,
	/** The deploy key title. */
	title: string,
	/** Whether or not the deploy key has been verified. */
	verified: boolean
};
	/** The connection type for DeployKey. */
["DeployKeyConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DeployKeyEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DeployKey"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeployKeyEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DeployKey"] | undefined
};
	/** Represents a 'deployed' event on a given pull request. */
["DeployedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The deployment associated with the 'deployed' event. */
	deployment: ModelTypes["Deployment"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"],
	/** The ref associated with the 'deployed' event. */
	ref?: ModelTypes["Ref"] | undefined
};
	/** Represents triggered deployment instance. */
["Deployment"]: {
		/** Identifies the commit sha of the deployment. */
	commit?: ModelTypes["Commit"] | undefined,
	/** Identifies the oid of the deployment commit, even if the commit has been deleted. */
	commitOid: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the actor who triggered the deployment. */
	creator: ModelTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The deployment description. */
	description?: string | undefined,
	/** The latest environment to which this deployment was made. */
	environment?: string | undefined,
	id: string,
	/** The latest environment to which this deployment was made. */
	latestEnvironment?: string | undefined,
	/** The latest status of this deployment. */
	latestStatus?: ModelTypes["DeploymentStatus"] | undefined,
	/** The original environment to which this deployment was made. */
	originalEnvironment?: string | undefined,
	/** Extra information that a deployment system might need. */
	payload?: string | undefined,
	/** Identifies the Ref of the deployment, if the deployment was created by ref. */
	ref?: ModelTypes["Ref"] | undefined,
	/** Identifies the repository associated with the deployment. */
	repository: ModelTypes["Repository"],
	/** The current state of the deployment. */
	state?: ModelTypes["DeploymentState"] | undefined,
	/** A list of statuses associated with the deployment. */
	statuses?: ModelTypes["DeploymentStatusConnection"] | undefined,
	/** The deployment task. */
	task?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for Deployment. */
["DeploymentConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DeploymentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Deployment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Deployment"] | undefined
};
	/** Represents a 'deployment_environment_changed' event on a given pull request. */
["DeploymentEnvironmentChangedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The deployment status that updated the deployment environment. */
	deploymentStatus: ModelTypes["DeploymentStatus"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"]
};
	/** Ordering options for deployment connections */
["DeploymentOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order deployments by. */
	field: ModelTypes["DeploymentOrderField"]
};
	["DeploymentOrderField"]:DeploymentOrderField;
	/** A protection rule. */
["DeploymentProtectionRule"]: {
		/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The teams or users that can review the deployment */
	reviewers: ModelTypes["DeploymentReviewerConnection"],
	/** The timeout in minutes for this protection rule. */
	timeout: number,
	/** The type of protection rule. */
	type: ModelTypes["DeploymentProtectionRuleType"]
};
	/** The connection type for DeploymentProtectionRule. */
["DeploymentProtectionRuleConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DeploymentProtectionRuleEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DeploymentProtectionRule"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentProtectionRuleEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DeploymentProtectionRule"] | undefined
};
	["DeploymentProtectionRuleType"]:DeploymentProtectionRuleType;
	/** A request to deploy a workflow run to an environment. */
["DeploymentRequest"]: {
		/** Whether or not the current user can approve the deployment */
	currentUserCanApprove: boolean,
	/** The target environment of the deployment */
	environment: ModelTypes["Environment"],
	/** The teams or users that can review the deployment */
	reviewers: ModelTypes["DeploymentReviewerConnection"],
	/** The wait timer in minutes configured in the environment */
	waitTimer: number,
	/** The wait timer in minutes configured in the environment */
	waitTimerStartedAt?: ModelTypes["DateTime"] | undefined
};
	/** The connection type for DeploymentRequest. */
["DeploymentRequestConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DeploymentRequestEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DeploymentRequest"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentRequestEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DeploymentRequest"] | undefined
};
	/** A deployment review. */
["DeploymentReview"]: {
		/** The comment the user left. */
	comment: string,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The environments approved or rejected */
	environments: ModelTypes["EnvironmentConnection"],
	id: string,
	/** The decision of the user. */
	state: ModelTypes["DeploymentReviewState"],
	/** The user that reviewed the deployment. */
	user: ModelTypes["User"]
};
	/** The connection type for DeploymentReview. */
["DeploymentReviewConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DeploymentReviewEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DeploymentReview"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentReviewEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DeploymentReview"] | undefined
};
	["DeploymentReviewState"]:DeploymentReviewState;
	/** Users and teams. */
["DeploymentReviewer"]:ModelTypes["Team"] | ModelTypes["User"];
	/** The connection type for DeploymentReviewer. */
["DeploymentReviewerConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DeploymentReviewerEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DeploymentReviewer"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentReviewerEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DeploymentReviewer"] | undefined
};
	["DeploymentState"]:DeploymentState;
	/** Describes the status of a given deployment attempt. */
["DeploymentStatus"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the actor who triggered the deployment. */
	creator: ModelTypes["Actor"],
	/** Identifies the deployment associated with status. */
	deployment: ModelTypes["Deployment"],
	/** Identifies the description of the deployment. */
	description?: string | undefined,
	/** Identifies the environment of the deployment at the time of this deployment status */
	environment?: string | undefined,
	/** Identifies the environment URL of the deployment. */
	environmentUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** Identifies the log URL of the deployment. */
	logUrl?: ModelTypes["URI"] | undefined,
	/** Identifies the current state of the deployment. */
	state: ModelTypes["DeploymentStatusState"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for DeploymentStatus. */
["DeploymentStatusConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DeploymentStatusEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DeploymentStatus"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentStatusEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DeploymentStatus"] | undefined
};
	["DeploymentStatusState"]:DeploymentStatusState;
	["DiffSide"]:DiffSide;
	/** Autogenerated input type of DisablePullRequestAutoMerge */
["DisablePullRequestAutoMergeInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to disable auto merge on. */
	pullRequestId: string
};
	/** Autogenerated return type of DisablePullRequestAutoMerge */
["DisablePullRequestAutoMergePayload"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request auto merge was disabled on. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Represents a 'disconnected' event on a given issue or pull request. */
["DisconnectedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Reference originated in a different repository. */
	isCrossRepository: boolean,
	/** Issue or pull request from which the issue was disconnected. */
	source: ModelTypes["ReferencedSubject"],
	/** Issue or pull request which was disconnected. */
	subject: ModelTypes["ReferencedSubject"]
};
	/** A discussion in a repository. */
["Discussion"]: {
		/** Reason that the conversation was locked. */
	activeLockReason?: ModelTypes["LockReason"] | undefined,
	/** The comment chosen as this discussion's answer, if any. */
	answer?: ModelTypes["DiscussionComment"] | undefined,
	/** The time when a user chose this discussion's answer, if answered. */
	answerChosenAt?: ModelTypes["DateTime"] | undefined,
	/** The user who chose this discussion's answer, if answered. */
	answerChosenBy?: ModelTypes["Actor"] | undefined,
	/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** The main text of the discussion post. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** The category for this discussion. */
	category: ModelTypes["DiscussionCategory"],
	/** The replies to the discussion. */
	comments: ModelTypes["DiscussionCommentConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** A list of labels associated with the object. */
	labels?: ModelTypes["LabelConnection"] | undefined,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** `true` if the object is locked */
	locked: boolean,
	/** The number identifying this discussion within the repository. */
	number: number,
	/** The poll associated with this discussion, if one exists. */
	poll?: ModelTypes["DiscussionPoll"] | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"],
	/** The path for this discussion. */
	resourcePath: ModelTypes["URI"],
	/** The title of this discussion. */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** Number of upvotes that this subject has received. */
	upvoteCount: number,
	/** The URL for this discussion. */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote: boolean,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: ModelTypes["SubscriptionState"] | undefined
};
	/** A category for discussions in a repository. */
["DiscussionCategory"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** A description of this category. */
	description?: string | undefined,
	/** An emoji representing this category. */
	emoji: string,
	/** This category's emoji rendered as HTML. */
	emojiHTML: ModelTypes["HTML"],
	id: string,
	/** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
	isAnswerable: boolean,
	/** The name of this category. */
	name: string,
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"],
	/** The slug of this category. */
	slug: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for DiscussionCategory. */
["DiscussionCategoryConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DiscussionCategoryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DiscussionCategory"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DiscussionCategoryEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DiscussionCategory"] | undefined
};
	/** A comment on a discussion. */
["DiscussionComment"]: {
		/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The time when this replied-to comment was deleted */
	deletedAt?: ModelTypes["DateTime"] | undefined,
	/** The discussion this comment was created in */
	discussion?: ModelTypes["Discussion"] | undefined,
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Has this comment been chosen as the answer of its discussion? */
	isAnswer: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The threaded replies to this comment. */
	replies: ModelTypes["DiscussionCommentConnection"],
	/** The discussion comment this comment is a reply to */
	replyTo?: ModelTypes["DiscussionComment"] | undefined,
	/** The path for this discussion comment. */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** Number of upvotes that this subject has received. */
	upvoteCount: number,
	/** The URL for this discussion comment. */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Can the current user mark this comment as an answer? */
	viewerCanMarkAsAnswer: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Can the current user unmark this comment as an answer? */
	viewerCanUnmarkAsAnswer: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted: boolean
};
	/** The connection type for DiscussionComment. */
["DiscussionCommentConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DiscussionCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DiscussionComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DiscussionCommentEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DiscussionComment"] | undefined
};
	/** The connection type for Discussion. */
["DiscussionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DiscussionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Discussion"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DiscussionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Discussion"] | undefined
};
	/** Ways in which lists of discussions can be ordered upon return. */
["DiscussionOrder"]: {
	/** The direction in which to order discussions by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field by which to order discussions. */
	field: ModelTypes["DiscussionOrderField"]
};
	["DiscussionOrderField"]:DiscussionOrderField;
	/** A poll for a discussion. */
["DiscussionPoll"]: {
		/** The discussion that this poll belongs to. */
	discussion?: ModelTypes["Discussion"] | undefined,
	id: string,
	/** The options for this poll. */
	options?: ModelTypes["DiscussionPollOptionConnection"] | undefined,
	/** The question that is being asked by this poll. */
	question: string,
	/** The total number of votes that have been cast for this poll. */
	totalVoteCount: number,
	/** Indicates if the viewer has permission to vote in this poll. */
	viewerCanVote: boolean,
	/** Indicates if the viewer has voted for any option in this poll. */
	viewerHasVoted: boolean
};
	/** An option for a discussion poll. */
["DiscussionPollOption"]: {
		id: string,
	/** The text for this option. */
	option: string,
	/** The discussion poll that this option belongs to. */
	poll?: ModelTypes["DiscussionPoll"] | undefined,
	/** The total number of votes that have been cast for this option. */
	totalVoteCount: number,
	/** Indicates if the viewer has voted for this option in the poll. */
	viewerHasVoted: boolean
};
	/** The connection type for DiscussionPollOption. */
["DiscussionPollOptionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["DiscussionPollOptionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["DiscussionPollOption"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DiscussionPollOptionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["DiscussionPollOption"] | undefined
};
	/** Ordering options for discussion poll option connections. */
["DiscussionPollOptionOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order poll options by. */
	field: ModelTypes["DiscussionPollOptionOrderField"]
};
	["DiscussionPollOptionOrderField"]:DiscussionPollOptionOrderField;
	/** Autogenerated input type of DismissPullRequestReview */
["DismissPullRequestReviewInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The contents of the pull request review dismissal message. */
	message: string,
	/** The Node ID of the pull request review to modify. */
	pullRequestReviewId: string
};
	/** Autogenerated return type of DismissPullRequestReview */
["DismissPullRequestReviewPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The dismissed pull request review. */
	pullRequestReview?: ModelTypes["PullRequestReview"] | undefined
};
	["DismissReason"]:DismissReason;
	/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
["DismissRepositoryVulnerabilityAlertInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The reason the Dependabot alert is being dismissed. */
	dismissReason: ModelTypes["DismissReason"],
	/** The Dependabot alert ID to dismiss. */
	repositoryVulnerabilityAlertId: string
};
	/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */
["DismissRepositoryVulnerabilityAlertPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Dependabot alert that was dismissed */
	repositoryVulnerabilityAlert?: ModelTypes["RepositoryVulnerabilityAlert"] | undefined
};
	/** A draft issue within a project. */
["DraftIssue"]: {
		/** A list of users to assigned to this draft issue. */
	assignees: ModelTypes["UserConnection"],
	/** The body of the draft issue. */
	body: string,
	/** The body of the draft issue rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body of the draft issue rendered to text. */
	bodyText: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created this draft issue. */
	creator?: ModelTypes["Actor"] | undefined,
	id: string,
	/** The project (beta) that contains this draft issue. */
	project: ModelTypes["ProjectNext"],
	/** The project (beta) item that wraps this draft issue. */
	projectItem: ModelTypes["ProjectNextItem"],
	/** List of items linked with the draft issue (currently draft issue can be linked to only one item). */
	projectV2Items: ModelTypes["ProjectV2ItemConnection"],
	/** Projects that link to this draft issue (currently draft issue can be linked to only one project). */
	projectsV2: ModelTypes["ProjectV2Connection"],
	/** The title of the draft issue */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** Specifies a review comment to be left with a Pull Request Review. */
["DraftPullRequestReviewComment"]: {
	/** Body of the comment to leave. */
	body: string,
	/** Path to the file being commented on. */
	path: string,
	/** Position in the file to leave a comment on. */
	position: number
};
	/** Specifies a review comment thread to be left with a Pull Request Review. */
["DraftPullRequestReviewThread"]: {
	/** Body of the comment to leave. */
	body: string,
	/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
	line: number,
	/** Path to the file being commented on. */
	path: string,
	/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
	side?: ModelTypes["DiffSide"] | undefined,
	/** The first line of the range to which the comment refers. */
	startLine?: number | undefined,
	/** The side of the diff on which the start line resides. */
	startSide?: ModelTypes["DiffSide"] | undefined
};
	/** Autogenerated input type of EnablePullRequestAutoMerge */
["EnablePullRequestAutoMergeInput"]: {
	/** The email address to associate with this merge. */
	authorEmail?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Commit body to use for the commit when the PR is mergable; if omitted, a
default message will be used. NOTE: when merging with a merge queue any input
value for commit message is ignored. */
	commitBody?: string | undefined,
	/** Commit headline to use for the commit when the PR is mergable; if omitted, a
default message will be used. NOTE: when merging with a merge queue any input
value for commit headline is ignored. */
	commitHeadline?: string | undefined,
	/** The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
with a merge queue any input value for merge method is ignored. */
	mergeMethod?: ModelTypes["PullRequestMergeMethod"] | undefined,
	/** ID of the pull request to enable auto-merge on. */
	pullRequestId: string
};
	/** Autogenerated return type of EnablePullRequestAutoMerge */
["EnablePullRequestAutoMergePayload"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request auto-merge was enabled on. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** An account to manage multiple organizations with consolidated policy and billing. */
["Enterprise"]: {
		/** A URL pointing to the enterprise's public avatar. */
	avatarUrl: ModelTypes["URI"],
	/** Enterprise billing information visible to enterprise billing managers. */
	billingInfo?: ModelTypes["EnterpriseBillingInfo"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The description of the enterprise. */
	description?: string | undefined,
	/** The description of the enterprise as HTML. */
	descriptionHTML: ModelTypes["HTML"],
	id: string,
	/** The location of the enterprise. */
	location?: string | undefined,
	/** A list of users who are members of this enterprise. */
	members: ModelTypes["EnterpriseMemberConnection"],
	/** The name of the enterprise. */
	name: string,
	/** A list of organizations that belong to this enterprise. */
	organizations: ModelTypes["OrganizationConnection"],
	/** Enterprise information only visible to enterprise owners. */
	ownerInfo?: ModelTypes["EnterpriseOwnerInfo"] | undefined,
	/** The HTTP path for this enterprise. */
	resourcePath: ModelTypes["URI"],
	/** The URL-friendly identifier for the enterprise. */
	slug: string,
	/** The HTTP URL for this enterprise. */
	url: ModelTypes["URI"],
	/** Is the current viewer an admin of this enterprise? */
	viewerIsAdmin: boolean,
	/** The URL of the enterprise website. */
	websiteUrl?: ModelTypes["URI"] | undefined
};
	/** The connection type for User. */
["EnterpriseAdministratorConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseAdministratorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A User who is an administrator of an enterprise. */
["EnterpriseAdministratorEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["User"] | undefined,
	/** The role of the administrator. */
	role: ModelTypes["EnterpriseAdministratorRole"]
};
	/** An invitation for a user to become an owner or billing manager of an enterprise. */
["EnterpriseAdministratorInvitation"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The email of the person who was invited to the enterprise. */
	email?: string | undefined,
	/** The enterprise the invitation is for. */
	enterprise: ModelTypes["Enterprise"],
	id: string,
	/** The user who was invited to the enterprise. */
	invitee?: ModelTypes["User"] | undefined,
	/** The user who created the invitation. */
	inviter?: ModelTypes["User"] | undefined,
	/** The invitee's pending role in the enterprise (owner or billing_manager). */
	role: ModelTypes["EnterpriseAdministratorRole"]
};
	/** The connection type for EnterpriseAdministratorInvitation. */
["EnterpriseAdministratorInvitationConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseAdministratorInvitationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["EnterpriseAdministratorInvitation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseAdministratorInvitationEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["EnterpriseAdministratorInvitation"] | undefined
};
	/** Ordering options for enterprise administrator invitation connections */
["EnterpriseAdministratorInvitationOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order enterprise administrator invitations by. */
	field: ModelTypes["EnterpriseAdministratorInvitationOrderField"]
};
	["EnterpriseAdministratorInvitationOrderField"]:EnterpriseAdministratorInvitationOrderField;
	["EnterpriseAdministratorRole"]:EnterpriseAdministratorRole;
	["EnterpriseAllowPrivateRepositoryForkingPolicyValue"]:EnterpriseAllowPrivateRepositoryForkingPolicyValue;
	/** Metadata for an audit entry containing enterprise account information. */
["EnterpriseAuditEntryData"]: ModelTypes["MembersCanDeleteReposClearAuditEntry"] | ModelTypes["MembersCanDeleteReposDisableAuditEntry"] | ModelTypes["MembersCanDeleteReposEnableAuditEntry"] | ModelTypes["OrgInviteToBusinessAuditEntry"] | ModelTypes["PrivateRepositoryForkingDisableAuditEntry"] | ModelTypes["PrivateRepositoryForkingEnableAuditEntry"] | ModelTypes["RepositoryVisibilityChangeDisableAuditEntry"] | ModelTypes["RepositoryVisibilityChangeEnableAuditEntry"];
	/** Enterprise billing information visible to enterprise billing managers and owners. */
["EnterpriseBillingInfo"]: {
		/** The number of licenseable users/emails across the enterprise. */
	allLicensableUsersCount: number,
	/** The number of data packs used by all organizations owned by the enterprise. */
	assetPacks: number,
	/** The bandwidth quota in GB for all organizations owned by the enterprise. */
	bandwidthQuota: number,
	/** The bandwidth usage in GB for all organizations owned by the enterprise. */
	bandwidthUsage: number,
	/** The bandwidth usage as a percentage of the bandwidth quota. */
	bandwidthUsagePercentage: number,
	/** The storage quota in GB for all organizations owned by the enterprise. */
	storageQuota: number,
	/** The storage usage in GB for all organizations owned by the enterprise. */
	storageUsage: number,
	/** The storage usage as a percentage of the storage quota. */
	storageUsagePercentage: number,
	/** The number of available licenses across all owned organizations based on the unique number of billable users. */
	totalAvailableLicenses: number,
	/** The total number of licenses allocated. */
	totalLicenses: number
};
	["EnterpriseDefaultRepositoryPermissionSettingValue"]:EnterpriseDefaultRepositoryPermissionSettingValue;
	["EnterpriseEnabledDisabledSettingValue"]:EnterpriseEnabledDisabledSettingValue;
	["EnterpriseEnabledSettingValue"]:EnterpriseEnabledSettingValue;
	/** An identity provider configured to provision identities for an enterprise. */
["EnterpriseIdentityProvider"]: {
		/** The digest algorithm used to sign SAML requests for the identity provider. */
	digestMethod?: ModelTypes["SamlDigestAlgorithm"] | undefined,
	/** The enterprise this identity provider belongs to. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** ExternalIdentities provisioned by this identity provider. */
	externalIdentities: ModelTypes["ExternalIdentityConnection"],
	id: string,
	/** The x509 certificate used by the identity provider to sign assertions and responses. */
	idpCertificate?: ModelTypes["X509Certificate"] | undefined,
	/** The Issuer Entity ID for the SAML identity provider. */
	issuer?: string | undefined,
	/** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
	recoveryCodes?: Array<string> | undefined,
	/** The signature algorithm used to sign SAML requests for the identity provider. */
	signatureMethod?: ModelTypes["SamlSignatureAlgorithm"] | undefined,
	/** The URL endpoint for the identity provider's SAML SSO. */
	ssoUrl?: ModelTypes["URI"] | undefined
};
	/** An object that is a member of an enterprise. */
["EnterpriseMember"]:ModelTypes["EnterpriseUserAccount"] | ModelTypes["User"];
	/** The connection type for EnterpriseMember. */
["EnterpriseMemberConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseMemberEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["EnterpriseMember"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A User who is a member of an enterprise through one or more organizations. */
["EnterpriseMemberEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["EnterpriseMember"] | undefined
};
	/** Ordering options for enterprise member connections. */
["EnterpriseMemberOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order enterprise members by. */
	field: ModelTypes["EnterpriseMemberOrderField"]
};
	["EnterpriseMemberOrderField"]:EnterpriseMemberOrderField;
	["EnterpriseMembersCanCreateRepositoriesSettingValue"]:EnterpriseMembersCanCreateRepositoriesSettingValue;
	["EnterpriseMembersCanMakePurchasesSettingValue"]:EnterpriseMembersCanMakePurchasesSettingValue;
	/** The connection type for Organization. */
["EnterpriseOrganizationMembershipConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseOrganizationMembershipEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Organization"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An enterprise organization that a user is a member of. */
["EnterpriseOrganizationMembershipEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Organization"] | undefined,
	/** The role of the user in the enterprise membership. */
	role: ModelTypes["EnterpriseUserAccountMembershipRole"]
};
	/** The connection type for User. */
["EnterpriseOutsideCollaboratorConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseOutsideCollaboratorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A User who is an outside collaborator of an enterprise through one or more organizations. */
["EnterpriseOutsideCollaboratorEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["User"] | undefined,
	/** The enterprise organization repositories this user is a member of. */
	repositories: ModelTypes["EnterpriseRepositoryInfoConnection"]
};
	/** Enterprise information only visible to enterprise owners. */
["EnterpriseOwnerInfo"]: {
		/** A list of all of the administrators for this enterprise. */
	admins: ModelTypes["EnterpriseAdministratorConnection"],
	/** A list of users in the enterprise who currently have two-factor authentication disabled. */
	affiliatedUsersWithTwoFactorDisabled: ModelTypes["UserConnection"],
	/** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
	affiliatedUsersWithTwoFactorDisabledExist: boolean,
	/** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
	allowPrivateRepositoryForkingSetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided private repository forking setting value. */
	allowPrivateRepositoryForkingSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** The value for the allow private repository forking policy on the enterprise. */
	allowPrivateRepositoryForkingSettingPolicyValue?: ModelTypes["EnterpriseAllowPrivateRepositoryForkingPolicyValue"] | undefined,
	/** The setting value for base repository permissions for organizations in this enterprise. */
	defaultRepositoryPermissionSetting: ModelTypes["EnterpriseDefaultRepositoryPermissionSettingValue"],
	/** A list of enterprise organizations configured with the provided base repository permission. */
	defaultRepositoryPermissionSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** A list of domains owned by the enterprise. */
	domains: ModelTypes["VerifiableDomainConnection"],
	/** Enterprise Server installations owned by the enterprise. */
	enterpriseServerInstallations: ModelTypes["EnterpriseServerInstallationConnection"],
	/** The setting value for whether the enterprise has an IP allow list enabled. */
	ipAllowListEnabledSetting: ModelTypes["IpAllowListEnabledSettingValue"],
	/** The IP addresses that are allowed to access resources owned by the enterprise. */
	ipAllowListEntries: ModelTypes["IpAllowListEntryConnection"],
	/** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
	ipAllowListForInstalledAppsEnabledSetting: ModelTypes["IpAllowListForInstalledAppsEnabledSettingValue"],
	/** Whether or not the base repository permission is currently being updated. */
	isUpdatingDefaultRepositoryPermission: boolean,
	/** Whether the two-factor authentication requirement is currently being enforced. */
	isUpdatingTwoFactorRequirement: boolean,
	/** The setting value for whether organization members with admin permissions on a
repository can change repository visibility. */
	membersCanChangeRepositoryVisibilitySetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
	membersCanChangeRepositoryVisibilitySettingOrganizations: ModelTypes["OrganizationConnection"],
	/** The setting value for whether members of organizations in the enterprise can create internal repositories. */
	membersCanCreateInternalRepositoriesSetting?: boolean | undefined,
	/** The setting value for whether members of organizations in the enterprise can create private repositories. */
	membersCanCreatePrivateRepositoriesSetting?: boolean | undefined,
	/** The setting value for whether members of organizations in the enterprise can create public repositories. */
	membersCanCreatePublicRepositoriesSetting?: boolean | undefined,
	/** The setting value for whether members of organizations in the enterprise can create repositories. */
	membersCanCreateRepositoriesSetting?: ModelTypes["EnterpriseMembersCanCreateRepositoriesSettingValue"] | undefined,
	/** A list of enterprise organizations configured with the provided repository creation setting value. */
	membersCanCreateRepositoriesSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** The setting value for whether members with admin permissions for repositories can delete issues. */
	membersCanDeleteIssuesSetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can delete issues setting value. */
	membersCanDeleteIssuesSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
	membersCanDeleteRepositoriesSetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
	membersCanDeleteRepositoriesSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
	membersCanInviteCollaboratorsSetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
	membersCanInviteCollaboratorsSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
	membersCanMakePurchasesSetting: ModelTypes["EnterpriseMembersCanMakePurchasesSettingValue"],
	/** The setting value for whether members with admin permissions for repositories can update protected branches. */
	membersCanUpdateProtectedBranchesSetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
	membersCanUpdateProtectedBranchesSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** The setting value for whether members can view dependency insights. */
	membersCanViewDependencyInsightsSetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
	membersCanViewDependencyInsightsSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
	notificationDeliveryRestrictionEnabledSetting: ModelTypes["NotificationRestrictionSettingValue"],
	/** The OIDC Identity Provider for the enterprise. */
	oidcProvider?: ModelTypes["OIDCProvider"] | undefined,
	/** The setting value for whether organization projects are enabled for organizations in this enterprise. */
	organizationProjectsSetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided organization projects setting value. */
	organizationProjectsSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** A list of outside collaborators across the repositories in the enterprise. */
	outsideCollaborators: ModelTypes["EnterpriseOutsideCollaboratorConnection"],
	/** A list of pending administrator invitations for the enterprise. */
	pendingAdminInvitations: ModelTypes["EnterpriseAdministratorInvitationConnection"],
	/** A list of pending collaborator invitations across the repositories in the enterprise. */
	pendingCollaboratorInvitations: ModelTypes["RepositoryInvitationConnection"],
	/** A list of pending member invitations for organizations in the enterprise. */
	pendingMemberInvitations: ModelTypes["EnterprisePendingMemberInvitationConnection"],
	/** The setting value for whether repository projects are enabled in this enterprise. */
	repositoryProjectsSetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided repository projects setting value. */
	repositoryProjectsSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** The SAML Identity Provider for the enterprise. When used by a GitHub App,
requires an installation token with read and write access to members. */
	samlIdentityProvider?: ModelTypes["EnterpriseIdentityProvider"] | undefined,
	/** A list of enterprise organizations configured with the SAML single sign-on setting value. */
	samlIdentityProviderSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** A list of members with a support entitlement. */
	supportEntitlements: ModelTypes["EnterpriseMemberConnection"],
	/** The setting value for whether team discussions are enabled for organizations in this enterprise. */
	teamDiscussionsSetting: ModelTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided team discussions setting value. */
	teamDiscussionsSettingOrganizations: ModelTypes["OrganizationConnection"],
	/** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
	twoFactorRequiredSetting: ModelTypes["EnterpriseEnabledSettingValue"],
	/** A list of enterprise organizations configured with the two-factor authentication setting value. */
	twoFactorRequiredSettingOrganizations: ModelTypes["OrganizationConnection"]
};
	/** The connection type for OrganizationInvitation. */
["EnterprisePendingMemberInvitationConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterprisePendingMemberInvitationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["OrganizationInvitation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** Identifies the total count of unique users in the connection. */
	totalUniqueUserCount: number
};
	/** An invitation to be a member in an enterprise organization. */
["EnterprisePendingMemberInvitationEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["OrganizationInvitation"] | undefined
};
	/** A subset of repository information queryable from an enterprise. */
["EnterpriseRepositoryInfo"]: {
		id: string,
	/** Identifies if the repository is private or internal. */
	isPrivate: boolean,
	/** The repository's name. */
	name: string,
	/** The repository's name with owner. */
	nameWithOwner: string
};
	/** The connection type for EnterpriseRepositoryInfo. */
["EnterpriseRepositoryInfoConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseRepositoryInfoEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["EnterpriseRepositoryInfo"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseRepositoryInfoEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["EnterpriseRepositoryInfo"] | undefined
};
	/** An Enterprise Server installation. */
["EnterpriseServerInstallation"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The customer name to which the Enterprise Server installation belongs. */
	customerName: string,
	/** The host name of the Enterprise Server installation. */
	hostName: string,
	id: string,
	/** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
	isConnected: boolean,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** User accounts on this Enterprise Server installation. */
	userAccounts: ModelTypes["EnterpriseServerUserAccountConnection"],
	/** User accounts uploads for the Enterprise Server installation. */
	userAccountsUploads: ModelTypes["EnterpriseServerUserAccountsUploadConnection"]
};
	/** The connection type for EnterpriseServerInstallation. */
["EnterpriseServerInstallationConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseServerInstallationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["EnterpriseServerInstallation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseServerInstallationEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["EnterpriseServerInstallation"] | undefined
};
	/** Ordering options for Enterprise Server installation connections. */
["EnterpriseServerInstallationOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order Enterprise Server installations by. */
	field: ModelTypes["EnterpriseServerInstallationOrderField"]
};
	["EnterpriseServerInstallationOrderField"]:EnterpriseServerInstallationOrderField;
	/** A user account on an Enterprise Server installation. */
["EnterpriseServerUserAccount"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** User emails belonging to this user account. */
	emails: ModelTypes["EnterpriseServerUserAccountEmailConnection"],
	/** The Enterprise Server installation on which this user account exists. */
	enterpriseServerInstallation: ModelTypes["EnterpriseServerInstallation"],
	id: string,
	/** Whether the user account is a site administrator on the Enterprise Server installation. */
	isSiteAdmin: boolean,
	/** The login of the user account on the Enterprise Server installation. */
	login: string,
	/** The profile name of the user account on the Enterprise Server installation. */
	profileName?: string | undefined,
	/** The date and time when the user account was created on the Enterprise Server installation. */
	remoteCreatedAt: ModelTypes["DateTime"],
	/** The ID of the user account on the Enterprise Server installation. */
	remoteUserId: number,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for EnterpriseServerUserAccount. */
["EnterpriseServerUserAccountConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseServerUserAccountEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["EnterpriseServerUserAccount"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseServerUserAccountEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["EnterpriseServerUserAccount"] | undefined
};
	/** An email belonging to a user account on an Enterprise Server installation. */
["EnterpriseServerUserAccountEmail"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The email address. */
	email: string,
	id: string,
	/** Indicates whether this is the primary email of the associated user account. */
	isPrimary: boolean,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The user account to which the email belongs. */
	userAccount: ModelTypes["EnterpriseServerUserAccount"]
};
	/** The connection type for EnterpriseServerUserAccountEmail. */
["EnterpriseServerUserAccountEmailConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseServerUserAccountEmailEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["EnterpriseServerUserAccountEmail"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseServerUserAccountEmailEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["EnterpriseServerUserAccountEmail"] | undefined
};
	/** Ordering options for Enterprise Server user account email connections. */
["EnterpriseServerUserAccountEmailOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order emails by. */
	field: ModelTypes["EnterpriseServerUserAccountEmailOrderField"]
};
	["EnterpriseServerUserAccountEmailOrderField"]:EnterpriseServerUserAccountEmailOrderField;
	/** Ordering options for Enterprise Server user account connections. */
["EnterpriseServerUserAccountOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order user accounts by. */
	field: ModelTypes["EnterpriseServerUserAccountOrderField"]
};
	["EnterpriseServerUserAccountOrderField"]:EnterpriseServerUserAccountOrderField;
	/** A user accounts upload from an Enterprise Server installation. */
["EnterpriseServerUserAccountsUpload"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The enterprise to which this upload belongs. */
	enterprise: ModelTypes["Enterprise"],
	/** The Enterprise Server installation for which this upload was generated. */
	enterpriseServerInstallation: ModelTypes["EnterpriseServerInstallation"],
	id: string,
	/** The name of the file uploaded. */
	name: string,
	/** The synchronization state of the upload */
	syncState: ModelTypes["EnterpriseServerUserAccountsUploadSyncState"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for EnterpriseServerUserAccountsUpload. */
["EnterpriseServerUserAccountsUploadConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnterpriseServerUserAccountsUploadEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["EnterpriseServerUserAccountsUpload"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseServerUserAccountsUploadEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["EnterpriseServerUserAccountsUpload"] | undefined
};
	/** Ordering options for Enterprise Server user accounts upload connections. */
["EnterpriseServerUserAccountsUploadOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order user accounts uploads by. */
	field: ModelTypes["EnterpriseServerUserAccountsUploadOrderField"]
};
	["EnterpriseServerUserAccountsUploadOrderField"]:EnterpriseServerUserAccountsUploadOrderField;
	["EnterpriseServerUserAccountsUploadSyncState"]:EnterpriseServerUserAccountsUploadSyncState;
	/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
["EnterpriseUserAccount"]: {
		/** A URL pointing to the enterprise user account's public avatar. */
	avatarUrl: ModelTypes["URI"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The enterprise in which this user account exists. */
	enterprise: ModelTypes["Enterprise"],
	id: string,
	/** An identifier for the enterprise user account, a login or email address */
	login: string,
	/** The name of the enterprise user account */
	name?: string | undefined,
	/** A list of enterprise organizations this user is a member of. */
	organizations: ModelTypes["EnterpriseOrganizationMembershipConnection"],
	/** The HTTP path for this user. */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this user. */
	url: ModelTypes["URI"],
	/** The user within the enterprise. */
	user?: ModelTypes["User"] | undefined
};
	["EnterpriseUserAccountMembershipRole"]:EnterpriseUserAccountMembershipRole;
	["EnterpriseUserDeployment"]:EnterpriseUserDeployment;
	/** An environment. */
["Environment"]: {
		/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The name of the environment */
	name: string,
	/** The protection rules defined for this environment */
	protectionRules: ModelTypes["DeploymentProtectionRuleConnection"]
};
	/** The connection type for Environment. */
["EnvironmentConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["EnvironmentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Environment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnvironmentEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Environment"] | undefined
};
	/** An external identity provisioned by SAML SSO or SCIM. */
["ExternalIdentity"]: {
		/** The GUID for this identity */
	guid: string,
	id: string,
	/** Organization invitation for this SCIM-provisioned external identity */
	organizationInvitation?: ModelTypes["OrganizationInvitation"] | undefined,
	/** SAML Identity attributes */
	samlIdentity?: ModelTypes["ExternalIdentitySamlAttributes"] | undefined,
	/** SCIM Identity attributes */
	scimIdentity?: ModelTypes["ExternalIdentityScimAttributes"] | undefined,
	/** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
	user?: ModelTypes["User"] | undefined
};
	/** An attribute for the External Identity attributes collection */
["ExternalIdentityAttribute"]: {
		/** The attribute metadata as JSON */
	metadata?: string | undefined,
	/** The attribute name */
	name: string,
	/** The attribute value */
	value: string
};
	/** The connection type for ExternalIdentity. */
["ExternalIdentityConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ExternalIdentityEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ExternalIdentity"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ExternalIdentityEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ExternalIdentity"] | undefined
};
	/** SAML attributes for the External Identity */
["ExternalIdentitySamlAttributes"]: {
		/** SAML Identity attributes */
	attributes: Array<ModelTypes["ExternalIdentityAttribute"]>,
	/** The emails associated with the SAML identity */
	emails?: Array<ModelTypes["UserEmailMetadata"]> | undefined,
	/** Family name of the SAML identity */
	familyName?: string | undefined,
	/** Given name of the SAML identity */
	givenName?: string | undefined,
	/** The groups linked to this identity in IDP */
	groups?: Array<string> | undefined,
	/** The NameID of the SAML identity */
	nameId?: string | undefined,
	/** The userName of the SAML identity */
	username?: string | undefined
};
	/** SCIM attributes for the External Identity */
["ExternalIdentityScimAttributes"]: {
		/** The emails associated with the SCIM identity */
	emails?: Array<ModelTypes["UserEmailMetadata"]> | undefined,
	/** Family name of the SCIM identity */
	familyName?: string | undefined,
	/** Given name of the SCIM identity */
	givenName?: string | undefined,
	/** The groups linked to this identity in IDP */
	groups?: Array<string> | undefined,
	/** The userName of the SCIM identity */
	username?: string | undefined
};
	/** A command to add a file at the given path with the given contents as part of a
commit.  Any existing file at that that path will be replaced. */
["FileAddition"]: {
	/** The base64 encoded contents of the file */
	contents: ModelTypes["Base64String"],
	/** The path in the repository where the file will be located */
	path: string
};
	/** A description of a set of changes to a file tree to be made as part of
a git commit, modeled as zero or more file `additions` and zero or more
file `deletions`.

Both fields are optional; omitting both will produce a commit with no
file changes.

`deletions` and `additions` describe changes to files identified
by their path in the git tree using unix-style path separators, i.e.
`/`.  The root of a git tree is an empty string, so paths are not
slash-prefixed.

`path` values must be unique across all `additions` and `deletions`
provided.  Any duplication will result in a validation error.

### Encoding

File contents must be provided in full for each `FileAddition`.

The `contents` of a `FileAddition` must be encoded using RFC 4648
compliant base64, i.e. correct padding is required and no characters
outside the standard alphabet may be used.  Invalid base64
encoding will be rejected with a validation error.

The encoded contents may be binary.

For text files, no assumptions are made about the character encoding of
the file contents (after base64 decoding).  No charset transcoding or
line-ending normalization will be performed; it is the client's
responsibility to manage the character encoding of files they provide.
However, for maximum compatibility we recommend using UTF-8 encoding
and ensuring that all files in a repository use a consistent
line-ending convention (`\n` or `\r\n`), and that all files end
with a newline.

### Modeling file changes

Each of the the five types of conceptual changes that can be made in a
git commit can be described using the `FileChanges` type as follows:

1. New file addition: create file `hello world\n` at path `docs/README.txt`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }

2. Existing file modification: change existing `docs/README.txt` to have new
   content `new content here\n`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("new content here\n")
           }
         ]
       }

3. Existing file deletion: remove existing file `docs/README.txt`.
   Note that the path is required to exist -- specifying a
   path that does not exist on the given branch will abort the
   commit and return an error.

       {
         "deletions" [
           {
             "path": "docs/README.txt"
           }
         ]
       }


4. File rename with no changes: rename `docs/README.txt` with
   previous content `hello world\n` to the same content at
   `newdocs/README.txt`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }


5. File rename with changes: rename `docs/README.txt` with
   previous content `hello world\n` to a file at path
   `newdocs/README.txt` with content `new contents\n`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("new contents\n")
           }
         ]
       } */
["FileChanges"]: {
	/** File to add or change. */
	additions?: Array<ModelTypes["FileAddition"]> | undefined,
	/** Files to delete. */
	deletions?: Array<ModelTypes["FileDeletion"]> | undefined
};
	/** A command to delete the file at the given path as part of a commit. */
["FileDeletion"]: {
	/** The path to delete */
	path: string
};
	["FileViewedState"]:FileViewedState;
	/** Autogenerated input type of FollowOrganization */
["FollowOrganizationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the organization to follow. */
	organizationId: string
};
	/** Autogenerated return type of FollowOrganization */
["FollowOrganizationPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organization that was followed. */
	organization?: ModelTypes["Organization"] | undefined
};
	/** Autogenerated input type of FollowUser */
["FollowUserInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the user to follow. */
	userId: string
};
	/** Autogenerated return type of FollowUser */
["FollowUserPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The user that was followed. */
	user?: ModelTypes["User"] | undefined
};
	/** The connection type for User. */
["FollowerConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["UserEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** The connection type for User. */
["FollowingConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["UserEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A funding platform link for a repository. */
["FundingLink"]: {
		/** The funding platform this link is for. */
	platform: ModelTypes["FundingPlatform"],
	/** The configured URL for this funding link. */
	url: ModelTypes["URI"]
};
	["FundingPlatform"]:FundingPlatform;
	/** A generic hovercard context with a message and icon */
["GenericHovercardContext"]: {
		/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string
};
	/** A Gist. */
["Gist"]: {
		/** A list of comments associated with the gist */
	comments: ModelTypes["GistCommentConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The gist description. */
	description?: string | undefined,
	/** The files in this gist. */
	files?: Array<ModelTypes["GistFile"] | undefined> | undefined,
	/** A list of forks associated with the gist */
	forks: ModelTypes["GistConnection"],
	id: string,
	/** Identifies if the gist is a fork. */
	isFork: boolean,
	/** Whether the gist is public or not. */
	isPublic: boolean,
	/** The gist name. */
	name: string,
	/** The gist owner. */
	owner?: ModelTypes["RepositoryOwner"] | undefined,
	/** Identifies when the gist was last pushed to. */
	pushedAt?: ModelTypes["DateTime"] | undefined,
	/** The HTML path to this resource. */
	resourcePath: ModelTypes["URI"],
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount: number,
	/** A list of users who have starred this starrable. */
	stargazers: ModelTypes["StargazerConnection"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this Gist. */
	url: ModelTypes["URI"],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred: boolean
};
	/** Represents a comment on an Gist. */
["GistComment"]: {
		/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the gist. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** Identifies the comment body. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	/** The associated gist. */
	gist: ModelTypes["Gist"],
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for GistComment. */
["GistCommentConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["GistCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["GistComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["GistCommentEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["GistComment"] | undefined
};
	/** The connection type for Gist. */
["GistConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["GistEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Gist"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["GistEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Gist"] | undefined
};
	/** A file in a gist. */
["GistFile"]: {
		/** The file name encoded to remove characters that are invalid in URL paths. */
	encodedName?: string | undefined,
	/** The gist file encoding. */
	encoding?: string | undefined,
	/** The file extension from the file name. */
	extension?: string | undefined,
	/** Indicates if this file is an image. */
	isImage: boolean,
	/** Whether the file's contents were truncated. */
	isTruncated: boolean,
	/** The programming language this file is written in. */
	language?: ModelTypes["Language"] | undefined,
	/** The gist file name. */
	name?: string | undefined,
	/** The gist file size in bytes. */
	size?: number | undefined,
	/** UTF8 text data or null if the file is binary */
	text?: string | undefined
};
	/** Ordering options for gist connections */
["GistOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order repositories by. */
	field: ModelTypes["GistOrderField"]
};
	["GistOrderField"]:GistOrderField;
	["GistPrivacy"]:GistPrivacy;
	/** Represents an actor in a Git commit (ie. an author or committer). */
["GitActor"]: {
		/** A URL pointing to the author's public avatar. */
	avatarUrl: ModelTypes["URI"],
	/** The timestamp of the Git action (authoring or committing). */
	date?: ModelTypes["GitTimestamp"] | undefined,
	/** The email in the Git commit. */
	email?: string | undefined,
	/** The name in the Git commit. */
	name?: string | undefined,
	/** The GitHub user corresponding to the email field. Null if no such user exists. */
	user?: ModelTypes["User"] | undefined
};
	/** The connection type for GitActor. */
["GitActorConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["GitActorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["GitActor"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["GitActorEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["GitActor"] | undefined
};
	/** Represents information about the GitHub instance. */
["GitHubMetadata"]: {
		/** Returns a String that's a SHA of `github-services` */
	gitHubServicesSha: ModelTypes["GitObjectID"],
	/** IP addresses that users connect to for git operations */
	gitIpAddresses?: Array<string> | undefined,
	/** IP addresses that service hooks are sent from */
	hookIpAddresses?: Array<string> | undefined,
	/** IP addresses that the importer connects from */
	importerIpAddresses?: Array<string> | undefined,
	/** Whether or not users are verified */
	isPasswordAuthenticationVerifiable: boolean,
	/** IP addresses for GitHub Pages' A records */
	pagesIpAddresses?: Array<string> | undefined
};
	/** Represents a Git object. */
["GitObject"]: ModelTypes["Blob"] | ModelTypes["Commit"] | ModelTypes["Tag"] | ModelTypes["Tree"];
	/** A Git object ID. */
["GitObjectID"]:any;
	/** A fully qualified reference name (e.g. `refs/heads/master`). */
["GitRefname"]:any;
	/** Git SSH string */
["GitSSHRemote"]:any;
	/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
["GitSignature"]: ModelTypes["GpgSignature"] | ModelTypes["SmimeSignature"] | ModelTypes["SshSignature"] | ModelTypes["UnknownSignature"];
	["GitSignatureState"]:GitSignatureState;
	/** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
["GitTimestamp"]:any;
	/** Represents a GPG signature on a Commit or Tag. */
["GpgSignature"]: {
		/** Email used to sign this object. */
	email: string,
	/** True if the signature is valid and verified by GitHub. */
	isValid: boolean,
	/** Hex-encoded ID of the key that signed this object. */
	keyId?: string | undefined,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload: string,
	/** ASCII-armored signature header from object. */
	signature: string,
	/** GitHub user corresponding to the email signing this commit. */
	signer?: ModelTypes["User"] | undefined,
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state: ModelTypes["GitSignatureState"],
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub: boolean
};
	/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
["GrantEnterpriseOrganizationsMigratorRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
	enterpriseId: string,
	/** The login of the user to grant the migrator role */
	login: string
};
	/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
["GrantEnterpriseOrganizationsMigratorRolePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organizations that had the migrator role applied to for the given user. */
	organizations?: ModelTypes["OrganizationConnection"] | undefined
};
	/** Autogenerated input type of GrantMigratorRole */
["GrantMigratorRoleInput"]: {
	/** The user login or Team slug to grant the migrator role. */
	actor: string,
	/** Specifies the type of the actor, can be either USER or TEAM. */
	actorType: ModelTypes["ActorType"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization that the user/team belongs to. */
	organizationId: string
};
	/** Autogenerated return type of GrantMigratorRole */
["GrantMigratorRolePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Did the operation succeed? */
	success?: boolean | undefined
};
	/** A string containing HTML code. */
["HTML"]:any;
	/** Represents a 'head_ref_deleted' event on a given pull request. */
["HeadRefDeletedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the Ref associated with the `head_ref_deleted` event. */
	headRef?: ModelTypes["Ref"] | undefined,
	/** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
	headRefName: string,
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"]
};
	/** Represents a 'head_ref_force_pushed' event on a given pull request. */
["HeadRefForcePushedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
	afterCommit?: ModelTypes["Commit"] | undefined,
	/** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
	beforeCommit?: ModelTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"],
	/** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
	ref?: ModelTypes["Ref"] | undefined
};
	/** Represents a 'head_ref_restored' event on a given pull request. */
["HeadRefRestoredEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"]
};
	/** Detail needed to display a hovercard for a user */
["Hovercard"]: {
		/** Each of the contexts for this hovercard */
	contexts: Array<ModelTypes["HovercardContext"]>
};
	/** An individual line of a hovercard */
["HovercardContext"]: ModelTypes["GenericHovercardContext"] | ModelTypes["OrganizationTeamsHovercardContext"] | ModelTypes["OrganizationsHovercardContext"] | ModelTypes["ReviewStatusHovercardContext"] | ModelTypes["ViewerHovercardContext"];
	["IdentityProviderConfigurationState"]:IdentityProviderConfigurationState;
	/** Autogenerated input type of ImportProject */
["ImportProjectInput"]: {
	/** The description of Project. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A list of columns containing issues and pull requests. */
	columnImports: Array<ModelTypes["ProjectColumnImport"]>,
	/** The name of Project. */
	name: string,
	/** The name of the Organization or User to create the Project under. */
	ownerName: string,
	/** Whether the Project is public or not. */
	public?: boolean | undefined
};
	/** Autogenerated return type of ImportProject */
["ImportProjectPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new Project! */
	project?: ModelTypes["Project"] | undefined
};
	/** Autogenerated input type of InviteEnterpriseAdmin */
["InviteEnterpriseAdminInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The email of the person to invite as an administrator. */
	email?: string | undefined,
	/** The ID of the enterprise to which you want to invite an administrator. */
	enterpriseId: string,
	/** The login of a user to invite as an administrator. */
	invitee?: string | undefined,
	/** The role of the administrator. */
	role?: ModelTypes["EnterpriseAdministratorRole"] | undefined
};
	/** Autogenerated return type of InviteEnterpriseAdmin */
["InviteEnterpriseAdminPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The created enterprise administrator invitation. */
	invitation?: ModelTypes["EnterpriseAdministratorInvitation"] | undefined
};
	["IpAllowListEnabledSettingValue"]:IpAllowListEnabledSettingValue;
	/** An IP address or range of addresses that is allowed to access an owner's resources. */
["IpAllowListEntry"]: {
		/** A single IP address or range of IP addresses in CIDR notation. */
	allowListValue: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Whether the entry is currently active. */
	isActive: boolean,
	/** The name of the IP allow list entry. */
	name?: string | undefined,
	/** The owner of the IP allow list entry. */
	owner: ModelTypes["IpAllowListOwner"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for IpAllowListEntry. */
["IpAllowListEntryConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["IpAllowListEntryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["IpAllowListEntry"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["IpAllowListEntryEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["IpAllowListEntry"] | undefined
};
	/** Ordering options for IP allow list entry connections. */
["IpAllowListEntryOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order IP allow list entries by. */
	field: ModelTypes["IpAllowListEntryOrderField"]
};
	["IpAllowListEntryOrderField"]:IpAllowListEntryOrderField;
	["IpAllowListForInstalledAppsEnabledSettingValue"]:IpAllowListForInstalledAppsEnabledSettingValue;
	/** Types that can own an IP allow list. */
["IpAllowListOwner"]:ModelTypes["App"] | ModelTypes["Enterprise"] | ModelTypes["Organization"];
	/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
["Issue"]: {
		/** Reason that the conversation was locked. */
	activeLockReason?: ModelTypes["LockReason"] | undefined,
	/** A list of Users assigned to this object. */
	assignees: ModelTypes["UserConnection"],
	/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** Identifies the body of the issue. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The http path for this issue body */
	bodyResourcePath: ModelTypes["URI"],
	/** Identifies the body of the issue rendered to text. */
	bodyText: string,
	/** The http URL for this issue body */
	bodyUrl: ModelTypes["URI"],
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of comments associated with the Issue. */
	comments: ModelTypes["IssueCommentConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	/** The hovercard information for this issue */
	hovercard: ModelTypes["Hovercard"],
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Indicates whether or not this issue is currently pinned to the repository issues list */
	isPinned?: boolean | undefined,
	/** Is this issue read by the viewer */
	isReadByViewer?: boolean | undefined,
	/** A list of labels associated with the object. */
	labels?: ModelTypes["LabelConnection"] | undefined,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** Branches linked to this issue. */
	linkedBranches: ModelTypes["LinkedBranchConnection"],
	/** `true` if the object is locked */
	locked: boolean,
	/** Identifies the milestone associated with the issue. */
	milestone?: ModelTypes["Milestone"] | undefined,
	/** Identifies the issue number. */
	number: number,
	/** A list of Users that are participating in the Issue conversation. */
	participants: ModelTypes["UserConnection"],
	/** List of project cards associated with this issue. */
	projectCards: ModelTypes["ProjectCardConnection"],
	/** List of project items associated with this issue. */
	projectItems: ModelTypes["ProjectV2ItemConnection"],
	/** Find a project by project (beta) number. */
	projectNext?: ModelTypes["ProjectNext"] | undefined,
	/** List of project (beta) items associated with this issue. */
	projectNextItems: ModelTypes["ProjectNextItemConnection"],
	/** Find a project by number. */
	projectV2?: ModelTypes["ProjectV2"] | undefined,
	/** A list of projects (beta) under the owner. */
	projectsNext: ModelTypes["ProjectNextConnection"],
	/** A list of projects under the owner. */
	projectsV2: ModelTypes["ProjectV2Connection"],
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this issue */
	resourcePath: ModelTypes["URI"],
	/** Identifies the state of the issue. */
	state: ModelTypes["IssueState"],
	/** Identifies the reason for the issue state. */
	stateReason?: ModelTypes["IssueStateReason"] | undefined,
	/** A list of events, comments, commits, etc. associated with the issue. */
	timeline: ModelTypes["IssueTimelineConnection"],
	/** A list of events, comments, commits, etc. associated with the issue. */
	timelineItems: ModelTypes["IssueTimelineItemsConnection"],
	/** Identifies the issue title. */
	title: string,
	/** Identifies the issue title rendered to HTML. */
	titleHTML: string,
	/** A list of issues that track this issue */
	trackedInIssues: ModelTypes["IssueConnection"],
	/** A list of issues tracked inside the current issue */
	trackedIssues: ModelTypes["IssueConnection"],
	/** The number of tracked issues for this issue */
	trackedIssuesCount: number,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this issue */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: ModelTypes["SubscriptionState"] | undefined
};
	["IssueClosedStateReason"]:IssueClosedStateReason;
	/** Represents a comment on an Issue. */
["IssueComment"]: {
		/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** Identifies the issue associated with the comment. */
	issue: ModelTypes["Issue"],
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** Returns the pull request associated with the comment, if this comment was made on a
pull request. */
	pullRequest?: ModelTypes["PullRequest"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this issue comment */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this issue comment */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for IssueComment. */
["IssueCommentConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["IssueCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["IssueComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["IssueCommentEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["IssueComment"] | undefined
};
	/** Ways in which lists of issue comments can be ordered upon return. */
["IssueCommentOrder"]: {
	/** The direction in which to order issue comments by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order issue comments by. */
	field: ModelTypes["IssueCommentOrderField"]
};
	["IssueCommentOrderField"]:IssueCommentOrderField;
	/** The connection type for Issue. */
["IssueConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["IssueEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Issue"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** This aggregates issues opened by a user within one repository. */
["IssueContributionsByRepository"]: {
		/** The issue contributions. */
	contributions: ModelTypes["CreatedIssueContributionConnection"],
	/** The repository in which the issues were opened. */
	repository: ModelTypes["Repository"]
};
	/** An edge in a connection. */
["IssueEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Issue"] | undefined
};
	/** Ways in which to filter lists of issues. */
["IssueFilters"]: {
	/** List issues assigned to given name. Pass in `null` for issues with no assigned
user, and `*` for issues assigned to any user. */
	assignee?: string | undefined,
	/** List issues created by given name. */
	createdBy?: string | undefined,
	/** List issues where the list of label names exist on the issue. */
	labels?: Array<string> | undefined,
	/** List issues where the given name is mentioned in the issue. */
	mentioned?: string | undefined,
	/** List issues by given milestone argument. If an string representation of an
integer is passed, it should refer to a milestone by its database ID. Pass in
`null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
	milestone?: string | undefined,
	/** List issues by given milestone argument. If an string representation of an
integer is passed, it should refer to a milestone by its number field. Pass in
`null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
	milestoneNumber?: string | undefined,
	/** List issues that have been updated at or after the given date. */
	since?: ModelTypes["DateTime"] | undefined,
	/** List issues filtered by the list of states given. */
	states?: Array<ModelTypes["IssueState"]> | undefined,
	/** List issues subscribed to by viewer. */
	viewerSubscribed?: boolean | undefined
};
	/** Used for return value of Repository.issueOrPullRequest. */
["IssueOrPullRequest"]:ModelTypes["Issue"] | ModelTypes["PullRequest"];
	/** Ways in which lists of issues can be ordered upon return. */
["IssueOrder"]: {
	/** The direction in which to order issues by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order issues by. */
	field: ModelTypes["IssueOrderField"]
};
	["IssueOrderField"]:IssueOrderField;
	["IssueState"]:IssueState;
	["IssueStateReason"]:IssueStateReason;
	/** A repository issue template. */
["IssueTemplate"]: {
		/** The template purpose. */
	about?: string | undefined,
	/** The suggested issue body. */
	body?: string | undefined,
	/** The template filename. */
	filename: string,
	/** The template name. */
	name: string,
	/** The suggested issue title. */
	title?: string | undefined
};
	/** The connection type for IssueTimelineItem. */
["IssueTimelineConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["IssueTimelineItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["IssueTimelineItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An item in an issue timeline */
["IssueTimelineItem"]:ModelTypes["AssignedEvent"] | ModelTypes["ClosedEvent"] | ModelTypes["Commit"] | ModelTypes["CrossReferencedEvent"] | ModelTypes["DemilestonedEvent"] | ModelTypes["IssueComment"] | ModelTypes["LabeledEvent"] | ModelTypes["LockedEvent"] | ModelTypes["MilestonedEvent"] | ModelTypes["ReferencedEvent"] | ModelTypes["RenamedTitleEvent"] | ModelTypes["ReopenedEvent"] | ModelTypes["SubscribedEvent"] | ModelTypes["TransferredEvent"] | ModelTypes["UnassignedEvent"] | ModelTypes["UnlabeledEvent"] | ModelTypes["UnlockedEvent"] | ModelTypes["UnsubscribedEvent"] | ModelTypes["UserBlockedEvent"];
	/** An edge in a connection. */
["IssueTimelineItemEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["IssueTimelineItem"] | undefined
};
	/** An item in an issue timeline */
["IssueTimelineItems"]:ModelTypes["AddedToProjectEvent"] | ModelTypes["AssignedEvent"] | ModelTypes["ClosedEvent"] | ModelTypes["CommentDeletedEvent"] | ModelTypes["ConnectedEvent"] | ModelTypes["ConvertedNoteToIssueEvent"] | ModelTypes["ConvertedToDiscussionEvent"] | ModelTypes["CrossReferencedEvent"] | ModelTypes["DemilestonedEvent"] | ModelTypes["DisconnectedEvent"] | ModelTypes["IssueComment"] | ModelTypes["LabeledEvent"] | ModelTypes["LockedEvent"] | ModelTypes["MarkedAsDuplicateEvent"] | ModelTypes["MentionedEvent"] | ModelTypes["MilestonedEvent"] | ModelTypes["MovedColumnsInProjectEvent"] | ModelTypes["PinnedEvent"] | ModelTypes["ReferencedEvent"] | ModelTypes["RemovedFromProjectEvent"] | ModelTypes["RenamedTitleEvent"] | ModelTypes["ReopenedEvent"] | ModelTypes["SubscribedEvent"] | ModelTypes["TransferredEvent"] | ModelTypes["UnassignedEvent"] | ModelTypes["UnlabeledEvent"] | ModelTypes["UnlockedEvent"] | ModelTypes["UnmarkedAsDuplicateEvent"] | ModelTypes["UnpinnedEvent"] | ModelTypes["UnsubscribedEvent"] | ModelTypes["UserBlockedEvent"];
	/** The connection type for IssueTimelineItems. */
["IssueTimelineItemsConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["IssueTimelineItemsEdge"] | undefined> | undefined,
	/** Identifies the count of items after applying `before` and `after` filters. */
	filteredCount: number,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["IssueTimelineItems"] | undefined> | undefined,
	/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
	pageCount: number,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** Identifies the date and time when the timeline was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** An edge in a connection. */
["IssueTimelineItemsEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["IssueTimelineItems"] | undefined
};
	["IssueTimelineItemsItemType"]:IssueTimelineItemsItemType;
	/** Represents a user signing up for a GitHub account. */
["JoinedGitHubContribution"]: {
		/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: ModelTypes["DateTime"],
	/** The HTTP path for this contribution. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: ModelTypes["URI"],
	/** The user who made this contribution. */
	user: ModelTypes["User"]
};
	/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
["Label"]: {
		/** Identifies the label color. */
	color: string,
	/** Identifies the date and time when the label was created. */
	createdAt?: ModelTypes["DateTime"] | undefined,
	/** A brief description of this label. */
	description?: string | undefined,
	id: string,
	/** Indicates whether or not this is a default label. */
	isDefault: boolean,
	/** A list of issues associated with this label. */
	issues: ModelTypes["IssueConnection"],
	/** Identifies the label name. */
	name: string,
	/** A list of pull requests associated with this label. */
	pullRequests: ModelTypes["PullRequestConnection"],
	/** The repository associated with this label. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this label. */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the label was last updated. */
	updatedAt?: ModelTypes["DateTime"] | undefined,
	/** The HTTP URL for this label. */
	url: ModelTypes["URI"]
};
	/** The connection type for Label. */
["LabelConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["LabelEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Label"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["LabelEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Label"] | undefined
};
	/** Ways in which lists of labels can be ordered upon return. */
["LabelOrder"]: {
	/** The direction in which to order labels by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order labels by. */
	field: ModelTypes["LabelOrderField"]
};
	["LabelOrderField"]:LabelOrderField;
	/** An object that can have labels assigned to it. */
["Labelable"]: ModelTypes["Discussion"] | ModelTypes["Issue"] | ModelTypes["PullRequest"];
	/** Represents a 'labeled' event on a given issue or pull request. */
["LabeledEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Identifies the label associated with the 'labeled' event. */
	label: ModelTypes["Label"],
	/** Identifies the `Labelable` associated with the event. */
	labelable: ModelTypes["Labelable"]
};
	/** Represents a given language found in repositories. */
["Language"]: {
		/** The color defined for the current language. */
	color?: string | undefined,
	id: string,
	/** The name of the current language. */
	name: string
};
	/** A list of languages associated with the parent. */
["LanguageConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["LanguageEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Language"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** The total size in bytes of files written in that language. */
	totalSize: number
};
	/** Represents the language of a repository. */
["LanguageEdge"]: {
		cursor: string,
	node: ModelTypes["Language"],
	/** The number of bytes of code written in the language. */
	size: number
};
	/** Ordering options for language connections. */
["LanguageOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order languages by. */
	field: ModelTypes["LanguageOrderField"]
};
	["LanguageOrderField"]:LanguageOrderField;
	/** A repository's open source license */
["License"]: {
		/** The full text of the license */
	body: string,
	/** The conditions set by the license */
	conditions: Array<ModelTypes["LicenseRule"] | undefined>,
	/** A human-readable description of the license */
	description?: string | undefined,
	/** Whether the license should be featured */
	featured: boolean,
	/** Whether the license should be displayed in license pickers */
	hidden: boolean,
	id: string,
	/** Instructions on how to implement the license */
	implementation?: string | undefined,
	/** The lowercased SPDX ID of the license */
	key: string,
	/** The limitations set by the license */
	limitations: Array<ModelTypes["LicenseRule"] | undefined>,
	/** The license full name specified by <https://spdx.org/licenses> */
	name: string,
	/** Customary short name if applicable (e.g, GPLv3) */
	nickname?: string | undefined,
	/** The permissions set by the license */
	permissions: Array<ModelTypes["LicenseRule"] | undefined>,
	/** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
	pseudoLicense: boolean,
	/** Short identifier specified by <https://spdx.org/licenses> */
	spdxId?: string | undefined,
	/** URL to the license on <https://choosealicense.com> */
	url?: ModelTypes["URI"] | undefined
};
	/** Describes a License's conditions, permissions, and limitations */
["LicenseRule"]: {
		/** A description of the rule */
	description: string,
	/** The machine-readable rule key */
	key: string,
	/** The human-readable rule label */
	label: string
};
	/** Autogenerated input type of LinkRepositoryToProject */
["LinkRepositoryToProjectInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Project to link to a Repository */
	projectId: string,
	/** The ID of the Repository to link to a Project. */
	repositoryId: string
};
	/** Autogenerated return type of LinkRepositoryToProject */
["LinkRepositoryToProjectPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The linked Project. */
	project?: ModelTypes["Project"] | undefined,
	/** The linked Repository. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** A branch linked to an issue. */
["LinkedBranch"]: {
		id: string,
	/** The branch's ref. */
	ref?: ModelTypes["Ref"] | undefined
};
	/** The connection type for LinkedBranch. */
["LinkedBranchConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["LinkedBranchEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["LinkedBranch"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["LinkedBranchEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["LinkedBranch"] | undefined
};
	/** Autogenerated input type of LockLockable */
["LockLockableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A reason for why the item will be locked. */
	lockReason?: ModelTypes["LockReason"] | undefined,
	/** ID of the item to be locked. */
	lockableId: string
};
	/** Autogenerated return type of LockLockable */
["LockLockablePayload"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item that was locked. */
	lockedRecord?: ModelTypes["Lockable"] | undefined
};
	["LockReason"]:LockReason;
	/** An object that can be locked. */
["Lockable"]: ModelTypes["Discussion"] | ModelTypes["Issue"] | ModelTypes["PullRequest"];
	/** Represents a 'locked' event on a given issue or pull request. */
["LockedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Reason that the conversation was locked (optional). */
	lockReason?: ModelTypes["LockReason"] | undefined,
	/** Object that was locked. */
	lockable: ModelTypes["Lockable"]
};
	/** A placeholder user for attribution of imported data on GitHub. */
["Mannequin"]: {
		/** A URL pointing to the GitHub App's public avatar. */
	avatarUrl: ModelTypes["URI"],
	/** The user that has claimed the data attributed to this mannequin. */
	claimant?: ModelTypes["User"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The mannequin's email on the source instance. */
	email?: string | undefined,
	id: string,
	/** The username of the actor. */
	login: string,
	/** The HTML path to this resource. */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The URL to this resource. */
	url: ModelTypes["URI"]
};
	/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
["MarkDiscussionCommentAsAnswerInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion comment to mark as an answer. */
	id: string
};
	/** Autogenerated return type of MarkDiscussionCommentAsAnswer */
["MarkDiscussionCommentAsAnswerPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion that includes the chosen comment. */
	discussion?: ModelTypes["Discussion"] | undefined
};
	/** Autogenerated input type of MarkFileAsViewed */
["MarkFileAsViewedInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The path of the file to mark as viewed */
	path: string,
	/** The Node ID of the pull request. */
	pullRequestId: string
};
	/** Autogenerated return type of MarkFileAsViewed */
["MarkFileAsViewedPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of MarkPullRequestReadyForReview */
["MarkPullRequestReadyForReviewInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to be marked as ready for review. */
	pullRequestId: string
};
	/** Autogenerated return type of MarkPullRequestReadyForReview */
["MarkPullRequestReadyForReviewPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that is ready for review. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
["MarkedAsDuplicateEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** The authoritative issue or pull request which has been duplicated by another. */
	canonical?: ModelTypes["IssueOrPullRequest"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The issue or pull request which has been marked as a duplicate of another. */
	duplicate?: ModelTypes["IssueOrPullRequest"] | undefined,
	id: string,
	/** Canonical and duplicate belong to different repositories. */
	isCrossRepository: boolean
};
	/** A public description of a Marketplace category. */
["MarketplaceCategory"]: {
		/** The category's description. */
	description?: string | undefined,
	/** The technical description of how apps listed in this category work with GitHub. */
	howItWorks?: string | undefined,
	id: string,
	/** The category's name. */
	name: string,
	/** How many Marketplace listings have this as their primary category. */
	primaryListingCount: number,
	/** The HTTP path for this Marketplace category. */
	resourcePath: ModelTypes["URI"],
	/** How many Marketplace listings have this as their secondary category. */
	secondaryListingCount: number,
	/** The short name of the category used in its URL. */
	slug: string,
	/** The HTTP URL for this Marketplace category. */
	url: ModelTypes["URI"]
};
	/** A listing in the GitHub integration marketplace. */
["MarketplaceListing"]: {
		/** The GitHub App this listing represents. */
	app?: ModelTypes["App"] | undefined,
	/** URL to the listing owner's company site. */
	companyUrl?: ModelTypes["URI"] | undefined,
	/** The HTTP path for configuring access to the listing's integration or OAuth app */
	configurationResourcePath: ModelTypes["URI"],
	/** The HTTP URL for configuring access to the listing's integration or OAuth app */
	configurationUrl: ModelTypes["URI"],
	/** URL to the listing's documentation. */
	documentationUrl?: ModelTypes["URI"] | undefined,
	/** The listing's detailed description. */
	extendedDescription?: string | undefined,
	/** The listing's detailed description rendered to HTML. */
	extendedDescriptionHTML: ModelTypes["HTML"],
	/** The listing's introductory description. */
	fullDescription: string,
	/** The listing's introductory description rendered to HTML. */
	fullDescriptionHTML: ModelTypes["HTML"],
	/** Does this listing have any plans with a free trial? */
	hasPublishedFreeTrialPlans: boolean,
	/** Does this listing have a terms of service link? */
	hasTermsOfService: boolean,
	/** Whether the creator of the app is a verified org */
	hasVerifiedOwner: boolean,
	/** A technical description of how this app works with GitHub. */
	howItWorks?: string | undefined,
	/** The listing's technical description rendered to HTML. */
	howItWorksHTML: ModelTypes["HTML"],
	id: string,
	/** URL to install the product to the viewer's account or organization. */
	installationUrl?: ModelTypes["URI"] | undefined,
	/** Whether this listing's app has been installed for the current viewer */
	installedForViewer: boolean,
	/** Whether this listing has been removed from the Marketplace. */
	isArchived: boolean,
	/** Whether this listing is still an editable draft that has not been submitted
for review and is not publicly visible in the Marketplace. */
	isDraft: boolean,
	/** Whether the product this listing represents is available as part of a paid plan. */
	isPaid: boolean,
	/** Whether this listing has been approved for display in the Marketplace. */
	isPublic: boolean,
	/** Whether this listing has been rejected by GitHub for display in the Marketplace. */
	isRejected: boolean,
	/** Whether this listing has been approved for unverified display in the Marketplace. */
	isUnverified: boolean,
	/** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
	isUnverifiedPending: boolean,
	/** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
	isVerificationPendingFromDraft: boolean,
	/** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
	isVerificationPendingFromUnverified: boolean,
	/** Whether this listing has been approved for verified display in the Marketplace. */
	isVerified: boolean,
	/** The hex color code, without the leading '#', for the logo background. */
	logoBackgroundColor: string,
	/** URL for the listing's logo image. */
	logoUrl?: ModelTypes["URI"] | undefined,
	/** The listing's full name. */
	name: string,
	/** The listing's very short description without a trailing period or ampersands. */
	normalizedShortDescription: string,
	/** URL to the listing's detailed pricing. */
	pricingUrl?: ModelTypes["URI"] | undefined,
	/** The category that best describes the listing. */
	primaryCategory: ModelTypes["MarketplaceCategory"],
	/** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
	privacyPolicyUrl: ModelTypes["URI"],
	/** The HTTP path for the Marketplace listing. */
	resourcePath: ModelTypes["URI"],
	/** The URLs for the listing's screenshots. */
	screenshotUrls: Array<string | undefined>,
	/** An alternate category that describes the listing. */
	secondaryCategory?: ModelTypes["MarketplaceCategory"] | undefined,
	/** The listing's very short description. */
	shortDescription: string,
	/** The short name of the listing used in its URL. */
	slug: string,
	/** URL to the listing's status page. */
	statusUrl?: ModelTypes["URI"] | undefined,
	/** An email address for support for this listing's app. */
	supportEmail?: string | undefined,
	/** Either a URL or an email address for support for this listing's app, may
return an empty string for listings that do not require a support URL. */
	supportUrl: ModelTypes["URI"],
	/** URL to the listing's terms of service. */
	termsOfServiceUrl?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the Marketplace listing. */
	url: ModelTypes["URI"],
	/** Can the current viewer add plans for this Marketplace listing. */
	viewerCanAddPlans: boolean,
	/** Can the current viewer approve this Marketplace listing. */
	viewerCanApprove: boolean,
	/** Can the current viewer delist this Marketplace listing. */
	viewerCanDelist: boolean,
	/** Can the current viewer edit this Marketplace listing. */
	viewerCanEdit: boolean,
	/** Can the current viewer edit the primary and secondary category of this
Marketplace listing. */
	viewerCanEditCategories: boolean,
	/** Can the current viewer edit the plans for this Marketplace listing. */
	viewerCanEditPlans: boolean,
	/** Can the current viewer return this Marketplace listing to draft state
so it becomes editable again. */
	viewerCanRedraft: boolean,
	/** Can the current viewer reject this Marketplace listing by returning it to
an editable draft state or rejecting it entirely. */
	viewerCanReject: boolean,
	/** Can the current viewer request this listing be reviewed for display in
the Marketplace as verified. */
	viewerCanRequestApproval: boolean,
	/** Indicates whether the current user has an active subscription to this Marketplace listing. */
	viewerHasPurchased: boolean,
	/** Indicates if the current user has purchased a subscription to this Marketplace listing
for all of the organizations the user owns. */
	viewerHasPurchasedForAllOrganizations: boolean,
	/** Does the current viewer role allow them to administer this Marketplace listing. */
	viewerIsListingAdmin: boolean
};
	/** Look up Marketplace Listings */
["MarketplaceListingConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["MarketplaceListingEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["MarketplaceListing"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["MarketplaceListingEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["MarketplaceListing"] | undefined
};
	/** Entities that have members who can set status messages. */
["MemberStatusable"]: ModelTypes["Organization"] | ModelTypes["Team"];
	/** Audit log entry for a members_can_delete_repos.clear event. */
["MembersCanDeleteReposClearAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: ModelTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a members_can_delete_repos.disable event. */
["MembersCanDeleteReposDisableAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: ModelTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a members_can_delete_repos.enable event. */
["MembersCanDeleteReposEnableAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: ModelTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Represents a 'mentioned' event on a given issue or pull request. */
["MentionedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string
};
	/** Autogenerated input type of MergeBranch */
["MergeBranchInput"]: {
	/** The email address to associate with this commit. */
	authorEmail?: string | undefined,
	/** The name of the base branch that the provided head will be merged into. */
	base: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Message to use for the merge commit. If omitted, a default will be used. */
	commitMessage?: string | undefined,
	/** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
	head: string,
	/** The Node ID of the Repository containing the base branch that will be modified. */
	repositoryId: string
};
	/** Autogenerated return type of MergeBranch */
["MergeBranchPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The resulting merge Commit. */
	mergeCommit?: ModelTypes["Commit"] | undefined
};
	["MergeCommitMessage"]:MergeCommitMessage;
	["MergeCommitTitle"]:MergeCommitTitle;
	/** Autogenerated input type of MergePullRequest */
["MergePullRequestInput"]: {
	/** The email address to associate with this merge. */
	authorEmail?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Commit body to use for the merge commit; if omitted, a default message will be used */
	commitBody?: string | undefined,
	/** Commit headline to use for the merge commit; if omitted, a default message will be used. */
	commitHeadline?: string | undefined,
	/** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
	expectedHeadOid?: ModelTypes["GitObjectID"] | undefined,
	/** The merge method to use. If omitted, defaults to 'MERGE' */
	mergeMethod?: ModelTypes["PullRequestMergeMethod"] | undefined,
	/** ID of the pull request to be merged. */
	pullRequestId: string
};
	/** Autogenerated return type of MergePullRequest */
["MergePullRequestPayload"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that was merged. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	["MergeStateStatus"]:MergeStateStatus;
	["MergeableState"]:MergeableState;
	/** Represents a 'merged' event on a given pull request. */
["MergedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the commit associated with the `merge` event. */
	commit?: ModelTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Identifies the Ref associated with the `merge` event. */
	mergeRef?: ModelTypes["Ref"] | undefined,
	/** Identifies the name of the Ref associated with the `merge` event. */
	mergeRefName: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"],
	/** The HTTP path for this merged event. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this merged event. */
	url: ModelTypes["URI"]
};
	/** Represents an Octoshift migration. */
["Migration"]: ModelTypes["RepositoryMigration"];
	/** An Octoshift migration source. */
["MigrationSource"]: {
		id: string,
	/** The Octoshift migration source name. */
	name: string,
	/** The Octoshift migration source type. */
	type: ModelTypes["MigrationSourceType"],
	/** The Octoshift migration source URL. */
	url: ModelTypes["URI"]
};
	["MigrationSourceType"]:MigrationSourceType;
	["MigrationState"]:MigrationState;
	/** Represents a Milestone object on a given repository. */
["Milestone"]: {
		/** `true` if the object is closed (definition of closed may depend on type) */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: ModelTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the actor who created the milestone. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the description of the milestone. */
	description?: string | undefined,
	/** Identifies the due date of the milestone. */
	dueOn?: ModelTypes["DateTime"] | undefined,
	id: string,
	/** A list of issues associated with the milestone. */
	issues: ModelTypes["IssueConnection"],
	/** Identifies the number of the milestone. */
	number: number,
	/** Identifies the percentage complete for the milestone */
	progressPercentage: number,
	/** A list of pull requests associated with the milestone. */
	pullRequests: ModelTypes["PullRequestConnection"],
	/** The repository associated with this milestone. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this milestone */
	resourcePath: ModelTypes["URI"],
	/** Identifies the state of the milestone. */
	state: ModelTypes["MilestoneState"],
	/** Identifies the title of the milestone. */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this milestone */
	url: ModelTypes["URI"]
};
	/** The connection type for Milestone. */
["MilestoneConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["MilestoneEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Milestone"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["MilestoneEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Milestone"] | undefined
};
	/** Types that can be inside a Milestone. */
["MilestoneItem"]:ModelTypes["Issue"] | ModelTypes["PullRequest"];
	/** Ordering options for milestone connections. */
["MilestoneOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order milestones by. */
	field: ModelTypes["MilestoneOrderField"]
};
	["MilestoneOrderField"]:MilestoneOrderField;
	["MilestoneState"]:MilestoneState;
	/** Represents a 'milestoned' event on a given issue or pull request. */
["MilestonedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Identifies the milestone title associated with the 'milestoned' event. */
	milestoneTitle: string,
	/** Object referenced by event. */
	subject: ModelTypes["MilestoneItem"]
};
	/** Entities that can be minimized. */
["Minimizable"]: ModelTypes["CommitComment"] | ModelTypes["DiscussionComment"] | ModelTypes["GistComment"] | ModelTypes["IssueComment"] | ModelTypes["PullRequestReviewComment"];
	/** Autogenerated input type of MinimizeComment */
["MinimizeCommentInput"]: {
	/** The classification of comment */
	classifier: ModelTypes["ReportedContentClassifiers"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of MinimizeComment */
["MinimizeCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The comment that was minimized. */
	minimizedComment?: ModelTypes["Minimizable"] | undefined
};
	/** Autogenerated input type of MoveProjectCard */
["MoveProjectCardInput"]: {
	/** Place the new card after the card with this id. Pass null to place it at the top. */
	afterCardId?: string | undefined,
	/** The id of the card to move. */
	cardId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the column to move it into. */
	columnId: string
};
	/** Autogenerated return type of MoveProjectCard */
["MoveProjectCardPayload"]: {
		/** The new edge of the moved card. */
	cardEdge?: ModelTypes["ProjectCardEdge"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of MoveProjectColumn */
["MoveProjectColumnInput"]: {
	/** Place the new column after the column with this id. Pass null to place it at the front. */
	afterColumnId?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the column to move. */
	columnId: string
};
	/** Autogenerated return type of MoveProjectColumn */
["MoveProjectColumnPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new edge of the moved column. */
	columnEdge?: ModelTypes["ProjectColumnEdge"] | undefined
};
	/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
["MovedColumnsInProjectEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Column name the issue or pull request was moved from. */
	previousProjectColumnName: string,
	/** Project referenced by event. */
	project?: ModelTypes["Project"] | undefined,
	/** Project card referenced by this project event. */
	projectCard?: ModelTypes["ProjectCard"] | undefined,
	/** Column name the issue or pull request was moved to. */
	projectColumnName: string
};
	/** The root query for implementing GraphQL mutations. */
["Mutation"]: {
		/** Clear all of a customer's queued migrations */
	abortQueuedMigrations?: ModelTypes["AbortQueuedMigrationsPayload"] | undefined,
	/** Accepts a pending invitation for a user to become an administrator of an enterprise. */
	acceptEnterpriseAdministratorInvitation?: ModelTypes["AcceptEnterpriseAdministratorInvitationPayload"] | undefined,
	/** Applies a suggested topic to the repository. */
	acceptTopicSuggestion?: ModelTypes["AcceptTopicSuggestionPayload"] | undefined,
	/** Adds assignees to an assignable object. */
	addAssigneesToAssignable?: ModelTypes["AddAssigneesToAssignablePayload"] | undefined,
	/** Adds a comment to an Issue or Pull Request. */
	addComment?: ModelTypes["AddCommentPayload"] | undefined,
	/** Adds a comment to a Discussion, possibly as a reply to another comment. */
	addDiscussionComment?: ModelTypes["AddDiscussionCommentPayload"] | undefined,
	/** Vote for an option in a discussion poll. */
	addDiscussionPollVote?: ModelTypes["AddDiscussionPollVotePayload"] | undefined,
	/** Adds a support entitlement to an enterprise member. */
	addEnterpriseSupportEntitlement?: ModelTypes["AddEnterpriseSupportEntitlementPayload"] | undefined,
	/** Adds labels to a labelable object. */
	addLabelsToLabelable?: ModelTypes["AddLabelsToLabelablePayload"] | undefined,
	/** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
	addProjectCard?: ModelTypes["AddProjectCardPayload"] | undefined,
	/** Adds a column to a Project. */
	addProjectColumn?: ModelTypes["AddProjectColumnPayload"] | undefined,
	/** Creates a new draft issue and add it to a Project. */
	addProjectDraftIssue?: ModelTypes["AddProjectDraftIssuePayload"] | undefined,
	/** Adds an existing item (Issue or PullRequest) to a Project. */
	addProjectNextItem?: ModelTypes["AddProjectNextItemPayload"] | undefined,
	/** Creates a new draft issue and add it to a Project. */
	addProjectV2DraftIssue?: ModelTypes["AddProjectV2DraftIssuePayload"] | undefined,
	/** Links an existing content instance to a Project. */
	addProjectV2ItemById?: ModelTypes["AddProjectV2ItemByIdPayload"] | undefined,
	/** Adds a review to a Pull Request. */
	addPullRequestReview?: ModelTypes["AddPullRequestReviewPayload"] | undefined,
	/** Adds a comment to a review. */
	addPullRequestReviewComment?: ModelTypes["AddPullRequestReviewCommentPayload"] | undefined,
	/** Adds a new thread to a pending Pull Request Review. */
	addPullRequestReviewThread?: ModelTypes["AddPullRequestReviewThreadPayload"] | undefined,
	/** Adds a reaction to a subject. */
	addReaction?: ModelTypes["AddReactionPayload"] | undefined,
	/** Adds a star to a Starrable. */
	addStar?: ModelTypes["AddStarPayload"] | undefined,
	/** Add an upvote to a discussion or discussion comment. */
	addUpvote?: ModelTypes["AddUpvotePayload"] | undefined,
	/** Adds a verifiable domain to an owning account. */
	addVerifiableDomain?: ModelTypes["AddVerifiableDomainPayload"] | undefined,
	/** Approve all pending deployments under one or more environments */
	approveDeployments?: ModelTypes["ApproveDeploymentsPayload"] | undefined,
	/** Approve a verifiable domain for notification delivery. */
	approveVerifiableDomain?: ModelTypes["ApproveVerifiableDomainPayload"] | undefined,
	/** Marks a repository as archived. */
	archiveRepository?: ModelTypes["ArchiveRepositoryPayload"] | undefined,
	/** Cancels a pending invitation for an administrator to join an enterprise. */
	cancelEnterpriseAdminInvitation?: ModelTypes["CancelEnterpriseAdminInvitationPayload"] | undefined,
	/** Cancel an active sponsorship. */
	cancelSponsorship?: ModelTypes["CancelSponsorshipPayload"] | undefined,
	/** Update your status on GitHub. */
	changeUserStatus?: ModelTypes["ChangeUserStatusPayload"] | undefined,
	/** Clears all labels from a labelable object. */
	clearLabelsFromLabelable?: ModelTypes["ClearLabelsFromLabelablePayload"] | undefined,
	/** This mutation clears the value of a field for an item in a Project. Currently
only text, number, date, assignees, labels, single-select, iteration and
milestone fields are supported. */
	clearProjectV2ItemFieldValue?: ModelTypes["ClearProjectV2ItemFieldValuePayload"] | undefined,
	/** Creates a new project by cloning configuration from an existing project. */
	cloneProject?: ModelTypes["CloneProjectPayload"] | undefined,
	/** Create a new repository with the same files and directory structure as a template repository. */
	cloneTemplateRepository?: ModelTypes["CloneTemplateRepositoryPayload"] | undefined,
	/** Close an issue. */
	closeIssue?: ModelTypes["CloseIssuePayload"] | undefined,
	/** Close a pull request. */
	closePullRequest?: ModelTypes["ClosePullRequestPayload"] | undefined,
	/** Convert a project note card to one associated with a newly created issue. */
	convertProjectCardNoteToIssue?: ModelTypes["ConvertProjectCardNoteToIssuePayload"] | undefined,
	/** Converts a pull request to draft */
	convertPullRequestToDraft?: ModelTypes["ConvertPullRequestToDraftPayload"] | undefined,
	/** Create a new branch protection rule */
	createBranchProtectionRule?: ModelTypes["CreateBranchProtectionRulePayload"] | undefined,
	/** Create a check run. */
	createCheckRun?: ModelTypes["CreateCheckRunPayload"] | undefined,
	/** Create a check suite */
	createCheckSuite?: ModelTypes["CreateCheckSuitePayload"] | undefined,
	/** Appends a commit to the given branch as the authenticated user.

This mutation creates a commit whose parent is the HEAD of the provided
branch and also updates that branch to point to the new commit.
It can be thought of as similar to `git commit`.

### Locating a Branch

Commits are appended to a `branch` of type `Ref`.
This must refer to a git branch (i.e.  the fully qualified path must
begin with `refs/heads/`, although including this prefix is optional.

Callers may specify the `branch` to commit to either by its global node
ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
more details see the documentation for `CommittableBranch`.

### Describing Changes

`fileChanges` are specified as a `FilesChanges` object describing
`FileAdditions` and `FileDeletions`.

Please see the documentation for `FileChanges` for more information on
how to use this argument to describe any set of file changes.

### Authorship

Similar to the web commit interface, this mutation does not support
specifying the author or committer of the commit and will not add
support for this in the future.

A commit created by a successful execution of this mutation will be
authored by the owner of the credential which authenticates the API
request.  The committer will be identical to that of commits authored
using the web interface.

If you need full control over author and committer information, please
use the Git Database REST API instead.

### Commit Signing

Commits made using this mutation are automatically signed by GitHub if
supported and will be marked as verified in the user interface. */
	createCommitOnBranch?: ModelTypes["CreateCommitOnBranchPayload"] | undefined,
	/** Creates a new deployment event. */
	createDeployment?: ModelTypes["CreateDeploymentPayload"] | undefined,
	/** Create a deployment status. */
	createDeploymentStatus?: ModelTypes["CreateDeploymentStatusPayload"] | undefined,
	/** Create a discussion. */
	createDiscussion?: ModelTypes["CreateDiscussionPayload"] | undefined,
	/** Creates an organization as part of an enterprise account. */
	createEnterpriseOrganization?: ModelTypes["CreateEnterpriseOrganizationPayload"] | undefined,
	/** Creates an environment or simply returns it if already exists. */
	createEnvironment?: ModelTypes["CreateEnvironmentPayload"] | undefined,
	/** Creates a new IP allow list entry. */
	createIpAllowListEntry?: ModelTypes["CreateIpAllowListEntryPayload"] | undefined,
	/** Creates a new issue. */
	createIssue?: ModelTypes["CreateIssuePayload"] | undefined,
	/** Creates a new label. */
	createLabel?: ModelTypes["CreateLabelPayload"] | undefined,
	/** Create a branch linked to an issue. */
	createLinkedBranch?: ModelTypes["CreateLinkedBranchPayload"] | undefined,
	/** Creates an Octoshift migration source. */
	createMigrationSource?: ModelTypes["CreateMigrationSourcePayload"] | undefined,
	/** Creates a new project. */
	createProject?: ModelTypes["CreateProjectPayload"] | undefined,
	/** Creates a new project. */
	createProjectV2?: ModelTypes["CreateProjectV2Payload"] | undefined,
	/** Create a new pull request */
	createPullRequest?: ModelTypes["CreatePullRequestPayload"] | undefined,
	/** Create a new Git Ref. */
	createRef?: ModelTypes["CreateRefPayload"] | undefined,
	/** Create a new repository. */
	createRepository?: ModelTypes["CreateRepositoryPayload"] | undefined,
	/** Create a new payment tier for your GitHub Sponsors profile. */
	createSponsorsTier?: ModelTypes["CreateSponsorsTierPayload"] | undefined,
	/** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
	createSponsorship?: ModelTypes["CreateSponsorshipPayload"] | undefined,
	/** Creates a new team discussion. */
	createTeamDiscussion?: ModelTypes["CreateTeamDiscussionPayload"] | undefined,
	/** Creates a new team discussion comment. */
	createTeamDiscussionComment?: ModelTypes["CreateTeamDiscussionCommentPayload"] | undefined,
	/** Rejects a suggested topic for the repository. */
	declineTopicSuggestion?: ModelTypes["DeclineTopicSuggestionPayload"] | undefined,
	/** Delete a branch protection rule */
	deleteBranchProtectionRule?: ModelTypes["DeleteBranchProtectionRulePayload"] | undefined,
	/** Deletes a deployment. */
	deleteDeployment?: ModelTypes["DeleteDeploymentPayload"] | undefined,
	/** Delete a discussion and all of its replies. */
	deleteDiscussion?: ModelTypes["DeleteDiscussionPayload"] | undefined,
	/** Delete a discussion comment. If it has replies, wipe it instead. */
	deleteDiscussionComment?: ModelTypes["DeleteDiscussionCommentPayload"] | undefined,
	/** Deletes an environment */
	deleteEnvironment?: ModelTypes["DeleteEnvironmentPayload"] | undefined,
	/** Deletes an IP allow list entry. */
	deleteIpAllowListEntry?: ModelTypes["DeleteIpAllowListEntryPayload"] | undefined,
	/** Deletes an Issue object. */
	deleteIssue?: ModelTypes["DeleteIssuePayload"] | undefined,
	/** Deletes an IssueComment object. */
	deleteIssueComment?: ModelTypes["DeleteIssueCommentPayload"] | undefined,
	/** Deletes a label. */
	deleteLabel?: ModelTypes["DeleteLabelPayload"] | undefined,
	/** Unlink a branch from an issue. */
	deleteLinkedBranch?: ModelTypes["DeleteLinkedBranchPayload"] | undefined,
	/** Delete a package version. */
	deletePackageVersion?: ModelTypes["DeletePackageVersionPayload"] | undefined,
	/** Deletes a project. */
	deleteProject?: ModelTypes["DeleteProjectPayload"] | undefined,
	/** Deletes a project card. */
	deleteProjectCard?: ModelTypes["DeleteProjectCardPayload"] | undefined,
	/** Deletes a project column. */
	deleteProjectColumn?: ModelTypes["DeleteProjectColumnPayload"] | undefined,
	/** Deletes an item from a Project. */
	deleteProjectNextItem?: ModelTypes["DeleteProjectNextItemPayload"] | undefined,
	/** Deletes an item from a Project. */
	deleteProjectV2Item?: ModelTypes["DeleteProjectV2ItemPayload"] | undefined,
	/** Deletes a pull request review. */
	deletePullRequestReview?: ModelTypes["DeletePullRequestReviewPayload"] | undefined,
	/** Deletes a pull request review comment. */
	deletePullRequestReviewComment?: ModelTypes["DeletePullRequestReviewCommentPayload"] | undefined,
	/** Delete a Git Ref. */
	deleteRef?: ModelTypes["DeleteRefPayload"] | undefined,
	/** Deletes a team discussion. */
	deleteTeamDiscussion?: ModelTypes["DeleteTeamDiscussionPayload"] | undefined,
	/** Deletes a team discussion comment. */
	deleteTeamDiscussionComment?: ModelTypes["DeleteTeamDiscussionCommentPayload"] | undefined,
	/** Deletes a verifiable domain. */
	deleteVerifiableDomain?: ModelTypes["DeleteVerifiableDomainPayload"] | undefined,
	/** Disable auto merge on the given pull request */
	disablePullRequestAutoMerge?: ModelTypes["DisablePullRequestAutoMergePayload"] | undefined,
	/** Dismisses an approved or rejected pull request review. */
	dismissPullRequestReview?: ModelTypes["DismissPullRequestReviewPayload"] | undefined,
	/** Dismisses the Dependabot alert. */
	dismissRepositoryVulnerabilityAlert?: ModelTypes["DismissRepositoryVulnerabilityAlertPayload"] | undefined,
	/** Enable the default auto-merge on a pull request. */
	enablePullRequestAutoMerge?: ModelTypes["EnablePullRequestAutoMergePayload"] | undefined,
	/** Follow an organization. */
	followOrganization?: ModelTypes["FollowOrganizationPayload"] | undefined,
	/** Follow a user. */
	followUser?: ModelTypes["FollowUserPayload"] | undefined,
	/** Grant the migrator role to a user for all organizations under an enterprise account. */
	grantEnterpriseOrganizationsMigratorRole?: ModelTypes["GrantEnterpriseOrganizationsMigratorRolePayload"] | undefined,
	/** Grant the migrator role to a user or a team. */
	grantMigratorRole?: ModelTypes["GrantMigratorRolePayload"] | undefined,
	/** Creates a new project by importing columns and a list of issues/PRs. */
	importProject?: ModelTypes["ImportProjectPayload"] | undefined,
	/** Invite someone to become an administrator of the enterprise. */
	inviteEnterpriseAdmin?: ModelTypes["InviteEnterpriseAdminPayload"] | undefined,
	/** Creates a repository link for a project. */
	linkRepositoryToProject?: ModelTypes["LinkRepositoryToProjectPayload"] | undefined,
	/** Lock a lockable object */
	lockLockable?: ModelTypes["LockLockablePayload"] | undefined,
	/** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
	markDiscussionCommentAsAnswer?: ModelTypes["MarkDiscussionCommentAsAnswerPayload"] | undefined,
	/** Mark a pull request file as viewed */
	markFileAsViewed?: ModelTypes["MarkFileAsViewedPayload"] | undefined,
	/** Marks a pull request ready for review. */
	markPullRequestReadyForReview?: ModelTypes["MarkPullRequestReadyForReviewPayload"] | undefined,
	/** Merge a head into a branch. */
	mergeBranch?: ModelTypes["MergeBranchPayload"] | undefined,
	/** Merge a pull request. */
	mergePullRequest?: ModelTypes["MergePullRequestPayload"] | undefined,
	/** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
	minimizeComment?: ModelTypes["MinimizeCommentPayload"] | undefined,
	/** Moves a project card to another place. */
	moveProjectCard?: ModelTypes["MoveProjectCardPayload"] | undefined,
	/** Moves a project column to another place. */
	moveProjectColumn?: ModelTypes["MoveProjectColumnPayload"] | undefined,
	/** Pin an issue to a repository */
	pinIssue?: ModelTypes["PinIssuePayload"] | undefined,
	/** Regenerates the identity provider recovery codes for an enterprise */
	regenerateEnterpriseIdentityProviderRecoveryCodes?: ModelTypes["RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"] | undefined,
	/** Regenerates a verifiable domain's verification token. */
	regenerateVerifiableDomainToken?: ModelTypes["RegenerateVerifiableDomainTokenPayload"] | undefined,
	/** Reject all pending deployments under one or more environments */
	rejectDeployments?: ModelTypes["RejectDeploymentsPayload"] | undefined,
	/** Removes assignees from an assignable object. */
	removeAssigneesFromAssignable?: ModelTypes["RemoveAssigneesFromAssignablePayload"] | undefined,
	/** Removes an administrator from the enterprise. */
	removeEnterpriseAdmin?: ModelTypes["RemoveEnterpriseAdminPayload"] | undefined,
	/** Removes the identity provider from an enterprise */
	removeEnterpriseIdentityProvider?: ModelTypes["RemoveEnterpriseIdentityProviderPayload"] | undefined,
	/** Removes an organization from the enterprise */
	removeEnterpriseOrganization?: ModelTypes["RemoveEnterpriseOrganizationPayload"] | undefined,
	/** Removes a support entitlement from an enterprise member. */
	removeEnterpriseSupportEntitlement?: ModelTypes["RemoveEnterpriseSupportEntitlementPayload"] | undefined,
	/** Removes labels from a Labelable object. */
	removeLabelsFromLabelable?: ModelTypes["RemoveLabelsFromLabelablePayload"] | undefined,
	/** Removes outside collaborator from all repositories in an organization. */
	removeOutsideCollaborator?: ModelTypes["RemoveOutsideCollaboratorPayload"] | undefined,
	/** Removes a reaction from a subject. */
	removeReaction?: ModelTypes["RemoveReactionPayload"] | undefined,
	/** Removes a star from a Starrable. */
	removeStar?: ModelTypes["RemoveStarPayload"] | undefined,
	/** Remove an upvote to a discussion or discussion comment. */
	removeUpvote?: ModelTypes["RemoveUpvotePayload"] | undefined,
	/** Reopen a issue. */
	reopenIssue?: ModelTypes["ReopenIssuePayload"] | undefined,
	/** Reopen a pull request. */
	reopenPullRequest?: ModelTypes["ReopenPullRequestPayload"] | undefined,
	/** Set review requests on a pull request. */
	requestReviews?: ModelTypes["RequestReviewsPayload"] | undefined,
	/** Rerequests an existing check suite. */
	rerequestCheckSuite?: ModelTypes["RerequestCheckSuitePayload"] | undefined,
	/** Marks a review thread as resolved. */
	resolveReviewThread?: ModelTypes["ResolveReviewThreadPayload"] | undefined,
	/** Revoke the migrator role to a user for all organizations under an enterprise account. */
	revokeEnterpriseOrganizationsMigratorRole?: ModelTypes["RevokeEnterpriseOrganizationsMigratorRolePayload"] | undefined,
	/** Revoke the migrator role from a user or a team. */
	revokeMigratorRole?: ModelTypes["RevokeMigratorRolePayload"] | undefined,
	/** Creates or updates the identity provider for an enterprise. */
	setEnterpriseIdentityProvider?: ModelTypes["SetEnterpriseIdentityProviderPayload"] | undefined,
	/** Set an organization level interaction limit for an organization's public repositories. */
	setOrganizationInteractionLimit?: ModelTypes["SetOrganizationInteractionLimitPayload"] | undefined,
	/** Sets an interaction limit setting for a repository. */
	setRepositoryInteractionLimit?: ModelTypes["SetRepositoryInteractionLimitPayload"] | undefined,
	/** Set a user level interaction limit for an user's public repositories. */
	setUserInteractionLimit?: ModelTypes["SetUserInteractionLimitPayload"] | undefined,
	/** Start a repository migration. */
	startRepositoryMigration?: ModelTypes["StartRepositoryMigrationPayload"] | undefined,
	/** Submits a pending pull request review. */
	submitPullRequestReview?: ModelTypes["SubmitPullRequestReviewPayload"] | undefined,
	/** Transfer an issue to a different repository */
	transferIssue?: ModelTypes["TransferIssuePayload"] | undefined,
	/** Unarchives a repository. */
	unarchiveRepository?: ModelTypes["UnarchiveRepositoryPayload"] | undefined,
	/** Unfollow an organization. */
	unfollowOrganization?: ModelTypes["UnfollowOrganizationPayload"] | undefined,
	/** Unfollow a user. */
	unfollowUser?: ModelTypes["UnfollowUserPayload"] | undefined,
	/** Deletes a repository link from a project. */
	unlinkRepositoryFromProject?: ModelTypes["UnlinkRepositoryFromProjectPayload"] | undefined,
	/** Unlock a lockable object */
	unlockLockable?: ModelTypes["UnlockLockablePayload"] | undefined,
	/** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
	unmarkDiscussionCommentAsAnswer?: ModelTypes["UnmarkDiscussionCommentAsAnswerPayload"] | undefined,
	/** Unmark a pull request file as viewed */
	unmarkFileAsViewed?: ModelTypes["UnmarkFileAsViewedPayload"] | undefined,
	/** Unmark an issue as a duplicate of another issue. */
	unmarkIssueAsDuplicate?: ModelTypes["UnmarkIssueAsDuplicatePayload"] | undefined,
	/** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
	unminimizeComment?: ModelTypes["UnminimizeCommentPayload"] | undefined,
	/** Unpin a pinned issue from a repository */
	unpinIssue?: ModelTypes["UnpinIssuePayload"] | undefined,
	/** Marks a review thread as unresolved. */
	unresolveReviewThread?: ModelTypes["UnresolveReviewThreadPayload"] | undefined,
	/** Update a branch protection rule */
	updateBranchProtectionRule?: ModelTypes["UpdateBranchProtectionRulePayload"] | undefined,
	/** Update a check run */
	updateCheckRun?: ModelTypes["UpdateCheckRunPayload"] | undefined,
	/** Modifies the settings of an existing check suite */
	updateCheckSuitePreferences?: ModelTypes["UpdateCheckSuitePreferencesPayload"] | undefined,
	/** Update a discussion */
	updateDiscussion?: ModelTypes["UpdateDiscussionPayload"] | undefined,
	/** Update the contents of a comment on a Discussion */
	updateDiscussionComment?: ModelTypes["UpdateDiscussionCommentPayload"] | undefined,
	/** Updates the role of an enterprise administrator. */
	updateEnterpriseAdministratorRole?: ModelTypes["UpdateEnterpriseAdministratorRolePayload"] | undefined,
	/** Sets whether private repository forks are enabled for an enterprise. */
	updateEnterpriseAllowPrivateRepositoryForkingSetting?: ModelTypes["UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"] | undefined,
	/** Sets the base repository permission for organizations in an enterprise. */
	updateEnterpriseDefaultRepositoryPermissionSetting?: ModelTypes["UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"] | undefined,
	/** Sets whether organization members with admin permissions on a repository can change repository visibility. */
	updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: ModelTypes["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"] | undefined,
	/** Sets the members can create repositories setting for an enterprise. */
	updateEnterpriseMembersCanCreateRepositoriesSetting?: ModelTypes["UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"] | undefined,
	/** Sets the members can delete issues setting for an enterprise. */
	updateEnterpriseMembersCanDeleteIssuesSetting?: ModelTypes["UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"] | undefined,
	/** Sets the members can delete repositories setting for an enterprise. */
	updateEnterpriseMembersCanDeleteRepositoriesSetting?: ModelTypes["UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"] | undefined,
	/** Sets whether members can invite collaborators are enabled for an enterprise. */
	updateEnterpriseMembersCanInviteCollaboratorsSetting?: ModelTypes["UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"] | undefined,
	/** Sets whether or not an organization admin can make purchases. */
	updateEnterpriseMembersCanMakePurchasesSetting?: ModelTypes["UpdateEnterpriseMembersCanMakePurchasesSettingPayload"] | undefined,
	/** Sets the members can update protected branches setting for an enterprise. */
	updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: ModelTypes["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"] | undefined,
	/** Sets the members can view dependency insights for an enterprise. */
	updateEnterpriseMembersCanViewDependencyInsightsSetting?: ModelTypes["UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"] | undefined,
	/** Sets whether organization projects are enabled for an enterprise. */
	updateEnterpriseOrganizationProjectsSetting?: ModelTypes["UpdateEnterpriseOrganizationProjectsSettingPayload"] | undefined,
	/** Updates the role of an enterprise owner with an organization. */
	updateEnterpriseOwnerOrganizationRole?: ModelTypes["UpdateEnterpriseOwnerOrganizationRolePayload"] | undefined,
	/** Updates an enterprise's profile. */
	updateEnterpriseProfile?: ModelTypes["UpdateEnterpriseProfilePayload"] | undefined,
	/** Sets whether repository projects are enabled for a enterprise. */
	updateEnterpriseRepositoryProjectsSetting?: ModelTypes["UpdateEnterpriseRepositoryProjectsSettingPayload"] | undefined,
	/** Sets whether team discussions are enabled for an enterprise. */
	updateEnterpriseTeamDiscussionsSetting?: ModelTypes["UpdateEnterpriseTeamDiscussionsSettingPayload"] | undefined,
	/** Sets whether two factor authentication is required for all users in an enterprise. */
	updateEnterpriseTwoFactorAuthenticationRequiredSetting?: ModelTypes["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"] | undefined,
	/** Updates an environment. */
	updateEnvironment?: ModelTypes["UpdateEnvironmentPayload"] | undefined,
	/** Sets whether an IP allow list is enabled on an owner. */
	updateIpAllowListEnabledSetting?: ModelTypes["UpdateIpAllowListEnabledSettingPayload"] | undefined,
	/** Updates an IP allow list entry. */
	updateIpAllowListEntry?: ModelTypes["UpdateIpAllowListEntryPayload"] | undefined,
	/** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
	updateIpAllowListForInstalledAppsEnabledSetting?: ModelTypes["UpdateIpAllowListForInstalledAppsEnabledSettingPayload"] | undefined,
	/** Updates an Issue. */
	updateIssue?: ModelTypes["UpdateIssuePayload"] | undefined,
	/** Updates an IssueComment object. */
	updateIssueComment?: ModelTypes["UpdateIssueCommentPayload"] | undefined,
	/** Updates an existing label. */
	updateLabel?: ModelTypes["UpdateLabelPayload"] | undefined,
	/** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
	updateNotificationRestrictionSetting?: ModelTypes["UpdateNotificationRestrictionSettingPayload"] | undefined,
	/** Sets whether private repository forks are enabled for an organization. */
	updateOrganizationAllowPrivateRepositoryForkingSetting?: ModelTypes["UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"] | undefined,
	/** Sets whether contributors are required to sign off on web-based commits for repositories in an organization. */
	updateOrganizationWebCommitSignoffSetting?: ModelTypes["UpdateOrganizationWebCommitSignoffSettingPayload"] | undefined,
	/** Updates an existing project. */
	updateProject?: ModelTypes["UpdateProjectPayload"] | undefined,
	/** Updates an existing project card. */
	updateProjectCard?: ModelTypes["UpdateProjectCardPayload"] | undefined,
	/** Updates an existing project column. */
	updateProjectColumn?: ModelTypes["UpdateProjectColumnPayload"] | undefined,
	/** Updates a draft issue within a Project. */
	updateProjectDraftIssue?: ModelTypes["UpdateProjectDraftIssuePayload"] | undefined,
	/** Updates an existing project (beta). */
	updateProjectNext?: ModelTypes["UpdateProjectNextPayload"] | undefined,
	/** Updates a field of an item from a Project. */
	updateProjectNextItemField?: ModelTypes["UpdateProjectNextItemFieldPayload"] | undefined,
	/** Updates an existing project (beta). */
	updateProjectV2?: ModelTypes["UpdateProjectV2Payload"] | undefined,
	/** Updates a draft issue within a Project. */
	updateProjectV2DraftIssue?: ModelTypes["UpdateProjectV2DraftIssuePayload"] | undefined,
	/** This mutation updates the value of a field for an item in a Project. Currently
only single-select, text, number, date, and iteration fields are supported. */
	updateProjectV2ItemFieldValue?: ModelTypes["UpdateProjectV2ItemFieldValuePayload"] | undefined,
	/** This mutation updates the position of the item in the project, where the position represents the priority of an item. */
	updateProjectV2ItemPosition?: ModelTypes["UpdateProjectV2ItemPositionPayload"] | undefined,
	/** Update a pull request */
	updatePullRequest?: ModelTypes["UpdatePullRequestPayload"] | undefined,
	/** Merge or Rebase HEAD from upstream branch into pull request branch */
	updatePullRequestBranch?: ModelTypes["UpdatePullRequestBranchPayload"] | undefined,
	/** Updates the body of a pull request review. */
	updatePullRequestReview?: ModelTypes["UpdatePullRequestReviewPayload"] | undefined,
	/** Updates a pull request review comment. */
	updatePullRequestReviewComment?: ModelTypes["UpdatePullRequestReviewCommentPayload"] | undefined,
	/** Update a Git Ref. */
	updateRef?: ModelTypes["UpdateRefPayload"] | undefined,
	/** Creates, updates and/or deletes multiple refs in a repository.

This mutation takes a list of `RefUpdate`s and performs these updates
on the repository. All updates are performed atomically, meaning that
if one of them is rejected, no other ref will be modified.

`RefUpdate.beforeOid` specifies that the given reference needs to point
to the given value before performing any updates. A value of
`0000000000000000000000000000000000000000` can be used to verify that
the references should not exist.

`RefUpdate.afterOid` specifies the value that the given reference
will point to after performing all updates. A value of
`0000000000000000000000000000000000000000` can be used to delete a
reference.

If `RefUpdate.force` is set to `true`, a non-fast-forward updates
for the given reference will be allowed. */
	updateRefs?: ModelTypes["UpdateRefsPayload"] | undefined,
	/** Update information about a repository. */
	updateRepository?: ModelTypes["UpdateRepositoryPayload"] | undefined,
	/** Sets whether contributors are required to sign off on web-based commits for a repository. */
	updateRepositoryWebCommitSignoffSetting?: ModelTypes["UpdateRepositoryWebCommitSignoffSettingPayload"] | undefined,
	/** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
	updateSponsorshipPreferences?: ModelTypes["UpdateSponsorshipPreferencesPayload"] | undefined,
	/** Updates the state for subscribable subjects. */
	updateSubscription?: ModelTypes["UpdateSubscriptionPayload"] | undefined,
	/** Updates a team discussion. */
	updateTeamDiscussion?: ModelTypes["UpdateTeamDiscussionPayload"] | undefined,
	/** Updates a discussion comment. */
	updateTeamDiscussionComment?: ModelTypes["UpdateTeamDiscussionCommentPayload"] | undefined,
	/** Updates team review assignment. */
	updateTeamReviewAssignment?: ModelTypes["UpdateTeamReviewAssignmentPayload"] | undefined,
	/** Update team repository. */
	updateTeamsRepository?: ModelTypes["UpdateTeamsRepositoryPayload"] | undefined,
	/** Replaces the repository's topics with the given topics. */
	updateTopics?: ModelTypes["UpdateTopicsPayload"] | undefined,
	/** Verify that a verifiable domain has the expected DNS record. */
	verifyVerifiableDomain?: ModelTypes["VerifyVerifiableDomainPayload"] | undefined
};
	/** An object with an ID. */
["Node"]: ModelTypes["AddedToProjectEvent"] | ModelTypes["App"] | ModelTypes["AssignedEvent"] | ModelTypes["AutoMergeDisabledEvent"] | ModelTypes["AutoMergeEnabledEvent"] | ModelTypes["AutoRebaseEnabledEvent"] | ModelTypes["AutoSquashEnabledEvent"] | ModelTypes["AutomaticBaseChangeFailedEvent"] | ModelTypes["AutomaticBaseChangeSucceededEvent"] | ModelTypes["BaseRefChangedEvent"] | ModelTypes["BaseRefDeletedEvent"] | ModelTypes["BaseRefForcePushedEvent"] | ModelTypes["Blob"] | ModelTypes["Bot"] | ModelTypes["BranchProtectionRule"] | ModelTypes["BypassForcePushAllowance"] | ModelTypes["BypassPullRequestAllowance"] | ModelTypes["CWE"] | ModelTypes["CheckRun"] | ModelTypes["CheckSuite"] | ModelTypes["ClosedEvent"] | ModelTypes["CodeOfConduct"] | ModelTypes["CommentDeletedEvent"] | ModelTypes["Commit"] | ModelTypes["CommitComment"] | ModelTypes["CommitCommentThread"] | ModelTypes["Comparison"] | ModelTypes["ConnectedEvent"] | ModelTypes["ConvertToDraftEvent"] | ModelTypes["ConvertedNoteToIssueEvent"] | ModelTypes["ConvertedToDiscussionEvent"] | ModelTypes["CrossReferencedEvent"] | ModelTypes["DemilestonedEvent"] | ModelTypes["DependencyGraphManifest"] | ModelTypes["DeployKey"] | ModelTypes["DeployedEvent"] | ModelTypes["Deployment"] | ModelTypes["DeploymentEnvironmentChangedEvent"] | ModelTypes["DeploymentReview"] | ModelTypes["DeploymentStatus"] | ModelTypes["DisconnectedEvent"] | ModelTypes["Discussion"] | ModelTypes["DiscussionCategory"] | ModelTypes["DiscussionComment"] | ModelTypes["DiscussionPoll"] | ModelTypes["DiscussionPollOption"] | ModelTypes["DraftIssue"] | ModelTypes["Enterprise"] | ModelTypes["EnterpriseAdministratorInvitation"] | ModelTypes["EnterpriseIdentityProvider"] | ModelTypes["EnterpriseRepositoryInfo"] | ModelTypes["EnterpriseServerInstallation"] | ModelTypes["EnterpriseServerUserAccount"] | ModelTypes["EnterpriseServerUserAccountEmail"] | ModelTypes["EnterpriseServerUserAccountsUpload"] | ModelTypes["EnterpriseUserAccount"] | ModelTypes["Environment"] | ModelTypes["ExternalIdentity"] | ModelTypes["Gist"] | ModelTypes["GistComment"] | ModelTypes["HeadRefDeletedEvent"] | ModelTypes["HeadRefForcePushedEvent"] | ModelTypes["HeadRefRestoredEvent"] | ModelTypes["IpAllowListEntry"] | ModelTypes["Issue"] | ModelTypes["IssueComment"] | ModelTypes["Label"] | ModelTypes["LabeledEvent"] | ModelTypes["Language"] | ModelTypes["License"] | ModelTypes["LinkedBranch"] | ModelTypes["LockedEvent"] | ModelTypes["Mannequin"] | ModelTypes["MarkedAsDuplicateEvent"] | ModelTypes["MarketplaceCategory"] | ModelTypes["MarketplaceListing"] | ModelTypes["MembersCanDeleteReposClearAuditEntry"] | ModelTypes["MembersCanDeleteReposDisableAuditEntry"] | ModelTypes["MembersCanDeleteReposEnableAuditEntry"] | ModelTypes["MentionedEvent"] | ModelTypes["MergedEvent"] | ModelTypes["MigrationSource"] | ModelTypes["Milestone"] | ModelTypes["MilestonedEvent"] | ModelTypes["MovedColumnsInProjectEvent"] | ModelTypes["OIDCProvider"] | ModelTypes["OauthApplicationCreateAuditEntry"] | ModelTypes["OrgAddBillingManagerAuditEntry"] | ModelTypes["OrgAddMemberAuditEntry"] | ModelTypes["OrgBlockUserAuditEntry"] | ModelTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"] | ModelTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"] | ModelTypes["OrgCreateAuditEntry"] | ModelTypes["OrgDisableOauthAppRestrictionsAuditEntry"] | ModelTypes["OrgDisableSamlAuditEntry"] | ModelTypes["OrgDisableTwoFactorRequirementAuditEntry"] | ModelTypes["OrgEnableOauthAppRestrictionsAuditEntry"] | ModelTypes["OrgEnableSamlAuditEntry"] | ModelTypes["OrgEnableTwoFactorRequirementAuditEntry"] | ModelTypes["OrgInviteMemberAuditEntry"] | ModelTypes["OrgInviteToBusinessAuditEntry"] | ModelTypes["OrgOauthAppAccessApprovedAuditEntry"] | ModelTypes["OrgOauthAppAccessDeniedAuditEntry"] | ModelTypes["OrgOauthAppAccessRequestedAuditEntry"] | ModelTypes["OrgRemoveBillingManagerAuditEntry"] | ModelTypes["OrgRemoveMemberAuditEntry"] | ModelTypes["OrgRemoveOutsideCollaboratorAuditEntry"] | ModelTypes["OrgRestoreMemberAuditEntry"] | ModelTypes["OrgUnblockUserAuditEntry"] | ModelTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"] | ModelTypes["OrgUpdateMemberAuditEntry"] | ModelTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"] | ModelTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"] | ModelTypes["Organization"] | ModelTypes["OrganizationIdentityProvider"] | ModelTypes["OrganizationInvitation"] | ModelTypes["Package"] | ModelTypes["PackageFile"] | ModelTypes["PackageTag"] | ModelTypes["PackageVersion"] | ModelTypes["PinnedDiscussion"] | ModelTypes["PinnedEvent"] | ModelTypes["PinnedIssue"] | ModelTypes["PrivateRepositoryForkingDisableAuditEntry"] | ModelTypes["PrivateRepositoryForkingEnableAuditEntry"] | ModelTypes["Project"] | ModelTypes["ProjectCard"] | ModelTypes["ProjectColumn"] | ModelTypes["ProjectNext"] | ModelTypes["ProjectNextField"] | ModelTypes["ProjectNextItem"] | ModelTypes["ProjectNextItemFieldValue"] | ModelTypes["ProjectV2"] | ModelTypes["ProjectV2Field"] | ModelTypes["ProjectV2Item"] | ModelTypes["ProjectV2ItemFieldDateValue"] | ModelTypes["ProjectV2ItemFieldIterationValue"] | ModelTypes["ProjectV2ItemFieldNumberValue"] | ModelTypes["ProjectV2ItemFieldSingleSelectValue"] | ModelTypes["ProjectV2ItemFieldTextValue"] | ModelTypes["ProjectV2IterationField"] | ModelTypes["ProjectV2SingleSelectField"] | ModelTypes["ProjectV2View"] | ModelTypes["ProjectView"] | ModelTypes["PublicKey"] | ModelTypes["PullRequest"] | ModelTypes["PullRequestCommit"] | ModelTypes["PullRequestCommitCommentThread"] | ModelTypes["PullRequestReview"] | ModelTypes["PullRequestReviewComment"] | ModelTypes["PullRequestReviewThread"] | ModelTypes["PullRequestThread"] | ModelTypes["Push"] | ModelTypes["PushAllowance"] | ModelTypes["Reaction"] | ModelTypes["ReadyForReviewEvent"] | ModelTypes["Ref"] | ModelTypes["ReferencedEvent"] | ModelTypes["Release"] | ModelTypes["ReleaseAsset"] | ModelTypes["RemovedFromProjectEvent"] | ModelTypes["RenamedTitleEvent"] | ModelTypes["ReopenedEvent"] | ModelTypes["RepoAccessAuditEntry"] | ModelTypes["RepoAddMemberAuditEntry"] | ModelTypes["RepoAddTopicAuditEntry"] | ModelTypes["RepoArchivedAuditEntry"] | ModelTypes["RepoChangeMergeSettingAuditEntry"] | ModelTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigLockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoCreateAuditEntry"] | ModelTypes["RepoDestroyAuditEntry"] | ModelTypes["RepoRemoveMemberAuditEntry"] | ModelTypes["RepoRemoveTopicAuditEntry"] | ModelTypes["Repository"] | ModelTypes["RepositoryInvitation"] | ModelTypes["RepositoryMigration"] | ModelTypes["RepositoryTopic"] | ModelTypes["RepositoryVisibilityChangeDisableAuditEntry"] | ModelTypes["RepositoryVisibilityChangeEnableAuditEntry"] | ModelTypes["RepositoryVulnerabilityAlert"] | ModelTypes["ReviewDismissalAllowance"] | ModelTypes["ReviewDismissedEvent"] | ModelTypes["ReviewRequest"] | ModelTypes["ReviewRequestRemovedEvent"] | ModelTypes["ReviewRequestedEvent"] | ModelTypes["SavedReply"] | ModelTypes["SecurityAdvisory"] | ModelTypes["SponsorsActivity"] | ModelTypes["SponsorsListing"] | ModelTypes["SponsorsTier"] | ModelTypes["Sponsorship"] | ModelTypes["SponsorshipNewsletter"] | ModelTypes["Status"] | ModelTypes["StatusCheckRollup"] | ModelTypes["StatusContext"] | ModelTypes["SubscribedEvent"] | ModelTypes["Tag"] | ModelTypes["Team"] | ModelTypes["TeamAddMemberAuditEntry"] | ModelTypes["TeamAddRepositoryAuditEntry"] | ModelTypes["TeamChangeParentTeamAuditEntry"] | ModelTypes["TeamDiscussion"] | ModelTypes["TeamDiscussionComment"] | ModelTypes["TeamRemoveMemberAuditEntry"] | ModelTypes["TeamRemoveRepositoryAuditEntry"] | ModelTypes["Topic"] | ModelTypes["TransferredEvent"] | ModelTypes["Tree"] | ModelTypes["UnassignedEvent"] | ModelTypes["UnlabeledEvent"] | ModelTypes["UnlockedEvent"] | ModelTypes["UnmarkedAsDuplicateEvent"] | ModelTypes["UnpinnedEvent"] | ModelTypes["UnsubscribedEvent"] | ModelTypes["User"] | ModelTypes["UserBlockedEvent"] | ModelTypes["UserContentEdit"] | ModelTypes["UserStatus"] | ModelTypes["VerifiableDomain"] | ModelTypes["Workflow"] | ModelTypes["WorkflowRun"];
	["NotificationRestrictionSettingValue"]:NotificationRestrictionSettingValue;
	/** An OIDC identity provider configured to provision identities for an enterprise. */
["OIDCProvider"]: {
		/** The enterprise this identity provider belongs to. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** ExternalIdentities provisioned by this identity provider. */
	externalIdentities: ModelTypes["ExternalIdentityConnection"],
	id: string,
	/** The OIDC identity provider type */
	providerType: ModelTypes["OIDCProviderType"],
	/** The id of the tenant this provider is attached to */
	tenantId: string
};
	["OIDCProviderType"]:OIDCProviderType;
	/** Metadata for an audit entry with action oauth_application.* */
["OauthApplicationAuditEntryData"]: ModelTypes["OauthApplicationCreateAuditEntry"] | ModelTypes["OrgOauthAppAccessApprovedAuditEntry"] | ModelTypes["OrgOauthAppAccessDeniedAuditEntry"] | ModelTypes["OrgOauthAppAccessRequestedAuditEntry"];
	/** Audit log entry for a oauth_application.create event. */
["OauthApplicationCreateAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The application URL of the OAuth Application. */
	applicationUrl?: ModelTypes["URI"] | undefined,
	/** The callback URL of the OAuth Application. */
	callbackUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The name of the OAuth Application. */
	oauthApplicationName?: string | undefined,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?: ModelTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The rate limit of the OAuth Application. */
	rateLimit?: number | undefined,
	/** The state of the OAuth Application. */
	state?: ModelTypes["OauthApplicationCreateAuditEntryState"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["OauthApplicationCreateAuditEntryState"]:OauthApplicationCreateAuditEntryState;
	["OperationType"]:OperationType;
	["OrderDirection"]:OrderDirection;
	/** Audit log entry for a org.add_billing_manager */
["OrgAddBillingManagerAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The email address used to invite a billing manager for the organization. */
	invitationEmail?: string | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.add_member */
["OrgAddMemberAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The permission level of the member added to the organization. */
	permission?: ModelTypes["OrgAddMemberAuditEntryPermission"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["OrgAddMemberAuditEntryPermission"]:OrgAddMemberAuditEntryPermission;
	/** Audit log entry for a org.block_user */
["OrgBlockUserAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The blocked user. */
	blockedUser?: ModelTypes["User"] | undefined,
	/** The username of the blocked user. */
	blockedUserName?: string | undefined,
	/** The HTTP path for the blocked user. */
	blockedUserResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the blocked user. */
	blockedUserUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.config.disable_collaborators_only event. */
["OrgConfigDisableCollaboratorsOnlyAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.config.enable_collaborators_only event. */
["OrgConfigEnableCollaboratorsOnlyAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.create event. */
["OrgCreateAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The billing plan for the Organization. */
	billingPlan?: ModelTypes["OrgCreateAuditEntryBillingPlan"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["OrgCreateAuditEntryBillingPlan"]:OrgCreateAuditEntryBillingPlan;
	/** Audit log entry for a org.disable_oauth_app_restrictions event. */
["OrgDisableOauthAppRestrictionsAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.disable_saml event. */
["OrgDisableSamlAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The SAML provider's digest algorithm URL. */
	digestMethodUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The SAML provider's issuer URL. */
	issuerUrl?: ModelTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The SAML provider's signature algorithm URL. */
	signatureMethodUrl?: ModelTypes["URI"] | undefined,
	/** The SAML provider's single sign-on URL. */
	singleSignOnUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.disable_two_factor_requirement event. */
["OrgDisableTwoFactorRequirementAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.enable_oauth_app_restrictions event. */
["OrgEnableOauthAppRestrictionsAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.enable_saml event. */
["OrgEnableSamlAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The SAML provider's digest algorithm URL. */
	digestMethodUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The SAML provider's issuer URL. */
	issuerUrl?: ModelTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The SAML provider's signature algorithm URL. */
	signatureMethodUrl?: ModelTypes["URI"] | undefined,
	/** The SAML provider's single sign-on URL. */
	singleSignOnUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.enable_two_factor_requirement event. */
["OrgEnableTwoFactorRequirementAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Ordering options for an organization's enterprise owner connections. */
["OrgEnterpriseOwnerOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order enterprise owners by. */
	field: ModelTypes["OrgEnterpriseOwnerOrderField"]
};
	["OrgEnterpriseOwnerOrderField"]:OrgEnterpriseOwnerOrderField;
	/** Audit log entry for a org.invite_member event. */
["OrgInviteMemberAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The email address of the organization invitation. */
	email?: string | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The organization invitation. */
	organizationInvitation?: ModelTypes["OrganizationInvitation"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.invite_to_business event. */
["OrgInviteToBusinessAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: ModelTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.oauth_app_access_approved event. */
["OrgOauthAppAccessApprovedAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The name of the OAuth Application. */
	oauthApplicationName?: string | undefined,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?: ModelTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.oauth_app_access_denied event. */
["OrgOauthAppAccessDeniedAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The name of the OAuth Application. */
	oauthApplicationName?: string | undefined,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?: ModelTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.oauth_app_access_requested event. */
["OrgOauthAppAccessRequestedAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The name of the OAuth Application. */
	oauthApplicationName?: string | undefined,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?: ModelTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.remove_billing_manager event. */
["OrgRemoveBillingManagerAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The reason for the billing manager being removed. */
	reason?: ModelTypes["OrgRemoveBillingManagerAuditEntryReason"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["OrgRemoveBillingManagerAuditEntryReason"]:OrgRemoveBillingManagerAuditEntryReason;
	/** Audit log entry for a org.remove_member event. */
["OrgRemoveMemberAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The types of membership the member has with the organization. */
	membershipTypes?: Array<ModelTypes["OrgRemoveMemberAuditEntryMembershipType"]> | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The reason for the member being removed. */
	reason?: ModelTypes["OrgRemoveMemberAuditEntryReason"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["OrgRemoveMemberAuditEntryMembershipType"]:OrgRemoveMemberAuditEntryMembershipType;
	["OrgRemoveMemberAuditEntryReason"]:OrgRemoveMemberAuditEntryReason;
	/** Audit log entry for a org.remove_outside_collaborator event. */
["OrgRemoveOutsideCollaboratorAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The types of membership the outside collaborator has with the organization. */
	membershipTypes?: Array<ModelTypes["OrgRemoveOutsideCollaboratorAuditEntryMembershipType"]> | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The reason for the outside collaborator being removed from the Organization. */
	reason?: ModelTypes["OrgRemoveOutsideCollaboratorAuditEntryReason"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["OrgRemoveOutsideCollaboratorAuditEntryMembershipType"]:OrgRemoveOutsideCollaboratorAuditEntryMembershipType;
	["OrgRemoveOutsideCollaboratorAuditEntryReason"]:OrgRemoveOutsideCollaboratorAuditEntryReason;
	/** Audit log entry for a org.restore_member event. */
["OrgRestoreMemberAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The number of custom email routings for the restored member. */
	restoredCustomEmailRoutingsCount?: number | undefined,
	/** The number of issue assignments for the restored member. */
	restoredIssueAssignmentsCount?: number | undefined,
	/** Restored organization membership objects. */
	restoredMemberships?: Array<ModelTypes["OrgRestoreMemberAuditEntryMembership"]> | undefined,
	/** The number of restored memberships. */
	restoredMembershipsCount?: number | undefined,
	/** The number of repositories of the restored member. */
	restoredRepositoriesCount?: number | undefined,
	/** The number of starred repositories for the restored member. */
	restoredRepositoryStarsCount?: number | undefined,
	/** The number of watched repositories for the restored member. */
	restoredRepositoryWatchesCount?: number | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Types of memberships that can be restored for an Organization member. */
["OrgRestoreMemberAuditEntryMembership"]:ModelTypes["OrgRestoreMemberMembershipOrganizationAuditEntryData"] | ModelTypes["OrgRestoreMemberMembershipRepositoryAuditEntryData"] | ModelTypes["OrgRestoreMemberMembershipTeamAuditEntryData"];
	/** Metadata for an organization membership for org.restore_member actions */
["OrgRestoreMemberMembershipOrganizationAuditEntryData"]: {
		/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined
};
	/** Metadata for a repository membership for org.restore_member actions */
["OrgRestoreMemberMembershipRepositoryAuditEntryData"]: {
		/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined
};
	/** Metadata for a team membership for org.restore_member actions */
["OrgRestoreMemberMembershipTeamAuditEntryData"]: {
		/** The team associated with the action */
	team?: ModelTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.unblock_user */
["OrgUnblockUserAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The user being unblocked by the organization. */
	blockedUser?: ModelTypes["User"] | undefined,
	/** The username of the blocked user. */
	blockedUserName?: string | undefined,
	/** The HTTP path for the blocked user. */
	blockedUserResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the blocked user. */
	blockedUserUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a org.update_default_repository_permission */
["OrgUpdateDefaultRepositoryPermissionAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The new base repository permission level for the organization. */
	permission?: ModelTypes["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"] | undefined,
	/** The former base repository permission level for the organization. */
	permissionWas?: ModelTypes["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"]:OrgUpdateDefaultRepositoryPermissionAuditEntryPermission;
	/** Audit log entry for a org.update_member event. */
["OrgUpdateMemberAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The new member permission level for the organization. */
	permission?: ModelTypes["OrgUpdateMemberAuditEntryPermission"] | undefined,
	/** The former member permission level for the organization. */
	permissionWas?: ModelTypes["OrgUpdateMemberAuditEntryPermission"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["OrgUpdateMemberAuditEntryPermission"]:OrgUpdateMemberAuditEntryPermission;
	/** Audit log entry for a org.update_member_repository_creation_permission event. */
["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** Can members create repositories in the organization. */
	canCreateRepositories?: boolean | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined,
	/** The permission for visibility level of repositories for this organization. */
	visibility?: ModelTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"] | undefined
};
	["OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"]:OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility;
	/** Audit log entry for a org.update_member_repository_invitation_permission event. */
["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** Can outside collaborators be invited to repositories in the organization. */
	canInviteOutsideCollaboratorsToRepositories?: boolean | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
["Organization"]: {
		/** Determine if this repository owner has any items that can be pinned to their profile. */
	anyPinnableItems: boolean,
	/** Audit log entries of the organization */
	auditLog: ModelTypes["OrganizationAuditEntryConnection"],
	/** A URL pointing to the organization's public avatar. */
	avatarUrl: ModelTypes["URI"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The organization's public profile description. */
	description?: string | undefined,
	/** The organization's public profile description rendered to HTML. */
	descriptionHTML?: string | undefined,
	/** A list of domains owned by the organization. */
	domains?: ModelTypes["VerifiableDomainConnection"] | undefined,
	/** The organization's public email. */
	email?: string | undefined,
	/** A list of owners of the organization's enterprise account. */
	enterpriseOwners: ModelTypes["OrganizationEnterpriseOwnerConnection"],
	/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents: number,
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing: boolean,
	id: string,
	/** The interaction ability settings for this organization. */
	interactionAbility?: ModelTypes["RepositoryInteractionAbility"] | undefined,
	/** The setting value for whether the organization has an IP allow list enabled. */
	ipAllowListEnabledSetting: ModelTypes["IpAllowListEnabledSettingValue"],
	/** The IP addresses that are allowed to access resources owned by the organization. */
	ipAllowListEntries: ModelTypes["IpAllowListEntryConnection"],
	/** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
	ipAllowListForInstalledAppsEnabledSetting: ModelTypes["IpAllowListForInstalledAppsEnabledSettingValue"],
	/** Check if the given account is sponsoring this user/organization. */
	isSponsoredBy: boolean,
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer: boolean,
	/** Whether the organization has verified its profile email and website. */
	isVerified: boolean,
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase: ModelTypes["ProfileItemShowcase"],
	/** The organization's public profile location. */
	location?: string | undefined,
	/** The organization's login name. */
	login: string,
	/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
	memberStatuses: ModelTypes["UserStatusConnection"],
	/** Members can fork private repositories in this organization */
	membersCanForkPrivateRepositories: boolean,
	/** A list of users who are members of this organization. */
	membersWithRole: ModelTypes["OrganizationMemberConnection"],
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents: number,
	/** The organization's public profile name. */
	name?: string | undefined,
	/** The HTTP path creating a new team */
	newTeamResourcePath: ModelTypes["URI"],
	/** The HTTP URL creating a new team */
	newTeamUrl: ModelTypes["URI"],
	/** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
	notificationDeliveryRestrictionEnabledSetting: ModelTypes["NotificationRestrictionSettingValue"],
	/** The billing email for the organization. */
	organizationBillingEmail?: string | undefined,
	/** A list of packages under the owner. */
	packages: ModelTypes["PackageConnection"],
	/** A list of users who have been invited to join this organization. */
	pendingMembers: ModelTypes["UserConnection"],
	/** A list of repositories and gists this profile owner can pin to their profile. */
	pinnableItems: ModelTypes["PinnableItemConnection"],
	/** A list of repositories and gists this profile owner has pinned to their profile */
	pinnedItems: ModelTypes["PinnableItemConnection"],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining: number,
	/** Find project by number. */
	project?: ModelTypes["Project"] | undefined,
	/** Find a project by project (beta) number. */
	projectNext?: ModelTypes["ProjectNext"] | undefined,
	/** Find a project by number. */
	projectV2?: ModelTypes["ProjectV2"] | undefined,
	/** A list of projects under the owner. */
	projects: ModelTypes["ProjectConnection"],
	/** A list of projects (beta) under the owner. */
	projectsNext: ModelTypes["ProjectNextConnection"],
	/** The HTTP path listing organization's projects */
	projectsResourcePath: ModelTypes["URI"],
	/** The HTTP URL listing organization's projects */
	projectsUrl: ModelTypes["URI"],
	/** A list of projects under the owner. */
	projectsV2: ModelTypes["ProjectV2Connection"],
	/** Recent projects that this user has modified in the context of the owner. */
	recentProjects: ModelTypes["ProjectV2Connection"],
	/** A list of repositories that the user owns. */
	repositories: ModelTypes["RepositoryConnection"],
	/** Find Repository. */
	repository?: ModelTypes["Repository"] | undefined,
	/** Discussion comments this user has authored. */
	repositoryDiscussionComments: ModelTypes["DiscussionCommentConnection"],
	/** Discussions this user has started. */
	repositoryDiscussions: ModelTypes["DiscussionConnection"],
	/** A list of all repository migrations for this organization. */
	repositoryMigrations: ModelTypes["RepositoryMigrationConnection"],
	/** When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication. */
	requiresTwoFactorAuthentication?: boolean | undefined,
	/** The HTTP path for this organization. */
	resourcePath: ModelTypes["URI"],
	/** The Organization's SAML identity providers */
	samlIdentityProvider?: ModelTypes["OrganizationIdentityProvider"] | undefined,
	/** List of users and organizations this entity is sponsoring. */
	sponsoring: ModelTypes["SponsorConnection"],
	/** List of sponsors for this user or organization. */
	sponsors: ModelTypes["SponsorConnection"],
	/** Events involving this sponsorable, such as new sponsorships. */
	sponsorsActivities: ModelTypes["SponsorsActivityConnection"],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?: ModelTypes["SponsorsListing"] | undefined,
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?: ModelTypes["Sponsorship"] | undefined,
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?: ModelTypes["Sponsorship"] | undefined,
	/** List of sponsorship updates sent from this sponsorable to sponsors. */
	sponsorshipNewsletters: ModelTypes["SponsorshipNewsletterConnection"],
	/** This object's sponsorships as the maintainer. */
	sponsorshipsAsMaintainer: ModelTypes["SponsorshipConnection"],
	/** This object's sponsorships as the sponsor. */
	sponsorshipsAsSponsor: ModelTypes["SponsorshipConnection"],
	/** Find an organization's team by its slug. */
	team?: ModelTypes["Team"] | undefined,
	/** A list of teams in this organization. */
	teams: ModelTypes["TeamConnection"],
	/** The HTTP path listing organization's teams */
	teamsResourcePath: ModelTypes["URI"],
	/** The HTTP URL listing organization's teams */
	teamsUrl: ModelTypes["URI"],
	/** The organization's Twitter username. */
	twitterUsername?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this organization. */
	url: ModelTypes["URI"],
	/** Organization is adminable by the viewer. */
	viewerCanAdminister: boolean,
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems: boolean,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects: boolean,
	/** Viewer can create repositories on this organization */
	viewerCanCreateRepositories: boolean,
	/** Viewer can create teams on this organization. */
	viewerCanCreateTeams: boolean,
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor: boolean,
	/** Viewer is an active member of this organization. */
	viewerIsAMember: boolean,
	/** Whether or not this Organization is followed by the viewer. */
	viewerIsFollowing: boolean,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring: boolean,
	/** Whether contributors are required to sign off on web-based commits for repositories in this organization. */
	webCommitSignoffRequired: boolean,
	/** The organization's public profile URL. */
	websiteUrl?: ModelTypes["URI"] | undefined
};
	/** An audit entry in an organization audit log. */
["OrganizationAuditEntry"]:ModelTypes["MembersCanDeleteReposClearAuditEntry"] | ModelTypes["MembersCanDeleteReposDisableAuditEntry"] | ModelTypes["MembersCanDeleteReposEnableAuditEntry"] | ModelTypes["OauthApplicationCreateAuditEntry"] | ModelTypes["OrgAddBillingManagerAuditEntry"] | ModelTypes["OrgAddMemberAuditEntry"] | ModelTypes["OrgBlockUserAuditEntry"] | ModelTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"] | ModelTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"] | ModelTypes["OrgCreateAuditEntry"] | ModelTypes["OrgDisableOauthAppRestrictionsAuditEntry"] | ModelTypes["OrgDisableSamlAuditEntry"] | ModelTypes["OrgDisableTwoFactorRequirementAuditEntry"] | ModelTypes["OrgEnableOauthAppRestrictionsAuditEntry"] | ModelTypes["OrgEnableSamlAuditEntry"] | ModelTypes["OrgEnableTwoFactorRequirementAuditEntry"] | ModelTypes["OrgInviteMemberAuditEntry"] | ModelTypes["OrgInviteToBusinessAuditEntry"] | ModelTypes["OrgOauthAppAccessApprovedAuditEntry"] | ModelTypes["OrgOauthAppAccessDeniedAuditEntry"] | ModelTypes["OrgOauthAppAccessRequestedAuditEntry"] | ModelTypes["OrgRemoveBillingManagerAuditEntry"] | ModelTypes["OrgRemoveMemberAuditEntry"] | ModelTypes["OrgRemoveOutsideCollaboratorAuditEntry"] | ModelTypes["OrgRestoreMemberAuditEntry"] | ModelTypes["OrgUnblockUserAuditEntry"] | ModelTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"] | ModelTypes["OrgUpdateMemberAuditEntry"] | ModelTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"] | ModelTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"] | ModelTypes["PrivateRepositoryForkingDisableAuditEntry"] | ModelTypes["PrivateRepositoryForkingEnableAuditEntry"] | ModelTypes["RepoAccessAuditEntry"] | ModelTypes["RepoAddMemberAuditEntry"] | ModelTypes["RepoAddTopicAuditEntry"] | ModelTypes["RepoArchivedAuditEntry"] | ModelTypes["RepoChangeMergeSettingAuditEntry"] | ModelTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigLockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoCreateAuditEntry"] | ModelTypes["RepoDestroyAuditEntry"] | ModelTypes["RepoRemoveMemberAuditEntry"] | ModelTypes["RepoRemoveTopicAuditEntry"] | ModelTypes["RepositoryVisibilityChangeDisableAuditEntry"] | ModelTypes["RepositoryVisibilityChangeEnableAuditEntry"] | ModelTypes["TeamAddMemberAuditEntry"] | ModelTypes["TeamAddRepositoryAuditEntry"] | ModelTypes["TeamChangeParentTeamAuditEntry"] | ModelTypes["TeamRemoveMemberAuditEntry"] | ModelTypes["TeamRemoveRepositoryAuditEntry"];
	/** The connection type for OrganizationAuditEntry. */
["OrganizationAuditEntryConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["OrganizationAuditEntryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["OrganizationAuditEntry"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Metadata for an audit entry with action org.* */
["OrganizationAuditEntryData"]: ModelTypes["MembersCanDeleteReposClearAuditEntry"] | ModelTypes["MembersCanDeleteReposDisableAuditEntry"] | ModelTypes["MembersCanDeleteReposEnableAuditEntry"] | ModelTypes["OauthApplicationCreateAuditEntry"] | ModelTypes["OrgAddBillingManagerAuditEntry"] | ModelTypes["OrgAddMemberAuditEntry"] | ModelTypes["OrgBlockUserAuditEntry"] | ModelTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"] | ModelTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"] | ModelTypes["OrgCreateAuditEntry"] | ModelTypes["OrgDisableOauthAppRestrictionsAuditEntry"] | ModelTypes["OrgDisableSamlAuditEntry"] | ModelTypes["OrgDisableTwoFactorRequirementAuditEntry"] | ModelTypes["OrgEnableOauthAppRestrictionsAuditEntry"] | ModelTypes["OrgEnableSamlAuditEntry"] | ModelTypes["OrgEnableTwoFactorRequirementAuditEntry"] | ModelTypes["OrgInviteMemberAuditEntry"] | ModelTypes["OrgInviteToBusinessAuditEntry"] | ModelTypes["OrgOauthAppAccessApprovedAuditEntry"] | ModelTypes["OrgOauthAppAccessDeniedAuditEntry"] | ModelTypes["OrgOauthAppAccessRequestedAuditEntry"] | ModelTypes["OrgRemoveBillingManagerAuditEntry"] | ModelTypes["OrgRemoveMemberAuditEntry"] | ModelTypes["OrgRemoveOutsideCollaboratorAuditEntry"] | ModelTypes["OrgRestoreMemberAuditEntry"] | ModelTypes["OrgRestoreMemberMembershipOrganizationAuditEntryData"] | ModelTypes["OrgUnblockUserAuditEntry"] | ModelTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"] | ModelTypes["OrgUpdateMemberAuditEntry"] | ModelTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"] | ModelTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"] | ModelTypes["PrivateRepositoryForkingDisableAuditEntry"] | ModelTypes["PrivateRepositoryForkingEnableAuditEntry"] | ModelTypes["RepoAccessAuditEntry"] | ModelTypes["RepoAddMemberAuditEntry"] | ModelTypes["RepoAddTopicAuditEntry"] | ModelTypes["RepoArchivedAuditEntry"] | ModelTypes["RepoChangeMergeSettingAuditEntry"] | ModelTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigLockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoCreateAuditEntry"] | ModelTypes["RepoDestroyAuditEntry"] | ModelTypes["RepoRemoveMemberAuditEntry"] | ModelTypes["RepoRemoveTopicAuditEntry"] | ModelTypes["RepositoryVisibilityChangeDisableAuditEntry"] | ModelTypes["RepositoryVisibilityChangeEnableAuditEntry"] | ModelTypes["TeamAddMemberAuditEntry"] | ModelTypes["TeamAddRepositoryAuditEntry"] | ModelTypes["TeamChangeParentTeamAuditEntry"] | ModelTypes["TeamRemoveMemberAuditEntry"] | ModelTypes["TeamRemoveRepositoryAuditEntry"];
	/** An edge in a connection. */
["OrganizationAuditEntryEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["OrganizationAuditEntry"] | undefined
};
	/** A list of organizations managed by an enterprise. */
["OrganizationConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["OrganizationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Organization"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["OrganizationEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Organization"] | undefined
};
	/** The connection type for User. */
["OrganizationEnterpriseOwnerConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["OrganizationEnterpriseOwnerEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An enterprise owner in the context of an organization that is part of the enterprise. */
["OrganizationEnterpriseOwnerEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["User"] | undefined,
	/** The role of the owner with respect to the organization. */
	organizationRole: ModelTypes["RoleInOrganization"]
};
	/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
["OrganizationIdentityProvider"]: {
		/** The digest algorithm used to sign SAML requests for the Identity Provider. */
	digestMethod?: ModelTypes["URI"] | undefined,
	/** External Identities provisioned by this Identity Provider */
	externalIdentities: ModelTypes["ExternalIdentityConnection"],
	id: string,
	/** The x509 certificate used by the Identity Provider to sign assertions and responses. */
	idpCertificate?: ModelTypes["X509Certificate"] | undefined,
	/** The Issuer Entity ID for the SAML Identity Provider */
	issuer?: string | undefined,
	/** Organization this Identity Provider belongs to */
	organization?: ModelTypes["Organization"] | undefined,
	/** The signature algorithm used to sign SAML requests for the Identity Provider. */
	signatureMethod?: ModelTypes["URI"] | undefined,
	/** The URL endpoint for the Identity Provider's SAML SSO. */
	ssoUrl?: ModelTypes["URI"] | undefined
};
	/** An Invitation for a user to an organization. */
["OrganizationInvitation"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The email address of the user invited to the organization. */
	email?: string | undefined,
	id: string,
	/** The type of invitation that was sent (e.g. email, user). */
	invitationType: ModelTypes["OrganizationInvitationType"],
	/** The user who was invited to the organization. */
	invitee?: ModelTypes["User"] | undefined,
	/** The user who created the invitation. */
	inviter: ModelTypes["User"],
	/** The organization the invite is for */
	organization: ModelTypes["Organization"],
	/** The user's pending role in the organization (e.g. member, owner). */
	role: ModelTypes["OrganizationInvitationRole"]
};
	/** The connection type for OrganizationInvitation. */
["OrganizationInvitationConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["OrganizationInvitationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["OrganizationInvitation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["OrganizationInvitationEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["OrganizationInvitation"] | undefined
};
	["OrganizationInvitationRole"]:OrganizationInvitationRole;
	["OrganizationInvitationType"]:OrganizationInvitationType;
	/** The connection type for User. */
["OrganizationMemberConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["OrganizationMemberEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user within an organization. */
["OrganizationMemberEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
	hasTwoFactorEnabled?: boolean | undefined,
	/** The item at the end of the edge. */
	node?: ModelTypes["User"] | undefined,
	/** The role this user has in the organization. */
	role?: ModelTypes["OrganizationMemberRole"] | undefined
};
	["OrganizationMemberRole"]:OrganizationMemberRole;
	["OrganizationMembersCanCreateRepositoriesSettingValue"]:OrganizationMembersCanCreateRepositoriesSettingValue;
	/** Used for argument of CreateProjectV2 mutation. */
["OrganizationOrUser"]:ModelTypes["Organization"] | ModelTypes["User"];
	/** Ordering options for organization connections. */
["OrganizationOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order organizations by. */
	field: ModelTypes["OrganizationOrderField"]
};
	["OrganizationOrderField"]:OrganizationOrderField;
	/** An organization teams hovercard context */
["OrganizationTeamsHovercardContext"]: {
		/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string,
	/** Teams in this organization the user is a member of that are relevant */
	relevantTeams: ModelTypes["TeamConnection"],
	/** The path for the full team list for this user */
	teamsResourcePath: ModelTypes["URI"],
	/** The URL for the full team list for this user */
	teamsUrl: ModelTypes["URI"],
	/** The total number of teams the user is on in the organization */
	totalTeamCount: number
};
	/** An organization list hovercard context */
["OrganizationsHovercardContext"]: {
		/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string,
	/** Organizations this user is a member of that are relevant */
	relevantOrganizations: ModelTypes["OrganizationConnection"],
	/** The total number of organizations this user is in */
	totalOrganizationCount: number
};
	/** Information for an uploaded package. */
["Package"]: {
		id: string,
	/** Find the latest version for the package. */
	latestVersion?: ModelTypes["PackageVersion"] | undefined,
	/** Identifies the name of the package. */
	name: string,
	/** Identifies the type of the package. */
	packageType: ModelTypes["PackageType"],
	/** The repository this package belongs to. */
	repository?: ModelTypes["Repository"] | undefined,
	/** Statistics about package activity. */
	statistics?: ModelTypes["PackageStatistics"] | undefined,
	/** Find package version by version string. */
	version?: ModelTypes["PackageVersion"] | undefined,
	/** list of versions for this package */
	versions: ModelTypes["PackageVersionConnection"]
};
	/** The connection type for Package. */
["PackageConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PackageEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Package"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PackageEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Package"] | undefined
};
	/** A file in a package version. */
["PackageFile"]: {
		id: string,
	/** MD5 hash of the file. */
	md5?: string | undefined,
	/** Name of the file. */
	name: string,
	/** The package version this file belongs to. */
	packageVersion?: ModelTypes["PackageVersion"] | undefined,
	/** SHA1 hash of the file. */
	sha1?: string | undefined,
	/** SHA256 hash of the file. */
	sha256?: string | undefined,
	/** Size of the file in bytes. */
	size?: number | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** URL to download the asset. */
	url?: ModelTypes["URI"] | undefined
};
	/** The connection type for PackageFile. */
["PackageFileConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PackageFileEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PackageFile"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PackageFileEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PackageFile"] | undefined
};
	/** Ways in which lists of package files can be ordered upon return. */
["PackageFileOrder"]: {
	/** The direction in which to order package files by the specified field. */
	direction?: ModelTypes["OrderDirection"] | undefined,
	/** The field in which to order package files by. */
	field?: ModelTypes["PackageFileOrderField"] | undefined
};
	["PackageFileOrderField"]:PackageFileOrderField;
	/** Ways in which lists of packages can be ordered upon return. */
["PackageOrder"]: {
	/** The direction in which to order packages by the specified field. */
	direction?: ModelTypes["OrderDirection"] | undefined,
	/** The field in which to order packages by. */
	field?: ModelTypes["PackageOrderField"] | undefined
};
	["PackageOrderField"]:PackageOrderField;
	/** Represents an owner of a package. */
["PackageOwner"]: ModelTypes["Organization"] | ModelTypes["Repository"] | ModelTypes["User"];
	/** Represents a object that contains package activity statistics such as downloads. */
["PackageStatistics"]: {
		/** Number of times the package was downloaded since it was created. */
	downloadsTotalCount: number
};
	/** A version tag contains the mapping between a tag name and a version. */
["PackageTag"]: {
		id: string,
	/** Identifies the tag name of the version. */
	name: string,
	/** Version that the tag is associated with. */
	version?: ModelTypes["PackageVersion"] | undefined
};
	["PackageType"]:PackageType;
	/** Information about a specific package version. */
["PackageVersion"]: {
		/** List of files associated with this package version */
	files: ModelTypes["PackageFileConnection"],
	id: string,
	/** The package associated with this version. */
	package?: ModelTypes["Package"] | undefined,
	/** The platform this version was built for. */
	platform?: string | undefined,
	/** Whether or not this version is a pre-release. */
	preRelease: boolean,
	/** The README of this package version. */
	readme?: string | undefined,
	/** The release associated with this package version. */
	release?: ModelTypes["Release"] | undefined,
	/** Statistics about package activity. */
	statistics?: ModelTypes["PackageVersionStatistics"] | undefined,
	/** The package version summary. */
	summary?: string | undefined,
	/** The version string. */
	version: string
};
	/** The connection type for PackageVersion. */
["PackageVersionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PackageVersionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PackageVersion"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PackageVersionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PackageVersion"] | undefined
};
	/** Ways in which lists of package versions can be ordered upon return. */
["PackageVersionOrder"]: {
	/** The direction in which to order package versions by the specified field. */
	direction?: ModelTypes["OrderDirection"] | undefined,
	/** The field in which to order package versions by. */
	field?: ModelTypes["PackageVersionOrderField"] | undefined
};
	["PackageVersionOrderField"]:PackageVersionOrderField;
	/** Represents a object that contains package version activity statistics such as downloads. */
["PackageVersionStatistics"]: {
		/** Number of times the package was downloaded since it was created. */
	downloadsTotalCount: number
};
	/** Information about pagination in a connection. */
["PageInfo"]: {
		/** When paginating forwards, the cursor to continue. */
	endCursor?: string | undefined,
	/** When paginating forwards, are there more items? */
	hasNextPage: boolean,
	/** When paginating backwards, are there more items? */
	hasPreviousPage: boolean,
	/** When paginating backwards, the cursor to continue. */
	startCursor?: string | undefined
};
	["PatchStatus"]:PatchStatus;
	/** Types that can grant permissions on a repository to a user */
["PermissionGranter"]:ModelTypes["Organization"] | ModelTypes["Repository"] | ModelTypes["Team"];
	/** A level of permission and source for a user's access to a repository. */
["PermissionSource"]: {
		/** The organization the repository belongs to. */
	organization: ModelTypes["Organization"],
	/** The level of access this source has granted to the user. */
	permission: ModelTypes["DefaultRepositoryPermissionField"],
	/** The source of this permission. */
	source: ModelTypes["PermissionGranter"]
};
	/** Autogenerated input type of PinIssue */
["PinIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the issue to be pinned */
	issueId: string
};
	/** Autogenerated return type of PinIssue */
["PinIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was pinned */
	issue?: ModelTypes["Issue"] | undefined
};
	/** Types that can be pinned to a profile page. */
["PinnableItem"]:ModelTypes["Gist"] | ModelTypes["Repository"];
	/** The connection type for PinnableItem. */
["PinnableItemConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PinnableItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PinnableItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PinnableItemEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PinnableItem"] | undefined
};
	["PinnableItemType"]:PinnableItemType;
	/** A Pinned Discussion is a discussion pinned to a repository's index page. */
["PinnedDiscussion"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The discussion that was pinned. */
	discussion: ModelTypes["Discussion"],
	/** Color stops of the chosen gradient */
	gradientStopColors: Array<string>,
	id: string,
	/** Background texture pattern */
	pattern: ModelTypes["PinnedDiscussionPattern"],
	/** The actor that pinned this discussion. */
	pinnedBy: ModelTypes["Actor"],
	/** Preconfigured background gradient option */
	preconfiguredGradient?: ModelTypes["PinnedDiscussionGradient"] | undefined,
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for PinnedDiscussion. */
["PinnedDiscussionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PinnedDiscussionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PinnedDiscussion"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PinnedDiscussionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PinnedDiscussion"] | undefined
};
	["PinnedDiscussionGradient"]:PinnedDiscussionGradient;
	["PinnedDiscussionPattern"]:PinnedDiscussionPattern;
	/** Represents a 'pinned' event on a given issue or pull request. */
["PinnedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Identifies the issue associated with the event. */
	issue: ModelTypes["Issue"]
};
	/** A Pinned Issue is a issue pinned to a repository's index page. */
["PinnedIssue"]: {
		/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The issue that was pinned. */
	issue: ModelTypes["Issue"],
	/** The actor that pinned this issue. */
	pinnedBy: ModelTypes["Actor"],
	/** The repository that this issue was pinned to. */
	repository: ModelTypes["Repository"]
};
	/** The connection type for PinnedIssue. */
["PinnedIssueConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PinnedIssueEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PinnedIssue"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PinnedIssueEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PinnedIssue"] | undefined
};
	/** An ISO-8601 encoded UTC date string with millisecond precision. */
["PreciseDateTime"]:any;
	/** Audit log entry for a private_repository_forking.disable event. */
["PrivateRepositoryForkingDisableAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: ModelTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a private_repository_forking.enable event. */
["PrivateRepositoryForkingEnableAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: ModelTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own. */
["ProfileItemShowcase"]: {
		/** Whether or not the owner has pinned any repositories or gists. */
	hasPinnedItems: boolean,
	/** The repositories and gists in the showcase. If the profile owner has any
pinned items, those will be returned. Otherwise, the profile owner's popular
repositories will be returned. */
	items: ModelTypes["PinnableItemConnection"]
};
	/** Represents any entity on GitHub that has a profile page. */
["ProfileOwner"]: ModelTypes["Organization"] | ModelTypes["User"];
	/** Projects manage issues, pull requests and notes within a project owner. */
["Project"]: {
		/** The project's description body. */
	body?: string | undefined,
	/** The projects description body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: ModelTypes["DateTime"] | undefined,
	/** List of columns in the project */
	columns: ModelTypes["ProjectColumnConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who originally created the project. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project's name. */
	name: string,
	/** The project's number. */
	number: number,
	/** The project's owner. Currently limited to repositories, organizations, and users. */
	owner: ModelTypes["ProjectOwner"],
	/** List of pending cards in this project */
	pendingCards: ModelTypes["ProjectCardConnection"],
	/** Project progress details. */
	progress: ModelTypes["ProjectProgress"],
	/** The HTTP path for this project */
	resourcePath: ModelTypes["URI"],
	/** Whether the project is open or closed. */
	state: ModelTypes["ProjectState"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this project */
	url: ModelTypes["URI"],
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean
};
	/** A card in a project. */
["ProjectCard"]: {
		/** The project column this card is associated under. A card may only belong to one
project column at a time. The column field will be null if the card is created
in a pending state and has yet to be associated with a column. Once cards are
associated with a column, they will not become pending in the future. */
	column?: ModelTypes["ProjectColumn"] | undefined,
	/** The card content item */
	content?: ModelTypes["ProjectCardItem"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created this card */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Whether the card is archived */
	isArchived: boolean,
	/** The card note */
	note?: string | undefined,
	/** The project that contains this card. */
	project: ModelTypes["Project"],
	/** The HTTP path for this card */
	resourcePath: ModelTypes["URI"],
	/** The state of ProjectCard */
	state?: ModelTypes["ProjectCardState"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this card */
	url: ModelTypes["URI"]
};
	["ProjectCardArchivedState"]:ProjectCardArchivedState;
	/** The connection type for ProjectCard. */
["ProjectCardConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectCardEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectCard"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectCardEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectCard"] | undefined
};
	/** An issue or PR and its owning repository to be used in a project card. */
["ProjectCardImport"]: {
	/** The issue or pull request number. */
	number: number,
	/** Repository name with owner (owner/repository). */
	repository: string
};
	/** Types that can be inside Project Cards. */
["ProjectCardItem"]:ModelTypes["Issue"] | ModelTypes["PullRequest"];
	["ProjectCardState"]:ProjectCardState;
	/** A column inside a project. */
["ProjectColumn"]: {
		/** List of cards in the column */
	cards: ModelTypes["ProjectCardConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project column's name. */
	name: string,
	/** The project that contains this column. */
	project: ModelTypes["Project"],
	/** The semantic purpose of the column */
	purpose?: ModelTypes["ProjectColumnPurpose"] | undefined,
	/** The HTTP path for this project column */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this project column */
	url: ModelTypes["URI"]
};
	/** The connection type for ProjectColumn. */
["ProjectColumnConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectColumnEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectColumn"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectColumnEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectColumn"] | undefined
};
	/** A project column and a list of its issues and PRs. */
["ProjectColumnImport"]: {
	/** The name of the column. */
	columnName: string,
	/** A list of issues and pull requests in the column. */
	issues?: Array<ModelTypes["ProjectCardImport"]> | undefined,
	/** The position of the column, starting from 0. */
	position: number
};
	["ProjectColumnPurpose"]:ProjectColumnPurpose;
	/** A list of projects associated with the owner. */
["ProjectConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Project"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Project"] | undefined
};
	["ProjectItemType"]:ProjectItemType;
	/** New projects that manage issues, pull requests and drafts using tables and boards. */
["ProjectNext"]: {
		/** Returns true if the project is closed. */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: ModelTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who originally created the project. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project's description. */
	description?: string | undefined,
	/** List of fields in the project */
	fields: ModelTypes["ProjectNextFieldConnection"],
	id: string,
	/** List of items in the project */
	items: ModelTypes["ProjectNextItemConnection"],
	/** The project's number. */
	number: number,
	/** The project's owner. Currently limited to organizations and users. */
	owner: ModelTypes["ProjectNextOwner"],
	/** Returns true if the project is public. */
	public: boolean,
	/** The repositories the project is linked to. */
	repositories: ModelTypes["RepositoryConnection"],
	/** The HTTP path for this project */
	resourcePath: ModelTypes["URI"],
	/** The project's short description. */
	shortDescription?: string | undefined,
	/** The project's name. */
	title?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this project */
	url: ModelTypes["URI"],
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** List of views in the project */
	views: ModelTypes["ProjectViewConnection"]
};
	/** The connection type for ProjectNext. */
["ProjectNextConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectNextEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectNext"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectNextEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectNext"] | undefined
};
	/** A field inside a project. */
["ProjectNextField"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The field's type. */
	dataType: ModelTypes["ProjectNextFieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** The project that contains this field. */
	project: ModelTypes["ProjectNext"],
	/** The field's settings. */
	settings?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** Common fields across different field types */
["ProjectNextFieldCommon"]: ModelTypes["ProjectNextField"];
	/** The connection type for ProjectNextField. */
["ProjectNextFieldConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectNextFieldEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectNextField"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectNextFieldEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectNextField"] | undefined
};
	["ProjectNextFieldType"]:ProjectNextFieldType;
	/** An item within a new Project. */
["ProjectNextItem"]: {
		/** The content of the referenced draft issue, issue, or pull request */
	content?: ModelTypes["ProjectNextItemContent"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created the item. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** List of field values */
	fieldValues: ModelTypes["ProjectNextItemFieldValueConnection"],
	id: string,
	/** Whether the item is archived. */
	isArchived: boolean,
	/** The project that contains this item. */
	project: ModelTypes["ProjectNext"],
	/** The title of the item */
	title?: string | undefined,
	/** The type of the item. */
	type: ModelTypes["ProjectItemType"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for ProjectNextItem. */
["ProjectNextItemConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectNextItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectNextItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Types that can be inside Project Items. */
["ProjectNextItemContent"]:ModelTypes["DraftIssue"] | ModelTypes["Issue"] | ModelTypes["PullRequest"];
	/** An edge in a connection. */
["ProjectNextItemEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectNextItem"] | undefined
};
	/** An value of a field in an item of a new Project. */
["ProjectNextItemFieldValue"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created the item. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field that contains this value. */
	projectField: ModelTypes["ProjectNextField"],
	/** The project item that contains this value. */
	projectItem: ModelTypes["ProjectNextItem"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The value of a field */
	value?: string | undefined
};
	/** The connection type for ProjectNextItemFieldValue. */
["ProjectNextItemFieldValueConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectNextItemFieldValueEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectNextItemFieldValue"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectNextItemFieldValueEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectNextItemFieldValue"] | undefined
};
	["ProjectNextOrderField"]:ProjectNextOrderField;
	/** Represents an owner of a project (beta). */
["ProjectNextOwner"]: ModelTypes["Issue"] | ModelTypes["Organization"] | ModelTypes["PullRequest"] | ModelTypes["User"];
	/** Ways in which lists of projects can be ordered upon return. */
["ProjectOrder"]: {
	/** The direction in which to order projects by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order projects by. */
	field: ModelTypes["ProjectOrderField"]
};
	["ProjectOrderField"]:ProjectOrderField;
	/** Represents an owner of a Project. */
["ProjectOwner"]: ModelTypes["Organization"] | ModelTypes["Repository"] | ModelTypes["User"];
	/** Project progress stats. */
["ProjectProgress"]: {
		/** The number of done cards. */
	doneCount: number,
	/** The percentage of done cards. */
	donePercentage: number,
	/** Whether progress tracking is enabled and cards with purpose exist for this project */
	enabled: boolean,
	/** The number of in-progress cards. */
	inProgressCount: number,
	/** The percentage of in-progress cards. */
	inProgressPercentage: number,
	/** The number of to do cards. */
	todoCount: number,
	/** The percentage of to do cards. */
	todoPercentage: number
};
	["ProjectState"]:ProjectState;
	["ProjectTemplate"]:ProjectTemplate;
	/** New projects that manage issues, pull requests and drafts using tables and boards. */
["ProjectV2"]: {
		/** Returns true if the project is closed. */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: ModelTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who originally created the project. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** A field of the project */
	field?: ModelTypes["ProjectV2FieldConfiguration"] | undefined,
	/** List of fields and their constraints in the project */
	fields: ModelTypes["ProjectV2FieldConfigurationConnection"],
	id: string,
	/** List of items in the project */
	items: ModelTypes["ProjectV2ItemConnection"],
	/** The project's number. */
	number: number,
	/** The project's owner. Currently limited to organizations and users. */
	owner: ModelTypes["ProjectV2Owner"],
	/** Returns true if the project is public. */
	public: boolean,
	/** The project's readme. */
	readme?: string | undefined,
	/** The repositories the project is linked to. */
	repositories: ModelTypes["RepositoryConnection"],
	/** The HTTP path for this project */
	resourcePath: ModelTypes["URI"],
	/** The project's short description. */
	shortDescription?: string | undefined,
	/** The teams the project is linked to. */
	teams: ModelTypes["TeamConnection"],
	/** The project's name. */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this project */
	url: ModelTypes["URI"],
	/** A view of the project */
	view?: ModelTypes["ProjectV2View"] | undefined,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** List of views in the project */
	views: ModelTypes["ProjectV2ViewConnection"]
};
	/** The connection type for ProjectV2. */
["ProjectV2Connection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectV2Edge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectV2"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2Edge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectV2"] | undefined
};
	/** A field inside a project. */
["ProjectV2Field"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The field's type. */
	dataType: ModelTypes["ProjectV2FieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** The project that contains this field. */
	project: ModelTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** Common fields across different project field types */
["ProjectV2FieldCommon"]: ModelTypes["ProjectV2Field"] | ModelTypes["ProjectV2IterationField"] | ModelTypes["ProjectV2SingleSelectField"];
	/** Configurations for project fields. */
["ProjectV2FieldConfiguration"]:ModelTypes["ProjectV2Field"] | ModelTypes["ProjectV2IterationField"] | ModelTypes["ProjectV2SingleSelectField"];
	/** The connection type for ProjectV2FieldConfiguration. */
["ProjectV2FieldConfigurationConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectV2FieldConfigurationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectV2FieldConfiguration"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2FieldConfigurationEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectV2FieldConfiguration"] | undefined
};
	/** The connection type for ProjectV2Field. */
["ProjectV2FieldConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectV2FieldEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectV2Field"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2FieldEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectV2Field"] | undefined
};
	/** Ordering options for project v2 field connections */
["ProjectV2FieldOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order the project v2 fields by. */
	field: ModelTypes["ProjectV2FieldOrderField"]
};
	["ProjectV2FieldOrderField"]:ProjectV2FieldOrderField;
	["ProjectV2FieldType"]:ProjectV2FieldType;
	/** The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time. */
["ProjectV2FieldValue"]: {
	/** The ISO 8601 date to set on the field. */
	date?: ModelTypes["Date"] | undefined,
	/** The id of the iteration to set on the field. */
	iterationId?: string | undefined,
	/** The number to set on the field. */
	number?: number | undefined,
	/** The id of the single select option to set on the field. */
	singleSelectOptionId?: string | undefined,
	/** The text to set on the field. */
	text?: string | undefined
};
	/** An item within a Project. */
["ProjectV2Item"]: {
		/** The content of the referenced draft issue, issue, or pull request */
	content?: ModelTypes["ProjectV2ItemContent"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created the item. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** A specific field value given a field name */
	fieldValueByName?: ModelTypes["ProjectV2ItemFieldValue"] | undefined,
	/** List of field values */
	fieldValues: ModelTypes["ProjectV2ItemFieldValueConnection"],
	id: string,
	/** Whether the item is archived. */
	isArchived: boolean,
	/** The project that contains this item. */
	project: ModelTypes["ProjectV2"],
	/** The type of the item. */
	type: ModelTypes["ProjectV2ItemType"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for ProjectV2Item. */
["ProjectV2ItemConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectV2ItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectV2Item"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Types that can be inside Project Items. */
["ProjectV2ItemContent"]:ModelTypes["DraftIssue"] | ModelTypes["Issue"] | ModelTypes["PullRequest"];
	/** An edge in a connection. */
["ProjectV2ItemEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectV2Item"] | undefined
};
	/** The value of a date field in a Project item. */
["ProjectV2ItemFieldDateValue"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created the item. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** Date value for the field */
	date?: ModelTypes["Date"] | undefined,
	/** The project field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: ModelTypes["ProjectV2Item"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The value of an iteration field in a Project item. */
["ProjectV2ItemFieldIterationValue"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created the item. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The duration of the iteration in days. */
	duration: number,
	/** The project field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: ModelTypes["ProjectV2Item"],
	/** The ID of the iteration. */
	iterationId: string,
	/** The start date of the iteration. */
	startDate: ModelTypes["Date"],
	/** The title of the iteration. */
	title: string,
	/** The title of the iteration, with HTML. */
	titleHTML: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The value of the labels field in a Project item. */
["ProjectV2ItemFieldLabelValue"]: {
		/** The field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	/** Labels value of a field */
	labels?: ModelTypes["LabelConnection"] | undefined
};
	/** The value of a milestone field in a Project item. */
["ProjectV2ItemFieldMilestoneValue"]: {
		/** The field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	/** Milestone value of a field */
	milestone?: ModelTypes["Milestone"] | undefined
};
	/** The value of a number field in a Project item. */
["ProjectV2ItemFieldNumberValue"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created the item. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: ModelTypes["ProjectV2Item"],
	/** Number as a float(8) */
	number?: number | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The value of a pull request field in a Project item. */
["ProjectV2ItemFieldPullRequestValue"]: {
		/** The field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	/** The pull requests for this field */
	pullRequests?: ModelTypes["PullRequestConnection"] | undefined
};
	/** The value of a repository field in a Project item. */
["ProjectV2ItemFieldRepositoryValue"]: {
		/** The field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	/** The repository for this field. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** The value of a reviewers field in a Project item. */
["ProjectV2ItemFieldReviewerValue"]: {
		/** The field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	/** The reviewers for this field. */
	reviewers?: ModelTypes["RequestedReviewerConnection"] | undefined
};
	/** The value of a single select field in a Project item. */
["ProjectV2ItemFieldSingleSelectValue"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created the item. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: ModelTypes["ProjectV2Item"],
	/** The name of the selected single select option. */
	name?: string | undefined,
	/** The html name of the selected single select option. */
	nameHTML?: string | undefined,
	/** The id of the selected single select option. */
	optionId?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The value of a text field in a Project item. */
["ProjectV2ItemFieldTextValue"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created the item. */
	creator?: ModelTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: ModelTypes["ProjectV2Item"],
	/** Text value of a field */
	text?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The value of a user field in a Project item. */
["ProjectV2ItemFieldUserValue"]: {
		/** The field that contains this value. */
	field: ModelTypes["ProjectV2FieldConfiguration"],
	/** The users for this field */
	users?: ModelTypes["UserConnection"] | undefined
};
	/** Project field values */
["ProjectV2ItemFieldValue"]:ModelTypes["ProjectV2ItemFieldDateValue"] | ModelTypes["ProjectV2ItemFieldIterationValue"] | ModelTypes["ProjectV2ItemFieldLabelValue"] | ModelTypes["ProjectV2ItemFieldMilestoneValue"] | ModelTypes["ProjectV2ItemFieldNumberValue"] | ModelTypes["ProjectV2ItemFieldPullRequestValue"] | ModelTypes["ProjectV2ItemFieldRepositoryValue"] | ModelTypes["ProjectV2ItemFieldReviewerValue"] | ModelTypes["ProjectV2ItemFieldSingleSelectValue"] | ModelTypes["ProjectV2ItemFieldTextValue"] | ModelTypes["ProjectV2ItemFieldUserValue"];
	/** Common fields across different project field value types */
["ProjectV2ItemFieldValueCommon"]: ModelTypes["ProjectV2ItemFieldDateValue"] | ModelTypes["ProjectV2ItemFieldIterationValue"] | ModelTypes["ProjectV2ItemFieldNumberValue"] | ModelTypes["ProjectV2ItemFieldSingleSelectValue"] | ModelTypes["ProjectV2ItemFieldTextValue"];
	/** The connection type for ProjectV2ItemFieldValue. */
["ProjectV2ItemFieldValueConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectV2ItemFieldValueEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectV2ItemFieldValue"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2ItemFieldValueEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectV2ItemFieldValue"] | undefined
};
	/** Ordering options for project v2 item field value connections */
["ProjectV2ItemFieldValueOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order the project v2 item field values by. */
	field: ModelTypes["ProjectV2ItemFieldValueOrderField"]
};
	["ProjectV2ItemFieldValueOrderField"]:ProjectV2ItemFieldValueOrderField;
	/** Ordering options for project v2 item connections */
["ProjectV2ItemOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order the project v2 items by. */
	field: ModelTypes["ProjectV2ItemOrderField"]
};
	["ProjectV2ItemOrderField"]:ProjectV2ItemOrderField;
	["ProjectV2ItemType"]:ProjectV2ItemType;
	/** An iteration field inside a project. */
["ProjectV2IterationField"]: {
		/** Iteration configuration settings */
	configuration: ModelTypes["ProjectV2IterationFieldConfiguration"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The field's type. */
	dataType: ModelTypes["ProjectV2FieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** The project that contains this field. */
	project: ModelTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** Iteration field configuration for a project. */
["ProjectV2IterationFieldConfiguration"]: {
		/** The iteration's completed iterations */
	completedIterations: Array<ModelTypes["ProjectV2IterationFieldIteration"]>,
	/** The iteration's duration in days */
	duration: number,
	/** The iteration's iterations */
	iterations: Array<ModelTypes["ProjectV2IterationFieldIteration"]>,
	/** The iteration's start day of the week */
	startDay: number
};
	/** Iteration field iteration settings for a project. */
["ProjectV2IterationFieldIteration"]: {
		/** The iteration's duration in days */
	duration: number,
	/** The iteration's ID. */
	id: string,
	/** The iteration's start date */
	startDate: ModelTypes["Date"],
	/** The iteration's title. */
	title: string,
	/** The iteration's html title. */
	titleHTML: string
};
	/** Ways in which lists of projects can be ordered upon return. */
["ProjectV2Order"]: {
	/** The direction in which to order projects by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order projects by. */
	field: ModelTypes["ProjectV2OrderField"]
};
	["ProjectV2OrderField"]:ProjectV2OrderField;
	/** Represents an owner of a project (beta). */
["ProjectV2Owner"]: ModelTypes["Issue"] | ModelTypes["Organization"] | ModelTypes["PullRequest"] | ModelTypes["User"];
	/** Recent projects for the owner. */
["ProjectV2Recent"]: ModelTypes["Organization"] | ModelTypes["Repository"] | ModelTypes["User"];
	/** A single select field inside a project. */
["ProjectV2SingleSelectField"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The field's type. */
	dataType: ModelTypes["ProjectV2FieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** Options for the single select field */
	options: Array<ModelTypes["ProjectV2SingleSelectFieldOption"]>,
	/** The project that contains this field. */
	project: ModelTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** Single select field option for a configuration for a project. */
["ProjectV2SingleSelectFieldOption"]: {
		/** The option's ID. */
	id: string,
	/** The option's name. */
	name: string,
	/** The option's html name. */
	nameHTML: string
};
	/** Represents a sort by field and direction. */
["ProjectV2SortBy"]: {
		/** The direction of the sorting. Possible values are ASC and DESC. */
	direction: ModelTypes["OrderDirection"],
	/** The field by which items are sorted. */
	field: ModelTypes["ProjectV2Field"]
};
	/** The connection type for ProjectV2SortBy. */
["ProjectV2SortByConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectV2SortByEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectV2SortBy"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2SortByEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectV2SortBy"] | undefined
};
	/** Represents a sort by field and direction. */
["ProjectV2SortByField"]: {
		/** The direction of the sorting. Possible values are ASC and DESC. */
	direction: ModelTypes["OrderDirection"],
	/** The field by which items are sorted. */
	field: ModelTypes["ProjectV2FieldConfiguration"]
};
	/** The connection type for ProjectV2SortByField. */
["ProjectV2SortByFieldConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectV2SortByFieldEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectV2SortByField"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2SortByFieldEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectV2SortByField"] | undefined
};
	/** A view within a ProjectV2. */
["ProjectV2View"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The view's visible fields. */
	fields?: ModelTypes["ProjectV2FieldConfigurationConnection"] | undefined,
	/** The project view's filter. */
	filter?: string | undefined,
	/** The view's group-by field. */
	groupBy?: ModelTypes["ProjectV2FieldConnection"] | undefined,
	/** The view's group-by field. */
	groupByFields?: ModelTypes["ProjectV2FieldConfigurationConnection"] | undefined,
	id: string,
	/** The project view's layout. */
	layout: ModelTypes["ProjectV2ViewLayout"],
	/** The project view's name. */
	name: string,
	/** The project view's number. */
	number: number,
	/** The project that contains this view. */
	project: ModelTypes["ProjectV2"],
	/** The view's sort-by config. */
	sortBy?: ModelTypes["ProjectV2SortByConnection"] | undefined,
	/** The view's sort-by config. */
	sortByFields?: ModelTypes["ProjectV2SortByFieldConnection"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The view's vertical-group-by field. */
	verticalGroupBy?: ModelTypes["ProjectV2FieldConnection"] | undefined,
	/** The view's vertical-group-by field. */
	verticalGroupByFields?: ModelTypes["ProjectV2FieldConfigurationConnection"] | undefined,
	/** The view's visible fields. */
	visibleFields?: ModelTypes["ProjectV2FieldConnection"] | undefined
};
	/** The connection type for ProjectV2View. */
["ProjectV2ViewConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectV2ViewEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectV2View"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2ViewEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectV2View"] | undefined
};
	["ProjectV2ViewLayout"]:ProjectV2ViewLayout;
	/** Ordering options for project v2 view connections */
["ProjectV2ViewOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order the project v2 views by. */
	field: ModelTypes["ProjectV2ViewOrderField"]
};
	["ProjectV2ViewOrderField"]:ProjectV2ViewOrderField;
	/** A view within a Project. */
["ProjectView"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project view's filter. */
	filter?: string | undefined,
	/** The view's group-by field. */
	groupBy?: Array<number> | undefined,
	id: string,
	/** The project view's layout. */
	layout: ModelTypes["ProjectViewLayout"],
	/** The project view's name. */
	name: string,
	/** The project view's number. */
	number: number,
	/** The project that contains this view. */
	project: ModelTypes["ProjectNext"],
	/** The view's sort-by config. */
	sortBy?: Array<ModelTypes["SortBy"]> | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The view's vertical-group-by field. */
	verticalGroupBy?: Array<number> | undefined,
	/** The view's visible fields. */
	visibleFields?: Array<number> | undefined
};
	/** The connection type for ProjectView. */
["ProjectViewConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ProjectViewEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ProjectView"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectViewEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ProjectView"] | undefined
};
	["ProjectViewLayout"]:ProjectViewLayout;
	/** A user's public key. */
["PublicKey"]: {
		/** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
	accessedAt?: ModelTypes["DateTime"] | undefined,
	/** Identifies the date and time when the key was created. Keys created before
March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
	createdAt?: ModelTypes["DateTime"] | undefined,
	/** The fingerprint for this PublicKey. */
	fingerprint: string,
	id: string,
	/** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
	isReadOnly?: boolean | undefined,
	/** The public key string. */
	key: string,
	/** Identifies the date and time when the key was updated. Keys created before
March 5th, 2014 may have inaccurate values. Values will be null for keys not
owned by the user. */
	updatedAt?: ModelTypes["DateTime"] | undefined
};
	/** The connection type for PublicKey. */
["PublicKeyConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PublicKeyEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PublicKey"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PublicKeyEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PublicKey"] | undefined
};
	/** A repository pull request. */
["PullRequest"]: {
		/** Reason that the conversation was locked. */
	activeLockReason?: ModelTypes["LockReason"] | undefined,
	/** The number of additions in this pull request. */
	additions: number,
	/** A list of Users assigned to this object. */
	assignees: ModelTypes["UserConnection"],
	/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** Returns the auto-merge request object if one exists for this pull request. */
	autoMergeRequest?: ModelTypes["AutoMergeRequest"] | undefined,
	/** Identifies the base Ref associated with the pull request. */
	baseRef?: ModelTypes["Ref"] | undefined,
	/** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
	baseRefName: string,
	/** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
	baseRefOid: ModelTypes["GitObjectID"],
	/** The repository associated with this pull request's base Ref. */
	baseRepository?: ModelTypes["Repository"] | undefined,
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Whether or not the pull request is rebaseable. */
	canBeRebased: boolean,
	/** The number of changed files in this pull request. */
	changedFiles: number,
	/** The HTTP path for the checks of this pull request. */
	checksResourcePath: ModelTypes["URI"],
	/** The HTTP URL for the checks of this pull request. */
	checksUrl: ModelTypes["URI"],
	/** `true` if the pull request is closed */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: ModelTypes["DateTime"] | undefined,
	/** List of issues that were may be closed by this pull request */
	closingIssuesReferences?: ModelTypes["IssueConnection"] | undefined,
	/** A list of comments associated with the pull request. */
	comments: ModelTypes["IssueCommentConnection"],
	/** A list of commits present in this pull request's head branch not present in the base branch. */
	commits: ModelTypes["PullRequestCommitConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The number of deletions in this pull request. */
	deletions: number,
	/** The actor who edited this pull request's body. */
	editor?: ModelTypes["Actor"] | undefined,
	/** Lists the files changed within this pull request. */
	files?: ModelTypes["PullRequestChangedFileConnection"] | undefined,
	/** Identifies the head Ref associated with the pull request. */
	headRef?: ModelTypes["Ref"] | undefined,
	/** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
	headRefName: string,
	/** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
	headRefOid: ModelTypes["GitObjectID"],
	/** The repository associated with this pull request's head Ref. */
	headRepository?: ModelTypes["Repository"] | undefined,
	/** The owner of the repository associated with this pull request's head Ref. */
	headRepositoryOwner?: ModelTypes["RepositoryOwner"] | undefined,
	/** The hovercard information for this issue */
	hovercard: ModelTypes["Hovercard"],
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** The head and base repositories are different. */
	isCrossRepository: boolean,
	/** Identifies if the pull request is a draft. */
	isDraft: boolean,
	/** Is this pull request read by the viewer */
	isReadByViewer?: boolean | undefined,
	/** A list of labels associated with the object. */
	labels?: ModelTypes["LabelConnection"] | undefined,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of latest reviews per user associated with the pull request. */
	latestOpinionatedReviews?: ModelTypes["PullRequestReviewConnection"] | undefined,
	/** A list of latest reviews per user associated with the pull request that are not also pending review. */
	latestReviews?: ModelTypes["PullRequestReviewConnection"] | undefined,
	/** `true` if the pull request is locked */
	locked: boolean,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify: boolean,
	/** The commit that was created when this pull request was merged. */
	mergeCommit?: ModelTypes["Commit"] | undefined,
	/** Detailed information about the current pull request merge state status. */
	mergeStateStatus: ModelTypes["MergeStateStatus"],
	/** Whether or not the pull request can be merged based on the existence of merge conflicts. */
	mergeable: ModelTypes["MergeableState"],
	/** Whether or not the pull request was merged. */
	merged: boolean,
	/** The date and time that the pull request was merged. */
	mergedAt?: ModelTypes["DateTime"] | undefined,
	/** The actor who merged the pull request. */
	mergedBy?: ModelTypes["Actor"] | undefined,
	/** Identifies the milestone associated with the pull request. */
	milestone?: ModelTypes["Milestone"] | undefined,
	/** Identifies the pull request number. */
	number: number,
	/** A list of Users that are participating in the Pull Request conversation. */
	participants: ModelTypes["UserConnection"],
	/** The permalink to the pull request. */
	permalink: ModelTypes["URI"],
	/** The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request. */
	potentialMergeCommit?: ModelTypes["Commit"] | undefined,
	/** List of project cards associated with this pull request. */
	projectCards: ModelTypes["ProjectCardConnection"],
	/** List of project items associated with this pull request. */
	projectItems: ModelTypes["ProjectV2ItemConnection"],
	/** Find a project by project (beta) number. */
	projectNext?: ModelTypes["ProjectNext"] | undefined,
	/** List of project (beta) items associated with this pull request. */
	projectNextItems: ModelTypes["ProjectNextItemConnection"],
	/** Find a project by number. */
	projectV2?: ModelTypes["ProjectV2"] | undefined,
	/** A list of projects (beta) under the owner. */
	projectsNext: ModelTypes["ProjectNextConnection"],
	/** A list of projects under the owner. */
	projectsV2: ModelTypes["ProjectV2Connection"],
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this pull request. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP path for reverting this pull request. */
	revertResourcePath: ModelTypes["URI"],
	/** The HTTP URL for reverting this pull request. */
	revertUrl: ModelTypes["URI"],
	/** The current status of this pull request with respect to code review. */
	reviewDecision?: ModelTypes["PullRequestReviewDecision"] | undefined,
	/** A list of review requests associated with the pull request. */
	reviewRequests?: ModelTypes["ReviewRequestConnection"] | undefined,
	/** The list of all review threads for this pull request. */
	reviewThreads: ModelTypes["PullRequestReviewThreadConnection"],
	/** A list of reviews associated with the pull request. */
	reviews?: ModelTypes["PullRequestReviewConnection"] | undefined,
	/** Identifies the state of the pull request. */
	state: ModelTypes["PullRequestState"],
	/** A list of reviewer suggestions based on commit history and past review comments. */
	suggestedReviewers: Array<ModelTypes["SuggestedReviewer"] | undefined>,
	/** A list of events, comments, commits, etc. associated with the pull request. */
	timeline: ModelTypes["PullRequestTimelineConnection"],
	/** A list of events, comments, commits, etc. associated with the pull request. */
	timelineItems: ModelTypes["PullRequestTimelineItemsConnection"],
	/** Identifies the pull request title. */
	title: string,
	/** Identifies the pull request title rendered to HTML. */
	titleHTML: ModelTypes["HTML"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this pull request. */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Whether or not the viewer can apply suggestion. */
	viewerCanApplySuggestion: boolean,
	/** Check if the viewer can restore the deleted head ref. */
	viewerCanDeleteHeadRef: boolean,
	/** Whether or not the viewer can disable auto-merge */
	viewerCanDisableAutoMerge: boolean,
	/** Can the viewer edit files within this pull request. */
	viewerCanEditFiles: boolean,
	/** Whether or not the viewer can enable auto-merge */
	viewerCanEnableAutoMerge: boolean,
	/** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
	viewerCanMergeAsAdmin: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** The latest review given from the viewer. */
	viewerLatestReview?: ModelTypes["PullRequestReview"] | undefined,
	/** The person who has requested the viewer for review on this pull request. */
	viewerLatestReviewRequest?: ModelTypes["ReviewRequest"] | undefined,
	/** The merge body text for the viewer and method. */
	viewerMergeBodyText: string,
	/** The merge headline text for the viewer and method. */
	viewerMergeHeadlineText: string,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: ModelTypes["SubscriptionState"] | undefined
};
	/** A file changed in a pull request. */
["PullRequestChangedFile"]: {
		/** The number of additions to the file. */
	additions: number,
	/** How the file was changed in this PullRequest */
	changeType: ModelTypes["PatchStatus"],
	/** The number of deletions to the file. */
	deletions: number,
	/** The path of the file. */
	path: string,
	/** The state of the file for the viewer. */
	viewerViewedState: ModelTypes["FileViewedState"]
};
	/** The connection type for PullRequestChangedFile. */
["PullRequestChangedFileConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PullRequestChangedFileEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PullRequestChangedFile"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PullRequestChangedFileEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PullRequestChangedFile"] | undefined
};
	/** Represents a Git commit part of a pull request. */
["PullRequestCommit"]: {
		/** The Git commit object */
	commit: ModelTypes["Commit"],
	id: string,
	/** The pull request this commit belongs to */
	pullRequest: ModelTypes["PullRequest"],
	/** The HTTP path for this pull request commit */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this pull request commit */
	url: ModelTypes["URI"]
};
	/** Represents a commit comment thread part of a pull request. */
["PullRequestCommitCommentThread"]: {
		/** The comments that exist in this thread. */
	comments: ModelTypes["CommitCommentConnection"],
	/** The commit the comments were made on. */
	commit: ModelTypes["Commit"],
	id: string,
	/** The file the comments were made on. */
	path?: string | undefined,
	/** The position in the diff for the commit that the comment was made on. */
	position?: number | undefined,
	/** The pull request this commit comment thread belongs to */
	pullRequest: ModelTypes["PullRequest"],
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"]
};
	/** The connection type for PullRequestCommit. */
["PullRequestCommitConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PullRequestCommitEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PullRequestCommit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PullRequestCommitEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PullRequestCommit"] | undefined
};
	/** The connection type for PullRequest. */
["PullRequestConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PullRequestEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PullRequest"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** This aggregates pull requests opened by a user within one repository. */
["PullRequestContributionsByRepository"]: {
		/** The pull request contributions. */
	contributions: ModelTypes["CreatedPullRequestContributionConnection"],
	/** The repository in which the pull requests were opened. */
	repository: ModelTypes["Repository"]
};
	/** An edge in a connection. */
["PullRequestEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PullRequest"] | undefined
};
	["PullRequestMergeMethod"]:PullRequestMergeMethod;
	/** Ways in which lists of issues can be ordered upon return. */
["PullRequestOrder"]: {
	/** The direction in which to order pull requests by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order pull requests by. */
	field: ModelTypes["PullRequestOrderField"]
};
	["PullRequestOrderField"]:PullRequestOrderField;
	/** A review object for a given pull request. */
["PullRequestReview"]: {
		/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** Indicates whether the author of this review has push access to the repository. */
	authorCanPushToRepository: boolean,
	/** Identifies the pull request review body. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body of this review rendered as plain text. */
	bodyText: string,
	/** A list of review comments for the current pull request review. */
	comments: ModelTypes["PullRequestReviewCommentConnection"],
	/** Identifies the commit associated with this pull request review. */
	commit?: ModelTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of teams that this review was made on behalf of. */
	onBehalfOf: ModelTypes["TeamConnection"],
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** Identifies the pull request associated with this pull request review. */
	pullRequest: ModelTypes["PullRequest"],
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"],
	/** The HTTP path permalink for this PullRequestReview. */
	resourcePath: ModelTypes["URI"],
	/** Identifies the current state of the pull request review. */
	state: ModelTypes["PullRequestReviewState"],
	/** Identifies when the Pull Request Review was submitted */
	submittedAt?: ModelTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL permalink for this PullRequestReview. */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** A review comment associated with a given repository pull request. */
["PullRequestReviewComment"]: {
		/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** The comment body of this review comment. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The comment body of this review comment rendered as plain text. */
	bodyText: string,
	/** Identifies the commit associated with the comment. */
	commit?: ModelTypes["Commit"] | undefined,
	/** Identifies when the comment was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The diff hunk to which the comment applies. */
	diffHunk: string,
	/** Identifies when the comment was created in a draft state. */
	draftedAt: ModelTypes["DateTime"],
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies the original commit associated with the comment. */
	originalCommit?: ModelTypes["Commit"] | undefined,
	/** The original line index in the diff to which the comment applies. */
	originalPosition: number,
	/** Identifies when the comment body is outdated */
	outdated: boolean,
	/** The path to which the comment applies. */
	path: string,
	/** The line index in the diff to which the comment applies. */
	position?: number | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** The pull request associated with this review comment. */
	pullRequest: ModelTypes["PullRequest"],
	/** The pull request review associated with this review comment. */
	pullRequestReview?: ModelTypes["PullRequestReview"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The comment this is a reply to. */
	replyTo?: ModelTypes["PullRequestReviewComment"] | undefined,
	/** The repository associated with this node. */
	repository: ModelTypes["Repository"],
	/** The HTTP path permalink for this review comment. */
	resourcePath: ModelTypes["URI"],
	/** Identifies the state of the comment. */
	state: ModelTypes["PullRequestReviewCommentState"],
	/** Identifies when the comment was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL permalink for this review comment. */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for PullRequestReviewComment. */
["PullRequestReviewCommentConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PullRequestReviewCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PullRequestReviewComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PullRequestReviewCommentEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PullRequestReviewComment"] | undefined
};
	["PullRequestReviewCommentState"]:PullRequestReviewCommentState;
	/** The connection type for PullRequestReview. */
["PullRequestReviewConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PullRequestReviewEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PullRequestReview"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** This aggregates pull request reviews made by a user within one repository. */
["PullRequestReviewContributionsByRepository"]: {
		/** The pull request review contributions. */
	contributions: ModelTypes["CreatedPullRequestReviewContributionConnection"],
	/** The repository in which the pull request reviews were made. */
	repository: ModelTypes["Repository"]
};
	["PullRequestReviewDecision"]:PullRequestReviewDecision;
	/** An edge in a connection. */
["PullRequestReviewEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PullRequestReview"] | undefined
};
	["PullRequestReviewEvent"]:PullRequestReviewEvent;
	["PullRequestReviewState"]:PullRequestReviewState;
	/** A threaded list of comments for a given pull request. */
["PullRequestReviewThread"]: {
		/** A list of pull request comments associated with the thread. */
	comments: ModelTypes["PullRequestReviewCommentConnection"],
	/** The side of the diff on which this thread was placed. */
	diffSide: ModelTypes["DiffSide"],
	id: string,
	/** Whether or not the thread has been collapsed (resolved) */
	isCollapsed: boolean,
	/** Indicates whether this thread was outdated by newer changes. */
	isOutdated: boolean,
	/** Whether this thread has been resolved */
	isResolved: boolean,
	/** The line in the file to which this thread refers */
	line?: number | undefined,
	/** The original line in the file to which this thread refers. */
	originalLine?: number | undefined,
	/** The original start line in the file to which this thread refers (multi-line only). */
	originalStartLine?: number | undefined,
	/** Identifies the file path of this thread. */
	path: string,
	/** Identifies the pull request associated with this thread. */
	pullRequest: ModelTypes["PullRequest"],
	/** Identifies the repository associated with this thread. */
	repository: ModelTypes["Repository"],
	/** The user who resolved this thread */
	resolvedBy?: ModelTypes["User"] | undefined,
	/** The side of the diff that the first line of the thread starts on (multi-line only) */
	startDiffSide?: ModelTypes["DiffSide"] | undefined,
	/** The start line in the file to which this thread refers (multi-line only) */
	startLine?: number | undefined,
	/** Indicates whether the current viewer can reply to this thread. */
	viewerCanReply: boolean,
	/** Whether or not the viewer can resolve this thread */
	viewerCanResolve: boolean,
	/** Whether or not the viewer can unresolve this thread */
	viewerCanUnresolve: boolean
};
	/** Review comment threads for a pull request review. */
["PullRequestReviewThreadConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PullRequestReviewThreadEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PullRequestReviewThread"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PullRequestReviewThreadEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PullRequestReviewThread"] | undefined
};
	/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
["PullRequestRevisionMarker"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The last commit the viewer has seen. */
	lastSeenCommit: ModelTypes["Commit"],
	/** The pull request to which the marker belongs. */
	pullRequest: ModelTypes["PullRequest"]
};
	["PullRequestState"]:PullRequestState;
	/** A repository pull request template. */
["PullRequestTemplate"]: {
		/** The body of the template */
	body?: string | undefined,
	/** The filename of the template */
	filename?: string | undefined,
	/** The repository the template belongs to */
	repository: ModelTypes["Repository"]
};
	/** A threaded list of comments for a given pull request. */
["PullRequestThread"]: {
		/** A list of pull request comments associated with the thread. */
	comments: ModelTypes["PullRequestReviewCommentConnection"],
	/** The side of the diff on which this thread was placed. */
	diffSide: ModelTypes["DiffSide"],
	id: string,
	/** Whether or not the thread has been collapsed (resolved) */
	isCollapsed: boolean,
	/** Indicates whether this thread was outdated by newer changes. */
	isOutdated: boolean,
	/** Whether this thread has been resolved */
	isResolved: boolean,
	/** The line in the file to which this thread refers */
	line?: number | undefined,
	/** Identifies the pull request associated with this thread. */
	pullRequest: ModelTypes["PullRequest"],
	/** Identifies the repository associated with this thread. */
	repository: ModelTypes["Repository"],
	/** The user who resolved this thread */
	resolvedBy?: ModelTypes["User"] | undefined,
	/** The side of the diff that the first line of the thread starts on (multi-line only) */
	startDiffSide?: ModelTypes["DiffSide"] | undefined,
	/** The line of the first file diff in the thread. */
	startLine?: number | undefined,
	/** Indicates whether the current viewer can reply to this thread. */
	viewerCanReply: boolean,
	/** Whether or not the viewer can resolve this thread */
	viewerCanResolve: boolean,
	/** Whether or not the viewer can unresolve this thread */
	viewerCanUnresolve: boolean
};
	/** The connection type for PullRequestTimelineItem. */
["PullRequestTimelineConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PullRequestTimelineItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PullRequestTimelineItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An item in a pull request timeline */
["PullRequestTimelineItem"]:ModelTypes["AssignedEvent"] | ModelTypes["BaseRefDeletedEvent"] | ModelTypes["BaseRefForcePushedEvent"] | ModelTypes["ClosedEvent"] | ModelTypes["Commit"] | ModelTypes["CommitCommentThread"] | ModelTypes["CrossReferencedEvent"] | ModelTypes["DemilestonedEvent"] | ModelTypes["DeployedEvent"] | ModelTypes["DeploymentEnvironmentChangedEvent"] | ModelTypes["HeadRefDeletedEvent"] | ModelTypes["HeadRefForcePushedEvent"] | ModelTypes["HeadRefRestoredEvent"] | ModelTypes["IssueComment"] | ModelTypes["LabeledEvent"] | ModelTypes["LockedEvent"] | ModelTypes["MergedEvent"] | ModelTypes["MilestonedEvent"] | ModelTypes["PullRequestReview"] | ModelTypes["PullRequestReviewComment"] | ModelTypes["PullRequestReviewThread"] | ModelTypes["ReferencedEvent"] | ModelTypes["RenamedTitleEvent"] | ModelTypes["ReopenedEvent"] | ModelTypes["ReviewDismissedEvent"] | ModelTypes["ReviewRequestRemovedEvent"] | ModelTypes["ReviewRequestedEvent"] | ModelTypes["SubscribedEvent"] | ModelTypes["UnassignedEvent"] | ModelTypes["UnlabeledEvent"] | ModelTypes["UnlockedEvent"] | ModelTypes["UnsubscribedEvent"] | ModelTypes["UserBlockedEvent"];
	/** An edge in a connection. */
["PullRequestTimelineItemEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PullRequestTimelineItem"] | undefined
};
	/** An item in a pull request timeline */
["PullRequestTimelineItems"]:ModelTypes["AddedToProjectEvent"] | ModelTypes["AssignedEvent"] | ModelTypes["AutoMergeDisabledEvent"] | ModelTypes["AutoMergeEnabledEvent"] | ModelTypes["AutoRebaseEnabledEvent"] | ModelTypes["AutoSquashEnabledEvent"] | ModelTypes["AutomaticBaseChangeFailedEvent"] | ModelTypes["AutomaticBaseChangeSucceededEvent"] | ModelTypes["BaseRefChangedEvent"] | ModelTypes["BaseRefDeletedEvent"] | ModelTypes["BaseRefForcePushedEvent"] | ModelTypes["ClosedEvent"] | ModelTypes["CommentDeletedEvent"] | ModelTypes["ConnectedEvent"] | ModelTypes["ConvertToDraftEvent"] | ModelTypes["ConvertedNoteToIssueEvent"] | ModelTypes["ConvertedToDiscussionEvent"] | ModelTypes["CrossReferencedEvent"] | ModelTypes["DemilestonedEvent"] | ModelTypes["DeployedEvent"] | ModelTypes["DeploymentEnvironmentChangedEvent"] | ModelTypes["DisconnectedEvent"] | ModelTypes["HeadRefDeletedEvent"] | ModelTypes["HeadRefForcePushedEvent"] | ModelTypes["HeadRefRestoredEvent"] | ModelTypes["IssueComment"] | ModelTypes["LabeledEvent"] | ModelTypes["LockedEvent"] | ModelTypes["MarkedAsDuplicateEvent"] | ModelTypes["MentionedEvent"] | ModelTypes["MergedEvent"] | ModelTypes["MilestonedEvent"] | ModelTypes["MovedColumnsInProjectEvent"] | ModelTypes["PinnedEvent"] | ModelTypes["PullRequestCommit"] | ModelTypes["PullRequestCommitCommentThread"] | ModelTypes["PullRequestReview"] | ModelTypes["PullRequestReviewThread"] | ModelTypes["PullRequestRevisionMarker"] | ModelTypes["ReadyForReviewEvent"] | ModelTypes["ReferencedEvent"] | ModelTypes["RemovedFromProjectEvent"] | ModelTypes["RenamedTitleEvent"] | ModelTypes["ReopenedEvent"] | ModelTypes["ReviewDismissedEvent"] | ModelTypes["ReviewRequestRemovedEvent"] | ModelTypes["ReviewRequestedEvent"] | ModelTypes["SubscribedEvent"] | ModelTypes["TransferredEvent"] | ModelTypes["UnassignedEvent"] | ModelTypes["UnlabeledEvent"] | ModelTypes["UnlockedEvent"] | ModelTypes["UnmarkedAsDuplicateEvent"] | ModelTypes["UnpinnedEvent"] | ModelTypes["UnsubscribedEvent"] | ModelTypes["UserBlockedEvent"];
	/** The connection type for PullRequestTimelineItems. */
["PullRequestTimelineItemsConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PullRequestTimelineItemsEdge"] | undefined> | undefined,
	/** Identifies the count of items after applying `before` and `after` filters. */
	filteredCount: number,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PullRequestTimelineItems"] | undefined> | undefined,
	/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
	pageCount: number,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** Identifies the date and time when the timeline was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** An edge in a connection. */
["PullRequestTimelineItemsEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PullRequestTimelineItems"] | undefined
};
	["PullRequestTimelineItemsItemType"]:PullRequestTimelineItemsItemType;
	["PullRequestUpdateState"]:PullRequestUpdateState;
	/** A Git push. */
["Push"]: {
		id: string,
	/** The SHA after the push */
	nextSha?: ModelTypes["GitObjectID"] | undefined,
	/** The permalink for this push. */
	permalink: ModelTypes["URI"],
	/** The SHA before the push */
	previousSha?: ModelTypes["GitObjectID"] | undefined,
	/** The actor who pushed */
	pusher: ModelTypes["Actor"],
	/** The repository that was pushed to */
	repository: ModelTypes["Repository"]
};
	/** A team, user, or app who has the ability to push to a protected branch. */
["PushAllowance"]: {
		/** The actor that can push. */
	actor?: ModelTypes["PushAllowanceActor"] | undefined,
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?: ModelTypes["BranchProtectionRule"] | undefined,
	id: string
};
	/** Types that can be an actor. */
["PushAllowanceActor"]:ModelTypes["App"] | ModelTypes["Team"] | ModelTypes["User"];
	/** The connection type for PushAllowance. */
["PushAllowanceConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["PushAllowanceEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["PushAllowance"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PushAllowanceEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["PushAllowance"] | undefined
};
	/** The query root of GitHub's GraphQL interface. */
["Query"]: {
		/** Look up a code of conduct by its key */
	codeOfConduct?: ModelTypes["CodeOfConduct"] | undefined,
	/** Look up a code of conduct by its key */
	codesOfConduct?: Array<ModelTypes["CodeOfConduct"] | undefined> | undefined,
	/** Look up an enterprise by URL slug. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
	enterpriseAdministratorInvitation?: ModelTypes["EnterpriseAdministratorInvitation"] | undefined,
	/** Look up a pending enterprise administrator invitation by invitation token. */
	enterpriseAdministratorInvitationByToken?: ModelTypes["EnterpriseAdministratorInvitation"] | undefined,
	/** Look up an open source license by its key */
	license?: ModelTypes["License"] | undefined,
	/** Return a list of known open source licenses */
	licenses: Array<ModelTypes["License"] | undefined>,
	/** Get alphabetically sorted list of Marketplace categories */
	marketplaceCategories: Array<ModelTypes["MarketplaceCategory"]>,
	/** Look up a Marketplace category by its slug. */
	marketplaceCategory?: ModelTypes["MarketplaceCategory"] | undefined,
	/** Look up a single Marketplace listing */
	marketplaceListing?: ModelTypes["MarketplaceListing"] | undefined,
	/** Look up Marketplace listings */
	marketplaceListings: ModelTypes["MarketplaceListingConnection"],
	/** Return information about the GitHub instance */
	meta: ModelTypes["GitHubMetadata"],
	/** Fetches an object given its ID. */
	node?: ModelTypes["Node"] | undefined,
	/** Lookup nodes by a list of IDs. */
	nodes: Array<ModelTypes["Node"] | undefined>,
	/** Lookup a organization by login. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The client's rate limit information. */
	rateLimit?: ModelTypes["RateLimit"] | undefined,
	/** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
	relay: ModelTypes["Query"],
	/** Lookup a given repository by the owner and repository name. */
	repository?: ModelTypes["Repository"] | undefined,
	/** Lookup a repository owner (ie. either a User or an Organization) by login. */
	repositoryOwner?: ModelTypes["RepositoryOwner"] | undefined,
	/** Lookup resource by a URL. */
	resource?: ModelTypes["UniformResourceLocatable"] | undefined,
	/** Perform a search across resources, returning a maximum of 1,000 results. */
	search: ModelTypes["SearchResultItemConnection"],
	/** GitHub Security Advisories */
	securityAdvisories: ModelTypes["SecurityAdvisoryConnection"],
	/** Fetch a Security Advisory by its GHSA ID */
	securityAdvisory?: ModelTypes["SecurityAdvisory"] | undefined,
	/** Software Vulnerabilities documented by GitHub Security Advisories */
	securityVulnerabilities: ModelTypes["SecurityVulnerabilityConnection"],
	/** Users and organizations who can be sponsored via GitHub Sponsors. */
	sponsorables: ModelTypes["SponsorableItemConnection"],
	/** Look up a topic by name. */
	topic?: ModelTypes["Topic"] | undefined,
	/** Lookup a user by login. */
	user?: ModelTypes["User"] | undefined,
	/** The currently authenticated user. */
	viewer: ModelTypes["User"]
};
	/** Represents the client's rate limit. */
["RateLimit"]: {
		/** The point cost for the current query counting against the rate limit. */
	cost: number,
	/** The maximum number of points the client is permitted to consume in a 60 minute window. */
	limit: number,
	/** The maximum number of nodes this query may return */
	nodeCount: number,
	/** The number of points remaining in the current rate limit window. */
	remaining: number,
	/** The time at which the current rate limit window resets in UTC epoch seconds. */
	resetAt: ModelTypes["DateTime"],
	/** The number of points used in the current rate limit window. */
	used: number
};
	/** Represents a subject that can be reacted on. */
["Reactable"]: ModelTypes["CommitComment"] | ModelTypes["Discussion"] | ModelTypes["DiscussionComment"] | ModelTypes["Issue"] | ModelTypes["IssueComment"] | ModelTypes["PullRequest"] | ModelTypes["PullRequestReview"] | ModelTypes["PullRequestReviewComment"] | ModelTypes["Release"] | ModelTypes["TeamDiscussion"] | ModelTypes["TeamDiscussionComment"];
	/** The connection type for User. */
["ReactingUserConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ReactingUserEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user that's made a reaction. */
["ReactingUserEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	node: ModelTypes["User"],
	/** The moment when the user made the reaction. */
	reactedAt: ModelTypes["DateTime"]
};
	/** An emoji reaction to a particular piece of content. */
["Reaction"]: {
		/** Identifies the emoji reaction. */
	content: ModelTypes["ReactionContent"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The reactable piece of content */
	reactable: ModelTypes["Reactable"],
	/** Identifies the user who created this reaction. */
	user?: ModelTypes["User"] | undefined
};
	/** A list of reactions that have been left on the subject. */
["ReactionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ReactionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Reaction"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** Whether or not the authenticated user has left a reaction on the subject. */
	viewerHasReacted: boolean
};
	["ReactionContent"]:ReactionContent;
	/** An edge in a connection. */
["ReactionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Reaction"] | undefined
};
	/** A group of emoji reactions to a particular piece of content. */
["ReactionGroup"]: {
		/** Identifies the emoji reaction. */
	content: ModelTypes["ReactionContent"],
	/** Identifies when the reaction was created. */
	createdAt?: ModelTypes["DateTime"] | undefined,
	/** Reactors to the reaction subject with the emotion represented by this reaction group. */
	reactors: ModelTypes["ReactorConnection"],
	/** The subject that was reacted to. */
	subject: ModelTypes["Reactable"],
	/** Users who have reacted to the reaction subject with the emotion represented by this reaction group */
	users: ModelTypes["ReactingUserConnection"],
	/** Whether or not the authenticated user has left a reaction on the subject. */
	viewerHasReacted: boolean
};
	/** Ways in which lists of reactions can be ordered upon return. */
["ReactionOrder"]: {
	/** The direction in which to order reactions by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order reactions by. */
	field: ModelTypes["ReactionOrderField"]
};
	["ReactionOrderField"]:ReactionOrderField;
	/** Types that can be assigned to reactions. */
["Reactor"]:ModelTypes["Bot"] | ModelTypes["Mannequin"] | ModelTypes["Organization"] | ModelTypes["User"];
	/** The connection type for Reactor. */
["ReactorConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ReactorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Reactor"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents an author of a reaction. */
["ReactorEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The author of the reaction. */
	node: ModelTypes["Reactor"],
	/** The moment when the user made the reaction. */
	reactedAt: ModelTypes["DateTime"]
};
	/** Represents a 'ready_for_review' event on a given pull request. */
["ReadyForReviewEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"],
	/** The HTTP path for this ready for review event. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this ready for review event. */
	url: ModelTypes["URI"]
};
	/** Represents a Git reference. */
["Ref"]: {
		/** A list of pull requests with this ref as the head ref. */
	associatedPullRequests: ModelTypes["PullRequestConnection"],
	/** Branch protection rules for this ref */
	branchProtectionRule?: ModelTypes["BranchProtectionRule"] | undefined,
	/** Compares the current ref as a base ref to another head ref, if the comparison can be made. */
	compare?: ModelTypes["Comparison"] | undefined,
	id: string,
	/** The ref name. */
	name: string,
	/** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
	prefix: string,
	/** Branch protection rules that are viewable by non-admins */
	refUpdateRule?: ModelTypes["RefUpdateRule"] | undefined,
	/** The repository the ref belongs to. */
	repository: ModelTypes["Repository"],
	/** The object the ref points to. Returns null when object does not exist. */
	target?: ModelTypes["GitObject"] | undefined
};
	/** The connection type for Ref. */
["RefConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["RefEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Ref"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["RefEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Ref"] | undefined
};
	/** Ways in which lists of git refs can be ordered upon return. */
["RefOrder"]: {
	/** The direction in which to order refs by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order refs by. */
	field: ModelTypes["RefOrderField"]
};
	["RefOrderField"]:RefOrderField;
	/** A ref update */
["RefUpdate"]: {
	/** The value this ref should be updated to. */
	afterOid: ModelTypes["GitObjectID"],
	/** The value this ref needs to point to before the update. */
	beforeOid?: ModelTypes["GitObjectID"] | undefined,
	/** Force a non fast-forward update. */
	force?: boolean | undefined,
	/** The fully qualified name of the ref to be update. For example `refs/heads/branch-name` */
	name: ModelTypes["GitRefname"]
};
	/** A ref update rules for a viewer. */
["RefUpdateRule"]: {
		/** Can this branch be deleted. */
	allowsDeletions: boolean,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes: boolean,
	/** Can matching branches be created. */
	blocksCreations: boolean,
	/** Identifies the protection rule pattern. */
	pattern: string,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string | undefined> | undefined,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews: boolean,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution: boolean,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory: boolean,
	/** Are commits required to be signed. */
	requiresSignatures: boolean,
	/** Is the viewer allowed to dismiss reviews. */
	viewerAllowedToDismissReviews: boolean,
	/** Can the viewer push to the branch */
	viewerCanPush: boolean
};
	/** Represents a 'referenced' event on a given `ReferencedSubject`. */
["ReferencedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the commit associated with the 'referenced' event. */
	commit?: ModelTypes["Commit"] | undefined,
	/** Identifies the repository associated with the 'referenced' event. */
	commitRepository: ModelTypes["Repository"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Reference originated in a different repository. */
	isCrossRepository: boolean,
	/** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
	isDirectReference: boolean,
	/** Object referenced by event. */
	subject: ModelTypes["ReferencedSubject"]
};
	/** Any referencable object */
["ReferencedSubject"]:ModelTypes["Issue"] | ModelTypes["PullRequest"];
	/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
["RegenerateEnterpriseIdentityProviderRecoveryCodesInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set an identity provider. */
	enterpriseId: string
};
	/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
["RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The identity provider for the enterprise. */
	identityProvider?: ModelTypes["EnterpriseIdentityProvider"] | undefined
};
	/** Autogenerated input type of RegenerateVerifiableDomainToken */
["RegenerateVerifiableDomainTokenInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the verifiable domain to regenerate the verification token of. */
	id: string
};
	/** Autogenerated return type of RegenerateVerifiableDomainToken */
["RegenerateVerifiableDomainTokenPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The verification token that was generated. */
	verificationToken?: string | undefined
};
	/** Autogenerated input type of RejectDeployments */
["RejectDeploymentsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Optional comment for rejecting deployments */
	comment?: string | undefined,
	/** The ids of environments to reject deployments */
	environmentIds: Array<string>,
	/** The node ID of the workflow run containing the pending deployments. */
	workflowRunId: string
};
	/** Autogenerated return type of RejectDeployments */
["RejectDeploymentsPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The affected deployments. */
	deployments?: Array<ModelTypes["Deployment"]> | undefined
};
	/** A release contains the content for a release. */
["Release"]: {
		/** The author of the release */
	author?: ModelTypes["User"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The description of the release. */
	description?: string | undefined,
	/** The description of this release rendered to HTML. */
	descriptionHTML?: ModelTypes["HTML"] | undefined,
	id: string,
	/** Whether or not the release is a draft */
	isDraft: boolean,
	/** Whether or not the release is the latest releast */
	isLatest: boolean,
	/** Whether or not the release is a prerelease */
	isPrerelease: boolean,
	/** A list of users mentioned in the release description */
	mentions?: ModelTypes["UserConnection"] | undefined,
	/** The title of the release. */
	name?: string | undefined,
	/** Identifies the date and time when the release was created. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** List of releases assets which are dependent on this release. */
	releaseAssets: ModelTypes["ReleaseAssetConnection"],
	/** The repository that the release belongs to. */
	repository: ModelTypes["Repository"],
	/** The HTTP path for this issue */
	resourcePath: ModelTypes["URI"],
	/** A description of the release, rendered to HTML without any links in it. */
	shortDescriptionHTML?: ModelTypes["HTML"] | undefined,
	/** The Git tag the release points to */
	tag?: ModelTypes["Ref"] | undefined,
	/** The tag commit for this release. */
	tagCommit?: ModelTypes["Commit"] | undefined,
	/** The name of the release's Git tag */
	tagName: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this issue */
	url: ModelTypes["URI"],
	/** Can user react to this subject */
	viewerCanReact: boolean
};
	/** A release asset contains the content for a release asset. */
["ReleaseAsset"]: {
		/** The asset's content-type */
	contentType: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The number of times this asset was downloaded */
	downloadCount: number,
	/** Identifies the URL where you can download the release asset via the browser. */
	downloadUrl: ModelTypes["URI"],
	id: string,
	/** Identifies the title of the release asset. */
	name: string,
	/** Release that the asset is associated with */
	release?: ModelTypes["Release"] | undefined,
	/** The size (in bytes) of the asset */
	size: number,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The user that performed the upload */
	uploadedBy: ModelTypes["User"],
	/** Identifies the URL of the release asset. */
	url: ModelTypes["URI"]
};
	/** The connection type for ReleaseAsset. */
["ReleaseAssetConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ReleaseAssetEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ReleaseAsset"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ReleaseAssetEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ReleaseAsset"] | undefined
};
	/** The connection type for Release. */
["ReleaseConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ReleaseEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Release"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ReleaseEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Release"] | undefined
};
	/** Ways in which lists of releases can be ordered upon return. */
["ReleaseOrder"]: {
	/** The direction in which to order releases by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order releases by. */
	field: ModelTypes["ReleaseOrderField"]
};
	["ReleaseOrderField"]:ReleaseOrderField;
	/** Autogenerated input type of RemoveAssigneesFromAssignable */
["RemoveAssigneesFromAssignableInput"]: {
	/** The id of the assignable object to remove assignees from. */
	assignableId: string,
	/** The id of users to remove as assignees. */
	assigneeIds: Array<string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated return type of RemoveAssigneesFromAssignable */
["RemoveAssigneesFromAssignablePayload"]: {
		/** The item that was unassigned. */
	assignable?: ModelTypes["Assignable"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of RemoveEnterpriseAdmin */
["RemoveEnterpriseAdminInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Enterprise ID from which to remove the administrator. */
	enterpriseId: string,
	/** The login of the user to remove as an administrator. */
	login: string
};
	/** Autogenerated return type of RemoveEnterpriseAdmin */
["RemoveEnterpriseAdminPayload"]: {
		/** The user who was removed as an administrator. */
	admin?: ModelTypes["User"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated enterprise. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of removing an administrator. */
	message?: string | undefined,
	/** The viewer performing the mutation. */
	viewer?: ModelTypes["User"] | undefined
};
	/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
["RemoveEnterpriseIdentityProviderInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise from which to remove the identity provider. */
	enterpriseId: string
};
	/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
["RemoveEnterpriseIdentityProviderPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The identity provider that was removed from the enterprise. */
	identityProvider?: ModelTypes["EnterpriseIdentityProvider"] | undefined
};
	/** Autogenerated input type of RemoveEnterpriseOrganization */
["RemoveEnterpriseOrganizationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise from which the organization should be removed. */
	enterpriseId: string,
	/** The ID of the organization to remove from the enterprise. */
	organizationId: string
};
	/** Autogenerated return type of RemoveEnterpriseOrganization */
["RemoveEnterpriseOrganizationPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated enterprise. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** The organization that was removed from the enterprise. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The viewer performing the mutation. */
	viewer?: ModelTypes["User"] | undefined
};
	/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
["RemoveEnterpriseSupportEntitlementInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string,
	/** The login of a member who will lose the support entitlement. */
	login: string
};
	/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */
["RemoveEnterpriseSupportEntitlementPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of removing the support entitlement. */
	message?: string | undefined
};
	/** Autogenerated input type of RemoveLabelsFromLabelable */
["RemoveLabelsFromLabelableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ids of labels to remove. */
	labelIds: Array<string>,
	/** The id of the Labelable to remove labels from. */
	labelableId: string
};
	/** Autogenerated return type of RemoveLabelsFromLabelable */
["RemoveLabelsFromLabelablePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Labelable the labels were removed from. */
	labelable?: ModelTypes["Labelable"] | undefined
};
	/** Autogenerated input type of RemoveOutsideCollaborator */
["RemoveOutsideCollaboratorInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization to remove the outside collaborator from. */
	organizationId: string,
	/** The ID of the outside collaborator to remove. */
	userId: string
};
	/** Autogenerated return type of RemoveOutsideCollaborator */
["RemoveOutsideCollaboratorPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The user that was removed as an outside collaborator. */
	removedUser?: ModelTypes["User"] | undefined
};
	/** Autogenerated input type of RemoveReaction */
["RemoveReactionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the emoji reaction to remove. */
	content: ModelTypes["ReactionContent"],
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of RemoveReaction */
["RemoveReactionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The reaction object. */
	reaction?: ModelTypes["Reaction"] | undefined,
	/** The reactable subject. */
	subject?: ModelTypes["Reactable"] | undefined
};
	/** Autogenerated input type of RemoveStar */
["RemoveStarInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Starrable ID to unstar. */
	starrableId: string
};
	/** Autogenerated return type of RemoveStar */
["RemoveStarPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The starrable. */
	starrable?: ModelTypes["Starrable"] | undefined
};
	/** Autogenerated input type of RemoveUpvote */
["RemoveUpvoteInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion or comment to remove upvote. */
	subjectId: string
};
	/** Autogenerated return type of RemoveUpvote */
["RemoveUpvotePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The votable subject. */
	subject?: ModelTypes["Votable"] | undefined
};
	/** Represents a 'removed_from_project' event on a given issue or pull request. */
["RemovedFromProjectEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Project referenced by event. */
	project?: ModelTypes["Project"] | undefined,
	/** Column name referenced by this project event. */
	projectColumnName: string
};
	/** Represents a 'renamed' event on a given issue or pull request */
["RenamedTitleEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the current title of the issue or pull request. */
	currentTitle: string,
	id: string,
	/** Identifies the previous title of the issue or pull request. */
	previousTitle: string,
	/** Subject that was renamed. */
	subject: ModelTypes["RenamedTitleSubject"]
};
	/** An object which has a renamable title */
["RenamedTitleSubject"]:ModelTypes["Issue"] | ModelTypes["PullRequest"];
	/** Autogenerated input type of ReopenIssue */
["ReopenIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the issue to be opened. */
	issueId: string
};
	/** Autogenerated return type of ReopenIssue */
["ReopenIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was opened. */
	issue?: ModelTypes["Issue"] | undefined
};
	/** Autogenerated input type of ReopenPullRequest */
["ReopenPullRequestInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to be reopened. */
	pullRequestId: string
};
	/** Autogenerated return type of ReopenPullRequest */
["ReopenPullRequestPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that was reopened. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Represents a 'reopened' event on any `Closable`. */
["ReopenedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Object that was reopened. */
	closable: ModelTypes["Closable"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** The reason the issue state was changed to open. */
	stateReason?: ModelTypes["IssueStateReason"] | undefined
};
	/** Audit log entry for a repo.access event. */
["RepoAccessAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: ModelTypes["RepoAccessAuditEntryVisibility"] | undefined
};
	["RepoAccessAuditEntryVisibility"]:RepoAccessAuditEntryVisibility;
	/** Audit log entry for a repo.add_member event. */
["RepoAddMemberAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: ModelTypes["RepoAddMemberAuditEntryVisibility"] | undefined
};
	["RepoAddMemberAuditEntryVisibility"]:RepoAddMemberAuditEntryVisibility;
	/** Audit log entry for a repo.add_topic event. */
["RepoAddTopicAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The name of the topic added to the repository */
	topic?: ModelTypes["Topic"] | undefined,
	/** The name of the topic added to the repository */
	topicName?: string | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.archived event. */
["RepoArchivedAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: ModelTypes["RepoArchivedAuditEntryVisibility"] | undefined
};
	["RepoArchivedAuditEntryVisibility"]:RepoArchivedAuditEntryVisibility;
	/** Audit log entry for a repo.change_merge_setting event. */
["RepoChangeMergeSettingAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** Whether the change was to enable (true) or disable (false) the merge type */
	isEnabled?: boolean | undefined,
	/** The merge method affected by the change */
	mergeType?: ModelTypes["RepoChangeMergeSettingAuditEntryMergeType"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["RepoChangeMergeSettingAuditEntryMergeType"]:RepoChangeMergeSettingAuditEntryMergeType;
	/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
["RepoConfigDisableAnonymousGitAccessAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.disable_collaborators_only event. */
["RepoConfigDisableCollaboratorsOnlyAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.disable_contributors_only event. */
["RepoConfigDisableContributorsOnlyAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
["RepoConfigDisableSockpuppetDisallowedAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
["RepoConfigEnableAnonymousGitAccessAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.enable_collaborators_only event. */
["RepoConfigEnableCollaboratorsOnlyAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.enable_contributors_only event. */
["RepoConfigEnableContributorsOnlyAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
["RepoConfigEnableSockpuppetDisallowedAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
["RepoConfigLockAnonymousGitAccessAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
["RepoConfigUnlockAnonymousGitAccessAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repo.create event. */
["RepoCreateAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The name of the parent repository for this forked repository. */
	forkParentName?: string | undefined,
	/** The name of the root repository for this network. */
	forkSourceName?: string | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: ModelTypes["RepoCreateAuditEntryVisibility"] | undefined
};
	["RepoCreateAuditEntryVisibility"]:RepoCreateAuditEntryVisibility;
	/** Audit log entry for a repo.destroy event. */
["RepoDestroyAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: ModelTypes["RepoDestroyAuditEntryVisibility"] | undefined
};
	["RepoDestroyAuditEntryVisibility"]:RepoDestroyAuditEntryVisibility;
	/** Audit log entry for a repo.remove_member event. */
["RepoRemoveMemberAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: ModelTypes["RepoRemoveMemberAuditEntryVisibility"] | undefined
};
	["RepoRemoveMemberAuditEntryVisibility"]:RepoRemoveMemberAuditEntryVisibility;
	/** Audit log entry for a repo.remove_topic event. */
["RepoRemoveTopicAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The name of the topic added to the repository */
	topic?: ModelTypes["Topic"] | undefined,
	/** The name of the topic added to the repository */
	topicName?: string | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	["ReportedContentClassifiers"]:ReportedContentClassifiers;
	/** A repository contains the content for a project. */
["Repository"]: {
		/** Whether or not a pull request head branch that is behind its base branch can
always be updated even if it is not required to be up to date before merging. */
	allowUpdateBranch: boolean,
	/** A list of users that can be assigned to issues in this repository. */
	assignableUsers: ModelTypes["UserConnection"],
	/** Whether or not Auto-merge can be enabled on pull requests in this repository. */
	autoMergeAllowed: boolean,
	/** A list of branch protection rules for this repository. */
	branchProtectionRules: ModelTypes["BranchProtectionRuleConnection"],
	/** Returns the code of conduct for this repository */
	codeOfConduct?: ModelTypes["CodeOfConduct"] | undefined,
	/** Information extracted from the repository's `CODEOWNERS` file. */
	codeowners?: ModelTypes["RepositoryCodeowners"] | undefined,
	/** A list of collaborators associated with the repository. */
	collaborators?: ModelTypes["RepositoryCollaboratorConnection"] | undefined,
	/** A list of commit comments associated with the repository. */
	commitComments: ModelTypes["CommitCommentConnection"],
	/** Returns a list of contact links associated to the repository */
	contactLinks?: Array<ModelTypes["RepositoryContactLink"]> | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The Ref associated with the repository's default branch. */
	defaultBranchRef?: ModelTypes["Ref"] | undefined,
	/** Whether or not branches are automatically deleted when merged in this repository. */
	deleteBranchOnMerge: boolean,
	/** A list of dependency manifests contained in the repository */
	dependencyGraphManifests?: ModelTypes["DependencyGraphManifestConnection"] | undefined,
	/** A list of deploy keys that are on this repository. */
	deployKeys: ModelTypes["DeployKeyConnection"],
	/** Deployments associated with the repository */
	deployments: ModelTypes["DeploymentConnection"],
	/** The description of the repository. */
	description?: string | undefined,
	/** The description of the repository rendered to HTML. */
	descriptionHTML: ModelTypes["HTML"],
	/** Returns a single discussion from the current repository by number. */
	discussion?: ModelTypes["Discussion"] | undefined,
	/** A list of discussion categories that are available in the repository. */
	discussionCategories: ModelTypes["DiscussionCategoryConnection"],
	/** A discussion category by slug. */
	discussionCategory?: ModelTypes["DiscussionCategory"] | undefined,
	/** A list of discussions that have been opened in the repository. */
	discussions: ModelTypes["DiscussionConnection"],
	/** The number of kilobytes this repository occupies on disk. */
	diskUsage?: number | undefined,
	/** Returns a single active environment from the current repository by name. */
	environment?: ModelTypes["Environment"] | undefined,
	/** A list of environments that are in this repository. */
	environments: ModelTypes["EnvironmentConnection"],
	/** Returns how many forks there are of this repository in the whole network. */
	forkCount: number,
	/** Whether this repository allows forks. */
	forkingAllowed: boolean,
	/** A list of direct forked repositories. */
	forks: ModelTypes["RepositoryConnection"],
	/** The funding links for this repository */
	fundingLinks: Array<ModelTypes["FundingLink"]>,
	/** Indicates if the repository has issues feature enabled. */
	hasIssuesEnabled: boolean,
	/** Indicates if the repository has the Projects feature enabled. */
	hasProjectsEnabled: boolean,
	/** Indicates if the repository has wiki feature enabled. */
	hasWikiEnabled: boolean,
	/** The repository's URL. */
	homepageUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The interaction ability settings for this repository. */
	interactionAbility?: ModelTypes["RepositoryInteractionAbility"] | undefined,
	/** Indicates if the repository is unmaintained. */
	isArchived: boolean,
	/** Returns true if blank issue creation is allowed */
	isBlankIssuesEnabled: boolean,
	/** Returns whether or not this repository disabled. */
	isDisabled: boolean,
	/** Returns whether or not this repository is empty. */
	isEmpty: boolean,
	/** Identifies if the repository is a fork. */
	isFork: boolean,
	/** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
	isInOrganization: boolean,
	/** Indicates if the repository has been locked or not. */
	isLocked: boolean,
	/** Identifies if the repository is a mirror. */
	isMirror: boolean,
	/** Identifies if the repository is private or internal. */
	isPrivate: boolean,
	/** Returns true if this repository has a security policy */
	isSecurityPolicyEnabled?: boolean | undefined,
	/** Identifies if the repository is a template that can be used to generate new repositories. */
	isTemplate: boolean,
	/** Is this repository a user configuration repository? */
	isUserConfigurationRepository: boolean,
	/** Returns a single issue from the current repository by number. */
	issue?: ModelTypes["Issue"] | undefined,
	/** Returns a single issue-like object from the current repository by number. */
	issueOrPullRequest?: ModelTypes["IssueOrPullRequest"] | undefined,
	/** Returns a list of issue templates associated to the repository */
	issueTemplates?: Array<ModelTypes["IssueTemplate"]> | undefined,
	/** A list of issues that have been opened in the repository. */
	issues: ModelTypes["IssueConnection"],
	/** Returns a single label by name */
	label?: ModelTypes["Label"] | undefined,
	/** A list of labels associated with the repository. */
	labels?: ModelTypes["LabelConnection"] | undefined,
	/** A list containing a breakdown of the language composition of the repository. */
	languages?: ModelTypes["LanguageConnection"] | undefined,
	/** Get the latest release for the repository if one exists. */
	latestRelease?: ModelTypes["Release"] | undefined,
	/** The license associated with the repository */
	licenseInfo?: ModelTypes["License"] | undefined,
	/** The reason the repository has been locked. */
	lockReason?: ModelTypes["RepositoryLockReason"] | undefined,
	/** A list of Users that can be mentioned in the context of the repository. */
	mentionableUsers: ModelTypes["UserConnection"],
	/** Whether or not PRs are merged with a merge commit on this repository. */
	mergeCommitAllowed: boolean,
	/** How the default commit message will be generated when merging a pull request. */
	mergeCommitMessage: ModelTypes["MergeCommitMessage"],
	/** How the default commit title will be generated when merging a pull request. */
	mergeCommitTitle: ModelTypes["MergeCommitTitle"],
	/** Returns a single milestone from the current repository by number. */
	milestone?: ModelTypes["Milestone"] | undefined,
	/** A list of milestones associated with the repository. */
	milestones?: ModelTypes["MilestoneConnection"] | undefined,
	/** The repository's original mirror URL. */
	mirrorUrl?: ModelTypes["URI"] | undefined,
	/** The name of the repository. */
	name: string,
	/** The repository's name with owner. */
	nameWithOwner: string,
	/** A Git object in the repository */
	object?: ModelTypes["GitObject"] | undefined,
	/** The image used to represent this repository in Open Graph data. */
	openGraphImageUrl: ModelTypes["URI"],
	/** The User owner of the repository. */
	owner: ModelTypes["RepositoryOwner"],
	/** A list of packages under the owner. */
	packages: ModelTypes["PackageConnection"],
	/** The repository parent, if this is a fork. */
	parent?: ModelTypes["Repository"] | undefined,
	/** A list of discussions that have been pinned in this repository. */
	pinnedDiscussions: ModelTypes["PinnedDiscussionConnection"],
	/** A list of pinned issues for this repository. */
	pinnedIssues?: ModelTypes["PinnedIssueConnection"] | undefined,
	/** The primary language of the repository's code. */
	primaryLanguage?: ModelTypes["Language"] | undefined,
	/** Find project by number. */
	project?: ModelTypes["Project"] | undefined,
	/** Finds and returns the Project (beta) according to the provided Project (beta) number. */
	projectNext?: ModelTypes["ProjectNext"] | undefined,
	/** Finds and returns the Project according to the provided Project number. */
	projectV2?: ModelTypes["ProjectV2"] | undefined,
	/** A list of projects under the owner. */
	projects: ModelTypes["ProjectConnection"],
	/** List of projects (beta) linked to this repository. */
	projectsNext: ModelTypes["ProjectNextConnection"],
	/** The HTTP path listing the repository's projects */
	projectsResourcePath: ModelTypes["URI"],
	/** The HTTP URL listing the repository's projects */
	projectsUrl: ModelTypes["URI"],
	/** List of projects linked to this repository. */
	projectsV2: ModelTypes["ProjectV2Connection"],
	/** Returns a single pull request from the current repository by number. */
	pullRequest?: ModelTypes["PullRequest"] | undefined,
	/** Returns a list of pull request templates associated to the repository */
	pullRequestTemplates?: Array<ModelTypes["PullRequestTemplate"]> | undefined,
	/** A list of pull requests that have been opened in the repository. */
	pullRequests: ModelTypes["PullRequestConnection"],
	/** Identifies when the repository was last pushed to. */
	pushedAt?: ModelTypes["DateTime"] | undefined,
	/** Whether or not rebase-merging is enabled on this repository. */
	rebaseMergeAllowed: boolean,
	/** Recent projects that this user has modified in the context of the owner. */
	recentProjects: ModelTypes["ProjectV2Connection"],
	/** Fetch a given ref from the repository */
	ref?: ModelTypes["Ref"] | undefined,
	/** Fetch a list of refs from the repository */
	refs?: ModelTypes["RefConnection"] | undefined,
	/** Lookup a single release given various criteria. */
	release?: ModelTypes["Release"] | undefined,
	/** List of releases which are dependent on this repository. */
	releases: ModelTypes["ReleaseConnection"],
	/** A list of applied repository-topic associations for this repository. */
	repositoryTopics: ModelTypes["RepositoryTopicConnection"],
	/** The HTTP path for this repository */
	resourcePath: ModelTypes["URI"],
	/** The security policy URL. */
	securityPolicyUrl?: ModelTypes["URI"] | undefined,
	/** A description of the repository, rendered to HTML without any links in it. */
	shortDescriptionHTML: ModelTypes["HTML"],
	/** Whether or not squash-merging is enabled on this repository. */
	squashMergeAllowed: boolean,
	/** How the default commit message will be generated when squash merging a pull request. */
	squashMergeCommitMessage: ModelTypes["SquashMergeCommitMessage"],
	/** How the default commit title will be generated when squash merging a pull request. */
	squashMergeCommitTitle: ModelTypes["SquashMergeCommitTitle"],
	/** Whether a squash merge commit can use the pull request title as default. */
	squashPrTitleUsedAsDefault: boolean,
	/** The SSH URL to clone this repository */
	sshUrl: ModelTypes["GitSSHRemote"],
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount: number,
	/** A list of users who have starred this starrable. */
	stargazers: ModelTypes["StargazerConnection"],
	/** Returns a list of all submodules in this repository parsed from the
.gitmodules file as of the default branch's HEAD commit. */
	submodules: ModelTypes["SubmoduleConnection"],
	/** Temporary authentication token for cloning this repository. */
	tempCloneToken?: string | undefined,
	/** The repository from which this repository was generated, if any. */
	templateRepository?: ModelTypes["Repository"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this repository */
	url: ModelTypes["URI"],
	/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
	usesCustomOpenGraphImage: boolean,
	/** Indicates whether the viewer has admin permissions on this repository. */
	viewerCanAdminister: boolean,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Indicates whether the viewer can update the topics of this repository. */
	viewerCanUpdateTopics: boolean,
	/** The last commit email for the viewer. */
	viewerDefaultCommitEmail?: string | undefined,
	/** The last used merge method by the viewer or the default for the repository. */
	viewerDefaultMergeMethod: ModelTypes["PullRequestMergeMethod"],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred: boolean,
	/** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
	viewerPermission?: ModelTypes["RepositoryPermission"] | undefined,
	/** A list of emails this viewer can commit with. */
	viewerPossibleCommitEmails?: Array<string> | undefined,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: ModelTypes["SubscriptionState"] | undefined,
	/** Indicates the repository's visibility level. */
	visibility: ModelTypes["RepositoryVisibility"],
	/** A list of vulnerability alerts that are on this repository. */
	vulnerabilityAlerts?: ModelTypes["RepositoryVulnerabilityAlertConnection"] | undefined,
	/** A list of users watching the repository. */
	watchers: ModelTypes["UserConnection"],
	/** Whether contributors are required to sign off on web-based commits in this repository. */
	webCommitSignoffRequired: boolean
};
	["RepositoryAffiliation"]:RepositoryAffiliation;
	/** Metadata for an audit entry with action repo.* */
["RepositoryAuditEntryData"]: ModelTypes["OrgRestoreMemberMembershipRepositoryAuditEntryData"] | ModelTypes["PrivateRepositoryForkingDisableAuditEntry"] | ModelTypes["PrivateRepositoryForkingEnableAuditEntry"] | ModelTypes["RepoAccessAuditEntry"] | ModelTypes["RepoAddMemberAuditEntry"] | ModelTypes["RepoAddTopicAuditEntry"] | ModelTypes["RepoArchivedAuditEntry"] | ModelTypes["RepoChangeMergeSettingAuditEntry"] | ModelTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableContributorsOnlyAuditEntry"] | ModelTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"] | ModelTypes["RepoConfigLockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"] | ModelTypes["RepoCreateAuditEntry"] | ModelTypes["RepoDestroyAuditEntry"] | ModelTypes["RepoRemoveMemberAuditEntry"] | ModelTypes["RepoRemoveTopicAuditEntry"] | ModelTypes["TeamAddRepositoryAuditEntry"] | ModelTypes["TeamRemoveRepositoryAuditEntry"];
	/** Information extracted from a repository's `CODEOWNERS` file. */
["RepositoryCodeowners"]: {
		/** Any problems that were encountered while parsing the `CODEOWNERS` file. */
	errors: Array<ModelTypes["RepositoryCodeownersError"]>
};
	/** An error in a `CODEOWNERS` file. */
["RepositoryCodeownersError"]: {
		/** The column number where the error occurs. */
	column: number,
	/** A short string describing the type of error. */
	kind: string,
	/** The line number where the error occurs. */
	line: number,
	/** A complete description of the error, combining information from other fields. */
	message: string,
	/** The path to the file when the error occurs. */
	path: string,
	/** The content of the line where the error occurs. */
	source: string,
	/** A suggestion of how to fix the error. */
	suggestion?: string | undefined
};
	/** The connection type for User. */
["RepositoryCollaboratorConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["RepositoryCollaboratorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user who is a collaborator of a repository. */
["RepositoryCollaboratorEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	node: ModelTypes["User"],
	/** The permission the user has on the repository. */
	permission: ModelTypes["RepositoryPermission"],
	/** A list of sources for the user's access to the repository. */
	permissionSources?: Array<ModelTypes["PermissionSource"]> | undefined
};
	/** A list of repositories owned by the subject. */
["RepositoryConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["RepositoryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Repository"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** The total size in kilobytes of all repositories in the connection. */
	totalDiskUsage: number
};
	/** A repository contact link. */
["RepositoryContactLink"]: {
		/** The contact link purpose. */
	about: string,
	/** The contact link name. */
	name: string,
	/** The contact link URL. */
	url: ModelTypes["URI"]
};
	["RepositoryContributionType"]:RepositoryContributionType;
	/** Represents an author of discussions in repositories. */
["RepositoryDiscussionAuthor"]: ModelTypes["Organization"] | ModelTypes["User"];
	/** Represents an author of discussion comments in repositories. */
["RepositoryDiscussionCommentAuthor"]: ModelTypes["Organization"] | ModelTypes["User"];
	/** An edge in a connection. */
["RepositoryEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Repository"] | undefined
};
	/** A subset of repository info. */
["RepositoryInfo"]: ModelTypes["Repository"];
	/** Repository interaction limit that applies to this object. */
["RepositoryInteractionAbility"]: {
		/** The time the currently active limit expires. */
	expiresAt?: ModelTypes["DateTime"] | undefined,
	/** The current limit that is enabled on this object. */
	limit: ModelTypes["RepositoryInteractionLimit"],
	/** The origin of the currently active interaction limit. */
	origin: ModelTypes["RepositoryInteractionLimitOrigin"]
};
	["RepositoryInteractionLimit"]:RepositoryInteractionLimit;
	["RepositoryInteractionLimitExpiry"]:RepositoryInteractionLimitExpiry;
	["RepositoryInteractionLimitOrigin"]:RepositoryInteractionLimitOrigin;
	/** An invitation for a user to be added to a repository. */
["RepositoryInvitation"]: {
		/** The email address that received the invitation. */
	email?: string | undefined,
	id: string,
	/** The user who received the invitation. */
	invitee?: ModelTypes["User"] | undefined,
	/** The user who created the invitation. */
	inviter: ModelTypes["User"],
	/** The permalink for this repository invitation. */
	permalink: ModelTypes["URI"],
	/** The permission granted on this repository by this invitation. */
	permission: ModelTypes["RepositoryPermission"],
	/** The Repository the user is invited to. */
	repository?: ModelTypes["RepositoryInfo"] | undefined
};
	/** A list of repository invitations. */
["RepositoryInvitationConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["RepositoryInvitationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["RepositoryInvitation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["RepositoryInvitationEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["RepositoryInvitation"] | undefined
};
	/** Ordering options for repository invitation connections. */
["RepositoryInvitationOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order repository invitations by. */
	field: ModelTypes["RepositoryInvitationOrderField"]
};
	["RepositoryInvitationOrderField"]:RepositoryInvitationOrderField;
	["RepositoryLockReason"]:RepositoryLockReason;
	/** An Octoshift repository migration. */
["RepositoryMigration"]: {
		/** The Octoshift migration flag to continue on error. */
	continueOnError: boolean,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: string | undefined,
	/** The reason the migration failed. */
	failureReason?: string | undefined,
	id: string,
	/** The URL for the migration log (expires 1 day after migration completes). */
	migrationLogUrl?: ModelTypes["URI"] | undefined,
	/** The Octoshift migration source. */
	migrationSource: ModelTypes["MigrationSource"],
	/** The target repository name. */
	repositoryName: string,
	/** The Octoshift migration source URL. */
	sourceUrl: ModelTypes["URI"],
	/** The Octoshift migration state. */
	state: ModelTypes["MigrationState"]
};
	/** The connection type for RepositoryMigration. */
["RepositoryMigrationConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["RepositoryMigrationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["RepositoryMigration"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a repository migration. */
["RepositoryMigrationEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["RepositoryMigration"] | undefined
};
	/** Ordering options for repository migrations. */
["RepositoryMigrationOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["RepositoryMigrationOrderDirection"],
	/** The field to order repository migrations by. */
	field: ModelTypes["RepositoryMigrationOrderField"]
};
	["RepositoryMigrationOrderDirection"]:RepositoryMigrationOrderDirection;
	["RepositoryMigrationOrderField"]:RepositoryMigrationOrderField;
	/** Represents a object that belongs to a repository. */
["RepositoryNode"]: ModelTypes["CommitComment"] | ModelTypes["CommitCommentThread"] | ModelTypes["DependabotUpdate"] | ModelTypes["Discussion"] | ModelTypes["DiscussionCategory"] | ModelTypes["Issue"] | ModelTypes["IssueComment"] | ModelTypes["PinnedDiscussion"] | ModelTypes["PullRequest"] | ModelTypes["PullRequestCommitCommentThread"] | ModelTypes["PullRequestReview"] | ModelTypes["PullRequestReviewComment"] | ModelTypes["RepositoryVulnerabilityAlert"];
	/** Ordering options for repository connections */
["RepositoryOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order repositories by. */
	field: ModelTypes["RepositoryOrderField"]
};
	["RepositoryOrderField"]:RepositoryOrderField;
	/** Represents an owner of a Repository. */
["RepositoryOwner"]: ModelTypes["Organization"] | ModelTypes["User"];
	["RepositoryPermission"]:RepositoryPermission;
	["RepositoryPrivacy"]:RepositoryPrivacy;
	/** A repository-topic connects a repository to a topic. */
["RepositoryTopic"]: {
		id: string,
	/** The HTTP path for this repository-topic. */
	resourcePath: ModelTypes["URI"],
	/** The topic. */
	topic: ModelTypes["Topic"],
	/** The HTTP URL for this repository-topic. */
	url: ModelTypes["URI"]
};
	/** The connection type for RepositoryTopic. */
["RepositoryTopicConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["RepositoryTopicEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["RepositoryTopic"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["RepositoryTopicEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["RepositoryTopic"] | undefined
};
	["RepositoryVisibility"]:RepositoryVisibility;
	/** Audit log entry for a repository_visibility_change.disable event. */
["RepositoryVisibilityChangeDisableAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: ModelTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a repository_visibility_change.enable event. */
["RepositoryVisibilityChangeEnableAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: ModelTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: ModelTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
["RepositoryVulnerabilityAlert"]: {
		/** When was the alert created? */
	createdAt: ModelTypes["DateTime"],
	/** The associated Dependabot update */
	dependabotUpdate?: ModelTypes["DependabotUpdate"] | undefined,
	/** The scope of an alert's dependency */
	dependencyScope?: ModelTypes["RepositoryVulnerabilityAlertDependencyScope"] | undefined,
	/** Comment explaining the reason the alert was dismissed */
	dismissComment?: string | undefined,
	/** The reason the alert was dismissed */
	dismissReason?: string | undefined,
	/** When was the alert dismissed? */
	dismissedAt?: ModelTypes["DateTime"] | undefined,
	/** The user who dismissed the alert */
	dismisser?: ModelTypes["User"] | undefined,
	/** The reason the alert was marked as fixed. */
	fixReason?: string | undefined,
	/** When was the alert fixed? */
	fixedAt?: ModelTypes["DateTime"] | undefined,
	id: string,
	/** Identifies the alert number. */
	number: number,
	/** The associated repository */
	repository: ModelTypes["Repository"],
	/** The associated security advisory */
	securityAdvisory?: ModelTypes["SecurityAdvisory"] | undefined,
	/** The associated security vulnerability */
	securityVulnerability?: ModelTypes["SecurityVulnerability"] | undefined,
	/** Identifies the state of the alert. */
	state: ModelTypes["RepositoryVulnerabilityAlertState"],
	/** The vulnerable manifest filename */
	vulnerableManifestFilename: string,
	/** The vulnerable manifest path */
	vulnerableManifestPath: string,
	/** The vulnerable requirements */
	vulnerableRequirements?: string | undefined
};
	/** The connection type for RepositoryVulnerabilityAlert. */
["RepositoryVulnerabilityAlertConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["RepositoryVulnerabilityAlertEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["RepositoryVulnerabilityAlert"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	["RepositoryVulnerabilityAlertDependencyScope"]:RepositoryVulnerabilityAlertDependencyScope;
	/** An edge in a connection. */
["RepositoryVulnerabilityAlertEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["RepositoryVulnerabilityAlert"] | undefined
};
	["RepositoryVulnerabilityAlertState"]:RepositoryVulnerabilityAlertState;
	/** Autogenerated input type of RequestReviews */
["RequestReviewsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the pull request to modify. */
	pullRequestId: string,
	/** The Node IDs of the team to request. */
	teamIds?: Array<string> | undefined,
	/** Add users to the set rather than replace. */
	union?: boolean | undefined,
	/** The Node IDs of the user to request. */
	userIds?: Array<string> | undefined
};
	/** Autogenerated return type of RequestReviews */
["RequestReviewsPayload"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that is getting requests. */
	pullRequest?: ModelTypes["PullRequest"] | undefined,
	/** The edge from the pull request to the requested reviewers. */
	requestedReviewersEdge?: ModelTypes["UserEdge"] | undefined
};
	["RequestableCheckStatusState"]:RequestableCheckStatusState;
	/** Types that can be requested reviewers. */
["RequestedReviewer"]:ModelTypes["Mannequin"] | ModelTypes["Team"] | ModelTypes["User"];
	/** The connection type for RequestedReviewer. */
["RequestedReviewerConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["RequestedReviewerEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["RequestedReviewer"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["RequestedReviewerEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["RequestedReviewer"] | undefined
};
	/** Represents a type that can be required by a pull request for merging. */
["RequirableByPullRequest"]: ModelTypes["CheckRun"] | ModelTypes["StatusContext"];
	/** Represents a required status check for a protected branch, but not any specific run of that check. */
["RequiredStatusCheckDescription"]: {
		/** The App that must provide this status in order for it to be accepted. */
	app?: ModelTypes["App"] | undefined,
	/** The name of this status. */
	context: string
};
	/** Specifies the attributes for a new or updated required status check. */
["RequiredStatusCheckInput"]: {
	/** The ID of the App that must set the status in order for it to be accepted.
Omit this value to use whichever app has recently been setting this status, or
use "any" to allow any app to set the status. */
	appId?: string | undefined,
	/** Status check context that must pass for commits to be accepted to the matching branch. */
	context: string
};
	/** Autogenerated input type of RerequestCheckSuite */
["RerequestCheckSuiteInput"]: {
	/** The Node ID of the check suite. */
	checkSuiteId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of RerequestCheckSuite */
["RerequestCheckSuitePayload"]: {
		/** The requested check suite. */
	checkSuite?: ModelTypes["CheckSuite"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of ResolveReviewThread */
["ResolveReviewThreadInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the thread to resolve */
	threadId: string
};
	/** Autogenerated return type of ResolveReviewThread */
["ResolveReviewThreadPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The thread to resolve. */
	thread?: ModelTypes["PullRequestReviewThread"] | undefined
};
	/** Represents a private contribution a user made on GitHub. */
["RestrictedContribution"]: {
		/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: ModelTypes["DateTime"],
	/** The HTTP path for this contribution. */
	resourcePath: ModelTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: ModelTypes["URI"],
	/** The user who made this contribution. */
	user: ModelTypes["User"]
};
	/** A user, team, or app who has the ability to dismiss a review on a protected branch. */
["ReviewDismissalAllowance"]: {
		/** The actor that can dismiss. */
	actor?: ModelTypes["ReviewDismissalAllowanceActor"] | undefined,
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?: ModelTypes["BranchProtectionRule"] | undefined,
	id: string
};
	/** Types that can be an actor. */
["ReviewDismissalAllowanceActor"]:ModelTypes["App"] | ModelTypes["Team"] | ModelTypes["User"];
	/** The connection type for ReviewDismissalAllowance. */
["ReviewDismissalAllowanceConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ReviewDismissalAllowanceEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ReviewDismissalAllowance"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ReviewDismissalAllowanceEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ReviewDismissalAllowance"] | undefined
};
	/** Represents a 'review_dismissed' event on a given issue or pull request. */
["ReviewDismissedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** Identifies the optional message associated with the 'review_dismissed' event. */
	dismissalMessage?: string | undefined,
	/** Identifies the optional message associated with the event, rendered to HTML. */
	dismissalMessageHTML?: string | undefined,
	id: string,
	/** Identifies the previous state of the review with the 'review_dismissed' event. */
	previousReviewState: ModelTypes["PullRequestReviewState"],
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"],
	/** Identifies the commit which caused the review to become stale. */
	pullRequestCommit?: ModelTypes["PullRequestCommit"] | undefined,
	/** The HTTP path for this review dismissed event. */
	resourcePath: ModelTypes["URI"],
	/** Identifies the review associated with the 'review_dismissed' event. */
	review?: ModelTypes["PullRequestReview"] | undefined,
	/** The HTTP URL for this review dismissed event. */
	url: ModelTypes["URI"]
};
	/** A request for a user to review a pull request. */
["ReviewRequest"]: {
		/** Whether this request was created for a code owner */
	asCodeOwner: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Identifies the pull request associated with this review request. */
	pullRequest: ModelTypes["PullRequest"],
	/** The reviewer that is requested. */
	requestedReviewer?: ModelTypes["RequestedReviewer"] | undefined
};
	/** The connection type for ReviewRequest. */
["ReviewRequestConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["ReviewRequestEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["ReviewRequest"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ReviewRequestEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["ReviewRequest"] | undefined
};
	/** Represents an 'review_request_removed' event on a given pull request. */
["ReviewRequestRemovedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"],
	/** Identifies the reviewer whose review request was removed. */
	requestedReviewer?: ModelTypes["RequestedReviewer"] | undefined
};
	/** Represents an 'review_requested' event on a given pull request. */
["ReviewRequestedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: ModelTypes["PullRequest"],
	/** Identifies the reviewer whose review was requested. */
	requestedReviewer?: ModelTypes["RequestedReviewer"] | undefined
};
	/** A hovercard context with a message describing the current code review state of the pull
request. */
["ReviewStatusHovercardContext"]: {
		/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string,
	/** The current status of the pull request with respect to code review. */
	reviewDecision?: ModelTypes["PullRequestReviewDecision"] | undefined
};
	/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
["RevokeEnterpriseOrganizationsMigratorRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
	enterpriseId: string,
	/** The login of the user to revoke the migrator role */
	login: string
};
	/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
["RevokeEnterpriseOrganizationsMigratorRolePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organizations that had the migrator role revoked for the given user. */
	organizations?: ModelTypes["OrganizationConnection"] | undefined
};
	/** Autogenerated input type of RevokeMigratorRole */
["RevokeMigratorRoleInput"]: {
	/** The user login or Team slug to revoke the migrator role from. */
	actor: string,
	/** Specifies the type of the actor, can be either USER or TEAM. */
	actorType: ModelTypes["ActorType"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization that the user/team belongs to. */
	organizationId: string
};
	/** Autogenerated return type of RevokeMigratorRole */
["RevokeMigratorRolePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Did the operation succeed? */
	success?: boolean | undefined
};
	["RoleInOrganization"]:RoleInOrganization;
	["SamlDigestAlgorithm"]:SamlDigestAlgorithm;
	["SamlSignatureAlgorithm"]:SamlSignatureAlgorithm;
	/** A Saved Reply is text a user can use to reply quickly. */
["SavedReply"]: {
		/** The body of the saved reply. */
	body: string,
	/** The saved reply body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The title of the saved reply. */
	title: string,
	/** The user that saved this reply. */
	user?: ModelTypes["Actor"] | undefined
};
	/** The connection type for SavedReply. */
["SavedReplyConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SavedReplyEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["SavedReply"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SavedReplyEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["SavedReply"] | undefined
};
	/** Ordering options for saved reply connections. */
["SavedReplyOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order saved replies by. */
	field: ModelTypes["SavedReplyOrderField"]
};
	["SavedReplyOrderField"]:SavedReplyOrderField;
	/** The results of a search. */
["SearchResultItem"]:ModelTypes["App"] | ModelTypes["Discussion"] | ModelTypes["Issue"] | ModelTypes["MarketplaceListing"] | ModelTypes["Organization"] | ModelTypes["PullRequest"] | ModelTypes["Repository"] | ModelTypes["User"];
	/** A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages. */
["SearchResultItemConnection"]: {
		/** The total number of pieces of code that matched the search query. Regardless
of the total number of matches, a maximum of 1,000 results will be available
across all types. */
	codeCount: number,
	/** The total number of discussions that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	discussionCount: number,
	/** A list of edges. */
	edges?: Array<ModelTypes["SearchResultItemEdge"] | undefined> | undefined,
	/** The total number of issues that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types. */
	issueCount: number,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["SearchResultItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** The total number of repositories that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	repositoryCount: number,
	/** The total number of users that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types. */
	userCount: number,
	/** The total number of wiki pages that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	wikiCount: number
};
	/** An edge in a connection. */
["SearchResultItemEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["SearchResultItem"] | undefined,
	/** Text matches on the result found. */
	textMatches?: Array<ModelTypes["TextMatch"] | undefined> | undefined
};
	["SearchType"]:SearchType;
	/** A GitHub Security Advisory */
["SecurityAdvisory"]: {
		/** The classification of the advisory */
	classification: ModelTypes["SecurityAdvisoryClassification"],
	/** The CVSS associated with this advisory */
	cvss: ModelTypes["CVSS"],
	/** CWEs associated with this Advisory */
	cwes: ModelTypes["CWEConnection"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** This is a long plaintext description of the advisory */
	description: string,
	/** The GitHub Security Advisory ID */
	ghsaId: string,
	id: string,
	/** A list of identifiers for this advisory */
	identifiers: Array<ModelTypes["SecurityAdvisoryIdentifier"]>,
	/** The permalink for the advisory's dependabot alerts page */
	notificationsPermalink?: ModelTypes["URI"] | undefined,
	/** The organization that originated the advisory */
	origin: string,
	/** The permalink for the advisory */
	permalink?: ModelTypes["URI"] | undefined,
	/** When the advisory was published */
	publishedAt: ModelTypes["DateTime"],
	/** A list of references for this advisory */
	references: Array<ModelTypes["SecurityAdvisoryReference"]>,
	/** The severity of the advisory */
	severity: ModelTypes["SecurityAdvisorySeverity"],
	/** A short plaintext summary of the advisory */
	summary: string,
	/** When the advisory was last updated */
	updatedAt: ModelTypes["DateTime"],
	/** Vulnerabilities associated with this Advisory */
	vulnerabilities: ModelTypes["SecurityVulnerabilityConnection"],
	/** When the advisory was withdrawn, if it has been withdrawn */
	withdrawnAt?: ModelTypes["DateTime"] | undefined
};
	["SecurityAdvisoryClassification"]:SecurityAdvisoryClassification;
	/** The connection type for SecurityAdvisory. */
["SecurityAdvisoryConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SecurityAdvisoryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["SecurityAdvisory"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	["SecurityAdvisoryEcosystem"]:SecurityAdvisoryEcosystem;
	/** An edge in a connection. */
["SecurityAdvisoryEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["SecurityAdvisory"] | undefined
};
	/** A GitHub Security Advisory Identifier */
["SecurityAdvisoryIdentifier"]: {
		/** The identifier type, e.g. GHSA, CVE */
	type: string,
	/** The identifier */
	value: string
};
	/** An advisory identifier to filter results on. */
["SecurityAdvisoryIdentifierFilter"]: {
	/** The identifier type. */
	type: ModelTypes["SecurityAdvisoryIdentifierType"],
	/** The identifier string. Supports exact or partial matching. */
	value: string
};
	["SecurityAdvisoryIdentifierType"]:SecurityAdvisoryIdentifierType;
	/** Ordering options for security advisory connections */
["SecurityAdvisoryOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order security advisories by. */
	field: ModelTypes["SecurityAdvisoryOrderField"]
};
	["SecurityAdvisoryOrderField"]:SecurityAdvisoryOrderField;
	/** An individual package */
["SecurityAdvisoryPackage"]: {
		/** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
	ecosystem: ModelTypes["SecurityAdvisoryEcosystem"],
	/** The package name */
	name: string
};
	/** An individual package version */
["SecurityAdvisoryPackageVersion"]: {
		/** The package name or version */
	identifier: string
};
	/** A GitHub Security Advisory Reference */
["SecurityAdvisoryReference"]: {
		/** A publicly accessible reference */
	url: ModelTypes["URI"]
};
	["SecurityAdvisorySeverity"]:SecurityAdvisorySeverity;
	/** An individual vulnerability within an Advisory */
["SecurityVulnerability"]: {
		/** The Advisory associated with this Vulnerability */
	advisory: ModelTypes["SecurityAdvisory"],
	/** The first version containing a fix for the vulnerability */
	firstPatchedVersion?: ModelTypes["SecurityAdvisoryPackageVersion"] | undefined,
	/** A description of the vulnerable package */
	package: ModelTypes["SecurityAdvisoryPackage"],
	/** The severity of the vulnerability within this package */
	severity: ModelTypes["SecurityAdvisorySeverity"],
	/** When the vulnerability was last updated */
	updatedAt: ModelTypes["DateTime"],
	/** A string that describes the vulnerable package versions.
This string follows a basic syntax with a few forms.
+ `= 0.2.0` denotes a single vulnerable version.
+ `<= 1.0.8` denotes a version range up to and including the specified version
+ `< 0.1.11` denotes a version range up to, but excluding, the specified version
+ `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
+ `>= 0.0.1` denotes a version range with a known minimum, but no known maximum */
	vulnerableVersionRange: string
};
	/** The connection type for SecurityVulnerability. */
["SecurityVulnerabilityConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SecurityVulnerabilityEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["SecurityVulnerability"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SecurityVulnerabilityEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["SecurityVulnerability"] | undefined
};
	/** Ordering options for security vulnerability connections */
["SecurityVulnerabilityOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order security vulnerabilities by. */
	field: ModelTypes["SecurityVulnerabilityOrderField"]
};
	["SecurityVulnerabilityOrderField"]:SecurityVulnerabilityOrderField;
	/** Autogenerated input type of SetEnterpriseIdentityProvider */
["SetEnterpriseIdentityProviderInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The digest algorithm used to sign SAML requests for the identity provider. */
	digestMethod: ModelTypes["SamlDigestAlgorithm"],
	/** The ID of the enterprise on which to set an identity provider. */
	enterpriseId: string,
	/** The x509 certificate used by the identity provider to sign assertions and responses. */
	idpCertificate: string,
	/** The Issuer Entity ID for the SAML identity provider */
	issuer?: string | undefined,
	/** The signature algorithm used to sign SAML requests for the identity provider. */
	signatureMethod: ModelTypes["SamlSignatureAlgorithm"],
	/** The URL endpoint for the identity provider's SAML SSO. */
	ssoUrl: ModelTypes["URI"]
};
	/** Autogenerated return type of SetEnterpriseIdentityProvider */
["SetEnterpriseIdentityProviderPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The identity provider for the enterprise. */
	identityProvider?: ModelTypes["EnterpriseIdentityProvider"] | undefined
};
	/** Autogenerated input type of SetOrganizationInteractionLimit */
["SetOrganizationInteractionLimitInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** When this limit should expire. */
	expiry?: ModelTypes["RepositoryInteractionLimitExpiry"] | undefined,
	/** The limit to set. */
	limit: ModelTypes["RepositoryInteractionLimit"],
	/** The ID of the organization to set a limit for. */
	organizationId: string
};
	/** Autogenerated return type of SetOrganizationInteractionLimit */
["SetOrganizationInteractionLimitPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organization that the interaction limit was set for. */
	organization?: ModelTypes["Organization"] | undefined
};
	/** Autogenerated input type of SetRepositoryInteractionLimit */
["SetRepositoryInteractionLimitInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** When this limit should expire. */
	expiry?: ModelTypes["RepositoryInteractionLimitExpiry"] | undefined,
	/** The limit to set. */
	limit: ModelTypes["RepositoryInteractionLimit"],
	/** The ID of the repository to set a limit for. */
	repositoryId: string
};
	/** Autogenerated return type of SetRepositoryInteractionLimit */
["SetRepositoryInteractionLimitPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository that the interaction limit was set for. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** Autogenerated input type of SetUserInteractionLimit */
["SetUserInteractionLimitInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** When this limit should expire. */
	expiry?: ModelTypes["RepositoryInteractionLimitExpiry"] | undefined,
	/** The limit to set. */
	limit: ModelTypes["RepositoryInteractionLimit"],
	/** The ID of the user to set a limit for. */
	userId: string
};
	/** Autogenerated return type of SetUserInteractionLimit */
["SetUserInteractionLimitPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The user that the interaction limit was set for. */
	user?: ModelTypes["User"] | undefined
};
	/** Represents an S/MIME signature on a Commit or Tag. */
["SmimeSignature"]: {
		/** Email used to sign this object. */
	email: string,
	/** True if the signature is valid and verified by GitHub. */
	isValid: boolean,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload: string,
	/** ASCII-armored signature header from object. */
	signature: string,
	/** GitHub user corresponding to the email signing this commit. */
	signer?: ModelTypes["User"] | undefined,
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state: ModelTypes["GitSignatureState"],
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub: boolean
};
	/** Represents a sort by field and direction. */
["SortBy"]: {
		/** The direction of the sorting. Possible values are ASC and DESC. */
	direction: ModelTypes["OrderDirection"],
	/** The id of the field by which the column is sorted. */
	field: number
};
	/** Entities that can sponsor others via GitHub Sponsors */
["Sponsor"]:ModelTypes["Organization"] | ModelTypes["User"];
	/** The connection type for Sponsor. */
["SponsorConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SponsorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Sponsor"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
["SponsorEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Sponsor"] | undefined
};
	/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
["SponsorOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order sponsor entities by. */
	field: ModelTypes["SponsorOrderField"]
};
	["SponsorOrderField"]:SponsorOrderField;
	/** Entities that can be sponsored through GitHub Sponsors */
["Sponsorable"]: ModelTypes["Organization"] | ModelTypes["User"];
	/** Entities that can be sponsored via GitHub Sponsors */
["SponsorableItem"]:ModelTypes["Organization"] | ModelTypes["User"];
	/** The connection type for SponsorableItem. */
["SponsorableItemConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SponsorableItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["SponsorableItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SponsorableItemEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["SponsorableItem"] | undefined
};
	/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
["SponsorableOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order sponsorable entities by. */
	field: ModelTypes["SponsorableOrderField"]
};
	["SponsorableOrderField"]:SponsorableOrderField;
	/** An event related to sponsorship activity. */
["SponsorsActivity"]: {
		/** What action this activity indicates took place. */
	action: ModelTypes["SponsorsActivityAction"],
	id: string,
	/** The tier that the sponsorship used to use, for tier change events. */
	previousSponsorsTier?: ModelTypes["SponsorsTier"] | undefined,
	/** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
	sponsor?: ModelTypes["Sponsor"] | undefined,
	/** The user or organization that is being sponsored, the maintainer. */
	sponsorable: ModelTypes["Sponsorable"],
	/** The associated sponsorship tier. */
	sponsorsTier?: ModelTypes["SponsorsTier"] | undefined,
	/** The timestamp of this event. */
	timestamp?: ModelTypes["DateTime"] | undefined
};
	["SponsorsActivityAction"]:SponsorsActivityAction;
	/** The connection type for SponsorsActivity. */
["SponsorsActivityConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SponsorsActivityEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["SponsorsActivity"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SponsorsActivityEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["SponsorsActivity"] | undefined
};
	/** Ordering options for GitHub Sponsors activity connections. */
["SponsorsActivityOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order activity by. */
	field: ModelTypes["SponsorsActivityOrderField"]
};
	["SponsorsActivityOrderField"]:SponsorsActivityOrderField;
	["SponsorsActivityPeriod"]:SponsorsActivityPeriod;
	/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
["SponsorsGoal"]: {
		/** A description of the goal from the maintainer. */
	description?: string | undefined,
	/** What the objective of this goal is. */
	kind: ModelTypes["SponsorsGoalKind"],
	/** The percentage representing how complete this goal is, between 0-100. */
	percentComplete: number,
	/** What the goal amount is. Represents an amount in USD for monthly sponsorship
amount goals. Represents a count of unique sponsors for total sponsors count goals. */
	targetValue: number,
	/** A brief summary of the kind and target value of this goal. */
	title: string
};
	["SponsorsGoalKind"]:SponsorsGoalKind;
	/** A GitHub Sponsors listing. */
["SponsorsListing"]: {
		/** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
	activeGoal?: ModelTypes["SponsorsGoal"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The HTTP path for the Sponsors dashboard for this Sponsors listing. */
	dashboardResourcePath: ModelTypes["URI"],
	/** The HTTP URL for the Sponsors dashboard for this Sponsors listing. */
	dashboardUrl: ModelTypes["URI"],
	/** The full description of the listing. */
	fullDescription: string,
	/** The full description of the listing rendered to HTML. */
	fullDescriptionHTML: ModelTypes["HTML"],
	id: string,
	/** Whether this listing is publicly visible. */
	isPublic: boolean,
	/** The listing's full name. */
	name: string,
	/** A future date on which this listing is eligible to receive a payout. */
	nextPayoutDate?: ModelTypes["Date"] | undefined,
	/** The HTTP path for this Sponsors listing. */
	resourcePath: ModelTypes["URI"],
	/** The short description of the listing. */
	shortDescription: string,
	/** The short name of the listing. */
	slug: string,
	/** The entity this listing represents who can be sponsored on GitHub Sponsors. */
	sponsorable: ModelTypes["Sponsorable"],
	/** The published tiers for this GitHub Sponsors listing. */
	tiers?: ModelTypes["SponsorsTierConnection"] | undefined,
	/** The HTTP URL for this Sponsors listing. */
	url: ModelTypes["URI"]
};
	/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
["SponsorsTier"]: {
		/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
	adminInfo?: ModelTypes["SponsorsTierAdminInfo"] | undefined,
	/** Get a different tier for this tier's maintainer that is at the same frequency
as this tier but with an equal or lesser cost. Returns the published tier with
the monthly price closest to this tier's without going over. */
	closestLesserValueTier?: ModelTypes["SponsorsTier"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The description of the tier. */
	description: string,
	/** The tier description rendered to HTML */
	descriptionHTML: ModelTypes["HTML"],
	id: string,
	/** Whether this tier was chosen at checkout time by the sponsor rather than
defined ahead of time by the maintainer who manages the Sponsors listing. */
	isCustomAmount: boolean,
	/** Whether this tier is only for use with one-time sponsorships. */
	isOneTime: boolean,
	/** How much this tier costs per month in cents. */
	monthlyPriceInCents: number,
	/** How much this tier costs per month in USD. */
	monthlyPriceInDollars: number,
	/** The name of the tier. */
	name: string,
	/** The sponsors listing that this tier belongs to. */
	sponsorsListing: ModelTypes["SponsorsListing"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
["SponsorsTierAdminInfo"]: {
		/** The sponsorships associated with this tier. */
	sponsorships: ModelTypes["SponsorshipConnection"]
};
	/** The connection type for SponsorsTier. */
["SponsorsTierConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SponsorsTierEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["SponsorsTier"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SponsorsTierEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["SponsorsTier"] | undefined
};
	/** Ordering options for Sponsors tiers connections. */
["SponsorsTierOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order tiers by. */
	field: ModelTypes["SponsorsTierOrderField"]
};
	["SponsorsTierOrderField"]:SponsorsTierOrderField;
	/** A sponsorship relationship between a sponsor and a maintainer */
["Sponsorship"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
	isOneTimePayment: boolean,
	/** Check if the sponsor has chosen to receive sponsorship update emails sent from
the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
	isSponsorOptedIntoEmail?: boolean | undefined,
	/** The entity that is being sponsored */
	maintainer: ModelTypes["User"],
	/** The privacy level for this sponsorship. */
	privacyLevel: ModelTypes["SponsorshipPrivacy"],
	/** The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user. */
	sponsor?: ModelTypes["User"] | undefined,
	/** The user or organization that is sponsoring, if you have permission to view them. */
	sponsorEntity?: ModelTypes["Sponsor"] | undefined,
	/** The entity that is being sponsored */
	sponsorable: ModelTypes["Sponsorable"],
	/** The associated sponsorship tier */
	tier?: ModelTypes["SponsorsTier"] | undefined,
	/** Identifies the date and time when the current tier was chosen for this sponsorship. */
	tierSelectedAt?: ModelTypes["DateTime"] | undefined
};
	/** The connection type for Sponsorship. */
["SponsorshipConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SponsorshipEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Sponsorship"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** The total amount in cents of all recurring sponsorships in the connection
whose amount you can view. Does not include one-time sponsorships. */
	totalRecurringMonthlyPriceInCents: number,
	/** The total amount in USD of all recurring sponsorships in the connection whose
amount you can view. Does not include one-time sponsorships. */
	totalRecurringMonthlyPriceInDollars: number
};
	/** An edge in a connection. */
["SponsorshipEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Sponsorship"] | undefined
};
	/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
["SponsorshipNewsletter"]: {
		/** The contents of the newsletter, the message the sponsorable wanted to give. */
	body: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Indicates if the newsletter has been made available to sponsors. */
	isPublished: boolean,
	/** The user or organization this newsletter is from. */
	sponsorable: ModelTypes["Sponsorable"],
	/** The subject of the newsletter, what it's about. */
	subject: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** The connection type for SponsorshipNewsletter. */
["SponsorshipNewsletterConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SponsorshipNewsletterEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["SponsorshipNewsletter"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SponsorshipNewsletterEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["SponsorshipNewsletter"] | undefined
};
	/** Ordering options for sponsorship newsletter connections. */
["SponsorshipNewsletterOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order sponsorship newsletters by. */
	field: ModelTypes["SponsorshipNewsletterOrderField"]
};
	["SponsorshipNewsletterOrderField"]:SponsorshipNewsletterOrderField;
	/** Ordering options for sponsorship connections. */
["SponsorshipOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order sponsorship by. */
	field: ModelTypes["SponsorshipOrderField"]
};
	["SponsorshipOrderField"]:SponsorshipOrderField;
	["SponsorshipPrivacy"]:SponsorshipPrivacy;
	["SquashMergeCommitMessage"]:SquashMergeCommitMessage;
	["SquashMergeCommitTitle"]:SquashMergeCommitTitle;
	/** Represents an SSH signature on a Commit or Tag. */
["SshSignature"]: {
		/** Email used to sign this object. */
	email: string,
	/** True if the signature is valid and verified by GitHub. */
	isValid: boolean,
	/** Hex-encoded fingerprint of the key that signed this object. */
	keyFingerprint?: string | undefined,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload: string,
	/** ASCII-armored signature header from object. */
	signature: string,
	/** GitHub user corresponding to the email signing this commit. */
	signer?: ModelTypes["User"] | undefined,
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state: ModelTypes["GitSignatureState"],
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub: boolean
};
	/** Ways in which star connections can be ordered. */
["StarOrder"]: {
	/** The direction in which to order nodes. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order nodes by. */
	field: ModelTypes["StarOrderField"]
};
	["StarOrderField"]:StarOrderField;
	/** The connection type for User. */
["StargazerConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["StargazerEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user that's starred a repository. */
["StargazerEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	node: ModelTypes["User"],
	/** Identifies when the item was starred. */
	starredAt: ModelTypes["DateTime"]
};
	/** Things that can be starred. */
["Starrable"]: ModelTypes["Gist"] | ModelTypes["Repository"] | ModelTypes["Topic"];
	/** The connection type for Repository. */
["StarredRepositoryConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["StarredRepositoryEdge"] | undefined> | undefined,
	/** Is the list of stars for this user truncated? This is true for users that have many stars. */
	isOverLimit: boolean,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Repository"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a starred repository. */
["StarredRepositoryEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	node: ModelTypes["Repository"],
	/** Identifies when the item was starred. */
	starredAt: ModelTypes["DateTime"]
};
	/** Autogenerated input type of StartRepositoryMigration */
["StartRepositoryMigrationInput"]: {
	/** The Octoshift migration source access token. */
	accessToken: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether to continue the migration on error */
	continueOnError?: boolean | undefined,
	/** The signed URL to access the user-uploaded git archive */
	gitArchiveUrl?: string | undefined,
	/** The GitHub personal access token of the user importing to the target repository. */
	githubPat?: string | undefined,
	/** Whether to lock the source repository. */
	lockSource?: boolean | undefined,
	/** The signed URL to access the user-uploaded metadata archive */
	metadataArchiveUrl?: string | undefined,
	/** The ID of the organization that will own the imported repository. */
	ownerId: string,
	/** The name of the imported repository. */
	repositoryName: string,
	/** Whether to skip migrating releases for the repository. */
	skipReleases?: boolean | undefined,
	/** The ID of the Octoshift migration source. */
	sourceId: string,
	/** The Octoshift migration source repository URL. */
	sourceRepositoryUrl: ModelTypes["URI"],
	/** The visibility of the imported repository. */
	targetRepoVisibility?: string | undefined
};
	/** Autogenerated return type of StartRepositoryMigration */
["StartRepositoryMigrationPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new Octoshift repository migration. */
	repositoryMigration?: ModelTypes["RepositoryMigration"] | undefined
};
	/** Represents a commit status. */
["Status"]: {
		/** A list of status contexts and check runs for this commit. */
	combinedContexts: ModelTypes["StatusCheckRollupContextConnection"],
	/** The commit this status is attached to. */
	commit?: ModelTypes["Commit"] | undefined,
	/** Looks up an individual status context by context name. */
	context?: ModelTypes["StatusContext"] | undefined,
	/** The individual status contexts for this commit. */
	contexts: Array<ModelTypes["StatusContext"]>,
	id: string,
	/** The combined commit status. */
	state: ModelTypes["StatusState"]
};
	/** Represents the rollup for both the check runs and status for a commit. */
["StatusCheckRollup"]: {
		/** The commit the status and check runs are attached to. */
	commit?: ModelTypes["Commit"] | undefined,
	/** A list of status contexts and check runs for this commit. */
	contexts: ModelTypes["StatusCheckRollupContextConnection"],
	id: string,
	/** The combined status for the commit. */
	state: ModelTypes["StatusState"]
};
	/** Types that can be inside a StatusCheckRollup context. */
["StatusCheckRollupContext"]:ModelTypes["CheckRun"] | ModelTypes["StatusContext"];
	/** The connection type for StatusCheckRollupContext. */
["StatusCheckRollupContextConnection"]: {
		/** The number of check runs in this rollup. */
	checkRunCount: number,
	/** Counts of check runs by state. */
	checkRunCountsByState?: Array<ModelTypes["CheckRunStateCount"]> | undefined,
	/** A list of edges. */
	edges?: Array<ModelTypes["StatusCheckRollupContextEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["StatusCheckRollupContext"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** The number of status contexts in this rollup. */
	statusContextCount: number,
	/** Counts of status contexts by state. */
	statusContextCountsByState?: Array<ModelTypes["StatusContextStateCount"]> | undefined,
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["StatusCheckRollupContextEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["StatusCheckRollupContext"] | undefined
};
	/** Represents an individual commit status context */
["StatusContext"]: {
		/** The avatar of the OAuth application or the user that created the status */
	avatarUrl?: ModelTypes["URI"] | undefined,
	/** This commit this status context is attached to. */
	commit?: ModelTypes["Commit"] | undefined,
	/** The name of this status context. */
	context: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The actor who created this status context. */
	creator?: ModelTypes["Actor"] | undefined,
	/** The description for this status context. */
	description?: string | undefined,
	id: string,
	/** Whether this is required to pass before merging for a specific pull request. */
	isRequired: boolean,
	/** The state of this status context. */
	state: ModelTypes["StatusState"],
	/** The URL for this status context. */
	targetUrl?: ModelTypes["URI"] | undefined
};
	/** Represents a count of the state of a status context. */
["StatusContextStateCount"]: {
		/** The number of statuses with this state. */
	count: number,
	/** The state of a status context. */
	state: ModelTypes["StatusState"]
};
	["StatusState"]:StatusState;
	/** Autogenerated input type of SubmitPullRequestReview */
["SubmitPullRequestReviewInput"]: {
	/** The text field to set on the Pull Request Review. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The event to send to the Pull Request Review. */
	event: ModelTypes["PullRequestReviewEvent"],
	/** The Pull Request ID to submit any pending reviews. */
	pullRequestId?: string | undefined,
	/** The Pull Request Review ID to submit. */
	pullRequestReviewId?: string | undefined
};
	/** Autogenerated return type of SubmitPullRequestReview */
["SubmitPullRequestReviewPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The submitted pull request review. */
	pullRequestReview?: ModelTypes["PullRequestReview"] | undefined
};
	/** A pointer to a repository at a specific revision embedded inside another repository. */
["Submodule"]: {
		/** The branch of the upstream submodule for tracking updates */
	branch?: string | undefined,
	/** The git URL of the submodule repository */
	gitUrl: ModelTypes["URI"],
	/** The name of the submodule in .gitmodules */
	name: string,
	/** The path in the superproject that this submodule is located in */
	path: string,
	/** The commit revision of the subproject repository being tracked by the submodule */
	subprojectCommitOid?: ModelTypes["GitObjectID"] | undefined
};
	/** The connection type for Submodule. */
["SubmoduleConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["SubmoduleEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Submodule"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SubmoduleEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Submodule"] | undefined
};
	/** Entities that can be subscribed to for web and email notifications. */
["Subscribable"]: ModelTypes["Commit"] | ModelTypes["Discussion"] | ModelTypes["Issue"] | ModelTypes["PullRequest"] | ModelTypes["Repository"] | ModelTypes["Team"] | ModelTypes["TeamDiscussion"];
	/** Represents a 'subscribed' event on a given `Subscribable`. */
["SubscribedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Object referenced by event. */
	subscribable: ModelTypes["Subscribable"]
};
	["SubscriptionState"]:SubscriptionState;
	/** A suggestion to review a pull request based on a user's commit history and review comments. */
["SuggestedReviewer"]: {
		/** Is this suggestion based on past commits? */
	isAuthor: boolean,
	/** Is this suggestion based on past review comments? */
	isCommenter: boolean,
	/** Identifies the user suggested to review the pull request. */
	reviewer: ModelTypes["User"]
};
	/** Represents a Git tag. */
["Tag"]: {
		/** An abbreviated version of the Git object ID */
	abbreviatedOid: string,
	/** The HTTP path for this Git object */
	commitResourcePath: ModelTypes["URI"],
	/** The HTTP URL for this Git object */
	commitUrl: ModelTypes["URI"],
	id: string,
	/** The Git tag message. */
	message?: string | undefined,
	/** The Git tag name. */
	name: string,
	/** The Git object ID */
	oid: ModelTypes["GitObjectID"],
	/** The Repository the Git object belongs to */
	repository: ModelTypes["Repository"],
	/** Details about the tag author. */
	tagger?: ModelTypes["GitActor"] | undefined,
	/** The Git object the tag points to. */
	target: ModelTypes["GitObject"]
};
	/** A team of users in an organization. */
["Team"]: {
		/** A list of teams that are ancestors of this team. */
	ancestors: ModelTypes["TeamConnection"],
	/** A URL pointing to the team's avatar. */
	avatarUrl?: ModelTypes["URI"] | undefined,
	/** List of child teams belonging to this team */
	childTeams: ModelTypes["TeamConnection"],
	/** The slug corresponding to the organization and team. */
	combinedSlug: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The description of the team. */
	description?: string | undefined,
	/** Find a team discussion by its number. */
	discussion?: ModelTypes["TeamDiscussion"] | undefined,
	/** A list of team discussions. */
	discussions: ModelTypes["TeamDiscussionConnection"],
	/** The HTTP path for team discussions */
	discussionsResourcePath: ModelTypes["URI"],
	/** The HTTP URL for team discussions */
	discussionsUrl: ModelTypes["URI"],
	/** The HTTP path for editing this team */
	editTeamResourcePath: ModelTypes["URI"],
	/** The HTTP URL for editing this team */
	editTeamUrl: ModelTypes["URI"],
	id: string,
	/** A list of pending invitations for users to this team */
	invitations?: ModelTypes["OrganizationInvitationConnection"] | undefined,
	/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
	memberStatuses: ModelTypes["UserStatusConnection"],
	/** A list of users who are members of this team. */
	members: ModelTypes["TeamMemberConnection"],
	/** The HTTP path for the team' members */
	membersResourcePath: ModelTypes["URI"],
	/** The HTTP URL for the team' members */
	membersUrl: ModelTypes["URI"],
	/** The name of the team. */
	name: string,
	/** The HTTP path creating a new team */
	newTeamResourcePath: ModelTypes["URI"],
	/** The HTTP URL creating a new team */
	newTeamUrl: ModelTypes["URI"],
	/** The organization that owns this team. */
	organization: ModelTypes["Organization"],
	/** The parent team of the team. */
	parentTeam?: ModelTypes["Team"] | undefined,
	/** The level of privacy the team has. */
	privacy: ModelTypes["TeamPrivacy"],
	/** Finds and returns the project according to the provided project number. */
	projectV2?: ModelTypes["ProjectV2"] | undefined,
	/** List of projects this team has collaborator access to. */
	projectsV2: ModelTypes["ProjectV2Connection"],
	/** A list of repositories this team has access to. */
	repositories: ModelTypes["TeamRepositoryConnection"],
	/** The HTTP path for this team's repositories */
	repositoriesResourcePath: ModelTypes["URI"],
	/** The HTTP URL for this team's repositories */
	repositoriesUrl: ModelTypes["URI"],
	/** The HTTP path for this team */
	resourcePath: ModelTypes["URI"],
	/** What algorithm is used for review assignment for this team */
	reviewRequestDelegationAlgorithm?: ModelTypes["TeamReviewAssignmentAlgorithm"] | undefined,
	/** True if review assignment is enabled for this team */
	reviewRequestDelegationEnabled: boolean,
	/** How many team members are required for review assignment for this team */
	reviewRequestDelegationMemberCount?: number | undefined,
	/** When assigning team members via delegation, whether the entire team should be notified as well. */
	reviewRequestDelegationNotifyTeam: boolean,
	/** The slug corresponding to the team. */
	slug: string,
	/** The HTTP path for this team's teams */
	teamsResourcePath: ModelTypes["URI"],
	/** The HTTP URL for this team's teams */
	teamsUrl: ModelTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this team */
	url: ModelTypes["URI"],
	/** Team is adminable by the viewer. */
	viewerCanAdminister: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: ModelTypes["SubscriptionState"] | undefined
};
	/** Audit log entry for a team.add_member event. */
["TeamAddMemberAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: ModelTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a team.add_repository event. */
["TeamAddRepositoryAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: ModelTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Metadata for an audit entry with action team.* */
["TeamAuditEntryData"]: ModelTypes["OrgRestoreMemberMembershipTeamAuditEntryData"] | ModelTypes["TeamAddMemberAuditEntry"] | ModelTypes["TeamAddRepositoryAuditEntry"] | ModelTypes["TeamChangeParentTeamAuditEntry"] | ModelTypes["TeamRemoveMemberAuditEntry"] | ModelTypes["TeamRemoveRepositoryAuditEntry"];
	/** Audit log entry for a team.change_parent_team event. */
["TeamChangeParentTeamAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The new parent team. */
	parentTeam?: ModelTypes["Team"] | undefined,
	/** The name of the new parent team */
	parentTeamName?: string | undefined,
	/** The name of the former parent team */
	parentTeamNameWas?: string | undefined,
	/** The HTTP path for the parent team */
	parentTeamResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the parent team */
	parentTeamUrl?: ModelTypes["URI"] | undefined,
	/** The former parent team. */
	parentTeamWas?: ModelTypes["Team"] | undefined,
	/** The HTTP path for the previous parent team */
	parentTeamWasResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the previous parent team */
	parentTeamWasUrl?: ModelTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: ModelTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** The connection type for Team. */
["TeamConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["TeamEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Team"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A team discussion. */
["TeamDiscussion"]: {
		/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the discussion's team. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the discussion body hash. */
	bodyVersion: string,
	/** A list of comments on this discussion. */
	comments: ModelTypes["TeamDiscussionCommentConnection"],
	/** The HTTP path for discussion comments */
	commentsResourcePath: ModelTypes["URI"],
	/** The HTTP URL for discussion comments */
	commentsUrl: ModelTypes["URI"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Whether or not the discussion is pinned. */
	isPinned: boolean,
	/** Whether or not the discussion is only visible to team members and org admins. */
	isPrivate: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** Identifies the discussion within its team. */
	number: number,
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The HTTP path for this discussion */
	resourcePath: ModelTypes["URI"],
	/** The team that defines the context of this discussion. */
	team: ModelTypes["Team"],
	/** The title of the discussion */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this discussion */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Whether or not the current viewer can pin this discussion. */
	viewerCanPin: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: ModelTypes["SubscriptionState"] | undefined
};
	/** A comment on a team discussion. */
["TeamDiscussionComment"]: {
		/** The actor who authored the comment. */
	author?: ModelTypes["Actor"] | undefined,
	/** Author's association with the comment's team. */
	authorAssociation: ModelTypes["CommentAuthorAssociation"],
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: ModelTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** The current version of the body content. */
	bodyVersion: string,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The discussion this comment is about. */
	discussion: ModelTypes["TeamDiscussion"],
	/** The actor who edited the comment. */
	editor?: ModelTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: ModelTypes["DateTime"] | undefined,
	/** Identifies the comment number. */
	number: number,
	/** Identifies when the comment was published at. */
	publishedAt?: ModelTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<ModelTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: ModelTypes["ReactionConnection"],
	/** The HTTP path for this comment */
	resourcePath: ModelTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this comment */
	url: ModelTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: ModelTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<ModelTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for TeamDiscussionComment. */
["TeamDiscussionCommentConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["TeamDiscussionCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["TeamDiscussionComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["TeamDiscussionCommentEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["TeamDiscussionComment"] | undefined
};
	/** Ways in which team discussion comment connections can be ordered. */
["TeamDiscussionCommentOrder"]: {
	/** The direction in which to order nodes. */
	direction: ModelTypes["OrderDirection"],
	/** The field by which to order nodes. */
	field: ModelTypes["TeamDiscussionCommentOrderField"]
};
	["TeamDiscussionCommentOrderField"]:TeamDiscussionCommentOrderField;
	/** The connection type for TeamDiscussion. */
["TeamDiscussionConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["TeamDiscussionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["TeamDiscussion"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["TeamDiscussionEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["TeamDiscussion"] | undefined
};
	/** Ways in which team discussion connections can be ordered. */
["TeamDiscussionOrder"]: {
	/** The direction in which to order nodes. */
	direction: ModelTypes["OrderDirection"],
	/** The field by which to order nodes. */
	field: ModelTypes["TeamDiscussionOrderField"]
};
	["TeamDiscussionOrderField"]:TeamDiscussionOrderField;
	/** An edge in a connection. */
["TeamEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["Team"] | undefined
};
	/** The connection type for User. */
["TeamMemberConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["TeamMemberEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user who is a member of a team. */
["TeamMemberEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The HTTP path to the organization's member access page. */
	memberAccessResourcePath: ModelTypes["URI"],
	/** The HTTP URL to the organization's member access page. */
	memberAccessUrl: ModelTypes["URI"],
	node: ModelTypes["User"],
	/** The role the member has on the team. */
	role: ModelTypes["TeamMemberRole"]
};
	/** Ordering options for team member connections */
["TeamMemberOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order team members by. */
	field: ModelTypes["TeamMemberOrderField"]
};
	["TeamMemberOrderField"]:TeamMemberOrderField;
	["TeamMemberRole"]:TeamMemberRole;
	["TeamMembershipType"]:TeamMembershipType;
	/** Ways in which team connections can be ordered. */
["TeamOrder"]: {
	/** The direction in which to order nodes. */
	direction: ModelTypes["OrderDirection"],
	/** The field in which to order nodes by. */
	field: ModelTypes["TeamOrderField"]
};
	["TeamOrderField"]:TeamOrderField;
	["TeamPrivacy"]:TeamPrivacy;
	/** Audit log entry for a team.remove_member event. */
["TeamRemoveMemberAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: ModelTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** Audit log entry for a team.remove_repository event. */
["TeamRemoveRepositoryAuditEntry"]: {
		/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: ModelTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: ModelTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: ModelTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: ModelTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: ModelTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: ModelTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: ModelTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: ModelTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: ModelTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: ModelTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: ModelTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: ModelTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: ModelTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: ModelTypes["URI"] | undefined
};
	/** The connection type for Repository. */
["TeamRepositoryConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["TeamRepositoryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["Repository"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a team repository. */
["TeamRepositoryEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	node: ModelTypes["Repository"],
	/** The permission level the team has on the repository */
	permission: ModelTypes["RepositoryPermission"]
};
	/** Ordering options for team repository connections */
["TeamRepositoryOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order repositories by. */
	field: ModelTypes["TeamRepositoryOrderField"]
};
	["TeamRepositoryOrderField"]:TeamRepositoryOrderField;
	["TeamReviewAssignmentAlgorithm"]:TeamReviewAssignmentAlgorithm;
	["TeamRole"]:TeamRole;
	/** A text match within a search result. */
["TextMatch"]: {
		/** The specific text fragment within the property matched on. */
	fragment: string,
	/** Highlights within the matched fragment. */
	highlights: Array<ModelTypes["TextMatchHighlight"]>,
	/** The property matched on. */
	property: string
};
	/** Represents a single highlight in a search result match. */
["TextMatchHighlight"]: {
		/** The indice in the fragment where the matched text begins. */
	beginIndice: number,
	/** The indice in the fragment where the matched text ends. */
	endIndice: number,
	/** The text matched. */
	text: string
};
	/** A topic aggregates entities that are related to a subject. */
["Topic"]: {
		id: string,
	/** The topic's name. */
	name: string,
	/** A list of related topics, including aliases of this topic, sorted with the most relevant
first. Returns up to 10 Topics. */
	relatedTopics: Array<ModelTypes["Topic"]>,
	/** A list of repositories. */
	repositories: ModelTypes["RepositoryConnection"],
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount: number,
	/** A list of users who have starred this starrable. */
	stargazers: ModelTypes["StargazerConnection"],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred: boolean
};
	/** Metadata for an audit entry with a topic. */
["TopicAuditEntryData"]: ModelTypes["RepoAddTopicAuditEntry"] | ModelTypes["RepoRemoveTopicAuditEntry"];
	["TopicSuggestionDeclineReason"]:TopicSuggestionDeclineReason;
	["TrackedIssueStates"]:TrackedIssueStates;
	/** Autogenerated input type of TransferIssue */
["TransferIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether to create labels if they don't exist in the target repository (matched by name) */
	createLabelsIfMissing?: boolean | undefined,
	/** The Node ID of the issue to be transferred */
	issueId: string,
	/** The Node ID of the repository the issue should be transferred to */
	repositoryId: string
};
	/** Autogenerated return type of TransferIssue */
["TransferIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was transferred */
	issue?: ModelTypes["Issue"] | undefined
};
	/** Represents a 'transferred' event on a given issue or pull request. */
["TransferredEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The repository this came from */
	fromRepository?: ModelTypes["Repository"] | undefined,
	id: string,
	/** Identifies the issue associated with the event. */
	issue: ModelTypes["Issue"]
};
	/** Represents a Git tree. */
["Tree"]: {
		/** An abbreviated version of the Git object ID */
	abbreviatedOid: string,
	/** The HTTP path for this Git object */
	commitResourcePath: ModelTypes["URI"],
	/** The HTTP URL for this Git object */
	commitUrl: ModelTypes["URI"],
	/** A list of tree entries. */
	entries?: Array<ModelTypes["TreeEntry"]> | undefined,
	id: string,
	/** The Git object ID */
	oid: ModelTypes["GitObjectID"],
	/** The Repository the Git object belongs to */
	repository: ModelTypes["Repository"]
};
	/** Represents a Git tree entry. */
["TreeEntry"]: {
		/** The extension of the file */
	extension?: string | undefined,
	/** Whether or not this tree entry is generated */
	isGenerated: boolean,
	/** The programming language this file is written in. */
	language?: ModelTypes["Language"] | undefined,
	/** Number of lines in the file. */
	lineCount?: number | undefined,
	/** Entry file mode. */
	mode: number,
	/** Entry file name. */
	name: string,
	/** Entry file object. */
	object?: ModelTypes["GitObject"] | undefined,
	/** Entry file Git object ID. */
	oid: ModelTypes["GitObjectID"],
	/** The full path of the file. */
	path?: string | undefined,
	/** The Repository the tree entry belongs to */
	repository: ModelTypes["Repository"],
	/** Entry byte size */
	size: number,
	/** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
	submodule?: ModelTypes["Submodule"] | undefined,
	/** Entry file type. */
	type: string
};
	/** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
["URI"]:any;
	/** Autogenerated input type of UnarchiveRepository */
["UnarchiveRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the repository to unarchive. */
	repositoryId: string
};
	/** Autogenerated return type of UnarchiveRepository */
["UnarchiveRepositoryPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository that was unarchived. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** Represents an 'unassigned' event on any assignable object. */
["UnassignedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the assignable associated with the event. */
	assignable: ModelTypes["Assignable"],
	/** Identifies the user or mannequin that was unassigned. */
	assignee?: ModelTypes["Assignee"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Identifies the subject (user) who was unassigned. */
	user?: ModelTypes["User"] | undefined
};
	/** Autogenerated input type of UnfollowOrganization */
["UnfollowOrganizationInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the organization to unfollow. */
	organizationId: string
};
	/** Autogenerated return type of UnfollowOrganization */
["UnfollowOrganizationPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organization that was unfollowed. */
	organization?: ModelTypes["Organization"] | undefined
};
	/** Autogenerated input type of UnfollowUser */
["UnfollowUserInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the user to unfollow. */
	userId: string
};
	/** Autogenerated return type of UnfollowUser */
["UnfollowUserPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The user that was unfollowed. */
	user?: ModelTypes["User"] | undefined
};
	/** Represents a type that can be retrieved by a URL. */
["UniformResourceLocatable"]: ModelTypes["Bot"] | ModelTypes["CheckRun"] | ModelTypes["ClosedEvent"] | ModelTypes["Commit"] | ModelTypes["ConvertToDraftEvent"] | ModelTypes["CrossReferencedEvent"] | ModelTypes["Gist"] | ModelTypes["Issue"] | ModelTypes["Mannequin"] | ModelTypes["MergedEvent"] | ModelTypes["Milestone"] | ModelTypes["Organization"] | ModelTypes["PullRequest"] | ModelTypes["PullRequestCommit"] | ModelTypes["ReadyForReviewEvent"] | ModelTypes["Release"] | ModelTypes["Repository"] | ModelTypes["RepositoryTopic"] | ModelTypes["ReviewDismissedEvent"] | ModelTypes["TeamDiscussion"] | ModelTypes["TeamDiscussionComment"] | ModelTypes["User"];
	/** Represents an unknown signature on a Commit or Tag. */
["UnknownSignature"]: {
		/** Email used to sign this object. */
	email: string,
	/** True if the signature is valid and verified by GitHub. */
	isValid: boolean,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload: string,
	/** ASCII-armored signature header from object. */
	signature: string,
	/** GitHub user corresponding to the email signing this commit. */
	signer?: ModelTypes["User"] | undefined,
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state: ModelTypes["GitSignatureState"],
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub: boolean
};
	/** Represents an 'unlabeled' event on a given issue or pull request. */
["UnlabeledEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Identifies the label associated with the 'unlabeled' event. */
	label: ModelTypes["Label"],
	/** Identifies the `Labelable` associated with the event. */
	labelable: ModelTypes["Labelable"]
};
	/** Autogenerated input type of UnlinkRepositoryFromProject */
["UnlinkRepositoryFromProjectInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Project linked to the Repository. */
	projectId: string,
	/** The ID of the Repository linked to the Project. */
	repositoryId: string
};
	/** Autogenerated return type of UnlinkRepositoryFromProject */
["UnlinkRepositoryFromProjectPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The linked Project. */
	project?: ModelTypes["Project"] | undefined,
	/** The linked Repository. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** Autogenerated input type of UnlockLockable */
["UnlockLockableInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the item to be unlocked. */
	lockableId: string
};
	/** Autogenerated return type of UnlockLockable */
["UnlockLockablePayload"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item that was unlocked. */
	unlockedRecord?: ModelTypes["Lockable"] | undefined
};
	/** Represents an 'unlocked' event on a given issue or pull request. */
["UnlockedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Object that was unlocked. */
	lockable: ModelTypes["Lockable"]
};
	/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
["UnmarkDiscussionCommentAsAnswerInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion comment to unmark as an answer. */
	id: string
};
	/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */
["UnmarkDiscussionCommentAsAnswerPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion that includes the comment. */
	discussion?: ModelTypes["Discussion"] | undefined
};
	/** Autogenerated input type of UnmarkFileAsViewed */
["UnmarkFileAsViewedInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The path of the file to mark as unviewed */
	path: string,
	/** The Node ID of the pull request. */
	pullRequestId: string
};
	/** Autogenerated return type of UnmarkFileAsViewed */
["UnmarkFileAsViewedPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of UnmarkIssueAsDuplicate */
["UnmarkIssueAsDuplicateInput"]: {
	/** ID of the issue or pull request currently considered canonical/authoritative/original. */
	canonicalId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the issue or pull request currently marked as a duplicate. */
	duplicateId: string
};
	/** Autogenerated return type of UnmarkIssueAsDuplicate */
["UnmarkIssueAsDuplicatePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue or pull request that was marked as a duplicate. */
	duplicate?: ModelTypes["IssueOrPullRequest"] | undefined
};
	/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
["UnmarkedAsDuplicateEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** The authoritative issue or pull request which has been duplicated by another. */
	canonical?: ModelTypes["IssueOrPullRequest"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** The issue or pull request which has been marked as a duplicate of another. */
	duplicate?: ModelTypes["IssueOrPullRequest"] | undefined,
	id: string,
	/** Canonical and duplicate belong to different repositories. */
	isCrossRepository: boolean
};
	/** Autogenerated input type of UnminimizeComment */
["UnminimizeCommentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of UnminimizeComment */
["UnminimizeCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The comment that was unminimized. */
	unminimizedComment?: ModelTypes["Minimizable"] | undefined
};
	/** Autogenerated input type of UnpinIssue */
["UnpinIssueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the issue to be unpinned */
	issueId: string
};
	/** Autogenerated return type of UnpinIssue */
["UnpinIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was unpinned */
	issue?: ModelTypes["Issue"] | undefined
};
	/** Represents an 'unpinned' event on a given issue or pull request. */
["UnpinnedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Identifies the issue associated with the event. */
	issue: ModelTypes["Issue"]
};
	/** Autogenerated input type of UnresolveReviewThread */
["UnresolveReviewThreadInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the thread to unresolve */
	threadId: string
};
	/** Autogenerated return type of UnresolveReviewThread */
["UnresolveReviewThreadPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The thread to resolve. */
	thread?: ModelTypes["PullRequestReviewThread"] | undefined
};
	/** Represents an 'unsubscribed' event on a given `Subscribable`. */
["UnsubscribedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** Object referenced by event. */
	subscribable: ModelTypes["Subscribable"]
};
	/** Entities that can be updated. */
["Updatable"]: ModelTypes["CommitComment"] | ModelTypes["Discussion"] | ModelTypes["DiscussionComment"] | ModelTypes["GistComment"] | ModelTypes["Issue"] | ModelTypes["IssueComment"] | ModelTypes["Project"] | ModelTypes["ProjectNext"] | ModelTypes["ProjectV2"] | ModelTypes["PullRequest"] | ModelTypes["PullRequestReview"] | ModelTypes["PullRequestReviewComment"] | ModelTypes["TeamDiscussion"] | ModelTypes["TeamDiscussionComment"];
	/** Comments that can be updated. */
["UpdatableComment"]: ModelTypes["CommitComment"] | ModelTypes["DiscussionComment"] | ModelTypes["GistComment"] | ModelTypes["Issue"] | ModelTypes["IssueComment"] | ModelTypes["PullRequest"] | ModelTypes["PullRequestReview"] | ModelTypes["PullRequestReviewComment"] | ModelTypes["TeamDiscussion"] | ModelTypes["TeamDiscussionComment"];
	/** Autogenerated input type of UpdateBranchProtectionRule */
["UpdateBranchProtectionRuleInput"]: {
	/** Can this branch be deleted. */
	allowsDeletions?: boolean | undefined,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?: boolean | undefined,
	/** Is branch creation a protected operation. */
	blocksCreations?: boolean | undefined,
	/** The global relay id of the branch protection rule to be updated. */
	branchProtectionRuleId: string,
	/** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
	bypassForcePushActorIds?: Array<string> | undefined,
	/** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
	bypassPullRequestActorIds?: Array<string> | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?: boolean | undefined,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?: boolean | undefined,
	/** The glob-like pattern used to determine matching branches. */
	pattern?: string | undefined,
	/** A list of User, Team, or App IDs allowed to push to matching branches. */
	pushActorIds?: Array<string> | undefined,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string> | undefined,
	/** The list of required status checks */
	requiredStatusChecks?: Array<ModelTypes["RequiredStatusCheckInput"]> | undefined,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?: boolean | undefined,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?: boolean | undefined,
	/** Are commits required to be signed. */
	requiresCommitSignatures?: boolean | undefined,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?: boolean | undefined,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?: boolean | undefined,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?: boolean | undefined,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?: boolean | undefined,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?: boolean | undefined,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?: boolean | undefined,
	/** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
	reviewDismissalActorIds?: Array<string> | undefined
};
	/** Autogenerated return type of UpdateBranchProtectionRule */
["UpdateBranchProtectionRulePayload"]: {
		/** The newly created BranchProtectionRule. */
	branchProtectionRule?: ModelTypes["BranchProtectionRule"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of UpdateCheckRun */
["UpdateCheckRunInput"]: {
	/** Possible further actions the integrator can perform, which a user may trigger. */
	actions?: Array<ModelTypes["CheckRunAction"]> | undefined,
	/** The node of the check. */
	checkRunId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The time that the check run finished. */
	completedAt?: ModelTypes["DateTime"] | undefined,
	/** The final conclusion of the check. */
	conclusion?: ModelTypes["CheckConclusionState"] | undefined,
	/** The URL of the integrator's site that has the full details of the check. */
	detailsUrl?: ModelTypes["URI"] | undefined,
	/** A reference for the run on the integrator's system. */
	externalId?: string | undefined,
	/** The name of the check. */
	name?: string | undefined,
	/** Descriptive details about the run. */
	output?: ModelTypes["CheckRunOutput"] | undefined,
	/** The node ID of the repository. */
	repositoryId: string,
	/** The time that the check run began. */
	startedAt?: ModelTypes["DateTime"] | undefined,
	/** The current status. */
	status?: ModelTypes["RequestableCheckStatusState"] | undefined
};
	/** Autogenerated return type of UpdateCheckRun */
["UpdateCheckRunPayload"]: {
		/** The updated check run. */
	checkRun?: ModelTypes["CheckRun"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of UpdateCheckSuitePreferences */
["UpdateCheckSuitePreferencesInput"]: {
	/** The check suite preferences to modify. */
	autoTriggerPreferences: Array<ModelTypes["CheckSuiteAutoTriggerPreference"]>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of UpdateCheckSuitePreferences */
["UpdateCheckSuitePreferencesPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated repository. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** Autogenerated input type of UpdateDiscussionComment */
["UpdateDiscussionCommentInput"]: {
	/** The new contents of the comment body. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion comment to update. */
	commentId: string
};
	/** Autogenerated return type of UpdateDiscussionComment */
["UpdateDiscussionCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The modified discussion comment. */
	comment?: ModelTypes["DiscussionComment"] | undefined
};
	/** Autogenerated input type of UpdateDiscussion */
["UpdateDiscussionInput"]: {
	/** The new contents of the discussion body. */
	body?: string | undefined,
	/** The Node ID of a discussion category within the same repository to change this discussion to. */
	categoryId?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion to update. */
	discussionId: string,
	/** The new discussion title. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateDiscussion */
["UpdateDiscussionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The modified discussion. */
	discussion?: ModelTypes["Discussion"] | undefined
};
	/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
["UpdateEnterpriseAdministratorRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string,
	/** The login of a administrator whose role is being changed. */
	login: string,
	/** The new role for the Enterprise administrator. */
	role: ModelTypes["EnterpriseAdministratorRole"]
};
	/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
["UpdateEnterpriseAdministratorRolePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of changing the administrator's role. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
["UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the allow private repository forking setting. */
	enterpriseId: string,
	/** The value for the allow private repository forking policy on the enterprise. */
	policyValue?: ModelTypes["EnterpriseAllowPrivateRepositoryForkingPolicyValue"] | undefined,
	/** The value for the allow private repository forking setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
["UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated allow private repository forking setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the allow private repository forking setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
["UpdateEnterpriseDefaultRepositoryPermissionSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the base repository permission setting. */
	enterpriseId: string,
	/** The value for the base repository permission setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseDefaultRepositoryPermissionSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
["UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated base repository permission setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the base repository permission setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can change repository visibility setting. */
	enterpriseId: string,
	/** The value for the members can change repository visibility setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can change repository visibility setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can change repository visibility setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
["UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can create repositories setting. */
	enterpriseId: string,
	/** Allow members to create internal repositories. Defaults to current value. */
	membersCanCreateInternalRepositories?: boolean | undefined,
	/** Allow members to create private repositories. Defaults to current value. */
	membersCanCreatePrivateRepositories?: boolean | undefined,
	/** Allow members to create public repositories. Defaults to current value. */
	membersCanCreatePublicRepositories?: boolean | undefined,
	/** When false, allow member organizations to set their own repository creation member privileges. */
	membersCanCreateRepositoriesPolicyEnabled?: boolean | undefined,
	/** Value for the members can create repositories setting on the enterprise. This
or the granular public/private/internal allowed fields (but not both) must be provided. */
	settingValue?: ModelTypes["EnterpriseMembersCanCreateRepositoriesSettingValue"] | undefined
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
["UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can create repositories setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can create repositories setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
["UpdateEnterpriseMembersCanDeleteIssuesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can delete issues setting. */
	enterpriseId: string,
	/** The value for the members can delete issues setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
["UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can delete issues setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can delete issues setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
["UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can delete repositories setting. */
	enterpriseId: string,
	/** The value for the members can delete repositories setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
["UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can delete repositories setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can delete repositories setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
["UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can invite collaborators setting. */
	enterpriseId: string,
	/** The value for the members can invite collaborators setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
["UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can invite collaborators setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can invite collaborators setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
["UpdateEnterpriseMembersCanMakePurchasesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can make purchases setting. */
	enterpriseId: string,
	/** The value for the members can make purchases setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseMembersCanMakePurchasesSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
["UpdateEnterpriseMembersCanMakePurchasesSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can make purchases setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can make purchases setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can update protected branches setting. */
	enterpriseId: string,
	/** The value for the members can update protected branches setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can update protected branches setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can update protected branches setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
["UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can view dependency insights setting. */
	enterpriseId: string,
	/** The value for the members can view dependency insights setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
["UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can view dependency insights setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can view dependency insights setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
["UpdateEnterpriseOrganizationProjectsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the organization projects setting. */
	enterpriseId: string,
	/** The value for the organization projects setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
["UpdateEnterpriseOrganizationProjectsSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated organization projects setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the organization projects setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
["UpdateEnterpriseOwnerOrganizationRoleInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Enterprise which the owner belongs to. */
	enterpriseId: string,
	/** The ID of the organization for membership change. */
	organizationId: string,
	/** The role to assume in the organization. */
	organizationRole: ModelTypes["RoleInOrganization"]
};
	/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */
["UpdateEnterpriseOwnerOrganizationRolePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of changing the owner's organization role. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseProfile */
["UpdateEnterpriseProfileInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The description of the enterprise. */
	description?: string | undefined,
	/** The Enterprise ID to update. */
	enterpriseId: string,
	/** The location of the enterprise. */
	location?: string | undefined,
	/** The name of the enterprise. */
	name?: string | undefined,
	/** The URL of the enterprise's website. */
	websiteUrl?: string | undefined
};
	/** Autogenerated return type of UpdateEnterpriseProfile */
["UpdateEnterpriseProfilePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated enterprise. */
	enterprise?: ModelTypes["Enterprise"] | undefined
};
	/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
["UpdateEnterpriseRepositoryProjectsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the repository projects setting. */
	enterpriseId: string,
	/** The value for the repository projects setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
["UpdateEnterpriseRepositoryProjectsSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated repository projects setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the repository projects setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
["UpdateEnterpriseTeamDiscussionsSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the team discussions setting. */
	enterpriseId: string,
	/** The value for the team discussions setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
["UpdateEnterpriseTeamDiscussionsSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated team discussions setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the team discussions setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the two factor authentication required setting. */
	enterpriseId: string,
	/** The value for the two factor authentication required setting on the enterprise. */
	settingValue: ModelTypes["EnterpriseEnabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated two factor authentication required setting. */
	enterprise?: ModelTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the two factor authentication required setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnvironment */
["UpdateEnvironmentInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The node ID of the environment. */
	environmentId: string,
	/** The ids of users or teams that can approve deployments to this environment */
	reviewers?: Array<string> | undefined,
	/** The wait timer in minutes. */
	waitTimer?: number | undefined
};
	/** Autogenerated return type of UpdateEnvironment */
["UpdateEnvironmentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated environment. */
	environment?: ModelTypes["Environment"] | undefined
};
	/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
["UpdateIpAllowListEnabledSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the owner on which to set the IP allow list enabled setting. */
	ownerId: string,
	/** The value for the IP allow list enabled setting. */
	settingValue: ModelTypes["IpAllowListEnabledSettingValue"]
};
	/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
["UpdateIpAllowListEnabledSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list owner on which the setting was updated. */
	owner?: ModelTypes["IpAllowListOwner"] | undefined
};
	/** Autogenerated input type of UpdateIpAllowListEntry */
["UpdateIpAllowListEntryInput"]: {
	/** An IP address or range of addresses in CIDR notation. */
	allowListValue: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the IP allow list entry to update. */
	ipAllowListEntryId: string,
	/** Whether the IP allow list entry is active when an IP allow list is enabled. */
	isActive: boolean,
	/** An optional name for the IP allow list entry. */
	name?: string | undefined
};
	/** Autogenerated return type of UpdateIpAllowListEntry */
["UpdateIpAllowListEntryPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list entry that was updated. */
	ipAllowListEntry?: ModelTypes["IpAllowListEntry"] | undefined
};
	/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
["UpdateIpAllowListForInstalledAppsEnabledSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the owner. */
	ownerId: string,
	/** The value for the IP allow list configuration for installed GitHub Apps setting. */
	settingValue: ModelTypes["IpAllowListForInstalledAppsEnabledSettingValue"]
};
	/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */
["UpdateIpAllowListForInstalledAppsEnabledSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list owner on which the setting was updated. */
	owner?: ModelTypes["IpAllowListOwner"] | undefined
};
	/** Autogenerated input type of UpdateIssueComment */
["UpdateIssueCommentInput"]: {
	/** The updated text of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the IssueComment to modify. */
	id: string
};
	/** Autogenerated return type of UpdateIssueComment */
["UpdateIssueCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated comment. */
	issueComment?: ModelTypes["IssueComment"] | undefined
};
	/** Autogenerated input type of UpdateIssue */
["UpdateIssueInput"]: {
	/** An array of Node IDs of users for this issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body for the issue description. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Issue to modify. */
	id: string,
	/** An array of Node IDs of labels for this issue. */
	labelIds?: Array<string> | undefined,
	/** The Node ID of the milestone for this issue. */
	milestoneId?: string | undefined,
	/** An array of Node IDs for projects associated with this issue. */
	projectIds?: Array<string> | undefined,
	/** The desired issue state. */
	state?: ModelTypes["IssueState"] | undefined,
	/** The title for the issue. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateIssue */
["UpdateIssuePayload"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue. */
	issue?: ModelTypes["Issue"] | undefined
};
	/** Autogenerated input type of UpdateLabel */
["UpdateLabelInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A 6 character hex code, without the leading #, identifying the updated color of the label. */
	color?: string | undefined,
	/** A brief description of the label, such as its purpose. */
	description?: string | undefined,
	/** The Node ID of the label to be updated. */
	id: string,
	/** The updated name of the label. */
	name?: string | undefined
};
	/** Autogenerated return type of UpdateLabel */
["UpdateLabelPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated label. */
	label?: ModelTypes["Label"] | undefined
};
	/** Autogenerated input type of UpdateNotificationRestrictionSetting */
["UpdateNotificationRestrictionSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the owner on which to set the restrict notifications setting. */
	ownerId: string,
	/** The value for the restrict notifications setting. */
	settingValue: ModelTypes["NotificationRestrictionSettingValue"]
};
	/** Autogenerated return type of UpdateNotificationRestrictionSetting */
["UpdateNotificationRestrictionSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The owner on which the setting was updated. */
	owner?: ModelTypes["VerifiableDomainOwner"] | undefined
};
	/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
["UpdateOrganizationAllowPrivateRepositoryForkingSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Enable forking of private repositories in the organization? */
	forkingEnabled: boolean,
	/** The ID of the organization on which to set the allow private repository forking setting. */
	organizationId: string
};
	/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
["UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of updating the allow private repository forking setting. */
	message?: string | undefined,
	/** The organization with the updated allow private repository forking setting. */
	organization?: ModelTypes["Organization"] | undefined
};
	/** Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting */
["UpdateOrganizationWebCommitSignoffSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization on which to set the web commit signoff setting. */
	organizationId: string,
	/** Enable signoff on web-based commits for repositories in the organization? */
	webCommitSignoffRequired: boolean
};
	/** Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting */
["UpdateOrganizationWebCommitSignoffSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of updating the web commit signoff setting. */
	message?: string | undefined,
	/** The organization with the updated web commit signoff setting. */
	organization?: ModelTypes["Organization"] | undefined
};
	/** Autogenerated input type of UpdateProjectCard */
["UpdateProjectCardInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether or not the ProjectCard should be archived */
	isArchived?: boolean | undefined,
	/** The note of ProjectCard. */
	note?: string | undefined,
	/** The ProjectCard ID to update. */
	projectCardId: string
};
	/** Autogenerated return type of UpdateProjectCard */
["UpdateProjectCardPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated ProjectCard. */
	projectCard?: ModelTypes["ProjectCard"] | undefined
};
	/** Autogenerated input type of UpdateProjectColumn */
["UpdateProjectColumnInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of project column. */
	name: string,
	/** The ProjectColumn ID to update. */
	projectColumnId: string
};
	/** Autogenerated return type of UpdateProjectColumn */
["UpdateProjectColumnPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated project column. */
	projectColumn?: ModelTypes["ProjectColumn"] | undefined
};
	/** Autogenerated input type of UpdateProjectDraftIssue */
["UpdateProjectDraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body of the draft issue. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the draft issue to update. */
	draftIssueId: string,
	/** The title of the draft issue. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateProjectDraftIssue */
["UpdateProjectDraftIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The draft issue updated in the project. */
	draftIssue?: ModelTypes["DraftIssue"] | undefined
};
	/** Autogenerated input type of UpdateProject */
["UpdateProjectInput"]: {
	/** The description of project. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of project. */
	name?: string | undefined,
	/** The Project ID to update. */
	projectId: string,
	/** Whether the project is public or not. */
	public?: boolean | undefined,
	/** Whether the project is open or closed. */
	state?: ModelTypes["ProjectState"] | undefined
};
	/** Autogenerated input type of UpdateProjectNext */
["UpdateProjectNextInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Set the project to closed or open.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `closed` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	closed?: boolean | undefined,
	/** Set the readme description of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `description` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	description?: string | undefined,
	/** The ID of the Project to update. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined,
	/** Set the project to public or private.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `public` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	public?: boolean | undefined,
	/** Set the short description of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `shortDescription` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	shortDescription?: string | undefined,
	/** Set the title of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	title?: string | undefined
};
	/** Autogenerated input type of UpdateProjectNextItemField */
["UpdateProjectNextItemFieldInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the field to be updated.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `fieldId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	fieldId?: string | undefined,
	/** The id of the item to be updated. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	itemId?: string | undefined,
	/** The ID of the Project. This field is required. */
	projectId?: string | undefined,
	/** The value which will be set on the field. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `value` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	value?: string | undefined
};
	/** Autogenerated return type of UpdateProjectNextItemField */
["UpdateProjectNextItemFieldPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated item. */
	projectNextItem?: ModelTypes["ProjectNextItem"] | undefined
};
	/** Autogenerated return type of UpdateProjectNext */
["UpdateProjectNextPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated Project. */
	projectNext?: ModelTypes["ProjectNext"] | undefined
};
	/** Autogenerated return type of UpdateProject */
["UpdateProjectPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated project. */
	project?: ModelTypes["Project"] | undefined
};
	/** Autogenerated input type of UpdateProjectV2DraftIssue */
["UpdateProjectV2DraftIssueInput"]: {
	/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body of the draft issue. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the draft issue to update. */
	draftIssueId: string,
	/** The title of the draft issue. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateProjectV2DraftIssue */
["UpdateProjectV2DraftIssuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The draft issue updated in the project. */
	draftIssue?: ModelTypes["DraftIssue"] | undefined
};
	/** Autogenerated input type of UpdateProjectV2 */
["UpdateProjectV2Input"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Set the project to closed or open. */
	closed?: boolean | undefined,
	/** The ID of the Project to update. */
	projectId: string,
	/** Set the project to public or private. */
	public?: boolean | undefined,
	/** Set the readme description of the project. */
	readme?: string | undefined,
	/** Set the short description of the project. */
	shortDescription?: string | undefined,
	/** Set the title of the project. */
	title?: string | undefined
};
	/** Autogenerated input type of UpdateProjectV2ItemFieldValue */
["UpdateProjectV2ItemFieldValueInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the field to be updated. */
	fieldId: string,
	/** The ID of the item to be updated. */
	itemId: string,
	/** The ID of the Project. */
	projectId: string,
	/** The value which will be set on the field. */
	value: ModelTypes["ProjectV2FieldValue"]
};
	/** Autogenerated return type of UpdateProjectV2ItemFieldValue */
["UpdateProjectV2ItemFieldValuePayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated item. */
	projectV2Item?: ModelTypes["ProjectV2Item"] | undefined
};
	/** Autogenerated input type of UpdateProjectV2ItemPosition */
["UpdateProjectV2ItemPositionInput"]: {
	/** The ID of the item to position this item after. If omitted or set to null the item will be moved to top. */
	afterId?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the item to be moved. */
	itemId: string,
	/** The ID of the Project. */
	projectId: string
};
	/** Autogenerated return type of UpdateProjectV2ItemPosition */
["UpdateProjectV2ItemPositionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The items in the new order */
	items?: ModelTypes["ProjectV2ItemConnection"] | undefined
};
	/** Autogenerated return type of UpdateProjectV2 */
["UpdateProjectV2Payload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated Project. */
	projectV2?: ModelTypes["ProjectV2"] | undefined
};
	/** Autogenerated input type of UpdatePullRequestBranch */
["UpdatePullRequestBranchInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The head ref oid for the upstream branch. */
	expectedHeadOid?: ModelTypes["GitObjectID"] | undefined,
	/** The Node ID of the pull request. */
	pullRequestId: string
};
	/** Autogenerated return type of UpdatePullRequestBranch */
["UpdatePullRequestBranchPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of UpdatePullRequest */
["UpdatePullRequestInput"]: {
	/** An array of Node IDs of users for this pull request. */
	assigneeIds?: Array<string> | undefined,
	/** The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository. */
	baseRefName?: string | undefined,
	/** The contents of the pull request. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** An array of Node IDs of labels for this pull request. */
	labelIds?: Array<string> | undefined,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?: boolean | undefined,
	/** The Node ID of the milestone for this pull request. */
	milestoneId?: string | undefined,
	/** An array of Node IDs for projects associated with this pull request. */
	projectIds?: Array<string> | undefined,
	/** The Node ID of the pull request. */
	pullRequestId: string,
	/** The target state of the pull request. */
	state?: ModelTypes["PullRequestUpdateState"] | undefined,
	/** The title of the pull request. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdatePullRequest */
["UpdatePullRequestPayload"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request. */
	pullRequest?: ModelTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of UpdatePullRequestReviewComment */
["UpdatePullRequestReviewCommentInput"]: {
	/** The text of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the comment to modify. */
	pullRequestReviewCommentId: string
};
	/** Autogenerated return type of UpdatePullRequestReviewComment */
["UpdatePullRequestReviewCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated comment. */
	pullRequestReviewComment?: ModelTypes["PullRequestReviewComment"] | undefined
};
	/** Autogenerated input type of UpdatePullRequestReview */
["UpdatePullRequestReviewInput"]: {
	/** The contents of the pull request review body. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the pull request review to modify. */
	pullRequestReviewId: string
};
	/** Autogenerated return type of UpdatePullRequestReview */
["UpdatePullRequestReviewPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request review. */
	pullRequestReview?: ModelTypes["PullRequestReview"] | undefined
};
	/** Autogenerated input type of UpdateRef */
["UpdateRefInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Permit updates of branch Refs that are not fast-forwards? */
	force?: boolean | undefined,
	/** The GitObjectID that the Ref shall be updated to target. */
	oid: ModelTypes["GitObjectID"],
	/** The Node ID of the Ref to be updated. */
	refId: string
};
	/** Autogenerated return type of UpdateRef */
["UpdateRefPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated Ref. */
	ref?: ModelTypes["Ref"] | undefined
};
	/** Autogenerated input type of UpdateRefs */
["UpdateRefsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A list of ref updates. */
	refUpdates: Array<ModelTypes["RefUpdate"]>,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of UpdateRefs */
["UpdateRefsPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of UpdateRepository */
["UpdateRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A new description for the repository. Pass an empty string to erase the existing description. */
	description?: string | undefined,
	/** Indicates if the repository should have the issues feature enabled. */
	hasIssuesEnabled?: boolean | undefined,
	/** Indicates if the repository should have the project boards feature enabled. */
	hasProjectsEnabled?: boolean | undefined,
	/** Indicates if the repository should have the wiki feature enabled. */
	hasWikiEnabled?: boolean | undefined,
	/** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
	homepageUrl?: ModelTypes["URI"] | undefined,
	/** The new name of the repository. */
	name?: string | undefined,
	/** The ID of the repository to update. */
	repositoryId: string,
	/** Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure. */
	template?: boolean | undefined
};
	/** Autogenerated return type of UpdateRepository */
["UpdateRepositoryPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated repository. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting */
["UpdateRepositoryWebCommitSignoffSettingInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the repository to update. */
	repositoryId: string,
	/** Indicates if the repository should require signoff on web-based commits. */
	webCommitSignoffRequired: boolean
};
	/** Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting */
["UpdateRepositoryWebCommitSignoffSettingPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of updating the web commit signoff setting. */
	message?: string | undefined,
	/** The updated repository. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** Autogenerated input type of UpdateSponsorshipPreferences */
["UpdateSponsorshipPreferencesInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Specify whether others should be able to see that the sponsor is sponsoring
the sponsorable. Public visibility still does not reveal which tier is used. */
	privacyLevel?: ModelTypes["SponsorshipPrivacy"] | undefined,
	/** Whether the sponsor should receive email updates from the sponsorable. */
	receiveEmails?: boolean | undefined,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined
};
	/** Autogenerated return type of UpdateSponsorshipPreferences */
["UpdateSponsorshipPreferencesPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The sponsorship that was updated. */
	sponsorship?: ModelTypes["Sponsorship"] | undefined
};
	/** Autogenerated input type of UpdateSubscription */
["UpdateSubscriptionInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new state of the subscription. */
	state: ModelTypes["SubscriptionState"],
	/** The Node ID of the subscribable object to modify. */
	subscribableId: string
};
	/** Autogenerated return type of UpdateSubscription */
["UpdateSubscriptionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The input subscribable entity. */
	subscribable?: ModelTypes["Subscribable"] | undefined
};
	/** Autogenerated input type of UpdateTeamDiscussionComment */
["UpdateTeamDiscussionCommentInput"]: {
	/** The updated text of the comment. */
	body: string,
	/** The current version of the body content. */
	bodyVersion?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the comment to modify. */
	id: string
};
	/** Autogenerated return type of UpdateTeamDiscussionComment */
["UpdateTeamDiscussionCommentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated comment. */
	teamDiscussionComment?: ModelTypes["TeamDiscussionComment"] | undefined
};
	/** Autogenerated input type of UpdateTeamDiscussion */
["UpdateTeamDiscussionInput"]: {
	/** The updated text of the discussion. */
	body?: string | undefined,
	/** The current version of the body content. If provided, this update operation
will be rejected if the given version does not match the latest version on the server. */
	bodyVersion?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion to modify. */
	id: string,
	/** If provided, sets the pinned state of the updated discussion. */
	pinned?: boolean | undefined,
	/** The updated title of the discussion. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateTeamDiscussion */
["UpdateTeamDiscussionPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated discussion. */
	teamDiscussion?: ModelTypes["TeamDiscussion"] | undefined
};
	/** Autogenerated input type of UpdateTeamReviewAssignment */
["UpdateTeamReviewAssignmentInput"]: {
	/** The algorithm to use for review assignment */
	algorithm?: ModelTypes["TeamReviewAssignmentAlgorithm"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Turn on or off review assignment */
	enabled: boolean,
	/** An array of team member IDs to exclude */
	excludedTeamMemberIds?: Array<string> | undefined,
	/** The Node ID of the team to update review assignments of */
	id: string,
	/** Notify the entire team of the PR if it is delegated */
	notifyTeam?: boolean | undefined,
	/** The number of team members to assign */
	teamMemberCount?: number | undefined
};
	/** Autogenerated return type of UpdateTeamReviewAssignment */
["UpdateTeamReviewAssignmentPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The team that was modified */
	team?: ModelTypes["Team"] | undefined
};
	/** Autogenerated input type of UpdateTeamsRepository */
["UpdateTeamsRepositoryInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Permission that should be granted to the teams. */
	permission: ModelTypes["RepositoryPermission"],
	/** Repository ID being granted access to. */
	repositoryId: string,
	/** A list of teams being granted access. Limit: 10 */
	teamIds: Array<string>
};
	/** Autogenerated return type of UpdateTeamsRepository */
["UpdateTeamsRepositoryPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository that was updated. */
	repository?: ModelTypes["Repository"] | undefined,
	/** The teams granted permission on the repository. */
	teams?: Array<ModelTypes["Team"]> | undefined
};
	/** Autogenerated input type of UpdateTopics */
["UpdateTopicsInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the repository. */
	repositoryId: string,
	/** An array of topic names. */
	topicNames: Array<string>
};
	/** Autogenerated return type of UpdateTopics */
["UpdateTopicsPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Names of the provided topics that are not valid. */
	invalidTopicNames?: Array<string> | undefined,
	/** The updated repository. */
	repository?: ModelTypes["Repository"] | undefined
};
	/** A user is an individual's account on GitHub that owns repositories and can make new content. */
["User"]: {
		/** Determine if this repository owner has any items that can be pinned to their profile. */
	anyPinnableItems: boolean,
	/** A URL pointing to the user's public avatar. */
	avatarUrl: ModelTypes["URI"],
	/** The user's public profile bio. */
	bio?: string | undefined,
	/** The user's public profile bio as HTML. */
	bioHTML: ModelTypes["HTML"],
	/** Could this user receive email notifications, if the organization had notification restrictions enabled? */
	canReceiveOrganizationEmailsWhenNotificationsRestricted: boolean,
	/** A list of commit comments made by this user. */
	commitComments: ModelTypes["CommitCommentConnection"],
	/** The user's public profile company. */
	company?: string | undefined,
	/** The user's public profile company as HTML. */
	companyHTML: ModelTypes["HTML"],
	/** The collection of contributions this user has made to different repositories. */
	contributionsCollection: ModelTypes["ContributionsCollection"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The user's publicly visible profile email. */
	email: string,
	/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents: number,
	/** A list of users the given user is followed by. */
	followers: ModelTypes["FollowerConnection"],
	/** A list of users the given user is following. */
	following: ModelTypes["FollowingConnection"],
	/** Find gist by repo name. */
	gist?: ModelTypes["Gist"] | undefined,
	/** A list of gist comments made by this user. */
	gistComments: ModelTypes["GistCommentConnection"],
	/** A list of the Gists the user has created. */
	gists: ModelTypes["GistConnection"],
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing: boolean,
	/** The hovercard information for this user in a given context */
	hovercard: ModelTypes["Hovercard"],
	id: string,
	/** The interaction ability settings for this user. */
	interactionAbility?: ModelTypes["RepositoryInteractionAbility"] | undefined,
	/** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
	isBountyHunter: boolean,
	/** Whether or not this user is a participant in the GitHub Campus Experts Program. */
	isCampusExpert: boolean,
	/** Whether or not this user is a GitHub Developer Program member. */
	isDeveloperProgramMember: boolean,
	/** Whether or not this user is a GitHub employee. */
	isEmployee: boolean,
	/** Whether or not this user is following the viewer. Inverse of viewer_is_following */
	isFollowingViewer: boolean,
	/** Whether or not this user is a member of the GitHub Stars Program. */
	isGitHubStar: boolean,
	/** Whether or not the user has marked themselves as for hire. */
	isHireable: boolean,
	/** Whether or not this user is a site administrator. */
	isSiteAdmin: boolean,
	/** Check if the given account is sponsoring this user/organization. */
	isSponsoredBy: boolean,
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer: boolean,
	/** Whether or not this user is the viewing user. */
	isViewer: boolean,
	/** A list of issue comments made by this user. */
	issueComments: ModelTypes["IssueCommentConnection"],
	/** A list of issues associated with this user. */
	issues: ModelTypes["IssueConnection"],
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase: ModelTypes["ProfileItemShowcase"],
	/** The user's public profile location. */
	location?: string | undefined,
	/** The username used to login. */
	login: string,
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents: number,
	/** The user's public profile name. */
	name?: string | undefined,
	/** Find an organization by its login that the user belongs to. */
	organization?: ModelTypes["Organization"] | undefined,
	/** Verified email addresses that match verified domains for a specified organization the user is a member of. */
	organizationVerifiedDomainEmails: Array<string>,
	/** A list of organizations the user belongs to. */
	organizations: ModelTypes["OrganizationConnection"],
	/** A list of packages under the owner. */
	packages: ModelTypes["PackageConnection"],
	/** A list of repositories and gists this profile owner can pin to their profile. */
	pinnableItems: ModelTypes["PinnableItemConnection"],
	/** A list of repositories and gists this profile owner has pinned to their profile */
	pinnedItems: ModelTypes["PinnableItemConnection"],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining: number,
	/** Find project by number. */
	project?: ModelTypes["Project"] | undefined,
	/** Find a project by project (beta) number. */
	projectNext?: ModelTypes["ProjectNext"] | undefined,
	/** Find a project by number. */
	projectV2?: ModelTypes["ProjectV2"] | undefined,
	/** A list of projects under the owner. */
	projects: ModelTypes["ProjectConnection"],
	/** A list of projects (beta) under the owner. */
	projectsNext: ModelTypes["ProjectNextConnection"],
	/** The HTTP path listing user's projects */
	projectsResourcePath: ModelTypes["URI"],
	/** The HTTP URL listing user's projects */
	projectsUrl: ModelTypes["URI"],
	/** A list of projects under the owner. */
	projectsV2: ModelTypes["ProjectV2Connection"],
	/** A list of public keys associated with this user. */
	publicKeys: ModelTypes["PublicKeyConnection"],
	/** A list of pull requests associated with this user. */
	pullRequests: ModelTypes["PullRequestConnection"],
	/** Recent projects that this user has modified in the context of the owner. */
	recentProjects: ModelTypes["ProjectV2Connection"],
	/** A list of repositories that the user owns. */
	repositories: ModelTypes["RepositoryConnection"],
	/** A list of repositories that the user recently contributed to. */
	repositoriesContributedTo: ModelTypes["RepositoryConnection"],
	/** Find Repository. */
	repository?: ModelTypes["Repository"] | undefined,
	/** Discussion comments this user has authored. */
	repositoryDiscussionComments: ModelTypes["DiscussionCommentConnection"],
	/** Discussions this user has started. */
	repositoryDiscussions: ModelTypes["DiscussionConnection"],
	/** The HTTP path for this user */
	resourcePath: ModelTypes["URI"],
	/** Replies this user has saved */
	savedReplies?: ModelTypes["SavedReplyConnection"] | undefined,
	/** List of users and organizations this entity is sponsoring. */
	sponsoring: ModelTypes["SponsorConnection"],
	/** List of sponsors for this user or organization. */
	sponsors: ModelTypes["SponsorConnection"],
	/** Events involving this sponsorable, such as new sponsorships. */
	sponsorsActivities: ModelTypes["SponsorsActivityConnection"],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?: ModelTypes["SponsorsListing"] | undefined,
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?: ModelTypes["Sponsorship"] | undefined,
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?: ModelTypes["Sponsorship"] | undefined,
	/** List of sponsorship updates sent from this sponsorable to sponsors. */
	sponsorshipNewsletters: ModelTypes["SponsorshipNewsletterConnection"],
	/** This object's sponsorships as the maintainer. */
	sponsorshipsAsMaintainer: ModelTypes["SponsorshipConnection"],
	/** This object's sponsorships as the sponsor. */
	sponsorshipsAsSponsor: ModelTypes["SponsorshipConnection"],
	/** Repositories the user has starred. */
	starredRepositories: ModelTypes["StarredRepositoryConnection"],
	/** The user's description of what they're currently doing. */
	status?: ModelTypes["UserStatus"] | undefined,
	/** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */
	topRepositories: ModelTypes["RepositoryConnection"],
	/** The user's Twitter username. */
	twitterUsername?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this user */
	url: ModelTypes["URI"],
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems: boolean,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects: boolean,
	/** Whether or not the viewer is able to follow the user. */
	viewerCanFollow: boolean,
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor: boolean,
	/** Whether or not this user is followed by the viewer. Inverse of is_following_viewer. */
	viewerIsFollowing: boolean,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring: boolean,
	/** A list of repositories the given user is watching. */
	watching: ModelTypes["RepositoryConnection"],
	/** A URL pointing to the user's public website/blog. */
	websiteUrl?: ModelTypes["URI"] | undefined
};
	["UserBlockDuration"]:UserBlockDuration;
	/** Represents a 'user_blocked' event on a given user. */
["UserBlockedEvent"]: {
		/** Identifies the actor who performed the event. */
	actor?: ModelTypes["Actor"] | undefined,
	/** Number of days that the user was blocked for. */
	blockDuration: ModelTypes["UserBlockDuration"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	id: string,
	/** The user who was blocked. */
	subject?: ModelTypes["User"] | undefined
};
	/** The connection type for User. */
["UserConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["UserEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edit on user content */
["UserContentEdit"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the date and time when the object was deleted. */
	deletedAt?: ModelTypes["DateTime"] | undefined,
	/** The actor who deleted this content */
	deletedBy?: ModelTypes["Actor"] | undefined,
	/** A summary of the changes for this edit */
	diff?: string | undefined,
	/** When this content was edited */
	editedAt: ModelTypes["DateTime"],
	/** The actor who edited this content */
	editor?: ModelTypes["Actor"] | undefined,
	id: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** A list of edits to content. */
["UserContentEditConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["UserContentEditEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["UserContentEdit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["UserContentEditEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["UserContentEdit"] | undefined
};
	/** Represents a user. */
["UserEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["User"] | undefined
};
	/** Email attributes from External Identity */
["UserEmailMetadata"]: {
		/** Boolean to identify primary emails */
	primary?: boolean | undefined,
	/** Type of email */
	type?: string | undefined,
	/** Email id */
	value: string
};
	/** The user's description of what they're currently doing. */
["UserStatus"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** An emoji summarizing the user's status. */
	emoji?: string | undefined,
	/** The status emoji as HTML. */
	emojiHTML?: ModelTypes["HTML"] | undefined,
	/** If set, the status will not be shown after this date. */
	expiresAt?: ModelTypes["DateTime"] | undefined,
	id: string,
	/** Whether this status indicates the user is not fully available on GitHub. */
	indicatesLimitedAvailability: boolean,
	/** A brief message describing what the user is doing. */
	message?: string | undefined,
	/** The organization whose members can see this status. If null, this status is publicly visible. */
	organization?: ModelTypes["Organization"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The user who has this status. */
	user: ModelTypes["User"]
};
	/** The connection type for UserStatus. */
["UserStatusConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["UserStatusEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["UserStatus"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["UserStatusEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["UserStatus"] | undefined
};
	/** Ordering options for user status connections. */
["UserStatusOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order user statuses by. */
	field: ModelTypes["UserStatusOrderField"]
};
	["UserStatusOrderField"]:UserStatusOrderField;
	/** A domain that can be verified or approved for an organization or an enterprise. */
["VerifiableDomain"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The DNS host name that should be used for verification. */
	dnsHostName?: ModelTypes["URI"] | undefined,
	/** The unicode encoded domain. */
	domain: ModelTypes["URI"],
	/** Whether a TXT record for verification with the expected host name was found. */
	hasFoundHostName: boolean,
	/** Whether a TXT record for verification with the expected verification token was found. */
	hasFoundVerificationToken: boolean,
	id: string,
	/** Whether or not the domain is approved. */
	isApproved: boolean,
	/** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
	isRequiredForPolicyEnforcement: boolean,
	/** Whether or not the domain is verified. */
	isVerified: boolean,
	/** The owner of the domain. */
	owner: ModelTypes["VerifiableDomainOwner"],
	/** The punycode encoded domain. */
	punycodeEncodedDomain: ModelTypes["URI"],
	/** The time that the current verification token will expire. */
	tokenExpirationTime?: ModelTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The current verification token for the domain. */
	verificationToken?: string | undefined
};
	/** The connection type for VerifiableDomain. */
["VerifiableDomainConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["VerifiableDomainEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["VerifiableDomain"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["VerifiableDomainEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["VerifiableDomain"] | undefined
};
	/** Ordering options for verifiable domain connections. */
["VerifiableDomainOrder"]: {
	/** The ordering direction. */
	direction: ModelTypes["OrderDirection"],
	/** The field to order verifiable domains by. */
	field: ModelTypes["VerifiableDomainOrderField"]
};
	["VerifiableDomainOrderField"]:VerifiableDomainOrderField;
	/** Types that can own a verifiable domain. */
["VerifiableDomainOwner"]:ModelTypes["Enterprise"] | ModelTypes["Organization"];
	/** Autogenerated input type of VerifyVerifiableDomain */
["VerifyVerifiableDomainInput"]: {
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the verifiable domain to verify. */
	id: string
};
	/** Autogenerated return type of VerifyVerifiableDomain */
["VerifyVerifiableDomainPayload"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The verifiable domain that was verified. */
	domain?: ModelTypes["VerifiableDomain"] | undefined
};
	/** A hovercard context with a message describing how the viewer is related. */
["ViewerHovercardContext"]: {
		/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string,
	/** Identifies the user who is related to this context. */
	viewer: ModelTypes["User"]
};
	/** A subject that may be upvoted. */
["Votable"]: ModelTypes["Discussion"] | ModelTypes["DiscussionComment"];
	/** A workflow contains meta information about an Actions workflow file. */
["Workflow"]: {
		/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The name of the workflow. */
	name: string,
	/** The runs of the workflow. */
	runs: ModelTypes["WorkflowRunConnection"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"]
};
	/** A workflow run. */
["WorkflowRun"]: {
		/** The check suite this workflow run belongs to. */
	checkSuite: ModelTypes["CheckSuite"],
	/** Identifies the date and time when the object was created. */
	createdAt: ModelTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The log of deployment reviews */
	deploymentReviews: ModelTypes["DeploymentReviewConnection"],
	id: string,
	/** The pending deployment requests of all check runs in this workflow run */
	pendingDeploymentRequests: ModelTypes["DeploymentRequestConnection"],
	/** The HTTP path for this workflow run */
	resourcePath: ModelTypes["URI"],
	/** A number that uniquely identifies this workflow run in its parent workflow. */
	runNumber: number,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: ModelTypes["DateTime"],
	/** The HTTP URL for this workflow run */
	url: ModelTypes["URI"],
	/** The workflow executed in this workflow run. */
	workflow: ModelTypes["Workflow"]
};
	/** The connection type for WorkflowRun. */
["WorkflowRunConnection"]: {
		/** A list of edges. */
	edges?: Array<ModelTypes["WorkflowRunEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<ModelTypes["WorkflowRun"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: ModelTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["WorkflowRunEdge"]: {
		/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: ModelTypes["WorkflowRun"] | undefined
};
	/** Ways in which lists of workflow runs can be ordered upon return. */
["WorkflowRunOrder"]: {
	/** The direction in which to order workflow runs by the specified field. */
	direction: ModelTypes["OrderDirection"],
	/** The field by which to order workflows. */
	field: ModelTypes["WorkflowRunOrderField"]
};
	["WorkflowRunOrderField"]:WorkflowRunOrderField;
	/** A valid x509 certificate string */
["X509Certificate"]:any
    }

export type GraphQLTypes = {
    /** Autogenerated input type of AbortQueuedMigrations */
["AbortQueuedMigrationsInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization that is running the migrations. */
	ownerId: string
};
	/** Autogenerated return type of AbortQueuedMigrations */
["AbortQueuedMigrationsPayload"]: {
	__typename: "AbortQueuedMigrationsPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Did the operation succeed? */
	success?: boolean | undefined
};
	/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
["AcceptEnterpriseAdministratorInvitationInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the invitation being accepted */
	invitationId: string
};
	/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
["AcceptEnterpriseAdministratorInvitationPayload"]: {
	__typename: "AcceptEnterpriseAdministratorInvitationPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The invitation that was accepted. */
	invitation?: GraphQLTypes["EnterpriseAdministratorInvitation"] | undefined,
	/** A message confirming the result of accepting an administrator invitation. */
	message?: string | undefined
};
	/** Autogenerated input type of AcceptTopicSuggestion */
["AcceptTopicSuggestionInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the suggested topic. */
	name: string,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of AcceptTopicSuggestion */
["AcceptTopicSuggestionPayload"]: {
	__typename: "AcceptTopicSuggestionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The accepted topic. */
	topic?: GraphQLTypes["Topic"] | undefined
};
	/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
["Actor"]: {
	__typename:"Bot" | "EnterpriseUserAccount" | "Mannequin" | "Organization" | "User",
	/** A URL pointing to the actor's public avatar. */
	avatarUrl: GraphQLTypes["URI"],
	/** The username of the actor. */
	login: string,
	/** The HTTP path for this actor. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this actor. */
	url: GraphQLTypes["URI"]
	['...on Bot']: '__union' & GraphQLTypes["Bot"];
	['...on EnterpriseUserAccount']: '__union' & GraphQLTypes["EnterpriseUserAccount"];
	['...on Mannequin']: '__union' & GraphQLTypes["Mannequin"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Location information for an actor */
["ActorLocation"]: {
	__typename: "ActorLocation",
	/** City */
	city?: string | undefined,
	/** Country name */
	country?: string | undefined,
	/** Country code */
	countryCode?: string | undefined,
	/** Region name */
	region?: string | undefined,
	/** Region or state code */
	regionCode?: string | undefined
};
	/** The actor's type. */
["ActorType"]: ActorType;
	/** Autogenerated input type of AddAssigneesToAssignable */
["AddAssigneesToAssignableInput"]: {
		/** The id of the assignable object to add assignees to. */
	assignableId: string,
	/** The id of users to add as assignees. */
	assigneeIds: Array<string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated return type of AddAssigneesToAssignable */
["AddAssigneesToAssignablePayload"]: {
	__typename: "AddAssigneesToAssignablePayload",
	/** The item that was assigned. */
	assignable?: GraphQLTypes["Assignable"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of AddComment */
["AddCommentInput"]: {
		/** The contents of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of AddComment */
["AddCommentPayload"]: {
	__typename: "AddCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The edge from the subject's comment connection. */
	commentEdge?: GraphQLTypes["IssueCommentEdge"] | undefined,
	/** The subject */
	subject?: GraphQLTypes["Node"] | undefined,
	/** The edge from the subject's timeline connection. */
	timelineEdge?: GraphQLTypes["IssueTimelineItemEdge"] | undefined
};
	/** Autogenerated input type of AddDiscussionComment */
["AddDiscussionCommentInput"]: {
		/** The contents of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion to comment on. */
	discussionId: string,
	/** The Node ID of the discussion comment within this discussion to reply to. */
	replyToId?: string | undefined
};
	/** Autogenerated return type of AddDiscussionComment */
["AddDiscussionCommentPayload"]: {
	__typename: "AddDiscussionCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created discussion comment. */
	comment?: GraphQLTypes["DiscussionComment"] | undefined
};
	/** Autogenerated input type of AddDiscussionPollVote */
["AddDiscussionPollVoteInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion poll option to vote for. */
	pollOptionId: string
};
	/** Autogenerated return type of AddDiscussionPollVote */
["AddDiscussionPollVotePayload"]: {
	__typename: "AddDiscussionPollVotePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The poll option that a vote was added to. */
	pollOption?: GraphQLTypes["DiscussionPollOption"] | undefined
};
	/** Autogenerated input type of AddEnterpriseSupportEntitlement */
["AddEnterpriseSupportEntitlementInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string,
	/** The login of a member who will receive the support entitlement. */
	login: string
};
	/** Autogenerated return type of AddEnterpriseSupportEntitlement */
["AddEnterpriseSupportEntitlementPayload"]: {
	__typename: "AddEnterpriseSupportEntitlementPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of adding the support entitlement. */
	message?: string | undefined
};
	/** Autogenerated input type of AddLabelsToLabelable */
["AddLabelsToLabelableInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ids of the labels to add. */
	labelIds: Array<string>,
	/** The id of the labelable object to add labels to. */
	labelableId: string
};
	/** Autogenerated return type of AddLabelsToLabelable */
["AddLabelsToLabelablePayload"]: {
	__typename: "AddLabelsToLabelablePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item that was labeled. */
	labelable?: GraphQLTypes["Labelable"] | undefined
};
	/** Autogenerated input type of AddProjectCard */
["AddProjectCardInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The content of the card. Must be a member of the ProjectCardItem union */
	contentId?: string | undefined,
	/** The note on the card. */
	note?: string | undefined,
	/** The Node ID of the ProjectColumn. */
	projectColumnId: string
};
	/** Autogenerated return type of AddProjectCard */
["AddProjectCardPayload"]: {
	__typename: "AddProjectCardPayload",
	/** The edge from the ProjectColumn's card connection. */
	cardEdge?: GraphQLTypes["ProjectCardEdge"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ProjectColumn */
	projectColumn?: GraphQLTypes["ProjectColumn"] | undefined
};
	/** Autogenerated input type of AddProjectColumn */
["AddProjectColumnInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the column. */
	name: string,
	/** The Node ID of the project. */
	projectId: string
};
	/** Autogenerated return type of AddProjectColumn */
["AddProjectColumnPayload"]: {
	__typename: "AddProjectColumnPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The edge from the project's column connection. */
	columnEdge?: GraphQLTypes["ProjectColumnEdge"] | undefined,
	/** The project */
	project?: GraphQLTypes["Project"] | undefined
};
	/** Autogenerated input type of AddProjectDraftIssue */
["AddProjectDraftIssueInput"]: {
		/** The IDs of the assignees of the draft issue.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `assigneeIds` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	assigneeIds?: Array<string> | undefined,
	/** The body of the draft issue.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `body` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Project to add the draft issue to. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined,
	/** The title of the draft issue. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	title?: string | undefined
};
	/** Autogenerated return type of AddProjectDraftIssue */
["AddProjectDraftIssuePayload"]: {
	__typename: "AddProjectDraftIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The draft issue added to the project. */
	projectNextItem?: GraphQLTypes["ProjectNextItem"] | undefined
};
	/** Autogenerated input type of AddProjectNextItem */
["AddProjectNextItemInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The content id of the item (Issue or PullRequest). This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `contentId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	contentId?: string | undefined,
	/** The ID of the Project to add the item to. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined
};
	/** Autogenerated return type of AddProjectNextItem */
["AddProjectNextItemPayload"]: {
	__typename: "AddProjectNextItemPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item added to the project. */
	projectNextItem?: GraphQLTypes["ProjectNextItem"] | undefined
};
	/** Autogenerated input type of AddProjectV2DraftIssue */
["AddProjectV2DraftIssueInput"]: {
		/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body of the draft issue. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Project to add the draft issue to. */
	projectId: string,
	/** The title of the draft issue. */
	title: string
};
	/** Autogenerated return type of AddProjectV2DraftIssue */
["AddProjectV2DraftIssuePayload"]: {
	__typename: "AddProjectV2DraftIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The draft issue added to the project. */
	projectItem?: GraphQLTypes["ProjectV2Item"] | undefined
};
	/** Autogenerated input type of AddProjectV2ItemById */
["AddProjectV2ItemByIdInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the Issue or Pull Request to add. */
	contentId: string,
	/** The ID of the Project to add the item to. */
	projectId: string
};
	/** Autogenerated return type of AddProjectV2ItemById */
["AddProjectV2ItemByIdPayload"]: {
	__typename: "AddProjectV2ItemByIdPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item added to the project. */
	item?: GraphQLTypes["ProjectV2Item"] | undefined
};
	/** Autogenerated input type of AddPullRequestReviewComment */
["AddPullRequestReviewCommentInput"]: {
		/** The text of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The SHA of the commit to comment on. */
	commitOID?: GraphQLTypes["GitObjectID"] | undefined,
	/** The comment id to reply to. */
	inReplyTo?: string | undefined,
	/** The relative path of the file to comment on. */
	path?: string | undefined,
	/** The line index in the diff to comment on. */
	position?: number | undefined,
	/** The node ID of the pull request reviewing */
	pullRequestId?: string | undefined,
	/** The Node ID of the review to modify. */
	pullRequestReviewId?: string | undefined
};
	/** Autogenerated return type of AddPullRequestReviewComment */
["AddPullRequestReviewCommentPayload"]: {
	__typename: "AddPullRequestReviewCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created comment. */
	comment?: GraphQLTypes["PullRequestReviewComment"] | undefined,
	/** The edge from the review's comment connection. */
	commentEdge?: GraphQLTypes["PullRequestReviewCommentEdge"] | undefined
};
	/** Autogenerated input type of AddPullRequestReview */
["AddPullRequestReviewInput"]: {
		/** The contents of the review body comment. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The review line comments. */
	comments?: Array<GraphQLTypes["DraftPullRequestReviewComment"] | undefined> | undefined,
	/** The commit OID the review pertains to. */
	commitOID?: GraphQLTypes["GitObjectID"] | undefined,
	/** The event to perform on the pull request review. */
	event?: GraphQLTypes["PullRequestReviewEvent"] | undefined,
	/** The Node ID of the pull request to modify. */
	pullRequestId: string,
	/** The review line comment threads. */
	threads?: Array<GraphQLTypes["DraftPullRequestReviewThread"] | undefined> | undefined
};
	/** Autogenerated return type of AddPullRequestReview */
["AddPullRequestReviewPayload"]: {
	__typename: "AddPullRequestReviewPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created pull request review. */
	pullRequestReview?: GraphQLTypes["PullRequestReview"] | undefined,
	/** The edge from the pull request's review connection. */
	reviewEdge?: GraphQLTypes["PullRequestReviewEdge"] | undefined
};
	/** Autogenerated input type of AddPullRequestReviewThread */
["AddPullRequestReviewThreadInput"]: {
		/** Body of the thread's first comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
	line: number,
	/** Path to the file being commented on. */
	path: string,
	/** The node ID of the pull request reviewing */
	pullRequestId?: string | undefined,
	/** The Node ID of the review to modify. */
	pullRequestReviewId?: string | undefined,
	/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
	side?: GraphQLTypes["DiffSide"] | undefined,
	/** The first line of the range to which the comment refers. */
	startLine?: number | undefined,
	/** The side of the diff on which the start line resides. */
	startSide?: GraphQLTypes["DiffSide"] | undefined
};
	/** Autogenerated return type of AddPullRequestReviewThread */
["AddPullRequestReviewThreadPayload"]: {
	__typename: "AddPullRequestReviewThreadPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created thread. */
	thread?: GraphQLTypes["PullRequestReviewThread"] | undefined
};
	/** Autogenerated input type of AddReaction */
["AddReactionInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the emoji to react with. */
	content: GraphQLTypes["ReactionContent"],
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of AddReaction */
["AddReactionPayload"]: {
	__typename: "AddReactionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The reaction object. */
	reaction?: GraphQLTypes["Reaction"] | undefined,
	/** The reactable subject. */
	subject?: GraphQLTypes["Reactable"] | undefined
};
	/** Autogenerated input type of AddStar */
["AddStarInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Starrable ID to star. */
	starrableId: string
};
	/** Autogenerated return type of AddStar */
["AddStarPayload"]: {
	__typename: "AddStarPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The starrable. */
	starrable?: GraphQLTypes["Starrable"] | undefined
};
	/** Autogenerated input type of AddUpvote */
["AddUpvoteInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion or comment to upvote. */
	subjectId: string
};
	/** Autogenerated return type of AddUpvote */
["AddUpvotePayload"]: {
	__typename: "AddUpvotePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The votable subject. */
	subject?: GraphQLTypes["Votable"] | undefined
};
	/** Autogenerated input type of AddVerifiableDomain */
["AddVerifiableDomainInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The URL of the domain */
	domain: GraphQLTypes["URI"],
	/** The ID of the owner to add the domain to */
	ownerId: string
};
	/** Autogenerated return type of AddVerifiableDomain */
["AddVerifiableDomainPayload"]: {
	__typename: "AddVerifiableDomainPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The verifiable domain that was added. */
	domain?: GraphQLTypes["VerifiableDomain"] | undefined
};
	/** Represents a 'added_to_project' event on a given issue or pull request. */
["AddedToProjectEvent"]: {
	__typename: "AddedToProjectEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Project referenced by event. */
	project?: GraphQLTypes["Project"] | undefined,
	/** Project card referenced by this project event. */
	projectCard?: GraphQLTypes["ProjectCard"] | undefined,
	/** Column name referenced by this project event. */
	projectColumnName: string
};
	/** A GitHub App. */
["App"]: {
	__typename: "App",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The description of the app. */
	description?: string | undefined,
	id: string,
	/** The IP addresses of the app. */
	ipAllowListEntries: GraphQLTypes["IpAllowListEntryConnection"],
	/** The hex color code, without the leading '#', for the logo background. */
	logoBackgroundColor: string,
	/** A URL pointing to the app's logo. */
	logoUrl: GraphQLTypes["URI"],
	/** The name of the app. */
	name: string,
	/** A slug based on the name of the app for use in URLs. */
	slug: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The URL to the app's homepage. */
	url: GraphQLTypes["URI"]
};
	/** Autogenerated input type of ApproveDeployments */
["ApproveDeploymentsInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Optional comment for approving deployments */
	comment?: string | undefined,
	/** The ids of environments to reject deployments */
	environmentIds: Array<string>,
	/** The node ID of the workflow run containing the pending deployments. */
	workflowRunId: string
};
	/** Autogenerated return type of ApproveDeployments */
["ApproveDeploymentsPayload"]: {
	__typename: "ApproveDeploymentsPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The affected deployments. */
	deployments?: Array<GraphQLTypes["Deployment"]> | undefined
};
	/** Autogenerated input type of ApproveVerifiableDomain */
["ApproveVerifiableDomainInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the verifiable domain to approve. */
	id: string
};
	/** Autogenerated return type of ApproveVerifiableDomain */
["ApproveVerifiableDomainPayload"]: {
	__typename: "ApproveVerifiableDomainPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The verifiable domain that was approved. */
	domain?: GraphQLTypes["VerifiableDomain"] | undefined
};
	/** Autogenerated input type of ArchiveRepository */
["ArchiveRepositoryInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the repository to mark as archived. */
	repositoryId: string
};
	/** Autogenerated return type of ArchiveRepository */
["ArchiveRepositoryPayload"]: {
	__typename: "ArchiveRepositoryPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository that was marked as archived. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** An object that can have users assigned to it. */
["Assignable"]: {
	__typename:"Issue" | "PullRequest",
	/** A list of Users assigned to this object. */
	assignees: GraphQLTypes["UserConnection"]
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** Represents an 'assigned' event on any assignable object. */
["AssignedEvent"]: {
	__typename: "AssignedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the assignable associated with the event. */
	assignable: GraphQLTypes["Assignable"],
	/** Identifies the user or mannequin that was assigned. */
	assignee?: GraphQLTypes["Assignee"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Identifies the user who was assigned. */
	user?: GraphQLTypes["User"] | undefined
};
	/** Types that can be assigned to issues. */
["Assignee"]:{
        	__typename:"Bot" | "Mannequin" | "Organization" | "User"
        	['...on Bot']: '__union' & GraphQLTypes["Bot"];
	['...on Mannequin']: '__union' & GraphQLTypes["Mannequin"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** An entry in the audit log. */
["AuditEntry"]: {
	__typename:"MembersCanDeleteReposClearAuditEntry" | "MembersCanDeleteReposDisableAuditEntry" | "MembersCanDeleteReposEnableAuditEntry" | "OauthApplicationCreateAuditEntry" | "OrgAddBillingManagerAuditEntry" | "OrgAddMemberAuditEntry" | "OrgBlockUserAuditEntry" | "OrgConfigDisableCollaboratorsOnlyAuditEntry" | "OrgConfigEnableCollaboratorsOnlyAuditEntry" | "OrgCreateAuditEntry" | "OrgDisableOauthAppRestrictionsAuditEntry" | "OrgDisableSamlAuditEntry" | "OrgDisableTwoFactorRequirementAuditEntry" | "OrgEnableOauthAppRestrictionsAuditEntry" | "OrgEnableSamlAuditEntry" | "OrgEnableTwoFactorRequirementAuditEntry" | "OrgInviteMemberAuditEntry" | "OrgInviteToBusinessAuditEntry" | "OrgOauthAppAccessApprovedAuditEntry" | "OrgOauthAppAccessDeniedAuditEntry" | "OrgOauthAppAccessRequestedAuditEntry" | "OrgRemoveBillingManagerAuditEntry" | "OrgRemoveMemberAuditEntry" | "OrgRemoveOutsideCollaboratorAuditEntry" | "OrgRestoreMemberAuditEntry" | "OrgUnblockUserAuditEntry" | "OrgUpdateDefaultRepositoryPermissionAuditEntry" | "OrgUpdateMemberAuditEntry" | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" | "PrivateRepositoryForkingDisableAuditEntry" | "PrivateRepositoryForkingEnableAuditEntry" | "RepoAccessAuditEntry" | "RepoAddMemberAuditEntry" | "RepoAddTopicAuditEntry" | "RepoArchivedAuditEntry" | "RepoChangeMergeSettingAuditEntry" | "RepoConfigDisableAnonymousGitAccessAuditEntry" | "RepoConfigDisableCollaboratorsOnlyAuditEntry" | "RepoConfigDisableContributorsOnlyAuditEntry" | "RepoConfigDisableSockpuppetDisallowedAuditEntry" | "RepoConfigEnableAnonymousGitAccessAuditEntry" | "RepoConfigEnableCollaboratorsOnlyAuditEntry" | "RepoConfigEnableContributorsOnlyAuditEntry" | "RepoConfigEnableSockpuppetDisallowedAuditEntry" | "RepoConfigLockAnonymousGitAccessAuditEntry" | "RepoConfigUnlockAnonymousGitAccessAuditEntry" | "RepoCreateAuditEntry" | "RepoDestroyAuditEntry" | "RepoRemoveMemberAuditEntry" | "RepoRemoveTopicAuditEntry" | "RepositoryVisibilityChangeDisableAuditEntry" | "RepositoryVisibilityChangeEnableAuditEntry" | "TeamAddMemberAuditEntry" | "TeamAddRepositoryAuditEntry" | "TeamChangeParentTeamAuditEntry" | "TeamRemoveMemberAuditEntry" | "TeamRemoveRepositoryAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
	['...on MembersCanDeleteReposClearAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposClearAuditEntry"];
	['...on MembersCanDeleteReposDisableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposDisableAuditEntry"];
	['...on MembersCanDeleteReposEnableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposEnableAuditEntry"];
	['...on OauthApplicationCreateAuditEntry']: '__union' & GraphQLTypes["OauthApplicationCreateAuditEntry"];
	['...on OrgAddBillingManagerAuditEntry']: '__union' & GraphQLTypes["OrgAddBillingManagerAuditEntry"];
	['...on OrgAddMemberAuditEntry']: '__union' & GraphQLTypes["OrgAddMemberAuditEntry"];
	['...on OrgBlockUserAuditEntry']: '__union' & GraphQLTypes["OrgBlockUserAuditEntry"];
	['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"];
	['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"];
	['...on OrgCreateAuditEntry']: '__union' & GraphQLTypes["OrgCreateAuditEntry"];
	['...on OrgDisableOauthAppRestrictionsAuditEntry']: '__union' & GraphQLTypes["OrgDisableOauthAppRestrictionsAuditEntry"];
	['...on OrgDisableSamlAuditEntry']: '__union' & GraphQLTypes["OrgDisableSamlAuditEntry"];
	['...on OrgDisableTwoFactorRequirementAuditEntry']: '__union' & GraphQLTypes["OrgDisableTwoFactorRequirementAuditEntry"];
	['...on OrgEnableOauthAppRestrictionsAuditEntry']: '__union' & GraphQLTypes["OrgEnableOauthAppRestrictionsAuditEntry"];
	['...on OrgEnableSamlAuditEntry']: '__union' & GraphQLTypes["OrgEnableSamlAuditEntry"];
	['...on OrgEnableTwoFactorRequirementAuditEntry']: '__union' & GraphQLTypes["OrgEnableTwoFactorRequirementAuditEntry"];
	['...on OrgInviteMemberAuditEntry']: '__union' & GraphQLTypes["OrgInviteMemberAuditEntry"];
	['...on OrgInviteToBusinessAuditEntry']: '__union' & GraphQLTypes["OrgInviteToBusinessAuditEntry"];
	['...on OrgOauthAppAccessApprovedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessApprovedAuditEntry"];
	['...on OrgOauthAppAccessDeniedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessDeniedAuditEntry"];
	['...on OrgOauthAppAccessRequestedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessRequestedAuditEntry"];
	['...on OrgRemoveBillingManagerAuditEntry']: '__union' & GraphQLTypes["OrgRemoveBillingManagerAuditEntry"];
	['...on OrgRemoveMemberAuditEntry']: '__union' & GraphQLTypes["OrgRemoveMemberAuditEntry"];
	['...on OrgRemoveOutsideCollaboratorAuditEntry']: '__union' & GraphQLTypes["OrgRemoveOutsideCollaboratorAuditEntry"];
	['...on OrgRestoreMemberAuditEntry']: '__union' & GraphQLTypes["OrgRestoreMemberAuditEntry"];
	['...on OrgUnblockUserAuditEntry']: '__union' & GraphQLTypes["OrgUnblockUserAuditEntry"];
	['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"];
	['...on OrgUpdateMemberAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberAuditEntry"];
	['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"];
	['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"];
	['...on PrivateRepositoryForkingDisableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingDisableAuditEntry"];
	['...on PrivateRepositoryForkingEnableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingEnableAuditEntry"];
	['...on RepoAccessAuditEntry']: '__union' & GraphQLTypes["RepoAccessAuditEntry"];
	['...on RepoAddMemberAuditEntry']: '__union' & GraphQLTypes["RepoAddMemberAuditEntry"];
	['...on RepoAddTopicAuditEntry']: '__union' & GraphQLTypes["RepoAddTopicAuditEntry"];
	['...on RepoArchivedAuditEntry']: '__union' & GraphQLTypes["RepoArchivedAuditEntry"];
	['...on RepoChangeMergeSettingAuditEntry']: '__union' & GraphQLTypes["RepoChangeMergeSettingAuditEntry"];
	['...on RepoConfigDisableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigDisableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableContributorsOnlyAuditEntry"];
	['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigEnableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigEnableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableContributorsOnlyAuditEntry"];
	['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigLockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigLockAnonymousGitAccessAuditEntry"];
	['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"];
	['...on RepoCreateAuditEntry']: '__union' & GraphQLTypes["RepoCreateAuditEntry"];
	['...on RepoDestroyAuditEntry']: '__union' & GraphQLTypes["RepoDestroyAuditEntry"];
	['...on RepoRemoveMemberAuditEntry']: '__union' & GraphQLTypes["RepoRemoveMemberAuditEntry"];
	['...on RepoRemoveTopicAuditEntry']: '__union' & GraphQLTypes["RepoRemoveTopicAuditEntry"];
	['...on RepositoryVisibilityChangeDisableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeDisableAuditEntry"];
	['...on RepositoryVisibilityChangeEnableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeEnableAuditEntry"];
	['...on TeamAddMemberAuditEntry']: '__union' & GraphQLTypes["TeamAddMemberAuditEntry"];
	['...on TeamAddRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamAddRepositoryAuditEntry"];
	['...on TeamChangeParentTeamAuditEntry']: '__union' & GraphQLTypes["TeamChangeParentTeamAuditEntry"];
	['...on TeamRemoveMemberAuditEntry']: '__union' & GraphQLTypes["TeamRemoveMemberAuditEntry"];
	['...on TeamRemoveRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamRemoveRepositoryAuditEntry"];
};
	/** Types that can initiate an audit log event. */
["AuditEntryActor"]:{
        	__typename:"Bot" | "Organization" | "User"
        	['...on Bot']: '__union' & GraphQLTypes["Bot"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Ordering options for Audit Log connections. */
["AuditLogOrder"]: {
		/** The ordering direction. */
	direction?: GraphQLTypes["OrderDirection"] | undefined,
	/** The field to order Audit Logs by. */
	field?: GraphQLTypes["AuditLogOrderField"] | undefined
};
	/** Properties by which Audit Log connections can be ordered. */
["AuditLogOrderField"]: AuditLogOrderField;
	/** Represents a 'auto_merge_disabled' event on a given pull request. */
["AutoMergeDisabledEvent"]: {
	__typename: "AutoMergeDisabledEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The user who disabled auto-merge for this Pull Request */
	disabler?: GraphQLTypes["User"] | undefined,
	id: string,
	/** PullRequest referenced by event */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined,
	/** The reason auto-merge was disabled */
	reason?: string | undefined,
	/** The reason_code relating to why auto-merge was disabled */
	reasonCode?: string | undefined
};
	/** Represents a 'auto_merge_enabled' event on a given pull request. */
["AutoMergeEnabledEvent"]: {
	__typename: "AutoMergeEnabledEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The user who enabled auto-merge for this Pull Request */
	enabler?: GraphQLTypes["User"] | undefined,
	id: string,
	/** PullRequest referenced by event. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents an auto-merge request for a pull request */
["AutoMergeRequest"]: {
	__typename: "AutoMergeRequest",
	/** The email address of the author of this auto-merge request. */
	authorEmail?: string | undefined,
	/** The commit message of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging. */
	commitBody?: string | undefined,
	/** The commit title of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging */
	commitHeadline?: string | undefined,
	/** When was this auto-merge request was enabled. */
	enabledAt?: GraphQLTypes["DateTime"] | undefined,
	/** The actor who created the auto-merge request. */
	enabledBy?: GraphQLTypes["Actor"] | undefined,
	/** The merge method of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging. */
	mergeMethod: GraphQLTypes["PullRequestMergeMethod"],
	/** The pull request that this auto-merge request is set against. */
	pullRequest: GraphQLTypes["PullRequest"]
};
	/** Represents a 'auto_rebase_enabled' event on a given pull request. */
["AutoRebaseEnabledEvent"]: {
	__typename: "AutoRebaseEnabledEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The user who enabled auto-merge (rebase) for this Pull Request */
	enabler?: GraphQLTypes["User"] | undefined,
	id: string,
	/** PullRequest referenced by event. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents a 'auto_squash_enabled' event on a given pull request. */
["AutoSquashEnabledEvent"]: {
	__typename: "AutoSquashEnabledEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The user who enabled auto-merge (squash) for this Pull Request */
	enabler?: GraphQLTypes["User"] | undefined,
	id: string,
	/** PullRequest referenced by event. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents a 'automatic_base_change_failed' event on a given pull request. */
["AutomaticBaseChangeFailedEvent"]: {
	__typename: "AutomaticBaseChangeFailedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** The new base for this PR */
	newBase: string,
	/** The old base for this PR */
	oldBase: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"]
};
	/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
["AutomaticBaseChangeSucceededEvent"]: {
	__typename: "AutomaticBaseChangeSucceededEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** The new base for this PR */
	newBase: string,
	/** The old base for this PR */
	oldBase: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"]
};
	/** A (potentially binary) string encoded using base64. */
["Base64String"]: "scalar" & { name: "Base64String" };
	/** Represents a 'base_ref_changed' event on a given issue or pull request. */
["BaseRefChangedEvent"]: {
	__typename: "BaseRefChangedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the name of the base ref for the pull request after it was changed. */
	currentRefName: string,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Identifies the name of the base ref for the pull request before it was changed. */
	previousRefName: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"]
};
	/** Represents a 'base_ref_deleted' event on a given pull request. */
["BaseRefDeletedEvent"]: {
	__typename: "BaseRefDeletedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
	baseRefName?: string | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents a 'base_ref_force_pushed' event on a given pull request. */
["BaseRefForcePushedEvent"]: {
	__typename: "BaseRefForcePushedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
	afterCommit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
	beforeCommit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
	ref?: GraphQLTypes["Ref"] | undefined
};
	/** Represents a Git blame. */
["Blame"]: {
	__typename: "Blame",
	/** The list of ranges from a Git blame. */
	ranges: Array<GraphQLTypes["BlameRange"]>
};
	/** Represents a range of information from a Git blame. */
["BlameRange"]: {
	__typename: "BlameRange",
	/** Identifies the recency of the change, from 1 (new) to 10 (old). This is
calculated as a 2-quantile and determines the length of distance between the
median age of all the changes in the file and the recency of the current
range's change. */
	age: number,
	/** Identifies the line author */
	commit: GraphQLTypes["Commit"],
	/** The ending line for the range */
	endingLine: number,
	/** The starting line for the range */
	startingLine: number
};
	/** Represents a Git blob. */
["Blob"]: {
	__typename: "Blob",
	/** An abbreviated version of the Git object ID */
	abbreviatedOid: string,
	/** Byte size of Blob object */
	byteSize: number,
	/** The HTTP path for this Git object */
	commitResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this Git object */
	commitUrl: GraphQLTypes["URI"],
	id: string,
	/** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
	isBinary?: boolean | undefined,
	/** Indicates whether the contents is truncated */
	isTruncated: boolean,
	/** The Git object ID */
	oid: GraphQLTypes["GitObjectID"],
	/** The Repository the Git object belongs to */
	repository: GraphQLTypes["Repository"],
	/** UTF8 text data or null if the Blob is binary */
	text?: string | undefined
};
	/** A special type of user which takes actions on behalf of GitHub Apps. */
["Bot"]: {
	__typename: "Bot",
	/** A URL pointing to the GitHub App's public avatar. */
	avatarUrl: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The username of the actor. */
	login: string,
	/** The HTTP path for this bot */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this bot */
	url: GraphQLTypes["URI"]
};
	/** Types which can be actors for `BranchActorAllowance` objects. */
["BranchActorAllowanceActor"]:{
        	__typename:"App" | "Team" | "User"
        	['...on App']: '__union' & GraphQLTypes["App"];
	['...on Team']: '__union' & GraphQLTypes["Team"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** A branch protection rule. */
["BranchProtectionRule"]: {
	__typename: "BranchProtectionRule",
	/** Can this branch be deleted. */
	allowsDeletions: boolean,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes: boolean,
	/** Is branch creation a protected operation. */
	blocksCreations: boolean,
	/** A list of conflicts matching branches protection rule and other branch protection rules */
	branchProtectionRuleConflicts: GraphQLTypes["BranchProtectionRuleConflictConnection"],
	/** A list of actors able to force push for this branch protection rule. */
	bypassForcePushAllowances: GraphQLTypes["BypassForcePushAllowanceConnection"],
	/** A list of actors able to bypass PRs for this branch protection rule. */
	bypassPullRequestAllowances: GraphQLTypes["BypassPullRequestAllowanceConnection"],
	/** The actor who created this branch protection rule. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews: boolean,
	id: string,
	/** Can admins overwrite branch protection. */
	isAdminEnforced: boolean,
	/** Repository refs that are protected by this rule */
	matchingRefs: GraphQLTypes["RefConnection"],
	/** Identifies the protection rule pattern. */
	pattern: string,
	/** A list push allowances for this branch protection rule. */
	pushAllowances: GraphQLTypes["PushAllowanceConnection"],
	/** The repository associated with this branch protection rule. */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string | undefined> | undefined,
	/** List of required status checks that must pass for commits to be accepted to matching branches. */
	requiredStatusChecks?: Array<GraphQLTypes["RequiredStatusCheckDescription"]> | undefined,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews: boolean,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews: boolean,
	/** Are commits required to be signed. */
	requiresCommitSignatures: boolean,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution: boolean,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory: boolean,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks: boolean,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks: boolean,
	/** Is pushing to matching branches restricted. */
	restrictsPushes: boolean,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals: boolean,
	/** A list review dismissal allowances for this branch protection rule. */
	reviewDismissalAllowances: GraphQLTypes["ReviewDismissalAllowanceConnection"]
};
	/** A conflict between two branch protection rules. */
["BranchProtectionRuleConflict"]: {
	__typename: "BranchProtectionRuleConflict",
	/** Identifies the branch protection rule. */
	branchProtectionRule?: GraphQLTypes["BranchProtectionRule"] | undefined,
	/** Identifies the conflicting branch protection rule. */
	conflictingBranchProtectionRule?: GraphQLTypes["BranchProtectionRule"] | undefined,
	/** Identifies the branch ref that has conflicting rules */
	ref?: GraphQLTypes["Ref"] | undefined
};
	/** The connection type for BranchProtectionRuleConflict. */
["BranchProtectionRuleConflictConnection"]: {
	__typename: "BranchProtectionRuleConflictConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["BranchProtectionRuleConflictEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["BranchProtectionRuleConflict"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["BranchProtectionRuleConflictEdge"]: {
	__typename: "BranchProtectionRuleConflictEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["BranchProtectionRuleConflict"] | undefined
};
	/** The connection type for BranchProtectionRule. */
["BranchProtectionRuleConnection"]: {
	__typename: "BranchProtectionRuleConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["BranchProtectionRuleEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["BranchProtectionRule"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["BranchProtectionRuleEdge"]: {
	__typename: "BranchProtectionRuleEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["BranchProtectionRule"] | undefined
};
	/** A user, team, or app who has the ability to bypass a force push requirement on a protected branch. */
["BypassForcePushAllowance"]: {
	__typename: "BypassForcePushAllowance",
	/** The actor that can force push. */
	actor?: GraphQLTypes["BranchActorAllowanceActor"] | undefined,
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?: GraphQLTypes["BranchProtectionRule"] | undefined,
	id: string
};
	/** The connection type for BypassForcePushAllowance. */
["BypassForcePushAllowanceConnection"]: {
	__typename: "BypassForcePushAllowanceConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["BypassForcePushAllowanceEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["BypassForcePushAllowance"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["BypassForcePushAllowanceEdge"]: {
	__typename: "BypassForcePushAllowanceEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["BypassForcePushAllowance"] | undefined
};
	/** A user, team, or app who has the ability to bypass a pull request requirement on a protected branch. */
["BypassPullRequestAllowance"]: {
	__typename: "BypassPullRequestAllowance",
	/** The actor that can bypass. */
	actor?: GraphQLTypes["BranchActorAllowanceActor"] | undefined,
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?: GraphQLTypes["BranchProtectionRule"] | undefined,
	id: string
};
	/** The connection type for BypassPullRequestAllowance. */
["BypassPullRequestAllowanceConnection"]: {
	__typename: "BypassPullRequestAllowanceConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["BypassPullRequestAllowanceEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["BypassPullRequestAllowance"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["BypassPullRequestAllowanceEdge"]: {
	__typename: "BypassPullRequestAllowanceEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["BypassPullRequestAllowance"] | undefined
};
	/** The Common Vulnerability Scoring System */
["CVSS"]: {
	__typename: "CVSS",
	/** The CVSS score associated with this advisory */
	score: number,
	/** The CVSS vector string associated with this advisory */
	vectorString?: string | undefined
};
	/** A common weakness enumeration */
["CWE"]: {
	__typename: "CWE",
	/** The id of the CWE */
	cweId: string,
	/** A detailed description of this CWE */
	description: string,
	id: string,
	/** The name of this CWE */
	name: string
};
	/** The connection type for CWE. */
["CWEConnection"]: {
	__typename: "CWEConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CWEEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CWE"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CWEEdge"]: {
	__typename: "CWEEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CWE"] | undefined
};
	/** Autogenerated input type of CancelEnterpriseAdminInvitation */
["CancelEnterpriseAdminInvitationInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the pending enterprise administrator invitation. */
	invitationId: string
};
	/** Autogenerated return type of CancelEnterpriseAdminInvitation */
["CancelEnterpriseAdminInvitationPayload"]: {
	__typename: "CancelEnterpriseAdminInvitationPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The invitation that was canceled. */
	invitation?: GraphQLTypes["EnterpriseAdministratorInvitation"] | undefined,
	/** A message confirming the result of canceling an administrator invitation. */
	message?: string | undefined
};
	/** Autogenerated input type of CancelSponsorship */
["CancelSponsorshipInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined
};
	/** Autogenerated return type of CancelSponsorship */
["CancelSponsorshipPayload"]: {
	__typename: "CancelSponsorshipPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The tier that was being used at the time of cancellation. */
	sponsorsTier?: GraphQLTypes["SponsorsTier"] | undefined
};
	/** Autogenerated input type of ChangeUserStatus */
["ChangeUserStatusInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
	emoji?: string | undefined,
	/** If set, the user status will not be shown after this date. */
	expiresAt?: GraphQLTypes["DateTime"] | undefined,
	/** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
	limitedAvailability?: boolean | undefined,
	/** A short description of your current status. */
	message?: string | undefined,
	/** The ID of the organization whose members will be allowed to see the status. If
omitted, the status will be publicly visible. */
	organizationId?: string | undefined
};
	/** Autogenerated return type of ChangeUserStatus */
["ChangeUserStatusPayload"]: {
	__typename: "ChangeUserStatusPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Your updated status. */
	status?: GraphQLTypes["UserStatus"] | undefined
};
	/** A single check annotation. */
["CheckAnnotation"]: {
	__typename: "CheckAnnotation",
	/** The annotation's severity level. */
	annotationLevel?: GraphQLTypes["CheckAnnotationLevel"] | undefined,
	/** The path to the file that this annotation was made on. */
	blobUrl: GraphQLTypes["URI"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The position of this annotation. */
	location: GraphQLTypes["CheckAnnotationSpan"],
	/** The annotation's message. */
	message: string,
	/** The path that this annotation was made on. */
	path: string,
	/** Additional information about the annotation. */
	rawDetails?: string | undefined,
	/** The annotation's title */
	title?: string | undefined
};
	/** The connection type for CheckAnnotation. */
["CheckAnnotationConnection"]: {
	__typename: "CheckAnnotationConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CheckAnnotationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CheckAnnotation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Information from a check run analysis to specific lines of code. */
["CheckAnnotationData"]: {
		/** Represents an annotation's information level */
	annotationLevel: GraphQLTypes["CheckAnnotationLevel"],
	/** The location of the annotation */
	location: GraphQLTypes["CheckAnnotationRange"],
	/** A short description of the feedback for these lines of code. */
	message: string,
	/** The path of the file to add an annotation to. */
	path: string,
	/** Details about this annotation. */
	rawDetails?: string | undefined,
	/** The title that represents the annotation. */
	title?: string | undefined
};
	/** An edge in a connection. */
["CheckAnnotationEdge"]: {
	__typename: "CheckAnnotationEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CheckAnnotation"] | undefined
};
	/** Represents an annotation's information level. */
["CheckAnnotationLevel"]: CheckAnnotationLevel;
	/** A character position in a check annotation. */
["CheckAnnotationPosition"]: {
	__typename: "CheckAnnotationPosition",
	/** Column number (1 indexed). */
	column?: number | undefined,
	/** Line number (1 indexed). */
	line: number
};
	/** Information from a check run analysis to specific lines of code. */
["CheckAnnotationRange"]: {
		/** The ending column of the range. */
	endColumn?: number | undefined,
	/** The ending line of the range. */
	endLine: number,
	/** The starting column of the range. */
	startColumn?: number | undefined,
	/** The starting line of the range. */
	startLine: number
};
	/** An inclusive pair of positions for a check annotation. */
["CheckAnnotationSpan"]: {
	__typename: "CheckAnnotationSpan",
	/** End position (inclusive). */
	end: GraphQLTypes["CheckAnnotationPosition"],
	/** Start position (inclusive). */
	start: GraphQLTypes["CheckAnnotationPosition"]
};
	/** The possible states for a check suite or run conclusion. */
["CheckConclusionState"]: CheckConclusionState;
	/** A check run. */
["CheckRun"]: {
	__typename: "CheckRun",
	/** The check run's annotations */
	annotations?: GraphQLTypes["CheckAnnotationConnection"] | undefined,
	/** The check suite that this run is a part of. */
	checkSuite: GraphQLTypes["CheckSuite"],
	/** Identifies the date and time when the check run was completed. */
	completedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The conclusion of the check run. */
	conclusion?: GraphQLTypes["CheckConclusionState"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The corresponding deployment for this job, if any */
	deployment?: GraphQLTypes["Deployment"] | undefined,
	/** The URL from which to find full details of the check run on the integrator's site. */
	detailsUrl?: GraphQLTypes["URI"] | undefined,
	/** A reference for the check run on the integrator's system. */
	externalId?: string | undefined,
	id: string,
	/** Whether this is required to pass before merging for a specific pull request. */
	isRequired: boolean,
	/** The name of the check for this check run. */
	name: string,
	/** Information about a pending deployment, if any, in this check run */
	pendingDeploymentRequest?: GraphQLTypes["DeploymentRequest"] | undefined,
	/** The permalink to the check run summary. */
	permalink: GraphQLTypes["URI"],
	/** The repository associated with this check run. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this check run. */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the check run was started. */
	startedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The current status of the check run. */
	status: GraphQLTypes["CheckStatusState"],
	/** The check run's steps */
	steps?: GraphQLTypes["CheckStepConnection"] | undefined,
	/** A string representing the check run's summary */
	summary?: string | undefined,
	/** A string representing the check run's text */
	text?: string | undefined,
	/** A string representing the check run */
	title?: string | undefined,
	/** The HTTP URL for this check run. */
	url: GraphQLTypes["URI"]
};
	/** Possible further actions the integrator can perform. */
["CheckRunAction"]: {
		/** A short explanation of what this action would do. */
	description: string,
	/** A reference for the action on the integrator's system. */
	identifier: string,
	/** The text to be displayed on a button in the web UI. */
	label: string
};
	/** The connection type for CheckRun. */
["CheckRunConnection"]: {
	__typename: "CheckRunConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CheckRunEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CheckRun"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CheckRunEdge"]: {
	__typename: "CheckRunEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CheckRun"] | undefined
};
	/** The filters that are available when fetching check runs. */
["CheckRunFilter"]: {
		/** Filters the check runs created by this application ID. */
	appId?: number | undefined,
	/** Filters the check runs by this name. */
	checkName?: string | undefined,
	/** Filters the check runs by this type. */
	checkType?: GraphQLTypes["CheckRunType"] | undefined,
	/** Filters the check runs by these conclusions. */
	conclusions?: Array<GraphQLTypes["CheckConclusionState"]> | undefined,
	/** Filters the check runs by this status. Superceded by statuses. */
	status?: GraphQLTypes["CheckStatusState"] | undefined,
	/** Filters the check runs by this status. Overrides status. */
	statuses?: Array<GraphQLTypes["CheckStatusState"]> | undefined
};
	/** Descriptive details about the check run. */
["CheckRunOutput"]: {
		/** The annotations that are made as part of the check run. */
	annotations?: Array<GraphQLTypes["CheckAnnotationData"]> | undefined,
	/** Images attached to the check run output displayed in the GitHub pull request UI. */
	images?: Array<GraphQLTypes["CheckRunOutputImage"]> | undefined,
	/** The summary of the check run (supports Commonmark). */
	summary: string,
	/** The details of the check run (supports Commonmark). */
	text?: string | undefined,
	/** A title to provide for this check run. */
	title: string
};
	/** Images attached to the check run output displayed in the GitHub pull request UI. */
["CheckRunOutputImage"]: {
		/** The alternative text for the image. */
	alt: string,
	/** A short image description. */
	caption?: string | undefined,
	/** The full URL of the image. */
	imageUrl: GraphQLTypes["URI"]
};
	/** The possible states of a check run in a status rollup. */
["CheckRunState"]: CheckRunState;
	/** Represents a count of the state of a check run. */
["CheckRunStateCount"]: {
	__typename: "CheckRunStateCount",
	/** The number of check runs with this state. */
	count: number,
	/** The state of a check run. */
	state: GraphQLTypes["CheckRunState"]
};
	/** The possible types of check runs. */
["CheckRunType"]: CheckRunType;
	/** The possible states for a check suite or run status. */
["CheckStatusState"]: CheckStatusState;
	/** A single check step. */
["CheckStep"]: {
	__typename: "CheckStep",
	/** Identifies the date and time when the check step was completed. */
	completedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The conclusion of the check step. */
	conclusion?: GraphQLTypes["CheckConclusionState"] | undefined,
	/** A reference for the check step on the integrator's system. */
	externalId?: string | undefined,
	/** The step's name. */
	name: string,
	/** The index of the step in the list of steps of the parent check run. */
	number: number,
	/** Number of seconds to completion. */
	secondsToCompletion?: number | undefined,
	/** Identifies the date and time when the check step was started. */
	startedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The current status of the check step. */
	status: GraphQLTypes["CheckStatusState"]
};
	/** The connection type for CheckStep. */
["CheckStepConnection"]: {
	__typename: "CheckStepConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CheckStepEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CheckStep"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CheckStepEdge"]: {
	__typename: "CheckStepEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CheckStep"] | undefined
};
	/** A check suite. */
["CheckSuite"]: {
	__typename: "CheckSuite",
	/** The GitHub App which created this check suite. */
	app?: GraphQLTypes["App"] | undefined,
	/** The name of the branch for this check suite. */
	branch?: GraphQLTypes["Ref"] | undefined,
	/** The check runs associated with a check suite. */
	checkRuns?: GraphQLTypes["CheckRunConnection"] | undefined,
	/** The commit for this check suite */
	commit: GraphQLTypes["Commit"],
	/** The conclusion of this check suite. */
	conclusion?: GraphQLTypes["CheckConclusionState"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The user who triggered the check suite. */
	creator?: GraphQLTypes["User"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** A list of open pull requests matching the check suite. */
	matchingPullRequests?: GraphQLTypes["PullRequestConnection"] | undefined,
	/** The push that triggered this check suite. */
	push?: GraphQLTypes["Push"] | undefined,
	/** The repository associated with this check suite. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this check suite */
	resourcePath: GraphQLTypes["URI"],
	/** The status of this check suite. */
	status: GraphQLTypes["CheckStatusState"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this check suite */
	url: GraphQLTypes["URI"],
	/** The workflow run associated with this check suite. */
	workflowRun?: GraphQLTypes["WorkflowRun"] | undefined
};
	/** The auto-trigger preferences that are available for check suites. */
["CheckSuiteAutoTriggerPreference"]: {
		/** The node ID of the application that owns the check suite. */
	appId: string,
	/** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
	setting: boolean
};
	/** The connection type for CheckSuite. */
["CheckSuiteConnection"]: {
	__typename: "CheckSuiteConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CheckSuiteEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CheckSuite"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CheckSuiteEdge"]: {
	__typename: "CheckSuiteEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CheckSuite"] | undefined
};
	/** The filters that are available when fetching check suites. */
["CheckSuiteFilter"]: {
		/** Filters the check suites created by this application ID. */
	appId?: number | undefined,
	/** Filters the check suites by this name. */
	checkName?: string | undefined
};
	/** Autogenerated input type of ClearLabelsFromLabelable */
["ClearLabelsFromLabelableInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the labelable object to clear the labels from. */
	labelableId: string
};
	/** Autogenerated return type of ClearLabelsFromLabelable */
["ClearLabelsFromLabelablePayload"]: {
	__typename: "ClearLabelsFromLabelablePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item that was unlabeled. */
	labelable?: GraphQLTypes["Labelable"] | undefined
};
	/** Autogenerated input type of ClearProjectV2ItemFieldValue */
["ClearProjectV2ItemFieldValueInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the field to be cleared. */
	fieldId: string,
	/** The ID of the item to be cleared. */
	itemId: string,
	/** The ID of the Project. */
	projectId: string
};
	/** Autogenerated return type of ClearProjectV2ItemFieldValue */
["ClearProjectV2ItemFieldValuePayload"]: {
	__typename: "ClearProjectV2ItemFieldValuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated item. */
	projectV2Item?: GraphQLTypes["ProjectV2Item"] | undefined
};
	/** Autogenerated input type of CloneProject */
["CloneProjectInput"]: {
		/** The description of the project. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether or not to clone the source project's workflows. */
	includeWorkflows: boolean,
	/** The name of the project. */
	name: string,
	/** The visibility of the project, defaults to false (private). */
	public?: boolean | undefined,
	/** The source project to clone. */
	sourceId: string,
	/** The owner ID to create the project under. */
	targetOwnerId: string
};
	/** Autogenerated return type of CloneProject */
["CloneProjectPayload"]: {
	__typename: "CloneProjectPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the JobStatus for populating cloned fields. */
	jobStatusId?: string | undefined,
	/** The new cloned project. */
	project?: GraphQLTypes["Project"] | undefined
};
	/** Autogenerated input type of CloneTemplateRepository */
["CloneTemplateRepositoryInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A short description of the new repository. */
	description?: string | undefined,
	/** Whether to copy all branches from the template to the new repository. Defaults
to copying only the default branch of the template. */
	includeAllBranches?: boolean | undefined,
	/** The name of the new repository. */
	name: string,
	/** The ID of the owner for the new repository. */
	ownerId: string,
	/** The Node ID of the template repository. */
	repositoryId: string,
	/** Indicates the repository's visibility level. */
	visibility: GraphQLTypes["RepositoryVisibility"]
};
	/** Autogenerated return type of CloneTemplateRepository */
["CloneTemplateRepositoryPayload"]: {
	__typename: "CloneTemplateRepositoryPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new repository. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** An object that can be closed */
["Closable"]: {
	__typename:"Issue" | "Milestone" | "Project" | "ProjectNext" | "ProjectV2" | "PullRequest",
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: GraphQLTypes["DateTime"] | undefined
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on Milestone']: '__union' & GraphQLTypes["Milestone"];
	['...on Project']: '__union' & GraphQLTypes["Project"];
	['...on ProjectNext']: '__union' & GraphQLTypes["ProjectNext"];
	['...on ProjectV2']: '__union' & GraphQLTypes["ProjectV2"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** Autogenerated input type of CloseIssue */
["CloseIssueInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the issue to be closed. */
	issueId: string,
	/** The reason the issue is to be closed. */
	stateReason?: GraphQLTypes["IssueClosedStateReason"] | undefined
};
	/** Autogenerated return type of CloseIssue */
["CloseIssuePayload"]: {
	__typename: "CloseIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was closed. */
	issue?: GraphQLTypes["Issue"] | undefined
};
	/** Autogenerated input type of ClosePullRequest */
["ClosePullRequestInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to be closed. */
	pullRequestId: string
};
	/** Autogenerated return type of ClosePullRequest */
["ClosePullRequestPayload"]: {
	__typename: "ClosePullRequestPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that was closed. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents a 'closed' event on any `Closable`. */
["ClosedEvent"]: {
	__typename: "ClosedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Object that was closed. */
	closable: GraphQLTypes["Closable"],
	/** Object which triggered the creation of this event. */
	closer?: GraphQLTypes["Closer"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** The HTTP path for this closed event. */
	resourcePath: GraphQLTypes["URI"],
	/** The reason the issue state was changed to closed. */
	stateReason?: GraphQLTypes["IssueStateReason"] | undefined,
	/** The HTTP URL for this closed event. */
	url: GraphQLTypes["URI"]
};
	/** The object which triggered a `ClosedEvent`. */
["Closer"]:{
        	__typename:"Commit" | "PullRequest"
        	['...on Commit']: '__union' & GraphQLTypes["Commit"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** The Code of Conduct for a repository */
["CodeOfConduct"]: {
	__typename: "CodeOfConduct",
	/** The body of the Code of Conduct */
	body?: string | undefined,
	id: string,
	/** The key for the Code of Conduct */
	key: string,
	/** The formal name of the Code of Conduct */
	name: string,
	/** The HTTP path for this Code of Conduct */
	resourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for this Code of Conduct */
	url?: GraphQLTypes["URI"] | undefined
};
	/** Collaborators affiliation level with a subject. */
["CollaboratorAffiliation"]: CollaboratorAffiliation;
	/** Represents a comment. */
["Comment"]: {
	__typename:"CommitComment" | "Discussion" | "DiscussionComment" | "GistComment" | "Issue" | "IssueComment" | "PullRequest" | "PullRequestReview" | "PullRequestReviewComment" | "TeamDiscussion" | "TeamDiscussionComment",
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
	['...on CommitComment']: '__union' & GraphQLTypes["CommitComment"];
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on DiscussionComment']: '__union' & GraphQLTypes["DiscussionComment"];
	['...on GistComment']: '__union' & GraphQLTypes["GistComment"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on PullRequestReview']: '__union' & GraphQLTypes["PullRequestReview"];
	['...on PullRequestReviewComment']: '__union' & GraphQLTypes["PullRequestReviewComment"];
	['...on TeamDiscussion']: '__union' & GraphQLTypes["TeamDiscussion"];
	['...on TeamDiscussionComment']: '__union' & GraphQLTypes["TeamDiscussionComment"];
};
	/** A comment author association with repository. */
["CommentAuthorAssociation"]: CommentAuthorAssociation;
	/** The possible errors that will prevent a user from updating a comment. */
["CommentCannotUpdateReason"]: CommentCannotUpdateReason;
	/** Represents a 'comment_deleted' event on a given issue or pull request. */
["CommentDeletedEvent"]: {
	__typename: "CommentDeletedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The user who authored the deleted comment. */
	deletedCommentAuthor?: GraphQLTypes["Actor"] | undefined,
	id: string
};
	/** Represents a Git commit. */
["Commit"]: {
	__typename: "Commit",
	/** An abbreviated version of the Git object ID */
	abbreviatedOid: string,
	/** The number of additions in this commit. */
	additions: number,
	/** The merged Pull Request that introduced the commit to the repository. If the
commit is not present in the default branch, additionally returns open Pull
Requests associated with the commit */
	associatedPullRequests?: GraphQLTypes["PullRequestConnection"] | undefined,
	/** Authorship details of the commit. */
	author?: GraphQLTypes["GitActor"] | undefined,
	/** Check if the committer and the author match. */
	authoredByCommitter: boolean,
	/** The datetime when this commit was authored. */
	authoredDate: GraphQLTypes["DateTime"],
	/** The list of authors for this commit based on the git author and the Co-authored-by
message trailer. The git author will always be first. */
	authors: GraphQLTypes["GitActorConnection"],
	/** Fetches `git blame` information. */
	blame: GraphQLTypes["Blame"],
	/** We recommend using the `changedFielsIfAvailable` field instead of
`changedFiles`, as `changedFiles` will cause your request to return an error
if GitHub is unable to calculate the number of changed files. */
	changedFiles: number,
	/** The number of changed files in this commit. If GitHub is unable to calculate
the number of changed files (for example due to a timeout), this will return
`null`. We recommend using this field instead of `changedFiles`. */
	changedFilesIfAvailable?: number | undefined,
	/** The check suites associated with a commit. */
	checkSuites?: GraphQLTypes["CheckSuiteConnection"] | undefined,
	/** Comments made on the commit. */
	comments: GraphQLTypes["CommitCommentConnection"],
	/** The HTTP path for this Git object */
	commitResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this Git object */
	commitUrl: GraphQLTypes["URI"],
	/** The datetime when this commit was committed. */
	committedDate: GraphQLTypes["DateTime"],
	/** Check if committed via GitHub web UI. */
	committedViaWeb: boolean,
	/** Committer details of the commit. */
	committer?: GraphQLTypes["GitActor"] | undefined,
	/** The number of deletions in this commit. */
	deletions: number,
	/** The deployments associated with a commit. */
	deployments?: GraphQLTypes["DeploymentConnection"] | undefined,
	/** The tree entry representing the file located at the given path. */
	file?: GraphQLTypes["TreeEntry"] | undefined,
	/** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
	history: GraphQLTypes["CommitHistoryConnection"],
	id: string,
	/** The Git commit message */
	message: string,
	/** The Git commit message body */
	messageBody: string,
	/** The commit message body rendered to HTML. */
	messageBodyHTML: GraphQLTypes["HTML"],
	/** The Git commit message headline */
	messageHeadline: string,
	/** The commit message headline rendered to HTML. */
	messageHeadlineHTML: GraphQLTypes["HTML"],
	/** The Git object ID */
	oid: GraphQLTypes["GitObjectID"],
	/** The organization this commit was made on behalf of. */
	onBehalfOf?: GraphQLTypes["Organization"] | undefined,
	/** The parents of a commit. */
	parents: GraphQLTypes["CommitConnection"],
	/** The datetime when this commit was pushed. */
	pushedDate?: GraphQLTypes["DateTime"] | undefined,
	/** The Repository this commit belongs to */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this commit */
	resourcePath: GraphQLTypes["URI"],
	/** Commit signing information, if present. */
	signature?: GraphQLTypes["GitSignature"] | undefined,
	/** Status information for this commit */
	status?: GraphQLTypes["Status"] | undefined,
	/** Check and Status rollup information for this commit. */
	statusCheckRollup?: GraphQLTypes["StatusCheckRollup"] | undefined,
	/** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
	submodules: GraphQLTypes["SubmoduleConnection"],
	/** Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes. */
	tarballUrl: GraphQLTypes["URI"],
	/** Commit's root Tree */
	tree: GraphQLTypes["Tree"],
	/** The HTTP path for the tree of this commit */
	treeResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for the tree of this commit */
	treeUrl: GraphQLTypes["URI"],
	/** The HTTP URL for this commit */
	url: GraphQLTypes["URI"],
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: GraphQLTypes["SubscriptionState"] | undefined,
	/** Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes. */
	zipballUrl: GraphQLTypes["URI"]
};
	/** Specifies an author for filtering Git commits. */
["CommitAuthor"]: {
		/** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
	emails?: Array<string> | undefined,
	/** ID of a User to filter by. If non-null, only commits authored by this user
will be returned. This field takes precedence over emails. */
	id?: string | undefined
};
	/** Represents a comment on a given Commit. */
["CommitComment"]: {
	__typename: "CommitComment",
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** Identifies the comment body. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the commit associated with the comment, if the commit exists. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies the file path associated with the comment. */
	path?: string | undefined,
	/** Identifies the line position associated with the comment. */
	position?: number | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path permalink for this commit comment. */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL permalink for this commit comment. */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for CommitComment. */
["CommitCommentConnection"]: {
	__typename: "CommitCommentConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CommitCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CommitComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CommitCommentEdge"]: {
	__typename: "CommitCommentEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CommitComment"] | undefined
};
	/** A thread of comments on a commit. */
["CommitCommentThread"]: {
	__typename: "CommitCommentThread",
	/** The comments that exist in this thread. */
	comments: GraphQLTypes["CommitCommentConnection"],
	/** The commit the comments were made on. */
	commit?: GraphQLTypes["Commit"] | undefined,
	id: string,
	/** The file the comments were made on. */
	path?: string | undefined,
	/** The position in the diff for the commit that the comment was made on. */
	position?: number | undefined,
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"]
};
	/** The connection type for Commit. */
["CommitConnection"]: {
	__typename: "CommitConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CommitEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Commit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Ordering options for commit contribution connections. */
["CommitContributionOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field by which to order commit contributions. */
	field: GraphQLTypes["CommitContributionOrderField"]
};
	/** Properties by which commit contribution connections can be ordered. */
["CommitContributionOrderField"]: CommitContributionOrderField;
	/** This aggregates commits made by a user within one repository. */
["CommitContributionsByRepository"]: {
	__typename: "CommitContributionsByRepository",
	/** The commit contributions, each representing a day. */
	contributions: GraphQLTypes["CreatedCommitContributionConnection"],
	/** The repository in which the commits were made. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for the user's commits to the repository in this time range. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for the user's commits to the repository in this time range. */
	url: GraphQLTypes["URI"]
};
	/** An edge in a connection. */
["CommitEdge"]: {
	__typename: "CommitEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Commit"] | undefined
};
	/** The connection type for Commit. */
["CommitHistoryConnection"]: {
	__typename: "CommitHistoryConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CommitEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Commit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A message to include with a new commit */
["CommitMessage"]: {
		/** The body of the message. */
	body?: string | undefined,
	/** The headline of the message. */
	headline: string
};
	/** A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    } */
["CommittableBranch"]: {
		/** The unqualified name of the branch to append the commit to. */
	branchName?: string | undefined,
	/** The Node ID of the Ref to be updated. */
	id?: string | undefined,
	/** The nameWithOwner of the repository to commit to. */
	repositoryNameWithOwner?: string | undefined
};
	/** Represents a comparison between two commit revisions. */
["Comparison"]: {
	__typename: "Comparison",
	/** The number of commits ahead of the base branch. */
	aheadBy: number,
	/** The base revision of this comparison. */
	baseTarget: GraphQLTypes["GitObject"],
	/** The number of commits behind the base branch. */
	behindBy: number,
	/** The commits which compose this comparison. */
	commits: GraphQLTypes["ComparisonCommitConnection"],
	/** The head revision of this comparison. */
	headTarget: GraphQLTypes["GitObject"],
	id: string,
	/** The status of this comparison. */
	status: GraphQLTypes["ComparisonStatus"]
};
	/** The connection type for Commit. */
["ComparisonCommitConnection"]: {
	__typename: "ComparisonCommitConnection",
	/** The total count of authors and co-authors across all commits. */
	authorCount: number,
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CommitEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Commit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** The status of a git comparison between two refs. */
["ComparisonStatus"]: ComparisonStatus;
	/** Represents a 'connected' event on a given issue or pull request. */
["ConnectedEvent"]: {
	__typename: "ConnectedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Reference originated in a different repository. */
	isCrossRepository: boolean,
	/** Issue or pull request that made the reference. */
	source: GraphQLTypes["ReferencedSubject"],
	/** Issue or pull request which was connected. */
	subject: GraphQLTypes["ReferencedSubject"]
};
	/** Represents a contribution a user made on GitHub, such as opening an issue. */
["Contribution"]: {
	__typename:"CreatedCommitContribution" | "CreatedIssueContribution" | "CreatedPullRequestContribution" | "CreatedPullRequestReviewContribution" | "CreatedRepositoryContribution" | "JoinedGitHubContribution" | "RestrictedContribution",
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: GraphQLTypes["DateTime"],
	/** The HTTP path for this contribution. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: GraphQLTypes["URI"],
	/** The user who made this contribution. */
	user: GraphQLTypes["User"]
	['...on CreatedCommitContribution']: '__union' & GraphQLTypes["CreatedCommitContribution"];
	['...on CreatedIssueContribution']: '__union' & GraphQLTypes["CreatedIssueContribution"];
	['...on CreatedPullRequestContribution']: '__union' & GraphQLTypes["CreatedPullRequestContribution"];
	['...on CreatedPullRequestReviewContribution']: '__union' & GraphQLTypes["CreatedPullRequestReviewContribution"];
	['...on CreatedRepositoryContribution']: '__union' & GraphQLTypes["CreatedRepositoryContribution"];
	['...on JoinedGitHubContribution']: '__union' & GraphQLTypes["JoinedGitHubContribution"];
	['...on RestrictedContribution']: '__union' & GraphQLTypes["RestrictedContribution"];
};
	/** A calendar of contributions made on GitHub by a user. */
["ContributionCalendar"]: {
	__typename: "ContributionCalendar",
	/** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
	colors: Array<string>,
	/** Determine if the color set was chosen because it's currently Halloween. */
	isHalloween: boolean,
	/** A list of the months of contributions in this calendar. */
	months: Array<GraphQLTypes["ContributionCalendarMonth"]>,
	/** The count of total contributions in the calendar. */
	totalContributions: number,
	/** A list of the weeks of contributions in this calendar. */
	weeks: Array<GraphQLTypes["ContributionCalendarWeek"]>
};
	/** Represents a single day of contributions on GitHub by a user. */
["ContributionCalendarDay"]: {
	__typename: "ContributionCalendarDay",
	/** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
	color: string,
	/** How many contributions were made by the user on this day. */
	contributionCount: number,
	/** Indication of contributions, relative to other days. Can be used to indicate
which color to represent this day on a calendar. */
	contributionLevel: GraphQLTypes["ContributionLevel"],
	/** The day this square represents. */
	date: GraphQLTypes["Date"],
	/** A number representing which day of the week this square represents, e.g., 1 is Monday. */
	weekday: number
};
	/** A month of contributions in a user's contribution graph. */
["ContributionCalendarMonth"]: {
	__typename: "ContributionCalendarMonth",
	/** The date of the first day of this month. */
	firstDay: GraphQLTypes["Date"],
	/** The name of the month. */
	name: string,
	/** How many weeks started in this month. */
	totalWeeks: number,
	/** The year the month occurred in. */
	year: number
};
	/** A week of contributions in a user's contribution graph. */
["ContributionCalendarWeek"]: {
	__typename: "ContributionCalendarWeek",
	/** The days of contributions in this week. */
	contributionDays: Array<GraphQLTypes["ContributionCalendarDay"]>,
	/** The date of the earliest square in this week. */
	firstDay: GraphQLTypes["Date"]
};
	/** Varying levels of contributions from none to many. */
["ContributionLevel"]: ContributionLevel;
	/** Ordering options for contribution connections. */
["ContributionOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"]
};
	/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
["ContributionsCollection"]: {
	__typename: "ContributionsCollection",
	/** Commit contributions made by the user, grouped by repository. */
	commitContributionsByRepository: Array<GraphQLTypes["CommitContributionsByRepository"]>,
	/** A calendar of this user's contributions on GitHub. */
	contributionCalendar: GraphQLTypes["ContributionCalendar"],
	/** The years the user has been making contributions with the most recent year first. */
	contributionYears: Array<number>,
	/** Determine if this collection's time span ends in the current month. */
	doesEndInCurrentMonth: boolean,
	/** The date of the first restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts. */
	earliestRestrictedContributionDate?: GraphQLTypes["Date"] | undefined,
	/** The ending date and time of this collection. */
	endedAt: GraphQLTypes["DateTime"],
	/** The first issue the user opened on GitHub. This will be null if that issue was
opened outside the collection's time range and ignoreTimeRange is false. If
the issue is not visible but the user has opted to show private contributions,
a RestrictedContribution will be returned. */
	firstIssueContribution?: GraphQLTypes["CreatedIssueOrRestrictedContribution"] | undefined,
	/** The first pull request the user opened on GitHub. This will be null if that
pull request was opened outside the collection's time range and
ignoreTimeRange is not true. If the pull request is not visible but the user
has opted to show private contributions, a RestrictedContribution will be returned. */
	firstPullRequestContribution?: GraphQLTypes["CreatedPullRequestOrRestrictedContribution"] | undefined,
	/** The first repository the user created on GitHub. This will be null if that
first repository was created outside the collection's time range and
ignoreTimeRange is false. If the repository is not visible, then a
RestrictedContribution is returned. */
	firstRepositoryContribution?: GraphQLTypes["CreatedRepositoryOrRestrictedContribution"] | undefined,
	/** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
	hasActivityInThePast: boolean,
	/** Determine if there are any contributions in this collection. */
	hasAnyContributions: boolean,
	/** Determine if the user made any contributions in this time frame whose details
are not visible because they were made in a private repository. Can only be
true if the user enabled private contribution counts. */
	hasAnyRestrictedContributions: boolean,
	/** Whether or not the collector's time span is all within the same day. */
	isSingleDay: boolean,
	/** A list of issues the user opened. */
	issueContributions: GraphQLTypes["CreatedIssueContributionConnection"],
	/** Issue contributions made by the user, grouped by repository. */
	issueContributionsByRepository: Array<GraphQLTypes["IssueContributionsByRepository"]>,
	/** When the user signed up for GitHub. This will be null if that sign up date
falls outside the collection's time range and ignoreTimeRange is false. */
	joinedGitHubContribution?: GraphQLTypes["JoinedGitHubContribution"] | undefined,
	/** The date of the most recent restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts. */
	latestRestrictedContributionDate?: GraphQLTypes["Date"] | undefined,
	/** When this collection's time range does not include any activity from the user, use this
to get a different collection from an earlier time range that does have activity. */
	mostRecentCollectionWithActivity?: GraphQLTypes["ContributionsCollection"] | undefined,
	/** Returns a different contributions collection from an earlier time range than this one
that does not have any contributions. */
	mostRecentCollectionWithoutActivity?: GraphQLTypes["ContributionsCollection"] | undefined,
	/** The issue the user opened on GitHub that received the most comments in the specified
time frame. */
	popularIssueContribution?: GraphQLTypes["CreatedIssueContribution"] | undefined,
	/** The pull request the user opened on GitHub that received the most comments in the
specified time frame. */
	popularPullRequestContribution?: GraphQLTypes["CreatedPullRequestContribution"] | undefined,
	/** Pull request contributions made by the user. */
	pullRequestContributions: GraphQLTypes["CreatedPullRequestContributionConnection"],
	/** Pull request contributions made by the user, grouped by repository. */
	pullRequestContributionsByRepository: Array<GraphQLTypes["PullRequestContributionsByRepository"]>,
	/** Pull request review contributions made by the user. Returns the most recently
submitted review for each PR reviewed by the user. */
	pullRequestReviewContributions: GraphQLTypes["CreatedPullRequestReviewContributionConnection"],
	/** Pull request review contributions made by the user, grouped by repository. */
	pullRequestReviewContributionsByRepository: Array<GraphQLTypes["PullRequestReviewContributionsByRepository"]>,
	/** A list of repositories owned by the user that the user created in this time range. */
	repositoryContributions: GraphQLTypes["CreatedRepositoryContributionConnection"],
	/** A count of contributions made by the user that the viewer cannot access. Only
non-zero when the user has chosen to share their private contribution counts. */
	restrictedContributionsCount: number,
	/** The beginning date and time of this collection. */
	startedAt: GraphQLTypes["DateTime"],
	/** How many commits were made by the user in this time span. */
	totalCommitContributions: number,
	/** How many issues the user opened. */
	totalIssueContributions: number,
	/** How many pull requests the user opened. */
	totalPullRequestContributions: number,
	/** How many pull request reviews the user left. */
	totalPullRequestReviewContributions: number,
	/** How many different repositories the user committed to. */
	totalRepositoriesWithContributedCommits: number,
	/** How many different repositories the user opened issues in. */
	totalRepositoriesWithContributedIssues: number,
	/** How many different repositories the user left pull request reviews in. */
	totalRepositoriesWithContributedPullRequestReviews: number,
	/** How many different repositories the user opened pull requests in. */
	totalRepositoriesWithContributedPullRequests: number,
	/** How many repositories the user created. */
	totalRepositoryContributions: number,
	/** The user who made the contributions in this collection. */
	user: GraphQLTypes["User"]
};
	/** Autogenerated input type of ConvertProjectCardNoteToIssue */
["ConvertProjectCardNoteToIssueInput"]: {
		/** The body of the newly created issue. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ProjectCard ID to convert. */
	projectCardId: string,
	/** The ID of the repository to create the issue in. */
	repositoryId: string,
	/** The title of the newly created issue. Defaults to the card's note text. */
	title?: string | undefined
};
	/** Autogenerated return type of ConvertProjectCardNoteToIssue */
["ConvertProjectCardNoteToIssuePayload"]: {
	__typename: "ConvertProjectCardNoteToIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated ProjectCard. */
	projectCard?: GraphQLTypes["ProjectCard"] | undefined
};
	/** Autogenerated input type of ConvertPullRequestToDraft */
["ConvertPullRequestToDraftInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to convert to draft */
	pullRequestId: string
};
	/** Autogenerated return type of ConvertPullRequestToDraft */
["ConvertPullRequestToDraftPayload"]: {
	__typename: "ConvertPullRequestToDraftPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that is now a draft. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents a 'convert_to_draft' event on a given pull request. */
["ConvertToDraftEvent"]: {
	__typename: "ConvertToDraftEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The HTTP path for this convert to draft event. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this convert to draft event. */
	url: GraphQLTypes["URI"]
};
	/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
["ConvertedNoteToIssueEvent"]: {
	__typename: "ConvertedNoteToIssueEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Project referenced by event. */
	project?: GraphQLTypes["Project"] | undefined,
	/** Project card referenced by this project event. */
	projectCard?: GraphQLTypes["ProjectCard"] | undefined,
	/** Column name referenced by this project event. */
	projectColumnName: string
};
	/** Represents a 'converted_to_discussion' event on a given issue. */
["ConvertedToDiscussionEvent"]: {
	__typename: "ConvertedToDiscussionEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The discussion that the issue was converted into. */
	discussion?: GraphQLTypes["Discussion"] | undefined,
	id: string
};
	/** Autogenerated input type of CreateBranchProtectionRule */
["CreateBranchProtectionRuleInput"]: {
		/** Can this branch be deleted. */
	allowsDeletions?: boolean | undefined,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?: boolean | undefined,
	/** Is branch creation a protected operation. */
	blocksCreations?: boolean | undefined,
	/** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
	bypassForcePushActorIds?: Array<string> | undefined,
	/** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
	bypassPullRequestActorIds?: Array<string> | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?: boolean | undefined,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?: boolean | undefined,
	/** The glob-like pattern used to determine matching branches. */
	pattern: string,
	/** A list of User, Team, or App IDs allowed to push to matching branches. */
	pushActorIds?: Array<string> | undefined,
	/** The global relay id of the repository in which a new branch protection rule should be created in. */
	repositoryId: string,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string> | undefined,
	/** The list of required status checks */
	requiredStatusChecks?: Array<GraphQLTypes["RequiredStatusCheckInput"]> | undefined,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?: boolean | undefined,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?: boolean | undefined,
	/** Are commits required to be signed. */
	requiresCommitSignatures?: boolean | undefined,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?: boolean | undefined,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?: boolean | undefined,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?: boolean | undefined,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?: boolean | undefined,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?: boolean | undefined,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?: boolean | undefined,
	/** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
	reviewDismissalActorIds?: Array<string> | undefined
};
	/** Autogenerated return type of CreateBranchProtectionRule */
["CreateBranchProtectionRulePayload"]: {
	__typename: "CreateBranchProtectionRulePayload",
	/** The newly created BranchProtectionRule. */
	branchProtectionRule?: GraphQLTypes["BranchProtectionRule"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of CreateCheckRun */
["CreateCheckRunInput"]: {
		/** Possible further actions the integrator can perform, which a user may trigger. */
	actions?: Array<GraphQLTypes["CheckRunAction"]> | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The time that the check run finished. */
	completedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The final conclusion of the check. */
	conclusion?: GraphQLTypes["CheckConclusionState"] | undefined,
	/** The URL of the integrator's site that has the full details of the check. */
	detailsUrl?: GraphQLTypes["URI"] | undefined,
	/** A reference for the run on the integrator's system. */
	externalId?: string | undefined,
	/** The SHA of the head commit. */
	headSha: GraphQLTypes["GitObjectID"],
	/** The name of the check. */
	name: string,
	/** Descriptive details about the run. */
	output?: GraphQLTypes["CheckRunOutput"] | undefined,
	/** The node ID of the repository. */
	repositoryId: string,
	/** The time that the check run began. */
	startedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The current status. */
	status?: GraphQLTypes["RequestableCheckStatusState"] | undefined
};
	/** Autogenerated return type of CreateCheckRun */
["CreateCheckRunPayload"]: {
	__typename: "CreateCheckRunPayload",
	/** The newly created check run. */
	checkRun?: GraphQLTypes["CheckRun"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of CreateCheckSuite */
["CreateCheckSuiteInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The SHA of the head commit. */
	headSha: GraphQLTypes["GitObjectID"],
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of CreateCheckSuite */
["CreateCheckSuitePayload"]: {
	__typename: "CreateCheckSuitePayload",
	/** The newly created check suite. */
	checkSuite?: GraphQLTypes["CheckSuite"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of CreateCommitOnBranch */
["CreateCommitOnBranchInput"]: {
		/** The Ref to be updated.  Must be a branch. */
	branch: GraphQLTypes["CommittableBranch"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The git commit oid expected at the head of the branch prior to the commit */
	expectedHeadOid: GraphQLTypes["GitObjectID"],
	/** A description of changes to files in this commit. */
	fileChanges?: GraphQLTypes["FileChanges"] | undefined,
	/** The commit message the be included with the commit. */
	message: GraphQLTypes["CommitMessage"]
};
	/** Autogenerated return type of CreateCommitOnBranch */
["CreateCommitOnBranchPayload"]: {
	__typename: "CreateCommitOnBranchPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new commit. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** The ref which has been updated to point to the new commit. */
	ref?: GraphQLTypes["Ref"] | undefined
};
	/** Autogenerated input type of CreateDeployment */
["CreateDeploymentInput"]: {
		/** Attempt to automatically merge the default branch into the requested ref, defaults to true. */
	autoMerge?: boolean | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Short description of the deployment. */
	description?: string | undefined,
	/** Name for the target deployment environment. */
	environment?: string | undefined,
	/** JSON payload with extra information about the deployment. */
	payload?: string | undefined,
	/** The node ID of the ref to be deployed. */
	refId: string,
	/** The node ID of the repository. */
	repositoryId: string,
	/** The status contexts to verify against commit status checks. To bypass required
contexts, pass an empty array. Defaults to all unique contexts. */
	requiredContexts?: Array<string> | undefined,
	/** Specifies a task to execute. */
	task?: string | undefined
};
	/** Autogenerated return type of CreateDeployment */
["CreateDeploymentPayload"]: {
	__typename: "CreateDeploymentPayload",
	/** True if the default branch has been auto-merged into the deployment ref. */
	autoMerged?: boolean | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new deployment. */
	deployment?: GraphQLTypes["Deployment"] | undefined
};
	/** Autogenerated input type of CreateDeploymentStatus */
["CreateDeploymentStatusInput"]: {
		/** Adds a new inactive status to all non-transient, non-production environment
deployments with the same repository and environment name as the created
status's deployment. */
	autoInactive?: boolean | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The node ID of the deployment. */
	deploymentId: string,
	/** A short description of the status. Maximum length of 140 characters. */
	description?: string | undefined,
	/** If provided, updates the environment of the deploy. Otherwise, does not modify the environment. */
	environment?: string | undefined,
	/** Sets the URL for accessing your environment. */
	environmentUrl?: string | undefined,
	/** The log URL to associate with this status.       This URL should contain
output to keep the user updated while the task is running       or serve as
historical information for what happened in the deployment. */
	logUrl?: string | undefined,
	/** The state of the deployment. */
	state: GraphQLTypes["DeploymentStatusState"]
};
	/** Autogenerated return type of CreateDeploymentStatus */
["CreateDeploymentStatusPayload"]: {
	__typename: "CreateDeploymentStatusPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new deployment status. */
	deploymentStatus?: GraphQLTypes["DeploymentStatus"] | undefined
};
	/** Autogenerated input type of CreateDiscussion */
["CreateDiscussionInput"]: {
		/** The body of the discussion. */
	body: string,
	/** The id of the discussion category to associate with this discussion. */
	categoryId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the repository on which to create the discussion. */
	repositoryId: string,
	/** The title of the discussion. */
	title: string
};
	/** Autogenerated return type of CreateDiscussion */
["CreateDiscussionPayload"]: {
	__typename: "CreateDiscussionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion that was just created. */
	discussion?: GraphQLTypes["Discussion"] | undefined
};
	/** Autogenerated input type of CreateEnterpriseOrganization */
["CreateEnterpriseOrganizationInput"]: {
		/** The logins for the administrators of the new organization. */
	adminLogins: Array<string>,
	/** The email used for sending billing receipts. */
	billingEmail: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise owning the new organization. */
	enterpriseId: string,
	/** The login of the new organization. */
	login: string,
	/** The profile name of the new organization. */
	profileName: string
};
	/** Autogenerated return type of CreateEnterpriseOrganization */
["CreateEnterpriseOrganizationPayload"]: {
	__typename: "CreateEnterpriseOrganizationPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise that owns the created organization. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** The organization that was created. */
	organization?: GraphQLTypes["Organization"] | undefined
};
	/** Autogenerated input type of CreateEnvironment */
["CreateEnvironmentInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the environment. */
	name: string,
	/** The node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of CreateEnvironment */
["CreateEnvironmentPayload"]: {
	__typename: "CreateEnvironmentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new or existing environment. */
	environment?: GraphQLTypes["Environment"] | undefined
};
	/** Autogenerated input type of CreateIpAllowListEntry */
["CreateIpAllowListEntryInput"]: {
		/** An IP address or range of addresses in CIDR notation. */
	allowListValue: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether the IP allow list entry is active when an IP allow list is enabled. */
	isActive: boolean,
	/** An optional name for the IP allow list entry. */
	name?: string | undefined,
	/** The ID of the owner for which to create the new IP allow list entry. */
	ownerId: string
};
	/** Autogenerated return type of CreateIpAllowListEntry */
["CreateIpAllowListEntryPayload"]: {
	__typename: "CreateIpAllowListEntryPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list entry that was created. */
	ipAllowListEntry?: GraphQLTypes["IpAllowListEntry"] | undefined
};
	/** Autogenerated input type of CreateIssue */
["CreateIssueInput"]: {
		/** The Node ID for the user assignee for this issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body for the issue description. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
	issueTemplate?: string | undefined,
	/** An array of Node IDs of labels for this issue. */
	labelIds?: Array<string> | undefined,
	/** The Node ID of the milestone for this issue. */
	milestoneId?: string | undefined,
	/** An array of Node IDs for projects associated with this issue. */
	projectIds?: Array<string> | undefined,
	/** The Node ID of the repository. */
	repositoryId: string,
	/** The title for the issue. */
	title: string
};
	/** Autogenerated return type of CreateIssue */
["CreateIssuePayload"]: {
	__typename: "CreateIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new issue. */
	issue?: GraphQLTypes["Issue"] | undefined
};
	/** Autogenerated input type of CreateLabel */
["CreateLabelInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A 6 character hex code, without the leading #, identifying the color of the label. */
	color: string,
	/** A brief description of the label, such as its purpose. */
	description?: string | undefined,
	/** The name of the label. */
	name: string,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of CreateLabel */
["CreateLabelPayload"]: {
	__typename: "CreateLabelPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new label. */
	label?: GraphQLTypes["Label"] | undefined
};
	/** Autogenerated input type of CreateLinkedBranch */
["CreateLinkedBranchInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the issue to link to. */
	issueId: string,
	/** The name of the new branch. Defaults to issue number and title. */
	name?: string | undefined,
	/** The commit SHA to base the new branch on. */
	oid: GraphQLTypes["GitObjectID"],
	/** ID of the repository to create the branch in. Defaults to the issue repository. */
	repositoryId?: string | undefined
};
	/** Autogenerated return type of CreateLinkedBranch */
["CreateLinkedBranchPayload"]: {
	__typename: "CreateLinkedBranchPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new branch issue reference. */
	linkedBranch?: GraphQLTypes["LinkedBranch"] | undefined
};
	/** Autogenerated input type of CreateMigrationSource */
["CreateMigrationSourceInput"]: {
		/** The Octoshift migration source access token. */
	accessToken?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The GitHub personal access token of the user importing to the target repository. */
	githubPat?: string | undefined,
	/** The Octoshift migration source name. */
	name: string,
	/** The ID of the organization that will own the Octoshift migration source. */
	ownerId: string,
	/** The Octoshift migration source type. */
	type: GraphQLTypes["MigrationSourceType"],
	/** The Octoshift migration source URL. */
	url: string
};
	/** Autogenerated return type of CreateMigrationSource */
["CreateMigrationSourcePayload"]: {
	__typename: "CreateMigrationSourcePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The created Octoshift migration source. */
	migrationSource?: GraphQLTypes["MigrationSource"] | undefined
};
	/** Autogenerated input type of CreateProject */
["CreateProjectInput"]: {
		/** The description of project. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of project. */
	name: string,
	/** The owner ID to create the project under. */
	ownerId: string,
	/** A list of repository IDs to create as linked repositories for the project */
	repositoryIds?: Array<string> | undefined,
	/** The name of the GitHub-provided template. */
	template?: GraphQLTypes["ProjectTemplate"] | undefined
};
	/** Autogenerated return type of CreateProject */
["CreateProjectPayload"]: {
	__typename: "CreateProjectPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new project. */
	project?: GraphQLTypes["Project"] | undefined
};
	/** Autogenerated input type of CreateProjectV2 */
["CreateProjectV2Input"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The owner ID to create the project under. */
	ownerId: string,
	/** The title of the project. */
	title: string
};
	/** Autogenerated return type of CreateProjectV2 */
["CreateProjectV2Payload"]: {
	__typename: "CreateProjectV2Payload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new project. */
	projectV2?: GraphQLTypes["ProjectV2"] | undefined
};
	/** Autogenerated input type of CreatePullRequest */
["CreatePullRequestInput"]: {
		/** The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository. You cannot update the base branch on a pull request to point
to another repository. */
	baseRefName: string,
	/** The contents of the pull request. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Indicates whether this pull request should be a draft. */
	draft?: boolean | undefined,
	/** The name of the branch where your changes are implemented. For cross-repository pull requests
in the same network, namespace `head_ref_name` with a user like this: `username:branch`. */
	headRefName: string,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?: boolean | undefined,
	/** The Node ID of the repository. */
	repositoryId: string,
	/** The title of the pull request. */
	title: string
};
	/** Autogenerated return type of CreatePullRequest */
["CreatePullRequestPayload"]: {
	__typename: "CreatePullRequestPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new pull request. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of CreateRef */
["CreateRefInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
	name: string,
	/** The GitObjectID that the new Ref shall target. Must point to a commit. */
	oid: GraphQLTypes["GitObjectID"],
	/** The Node ID of the Repository to create the Ref in. */
	repositoryId: string
};
	/** Autogenerated return type of CreateRef */
["CreateRefPayload"]: {
	__typename: "CreateRefPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The newly created ref. */
	ref?: GraphQLTypes["Ref"] | undefined
};
	/** Autogenerated input type of CreateRepository */
["CreateRepositoryInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A short description of the new repository. */
	description?: string | undefined,
	/** Indicates if the repository should have the issues feature enabled. */
	hasIssuesEnabled?: boolean | undefined,
	/** Indicates if the repository should have the wiki feature enabled. */
	hasWikiEnabled?: boolean | undefined,
	/** The URL for a web page about this repository. */
	homepageUrl?: GraphQLTypes["URI"] | undefined,
	/** The name of the new repository. */
	name: string,
	/** The ID of the owner for the new repository. */
	ownerId?: string | undefined,
	/** When an organization is specified as the owner, this ID identifies the team
that should be granted access to the new repository. */
	teamId?: string | undefined,
	/** Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure. */
	template?: boolean | undefined,
	/** Indicates the repository's visibility level. */
	visibility: GraphQLTypes["RepositoryVisibility"]
};
	/** Autogenerated return type of CreateRepository */
["CreateRepositoryPayload"]: {
	__typename: "CreateRepositoryPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new repository. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** Autogenerated input type of CreateSponsorsTier */
["CreateSponsorsTierInput"]: {
		/** The value of the new tier in US dollars. Valid values: 1-12000. */
	amount: number,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
	description: string,
	/** Whether sponsorships using this tier should happen monthly/yearly or just once. */
	isRecurring?: boolean | undefined,
	/** Whether to make the tier available immediately for sponsors to choose.
Defaults to creating a draft tier that will not be publicly visible. */
	publish?: boolean | undefined,
	/** Optional ID of the private repository that sponsors at this tier should gain
read-only access to. Must be owned by an organization. */
	repositoryId?: string | undefined,
	/** Optional name of the private repository that sponsors at this tier should gain
read-only access to. Must be owned by an organization. Necessary if
repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
	repositoryName?: string | undefined,
	/** Optional login of the organization owner of the private repository that
sponsors at this tier should gain read-only access to. Necessary if
repositoryName is given. Will be ignored if repositoryId is given. */
	repositoryOwnerLogin?: string | undefined,
	/** The ID of the user or organization who owns the GitHub Sponsors profile.
Defaults to the current user if omitted and sponsorableLogin is not given. */
	sponsorableId?: string | undefined,
	/** The username of the user or organization who owns the GitHub Sponsors profile.
Defaults to the current user if omitted and sponsorableId is not given. */
	sponsorableLogin?: string | undefined,
	/** Optional message new sponsors at this tier will receive. */
	welcomeMessage?: string | undefined
};
	/** Autogenerated return type of CreateSponsorsTier */
["CreateSponsorsTierPayload"]: {
	__typename: "CreateSponsorsTierPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new tier. */
	sponsorsTier?: GraphQLTypes["SponsorsTier"] | undefined
};
	/** Autogenerated input type of CreateSponsorship */
["CreateSponsorshipInput"]: {
		/** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
	amount?: number | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
	isRecurring?: boolean | undefined,
	/** Specify whether others should be able to see that the sponsor is sponsoring
the sponsorable. Public visibility still does not reveal which tier is used. */
	privacyLevel?: GraphQLTypes["SponsorshipPrivacy"] | undefined,
	/** Whether the sponsor should receive email updates from the sponsorable. */
	receiveEmails?: boolean | undefined,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined,
	/** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
	tierId?: string | undefined
};
	/** Autogenerated return type of CreateSponsorship */
["CreateSponsorshipPayload"]: {
	__typename: "CreateSponsorshipPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The sponsorship that was started. */
	sponsorship?: GraphQLTypes["Sponsorship"] | undefined
};
	/** Autogenerated input type of CreateTeamDiscussionComment */
["CreateTeamDiscussionCommentInput"]: {
		/** The content of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the discussion to which the comment belongs. */
	discussionId: string
};
	/** Autogenerated return type of CreateTeamDiscussionComment */
["CreateTeamDiscussionCommentPayload"]: {
	__typename: "CreateTeamDiscussionCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new comment. */
	teamDiscussionComment?: GraphQLTypes["TeamDiscussionComment"] | undefined
};
	/** Autogenerated input type of CreateTeamDiscussion */
["CreateTeamDiscussionInput"]: {
		/** The content of the discussion. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** If true, restricts the visibility of this discussion to team members and
organization admins. If false or not specified, allows any organization member
to view this discussion. */
	private?: boolean | undefined,
	/** The ID of the team to which the discussion belongs. */
	teamId: string,
	/** The title of the discussion. */
	title: string
};
	/** Autogenerated return type of CreateTeamDiscussion */
["CreateTeamDiscussionPayload"]: {
	__typename: "CreateTeamDiscussionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new discussion. */
	teamDiscussion?: GraphQLTypes["TeamDiscussion"] | undefined
};
	/** Represents the contribution a user made by committing to a repository. */
["CreatedCommitContribution"]: {
	__typename: "CreatedCommitContribution",
	/** How many commits were made on this day to this repository by the user. */
	commitCount: number,
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: GraphQLTypes["DateTime"],
	/** The repository the user made a commit in. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: GraphQLTypes["URI"],
	/** The user who made this contribution. */
	user: GraphQLTypes["User"]
};
	/** The connection type for CreatedCommitContribution. */
["CreatedCommitContributionConnection"]: {
	__typename: "CreatedCommitContributionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CreatedCommitContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CreatedCommitContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of commits across days and repositories in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedCommitContributionEdge"]: {
	__typename: "CreatedCommitContributionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CreatedCommitContribution"] | undefined
};
	/** Represents the contribution a user made on GitHub by opening an issue. */
["CreatedIssueContribution"]: {
	__typename: "CreatedIssueContribution",
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** The issue that was opened. */
	issue: GraphQLTypes["Issue"],
	/** When this contribution was made. */
	occurredAt: GraphQLTypes["DateTime"],
	/** The HTTP path for this contribution. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: GraphQLTypes["URI"],
	/** The user who made this contribution. */
	user: GraphQLTypes["User"]
};
	/** The connection type for CreatedIssueContribution. */
["CreatedIssueContributionConnection"]: {
	__typename: "CreatedIssueContributionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CreatedIssueContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CreatedIssueContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedIssueContributionEdge"]: {
	__typename: "CreatedIssueContributionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CreatedIssueContribution"] | undefined
};
	/** Represents either a issue the viewer can access or a restricted contribution. */
["CreatedIssueOrRestrictedContribution"]:{
        	__typename:"CreatedIssueContribution" | "RestrictedContribution"
        	['...on CreatedIssueContribution']: '__union' & GraphQLTypes["CreatedIssueContribution"];
	['...on RestrictedContribution']: '__union' & GraphQLTypes["RestrictedContribution"];
};
	/** Represents the contribution a user made on GitHub by opening a pull request. */
["CreatedPullRequestContribution"]: {
	__typename: "CreatedPullRequestContribution",
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: GraphQLTypes["DateTime"],
	/** The pull request that was opened. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The HTTP path for this contribution. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: GraphQLTypes["URI"],
	/** The user who made this contribution. */
	user: GraphQLTypes["User"]
};
	/** The connection type for CreatedPullRequestContribution. */
["CreatedPullRequestContributionConnection"]: {
	__typename: "CreatedPullRequestContributionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CreatedPullRequestContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CreatedPullRequestContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedPullRequestContributionEdge"]: {
	__typename: "CreatedPullRequestContributionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CreatedPullRequestContribution"] | undefined
};
	/** Represents either a pull request the viewer can access or a restricted contribution. */
["CreatedPullRequestOrRestrictedContribution"]:{
        	__typename:"CreatedPullRequestContribution" | "RestrictedContribution"
        	['...on CreatedPullRequestContribution']: '__union' & GraphQLTypes["CreatedPullRequestContribution"];
	['...on RestrictedContribution']: '__union' & GraphQLTypes["RestrictedContribution"];
};
	/** Represents the contribution a user made by leaving a review on a pull request. */
["CreatedPullRequestReviewContribution"]: {
	__typename: "CreatedPullRequestReviewContribution",
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: GraphQLTypes["DateTime"],
	/** The pull request the user reviewed. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The review the user left on the pull request. */
	pullRequestReview: GraphQLTypes["PullRequestReview"],
	/** The repository containing the pull request that the user reviewed. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: GraphQLTypes["URI"],
	/** The user who made this contribution. */
	user: GraphQLTypes["User"]
};
	/** The connection type for CreatedPullRequestReviewContribution. */
["CreatedPullRequestReviewContributionConnection"]: {
	__typename: "CreatedPullRequestReviewContributionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CreatedPullRequestReviewContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CreatedPullRequestReviewContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedPullRequestReviewContributionEdge"]: {
	__typename: "CreatedPullRequestReviewContributionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CreatedPullRequestReviewContribution"] | undefined
};
	/** Represents the contribution a user made on GitHub by creating a repository. */
["CreatedRepositoryContribution"]: {
	__typename: "CreatedRepositoryContribution",
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: GraphQLTypes["DateTime"],
	/** The repository that was created. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this contribution. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: GraphQLTypes["URI"],
	/** The user who made this contribution. */
	user: GraphQLTypes["User"]
};
	/** The connection type for CreatedRepositoryContribution. */
["CreatedRepositoryContributionConnection"]: {
	__typename: "CreatedRepositoryContributionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["CreatedRepositoryContributionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["CreatedRepositoryContribution"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["CreatedRepositoryContributionEdge"]: {
	__typename: "CreatedRepositoryContributionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["CreatedRepositoryContribution"] | undefined
};
	/** Represents either a repository the viewer can access or a restricted contribution. */
["CreatedRepositoryOrRestrictedContribution"]:{
        	__typename:"CreatedRepositoryContribution" | "RestrictedContribution"
        	['...on CreatedRepositoryContribution']: '__union' & GraphQLTypes["CreatedRepositoryContribution"];
	['...on RestrictedContribution']: '__union' & GraphQLTypes["RestrictedContribution"];
};
	/** Represents a mention made by one issue or pull request to another. */
["CrossReferencedEvent"]: {
	__typename: "CrossReferencedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Reference originated in a different repository. */
	isCrossRepository: boolean,
	/** Identifies when the reference was made. */
	referencedAt: GraphQLTypes["DateTime"],
	/** The HTTP path for this pull request. */
	resourcePath: GraphQLTypes["URI"],
	/** Issue or pull request that made the reference. */
	source: GraphQLTypes["ReferencedSubject"],
	/** Issue or pull request to which the reference was made. */
	target: GraphQLTypes["ReferencedSubject"],
	/** The HTTP URL for this pull request. */
	url: GraphQLTypes["URI"],
	/** Checks if the target will be closed when the source is merged. */
	willCloseTarget: boolean
};
	/** An ISO-8601 encoded date string. */
["Date"]: "scalar" & { name: "Date" };
	/** An ISO-8601 encoded UTC date string. */
["DateTime"]: "scalar" & { name: "DateTime" };
	/** Autogenerated input type of DeclineTopicSuggestion */
["DeclineTopicSuggestionInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the suggested topic. */
	name: string,
	/** The reason why the suggested topic is declined. */
	reason: GraphQLTypes["TopicSuggestionDeclineReason"],
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of DeclineTopicSuggestion */
["DeclineTopicSuggestionPayload"]: {
	__typename: "DeclineTopicSuggestionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The declined topic. */
	topic?: GraphQLTypes["Topic"] | undefined
};
	/** The possible base permissions for repositories. */
["DefaultRepositoryPermissionField"]: DefaultRepositoryPermissionField;
	/** Entities that can be deleted. */
["Deletable"]: {
	__typename:"CommitComment" | "Discussion" | "DiscussionComment" | "GistComment" | "IssueComment" | "PullRequestReview" | "PullRequestReviewComment" | "TeamDiscussion" | "TeamDiscussionComment",
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean
	['...on CommitComment']: '__union' & GraphQLTypes["CommitComment"];
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on DiscussionComment']: '__union' & GraphQLTypes["DiscussionComment"];
	['...on GistComment']: '__union' & GraphQLTypes["GistComment"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on PullRequestReview']: '__union' & GraphQLTypes["PullRequestReview"];
	['...on PullRequestReviewComment']: '__union' & GraphQLTypes["PullRequestReviewComment"];
	['...on TeamDiscussion']: '__union' & GraphQLTypes["TeamDiscussion"];
	['...on TeamDiscussionComment']: '__union' & GraphQLTypes["TeamDiscussionComment"];
};
	/** Autogenerated input type of DeleteBranchProtectionRule */
["DeleteBranchProtectionRuleInput"]: {
		/** The global relay id of the branch protection rule to be deleted. */
	branchProtectionRuleId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated return type of DeleteBranchProtectionRule */
["DeleteBranchProtectionRulePayload"]: {
	__typename: "DeleteBranchProtectionRulePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteDeployment */
["DeleteDeploymentInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the deployment to be deleted. */
	id: string
};
	/** Autogenerated return type of DeleteDeployment */
["DeleteDeploymentPayload"]: {
	__typename: "DeleteDeploymentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteDiscussionComment */
["DeleteDiscussionCommentInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node id of the discussion comment to delete. */
	id: string
};
	/** Autogenerated return type of DeleteDiscussionComment */
["DeleteDiscussionCommentPayload"]: {
	__typename: "DeleteDiscussionCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion comment that was just deleted. */
	comment?: GraphQLTypes["DiscussionComment"] | undefined
};
	/** Autogenerated input type of DeleteDiscussion */
["DeleteDiscussionInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the discussion to delete. */
	id: string
};
	/** Autogenerated return type of DeleteDiscussion */
["DeleteDiscussionPayload"]: {
	__typename: "DeleteDiscussionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion that was just deleted. */
	discussion?: GraphQLTypes["Discussion"] | undefined
};
	/** Autogenerated input type of DeleteEnvironment */
["DeleteEnvironmentInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the environment to be deleted. */
	id: string
};
	/** Autogenerated return type of DeleteEnvironment */
["DeleteEnvironmentPayload"]: {
	__typename: "DeleteEnvironmentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteIpAllowListEntry */
["DeleteIpAllowListEntryInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the IP allow list entry to delete. */
	ipAllowListEntryId: string
};
	/** Autogenerated return type of DeleteIpAllowListEntry */
["DeleteIpAllowListEntryPayload"]: {
	__typename: "DeleteIpAllowListEntryPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list entry that was deleted. */
	ipAllowListEntry?: GraphQLTypes["IpAllowListEntry"] | undefined
};
	/** Autogenerated input type of DeleteIssueComment */
["DeleteIssueCommentInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the comment to delete. */
	id: string
};
	/** Autogenerated return type of DeleteIssueComment */
["DeleteIssueCommentPayload"]: {
	__typename: "DeleteIssueCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteIssue */
["DeleteIssueInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the issue to delete. */
	issueId: string
};
	/** Autogenerated return type of DeleteIssue */
["DeleteIssuePayload"]: {
	__typename: "DeleteIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository the issue belonged to */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** Autogenerated input type of DeleteLabel */
["DeleteLabelInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the label to be deleted. */
	id: string
};
	/** Autogenerated return type of DeleteLabel */
["DeleteLabelPayload"]: {
	__typename: "DeleteLabelPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteLinkedBranch */
["DeleteLinkedBranchInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the linked branch */
	linkedBranchId: string
};
	/** Autogenerated return type of DeleteLinkedBranch */
["DeleteLinkedBranchPayload"]: {
	__typename: "DeleteLinkedBranchPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue the linked branch was unlinked from. */
	issue?: GraphQLTypes["Issue"] | undefined
};
	/** Autogenerated input type of DeletePackageVersion */
["DeletePackageVersionInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the package version to be deleted. */
	packageVersionId: string
};
	/** Autogenerated return type of DeletePackageVersion */
["DeletePackageVersionPayload"]: {
	__typename: "DeletePackageVersionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether or not the operation succeeded. */
	success?: boolean | undefined
};
	/** Autogenerated input type of DeleteProjectCard */
["DeleteProjectCardInput"]: {
		/** The id of the card to delete. */
	cardId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated return type of DeleteProjectCard */
["DeleteProjectCardPayload"]: {
	__typename: "DeleteProjectCardPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The column the deleted card was in. */
	column?: GraphQLTypes["ProjectColumn"] | undefined,
	/** The deleted card ID. */
	deletedCardId?: string | undefined
};
	/** Autogenerated input type of DeleteProjectColumn */
["DeleteProjectColumnInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the column to delete. */
	columnId: string
};
	/** Autogenerated return type of DeleteProjectColumn */
["DeleteProjectColumnPayload"]: {
	__typename: "DeleteProjectColumnPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The deleted column ID. */
	deletedColumnId?: string | undefined,
	/** The project the deleted column was in. */
	project?: GraphQLTypes["Project"] | undefined
};
	/** Autogenerated input type of DeleteProject */
["DeleteProjectInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Project ID to update. */
	projectId: string
};
	/** Autogenerated input type of DeleteProjectNextItem */
["DeleteProjectNextItemInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the item to be removed. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	itemId?: string | undefined,
	/** The ID of the Project from which the item should be removed. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined
};
	/** Autogenerated return type of DeleteProjectNextItem */
["DeleteProjectNextItemPayload"]: {
	__typename: "DeleteProjectNextItemPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the deleted item. */
	deletedItemId?: string | undefined
};
	/** Autogenerated return type of DeleteProject */
["DeleteProjectPayload"]: {
	__typename: "DeleteProjectPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository or organization the project was removed from. */
	owner?: GraphQLTypes["ProjectOwner"] | undefined
};
	/** Autogenerated input type of DeleteProjectV2Item */
["DeleteProjectV2ItemInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the item to be removed. */
	itemId: string,
	/** The ID of the Project from which the item should be removed. */
	projectId: string
};
	/** Autogenerated return type of DeleteProjectV2Item */
["DeleteProjectV2ItemPayload"]: {
	__typename: "DeleteProjectV2ItemPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the deleted item. */
	deletedItemId?: string | undefined
};
	/** Autogenerated input type of DeletePullRequestReviewComment */
["DeletePullRequestReviewCommentInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the comment to delete. */
	id: string
};
	/** Autogenerated return type of DeletePullRequestReviewComment */
["DeletePullRequestReviewCommentPayload"]: {
	__typename: "DeletePullRequestReviewCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request review the deleted comment belonged to. */
	pullRequestReview?: GraphQLTypes["PullRequestReview"] | undefined,
	/** The deleted pull request review comment. */
	pullRequestReviewComment?: GraphQLTypes["PullRequestReviewComment"] | undefined
};
	/** Autogenerated input type of DeletePullRequestReview */
["DeletePullRequestReviewInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the pull request review to delete. */
	pullRequestReviewId: string
};
	/** Autogenerated return type of DeletePullRequestReview */
["DeletePullRequestReviewPayload"]: {
	__typename: "DeletePullRequestReviewPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The deleted pull request review. */
	pullRequestReview?: GraphQLTypes["PullRequestReview"] | undefined
};
	/** Autogenerated input type of DeleteRef */
["DeleteRefInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the Ref to be deleted. */
	refId: string
};
	/** Autogenerated return type of DeleteRef */
["DeleteRefPayload"]: {
	__typename: "DeleteRefPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteTeamDiscussionComment */
["DeleteTeamDiscussionCommentInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the comment to delete. */
	id: string
};
	/** Autogenerated return type of DeleteTeamDiscussionComment */
["DeleteTeamDiscussionCommentPayload"]: {
	__typename: "DeleteTeamDiscussionCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteTeamDiscussion */
["DeleteTeamDiscussionInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion ID to delete. */
	id: string
};
	/** Autogenerated return type of DeleteTeamDiscussion */
["DeleteTeamDiscussionPayload"]: {
	__typename: "DeleteTeamDiscussionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of DeleteVerifiableDomain */
["DeleteVerifiableDomainInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the verifiable domain to delete. */
	id: string
};
	/** Autogenerated return type of DeleteVerifiableDomain */
["DeleteVerifiableDomainPayload"]: {
	__typename: "DeleteVerifiableDomainPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The owning account from which the domain was deleted. */
	owner?: GraphQLTypes["VerifiableDomainOwner"] | undefined
};
	/** Represents a 'demilestoned' event on a given issue or pull request. */
["DemilestonedEvent"]: {
	__typename: "DemilestonedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Identifies the milestone title associated with the 'demilestoned' event. */
	milestoneTitle: string,
	/** Object referenced by event. */
	subject: GraphQLTypes["MilestoneItem"]
};
	/** A Dependabot Update for a dependency in a repository */
["DependabotUpdate"]: {
	__typename: "DependabotUpdate",
	/** The error from a dependency update */
	error?: GraphQLTypes["DependabotUpdateError"] | undefined,
	/** The associated pull request */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined,
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"]
};
	/** An error produced from a Dependabot Update */
["DependabotUpdateError"]: {
	__typename: "DependabotUpdateError",
	/** The body of the error */
	body: string,
	/** The error code */
	errorType: string,
	/** The title of the error */
	title: string
};
	/** A dependency manifest entry */
["DependencyGraphDependency"]: {
	__typename: "DependencyGraphDependency",
	/** Does the dependency itself have dependencies? */
	hasDependencies: boolean,
	/** The original name of the package, as it appears in the manifest. */
	packageLabel: string,
	/** The dependency package manager */
	packageManager?: string | undefined,
	/** The name of the package in the canonical form used by the package manager.
This may differ from the original textual form (see packageLabel), for example
in a package manager that uses case-insensitive comparisons. */
	packageName: string,
	/** The repository containing the package */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The dependency version requirements */
	requirements: string
};
	/** The connection type for DependencyGraphDependency. */
["DependencyGraphDependencyConnection"]: {
	__typename: "DependencyGraphDependencyConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DependencyGraphDependencyEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DependencyGraphDependency"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DependencyGraphDependencyEdge"]: {
	__typename: "DependencyGraphDependencyEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DependencyGraphDependency"] | undefined
};
	/** The possible ecosystems of a dependency graph package. */
["DependencyGraphEcosystem"]: DependencyGraphEcosystem;
	/** Dependency manifest for a repository */
["DependencyGraphManifest"]: {
	__typename: "DependencyGraphManifest",
	/** Path to view the manifest file blob */
	blobPath: string,
	/** A list of manifest dependencies */
	dependencies?: GraphQLTypes["DependencyGraphDependencyConnection"] | undefined,
	/** The number of dependencies listed in the manifest */
	dependenciesCount?: number | undefined,
	/** Is the manifest too big to parse? */
	exceedsMaxSize: boolean,
	/** Fully qualified manifest filename */
	filename: string,
	id: string,
	/** Were we able to parse the manifest? */
	parseable: boolean,
	/** The repository containing the manifest */
	repository: GraphQLTypes["Repository"]
};
	/** The connection type for DependencyGraphManifest. */
["DependencyGraphManifestConnection"]: {
	__typename: "DependencyGraphManifestConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DependencyGraphManifestEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DependencyGraphManifest"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DependencyGraphManifestEdge"]: {
	__typename: "DependencyGraphManifestEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DependencyGraphManifest"] | undefined
};
	/** A repository deploy key. */
["DeployKey"]: {
	__typename: "DeployKey",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** The deploy key. */
	key: string,
	/** Whether or not the deploy key is read only. */
	readOnly: boolean,
	/** The deploy key title. */
	title: string,
	/** Whether or not the deploy key has been verified. */
	verified: boolean
};
	/** The connection type for DeployKey. */
["DeployKeyConnection"]: {
	__typename: "DeployKeyConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DeployKeyEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DeployKey"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeployKeyEdge"]: {
	__typename: "DeployKeyEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DeployKey"] | undefined
};
	/** Represents a 'deployed' event on a given pull request. */
["DeployedEvent"]: {
	__typename: "DeployedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The deployment associated with the 'deployed' event. */
	deployment: GraphQLTypes["Deployment"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The ref associated with the 'deployed' event. */
	ref?: GraphQLTypes["Ref"] | undefined
};
	/** Represents triggered deployment instance. */
["Deployment"]: {
	__typename: "Deployment",
	/** Identifies the commit sha of the deployment. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies the oid of the deployment commit, even if the commit has been deleted. */
	commitOid: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the actor who triggered the deployment. */
	creator: GraphQLTypes["Actor"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The deployment description. */
	description?: string | undefined,
	/** The latest environment to which this deployment was made. */
	environment?: string | undefined,
	id: string,
	/** The latest environment to which this deployment was made. */
	latestEnvironment?: string | undefined,
	/** The latest status of this deployment. */
	latestStatus?: GraphQLTypes["DeploymentStatus"] | undefined,
	/** The original environment to which this deployment was made. */
	originalEnvironment?: string | undefined,
	/** Extra information that a deployment system might need. */
	payload?: string | undefined,
	/** Identifies the Ref of the deployment, if the deployment was created by ref. */
	ref?: GraphQLTypes["Ref"] | undefined,
	/** Identifies the repository associated with the deployment. */
	repository: GraphQLTypes["Repository"],
	/** The current state of the deployment. */
	state?: GraphQLTypes["DeploymentState"] | undefined,
	/** A list of statuses associated with the deployment. */
	statuses?: GraphQLTypes["DeploymentStatusConnection"] | undefined,
	/** The deployment task. */
	task?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for Deployment. */
["DeploymentConnection"]: {
	__typename: "DeploymentConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DeploymentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Deployment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentEdge"]: {
	__typename: "DeploymentEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Deployment"] | undefined
};
	/** Represents a 'deployment_environment_changed' event on a given pull request. */
["DeploymentEnvironmentChangedEvent"]: {
	__typename: "DeploymentEnvironmentChangedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The deployment status that updated the deployment environment. */
	deploymentStatus: GraphQLTypes["DeploymentStatus"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"]
};
	/** Ordering options for deployment connections */
["DeploymentOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order deployments by. */
	field: GraphQLTypes["DeploymentOrderField"]
};
	/** Properties by which deployment connections can be ordered. */
["DeploymentOrderField"]: DeploymentOrderField;
	/** A protection rule. */
["DeploymentProtectionRule"]: {
	__typename: "DeploymentProtectionRule",
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The teams or users that can review the deployment */
	reviewers: GraphQLTypes["DeploymentReviewerConnection"],
	/** The timeout in minutes for this protection rule. */
	timeout: number,
	/** The type of protection rule. */
	type: GraphQLTypes["DeploymentProtectionRuleType"]
};
	/** The connection type for DeploymentProtectionRule. */
["DeploymentProtectionRuleConnection"]: {
	__typename: "DeploymentProtectionRuleConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DeploymentProtectionRuleEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DeploymentProtectionRule"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentProtectionRuleEdge"]: {
	__typename: "DeploymentProtectionRuleEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DeploymentProtectionRule"] | undefined
};
	/** The possible protection rule types. */
["DeploymentProtectionRuleType"]: DeploymentProtectionRuleType;
	/** A request to deploy a workflow run to an environment. */
["DeploymentRequest"]: {
	__typename: "DeploymentRequest",
	/** Whether or not the current user can approve the deployment */
	currentUserCanApprove: boolean,
	/** The target environment of the deployment */
	environment: GraphQLTypes["Environment"],
	/** The teams or users that can review the deployment */
	reviewers: GraphQLTypes["DeploymentReviewerConnection"],
	/** The wait timer in minutes configured in the environment */
	waitTimer: number,
	/** The wait timer in minutes configured in the environment */
	waitTimerStartedAt?: GraphQLTypes["DateTime"] | undefined
};
	/** The connection type for DeploymentRequest. */
["DeploymentRequestConnection"]: {
	__typename: "DeploymentRequestConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DeploymentRequestEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DeploymentRequest"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentRequestEdge"]: {
	__typename: "DeploymentRequestEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DeploymentRequest"] | undefined
};
	/** A deployment review. */
["DeploymentReview"]: {
	__typename: "DeploymentReview",
	/** The comment the user left. */
	comment: string,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The environments approved or rejected */
	environments: GraphQLTypes["EnvironmentConnection"],
	id: string,
	/** The decision of the user. */
	state: GraphQLTypes["DeploymentReviewState"],
	/** The user that reviewed the deployment. */
	user: GraphQLTypes["User"]
};
	/** The connection type for DeploymentReview. */
["DeploymentReviewConnection"]: {
	__typename: "DeploymentReviewConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DeploymentReviewEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DeploymentReview"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentReviewEdge"]: {
	__typename: "DeploymentReviewEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DeploymentReview"] | undefined
};
	/** The possible states for a deployment review. */
["DeploymentReviewState"]: DeploymentReviewState;
	/** Users and teams. */
["DeploymentReviewer"]:{
        	__typename:"Team" | "User"
        	['...on Team']: '__union' & GraphQLTypes["Team"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** The connection type for DeploymentReviewer. */
["DeploymentReviewerConnection"]: {
	__typename: "DeploymentReviewerConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DeploymentReviewerEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DeploymentReviewer"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentReviewerEdge"]: {
	__typename: "DeploymentReviewerEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DeploymentReviewer"] | undefined
};
	/** The possible states in which a deployment can be. */
["DeploymentState"]: DeploymentState;
	/** Describes the status of a given deployment attempt. */
["DeploymentStatus"]: {
	__typename: "DeploymentStatus",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the actor who triggered the deployment. */
	creator: GraphQLTypes["Actor"],
	/** Identifies the deployment associated with status. */
	deployment: GraphQLTypes["Deployment"],
	/** Identifies the description of the deployment. */
	description?: string | undefined,
	/** Identifies the environment of the deployment at the time of this deployment status */
	environment?: string | undefined,
	/** Identifies the environment URL of the deployment. */
	environmentUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** Identifies the log URL of the deployment. */
	logUrl?: GraphQLTypes["URI"] | undefined,
	/** Identifies the current state of the deployment. */
	state: GraphQLTypes["DeploymentStatusState"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for DeploymentStatus. */
["DeploymentStatusConnection"]: {
	__typename: "DeploymentStatusConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DeploymentStatusEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DeploymentStatus"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DeploymentStatusEdge"]: {
	__typename: "DeploymentStatusEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DeploymentStatus"] | undefined
};
	/** The possible states for a deployment status. */
["DeploymentStatusState"]: DeploymentStatusState;
	/** The possible sides of a diff. */
["DiffSide"]: DiffSide;
	/** Autogenerated input type of DisablePullRequestAutoMerge */
["DisablePullRequestAutoMergeInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to disable auto merge on. */
	pullRequestId: string
};
	/** Autogenerated return type of DisablePullRequestAutoMerge */
["DisablePullRequestAutoMergePayload"]: {
	__typename: "DisablePullRequestAutoMergePayload",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request auto merge was disabled on. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents a 'disconnected' event on a given issue or pull request. */
["DisconnectedEvent"]: {
	__typename: "DisconnectedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Reference originated in a different repository. */
	isCrossRepository: boolean,
	/** Issue or pull request from which the issue was disconnected. */
	source: GraphQLTypes["ReferencedSubject"],
	/** Issue or pull request which was disconnected. */
	subject: GraphQLTypes["ReferencedSubject"]
};
	/** A discussion in a repository. */
["Discussion"]: {
	__typename: "Discussion",
	/** Reason that the conversation was locked. */
	activeLockReason?: GraphQLTypes["LockReason"] | undefined,
	/** The comment chosen as this discussion's answer, if any. */
	answer?: GraphQLTypes["DiscussionComment"] | undefined,
	/** The time when a user chose this discussion's answer, if answered. */
	answerChosenAt?: GraphQLTypes["DateTime"] | undefined,
	/** The user who chose this discussion's answer, if answered. */
	answerChosenBy?: GraphQLTypes["Actor"] | undefined,
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** The main text of the discussion post. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** The category for this discussion. */
	category: GraphQLTypes["DiscussionCategory"],
	/** The replies to the discussion. */
	comments: GraphQLTypes["DiscussionCommentConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** A list of labels associated with the object. */
	labels?: GraphQLTypes["LabelConnection"] | undefined,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** `true` if the object is locked */
	locked: boolean,
	/** The number identifying this discussion within the repository. */
	number: number,
	/** The poll associated with this discussion, if one exists. */
	poll?: GraphQLTypes["DiscussionPoll"] | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"],
	/** The path for this discussion. */
	resourcePath: GraphQLTypes["URI"],
	/** The title of this discussion. */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** Number of upvotes that this subject has received. */
	upvoteCount: number,
	/** The URL for this discussion. */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote: boolean,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: GraphQLTypes["SubscriptionState"] | undefined
};
	/** A category for discussions in a repository. */
["DiscussionCategory"]: {
	__typename: "DiscussionCategory",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** A description of this category. */
	description?: string | undefined,
	/** An emoji representing this category. */
	emoji: string,
	/** This category's emoji rendered as HTML. */
	emojiHTML: GraphQLTypes["HTML"],
	id: string,
	/** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
	isAnswerable: boolean,
	/** The name of this category. */
	name: string,
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"],
	/** The slug of this category. */
	slug: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for DiscussionCategory. */
["DiscussionCategoryConnection"]: {
	__typename: "DiscussionCategoryConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DiscussionCategoryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DiscussionCategory"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DiscussionCategoryEdge"]: {
	__typename: "DiscussionCategoryEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DiscussionCategory"] | undefined
};
	/** A comment on a discussion. */
["DiscussionComment"]: {
	__typename: "DiscussionComment",
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The time when this replied-to comment was deleted */
	deletedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The discussion this comment was created in */
	discussion?: GraphQLTypes["Discussion"] | undefined,
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Has this comment been chosen as the answer of its discussion? */
	isAnswer: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The threaded replies to this comment. */
	replies: GraphQLTypes["DiscussionCommentConnection"],
	/** The discussion comment this comment is a reply to */
	replyTo?: GraphQLTypes["DiscussionComment"] | undefined,
	/** The path for this discussion comment. */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** Number of upvotes that this subject has received. */
	upvoteCount: number,
	/** The URL for this discussion comment. */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Can the current user mark this comment as an answer? */
	viewerCanMarkAsAnswer: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Can the current user unmark this comment as an answer? */
	viewerCanUnmarkAsAnswer: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted: boolean
};
	/** The connection type for DiscussionComment. */
["DiscussionCommentConnection"]: {
	__typename: "DiscussionCommentConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DiscussionCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DiscussionComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DiscussionCommentEdge"]: {
	__typename: "DiscussionCommentEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DiscussionComment"] | undefined
};
	/** The connection type for Discussion. */
["DiscussionConnection"]: {
	__typename: "DiscussionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DiscussionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Discussion"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DiscussionEdge"]: {
	__typename: "DiscussionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Discussion"] | undefined
};
	/** Ways in which lists of discussions can be ordered upon return. */
["DiscussionOrder"]: {
		/** The direction in which to order discussions by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field by which to order discussions. */
	field: GraphQLTypes["DiscussionOrderField"]
};
	/** Properties by which discussion connections can be ordered. */
["DiscussionOrderField"]: DiscussionOrderField;
	/** A poll for a discussion. */
["DiscussionPoll"]: {
	__typename: "DiscussionPoll",
	/** The discussion that this poll belongs to. */
	discussion?: GraphQLTypes["Discussion"] | undefined,
	id: string,
	/** The options for this poll. */
	options?: GraphQLTypes["DiscussionPollOptionConnection"] | undefined,
	/** The question that is being asked by this poll. */
	question: string,
	/** The total number of votes that have been cast for this poll. */
	totalVoteCount: number,
	/** Indicates if the viewer has permission to vote in this poll. */
	viewerCanVote: boolean,
	/** Indicates if the viewer has voted for any option in this poll. */
	viewerHasVoted: boolean
};
	/** An option for a discussion poll. */
["DiscussionPollOption"]: {
	__typename: "DiscussionPollOption",
	id: string,
	/** The text for this option. */
	option: string,
	/** The discussion poll that this option belongs to. */
	poll?: GraphQLTypes["DiscussionPoll"] | undefined,
	/** The total number of votes that have been cast for this option. */
	totalVoteCount: number,
	/** Indicates if the viewer has voted for this option in the poll. */
	viewerHasVoted: boolean
};
	/** The connection type for DiscussionPollOption. */
["DiscussionPollOptionConnection"]: {
	__typename: "DiscussionPollOptionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["DiscussionPollOptionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["DiscussionPollOption"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["DiscussionPollOptionEdge"]: {
	__typename: "DiscussionPollOptionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["DiscussionPollOption"] | undefined
};
	/** Ordering options for discussion poll option connections. */
["DiscussionPollOptionOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order poll options by. */
	field: GraphQLTypes["DiscussionPollOptionOrderField"]
};
	/** Properties by which discussion poll option connections can be ordered. */
["DiscussionPollOptionOrderField"]: DiscussionPollOptionOrderField;
	/** Autogenerated input type of DismissPullRequestReview */
["DismissPullRequestReviewInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The contents of the pull request review dismissal message. */
	message: string,
	/** The Node ID of the pull request review to modify. */
	pullRequestReviewId: string
};
	/** Autogenerated return type of DismissPullRequestReview */
["DismissPullRequestReviewPayload"]: {
	__typename: "DismissPullRequestReviewPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The dismissed pull request review. */
	pullRequestReview?: GraphQLTypes["PullRequestReview"] | undefined
};
	/** The possible reasons that a Dependabot alert was dismissed. */
["DismissReason"]: DismissReason;
	/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
["DismissRepositoryVulnerabilityAlertInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The reason the Dependabot alert is being dismissed. */
	dismissReason: GraphQLTypes["DismissReason"],
	/** The Dependabot alert ID to dismiss. */
	repositoryVulnerabilityAlertId: string
};
	/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */
["DismissRepositoryVulnerabilityAlertPayload"]: {
	__typename: "DismissRepositoryVulnerabilityAlertPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Dependabot alert that was dismissed */
	repositoryVulnerabilityAlert?: GraphQLTypes["RepositoryVulnerabilityAlert"] | undefined
};
	/** A draft issue within a project. */
["DraftIssue"]: {
	__typename: "DraftIssue",
	/** A list of users to assigned to this draft issue. */
	assignees: GraphQLTypes["UserConnection"],
	/** The body of the draft issue. */
	body: string,
	/** The body of the draft issue rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body of the draft issue rendered to text. */
	bodyText: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created this draft issue. */
	creator?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** The project (beta) that contains this draft issue. */
	project: GraphQLTypes["ProjectNext"],
	/** The project (beta) item that wraps this draft issue. */
	projectItem: GraphQLTypes["ProjectNextItem"],
	/** List of items linked with the draft issue (currently draft issue can be linked to only one item). */
	projectV2Items: GraphQLTypes["ProjectV2ItemConnection"],
	/** Projects that link to this draft issue (currently draft issue can be linked to only one project). */
	projectsV2: GraphQLTypes["ProjectV2Connection"],
	/** The title of the draft issue */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** Specifies a review comment to be left with a Pull Request Review. */
["DraftPullRequestReviewComment"]: {
		/** Body of the comment to leave. */
	body: string,
	/** Path to the file being commented on. */
	path: string,
	/** Position in the file to leave a comment on. */
	position: number
};
	/** Specifies a review comment thread to be left with a Pull Request Review. */
["DraftPullRequestReviewThread"]: {
		/** Body of the comment to leave. */
	body: string,
	/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
	line: number,
	/** Path to the file being commented on. */
	path: string,
	/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
	side?: GraphQLTypes["DiffSide"] | undefined,
	/** The first line of the range to which the comment refers. */
	startLine?: number | undefined,
	/** The side of the diff on which the start line resides. */
	startSide?: GraphQLTypes["DiffSide"] | undefined
};
	/** Autogenerated input type of EnablePullRequestAutoMerge */
["EnablePullRequestAutoMergeInput"]: {
		/** The email address to associate with this merge. */
	authorEmail?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Commit body to use for the commit when the PR is mergable; if omitted, a
default message will be used. NOTE: when merging with a merge queue any input
value for commit message is ignored. */
	commitBody?: string | undefined,
	/** Commit headline to use for the commit when the PR is mergable; if omitted, a
default message will be used. NOTE: when merging with a merge queue any input
value for commit headline is ignored. */
	commitHeadline?: string | undefined,
	/** The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
with a merge queue any input value for merge method is ignored. */
	mergeMethod?: GraphQLTypes["PullRequestMergeMethod"] | undefined,
	/** ID of the pull request to enable auto-merge on. */
	pullRequestId: string
};
	/** Autogenerated return type of EnablePullRequestAutoMerge */
["EnablePullRequestAutoMergePayload"]: {
	__typename: "EnablePullRequestAutoMergePayload",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request auto-merge was enabled on. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** An account to manage multiple organizations with consolidated policy and billing. */
["Enterprise"]: {
	__typename: "Enterprise",
	/** A URL pointing to the enterprise's public avatar. */
	avatarUrl: GraphQLTypes["URI"],
	/** Enterprise billing information visible to enterprise billing managers. */
	billingInfo?: GraphQLTypes["EnterpriseBillingInfo"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The description of the enterprise. */
	description?: string | undefined,
	/** The description of the enterprise as HTML. */
	descriptionHTML: GraphQLTypes["HTML"],
	id: string,
	/** The location of the enterprise. */
	location?: string | undefined,
	/** A list of users who are members of this enterprise. */
	members: GraphQLTypes["EnterpriseMemberConnection"],
	/** The name of the enterprise. */
	name: string,
	/** A list of organizations that belong to this enterprise. */
	organizations: GraphQLTypes["OrganizationConnection"],
	/** Enterprise information only visible to enterprise owners. */
	ownerInfo?: GraphQLTypes["EnterpriseOwnerInfo"] | undefined,
	/** The HTTP path for this enterprise. */
	resourcePath: GraphQLTypes["URI"],
	/** The URL-friendly identifier for the enterprise. */
	slug: string,
	/** The HTTP URL for this enterprise. */
	url: GraphQLTypes["URI"],
	/** Is the current viewer an admin of this enterprise? */
	viewerIsAdmin: boolean,
	/** The URL of the enterprise website. */
	websiteUrl?: GraphQLTypes["URI"] | undefined
};
	/** The connection type for User. */
["EnterpriseAdministratorConnection"]: {
	__typename: "EnterpriseAdministratorConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseAdministratorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A User who is an administrator of an enterprise. */
["EnterpriseAdministratorEdge"]: {
	__typename: "EnterpriseAdministratorEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["User"] | undefined,
	/** The role of the administrator. */
	role: GraphQLTypes["EnterpriseAdministratorRole"]
};
	/** An invitation for a user to become an owner or billing manager of an enterprise. */
["EnterpriseAdministratorInvitation"]: {
	__typename: "EnterpriseAdministratorInvitation",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The email of the person who was invited to the enterprise. */
	email?: string | undefined,
	/** The enterprise the invitation is for. */
	enterprise: GraphQLTypes["Enterprise"],
	id: string,
	/** The user who was invited to the enterprise. */
	invitee?: GraphQLTypes["User"] | undefined,
	/** The user who created the invitation. */
	inviter?: GraphQLTypes["User"] | undefined,
	/** The invitee's pending role in the enterprise (owner or billing_manager). */
	role: GraphQLTypes["EnterpriseAdministratorRole"]
};
	/** The connection type for EnterpriseAdministratorInvitation. */
["EnterpriseAdministratorInvitationConnection"]: {
	__typename: "EnterpriseAdministratorInvitationConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseAdministratorInvitationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["EnterpriseAdministratorInvitation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseAdministratorInvitationEdge"]: {
	__typename: "EnterpriseAdministratorInvitationEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["EnterpriseAdministratorInvitation"] | undefined
};
	/** Ordering options for enterprise administrator invitation connections */
["EnterpriseAdministratorInvitationOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order enterprise administrator invitations by. */
	field: GraphQLTypes["EnterpriseAdministratorInvitationOrderField"]
};
	/** Properties by which enterprise administrator invitation connections can be ordered. */
["EnterpriseAdministratorInvitationOrderField"]: EnterpriseAdministratorInvitationOrderField;
	/** The possible administrator roles in an enterprise account. */
["EnterpriseAdministratorRole"]: EnterpriseAdministratorRole;
	/** The possible values for the enterprise allow private repository forking policy value. */
["EnterpriseAllowPrivateRepositoryForkingPolicyValue"]: EnterpriseAllowPrivateRepositoryForkingPolicyValue;
	/** Metadata for an audit entry containing enterprise account information. */
["EnterpriseAuditEntryData"]: {
	__typename:"MembersCanDeleteReposClearAuditEntry" | "MembersCanDeleteReposDisableAuditEntry" | "MembersCanDeleteReposEnableAuditEntry" | "OrgInviteToBusinessAuditEntry" | "PrivateRepositoryForkingDisableAuditEntry" | "PrivateRepositoryForkingEnableAuditEntry" | "RepositoryVisibilityChangeDisableAuditEntry" | "RepositoryVisibilityChangeEnableAuditEntry",
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: GraphQLTypes["URI"] | undefined
	['...on MembersCanDeleteReposClearAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposClearAuditEntry"];
	['...on MembersCanDeleteReposDisableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposDisableAuditEntry"];
	['...on MembersCanDeleteReposEnableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposEnableAuditEntry"];
	['...on OrgInviteToBusinessAuditEntry']: '__union' & GraphQLTypes["OrgInviteToBusinessAuditEntry"];
	['...on PrivateRepositoryForkingDisableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingDisableAuditEntry"];
	['...on PrivateRepositoryForkingEnableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingEnableAuditEntry"];
	['...on RepositoryVisibilityChangeDisableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeDisableAuditEntry"];
	['...on RepositoryVisibilityChangeEnableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeEnableAuditEntry"];
};
	/** Enterprise billing information visible to enterprise billing managers and owners. */
["EnterpriseBillingInfo"]: {
	__typename: "EnterpriseBillingInfo",
	/** The number of licenseable users/emails across the enterprise. */
	allLicensableUsersCount: number,
	/** The number of data packs used by all organizations owned by the enterprise. */
	assetPacks: number,
	/** The bandwidth quota in GB for all organizations owned by the enterprise. */
	bandwidthQuota: number,
	/** The bandwidth usage in GB for all organizations owned by the enterprise. */
	bandwidthUsage: number,
	/** The bandwidth usage as a percentage of the bandwidth quota. */
	bandwidthUsagePercentage: number,
	/** The storage quota in GB for all organizations owned by the enterprise. */
	storageQuota: number,
	/** The storage usage in GB for all organizations owned by the enterprise. */
	storageUsage: number,
	/** The storage usage as a percentage of the storage quota. */
	storageUsagePercentage: number,
	/** The number of available licenses across all owned organizations based on the unique number of billable users. */
	totalAvailableLicenses: number,
	/** The total number of licenses allocated. */
	totalLicenses: number
};
	/** The possible values for the enterprise base repository permission setting. */
["EnterpriseDefaultRepositoryPermissionSettingValue"]: EnterpriseDefaultRepositoryPermissionSettingValue;
	/** The possible values for an enabled/disabled enterprise setting. */
["EnterpriseEnabledDisabledSettingValue"]: EnterpriseEnabledDisabledSettingValue;
	/** The possible values for an enabled/no policy enterprise setting. */
["EnterpriseEnabledSettingValue"]: EnterpriseEnabledSettingValue;
	/** An identity provider configured to provision identities for an enterprise. */
["EnterpriseIdentityProvider"]: {
	__typename: "EnterpriseIdentityProvider",
	/** The digest algorithm used to sign SAML requests for the identity provider. */
	digestMethod?: GraphQLTypes["SamlDigestAlgorithm"] | undefined,
	/** The enterprise this identity provider belongs to. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** ExternalIdentities provisioned by this identity provider. */
	externalIdentities: GraphQLTypes["ExternalIdentityConnection"],
	id: string,
	/** The x509 certificate used by the identity provider to sign assertions and responses. */
	idpCertificate?: GraphQLTypes["X509Certificate"] | undefined,
	/** The Issuer Entity ID for the SAML identity provider. */
	issuer?: string | undefined,
	/** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
	recoveryCodes?: Array<string> | undefined,
	/** The signature algorithm used to sign SAML requests for the identity provider. */
	signatureMethod?: GraphQLTypes["SamlSignatureAlgorithm"] | undefined,
	/** The URL endpoint for the identity provider's SAML SSO. */
	ssoUrl?: GraphQLTypes["URI"] | undefined
};
	/** An object that is a member of an enterprise. */
["EnterpriseMember"]:{
        	__typename:"EnterpriseUserAccount" | "User"
        	['...on EnterpriseUserAccount']: '__union' & GraphQLTypes["EnterpriseUserAccount"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** The connection type for EnterpriseMember. */
["EnterpriseMemberConnection"]: {
	__typename: "EnterpriseMemberConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseMemberEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["EnterpriseMember"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A User who is a member of an enterprise through one or more organizations. */
["EnterpriseMemberEdge"]: {
	__typename: "EnterpriseMemberEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["EnterpriseMember"] | undefined
};
	/** Ordering options for enterprise member connections. */
["EnterpriseMemberOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order enterprise members by. */
	field: GraphQLTypes["EnterpriseMemberOrderField"]
};
	/** Properties by which enterprise member connections can be ordered. */
["EnterpriseMemberOrderField"]: EnterpriseMemberOrderField;
	/** The possible values for the enterprise members can create repositories setting. */
["EnterpriseMembersCanCreateRepositoriesSettingValue"]: EnterpriseMembersCanCreateRepositoriesSettingValue;
	/** The possible values for the members can make purchases setting. */
["EnterpriseMembersCanMakePurchasesSettingValue"]: EnterpriseMembersCanMakePurchasesSettingValue;
	/** The connection type for Organization. */
["EnterpriseOrganizationMembershipConnection"]: {
	__typename: "EnterpriseOrganizationMembershipConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseOrganizationMembershipEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Organization"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An enterprise organization that a user is a member of. */
["EnterpriseOrganizationMembershipEdge"]: {
	__typename: "EnterpriseOrganizationMembershipEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Organization"] | undefined,
	/** The role of the user in the enterprise membership. */
	role: GraphQLTypes["EnterpriseUserAccountMembershipRole"]
};
	/** The connection type for User. */
["EnterpriseOutsideCollaboratorConnection"]: {
	__typename: "EnterpriseOutsideCollaboratorConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseOutsideCollaboratorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A User who is an outside collaborator of an enterprise through one or more organizations. */
["EnterpriseOutsideCollaboratorEdge"]: {
	__typename: "EnterpriseOutsideCollaboratorEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["User"] | undefined,
	/** The enterprise organization repositories this user is a member of. */
	repositories: GraphQLTypes["EnterpriseRepositoryInfoConnection"]
};
	/** Enterprise information only visible to enterprise owners. */
["EnterpriseOwnerInfo"]: {
	__typename: "EnterpriseOwnerInfo",
	/** A list of all of the administrators for this enterprise. */
	admins: GraphQLTypes["EnterpriseAdministratorConnection"],
	/** A list of users in the enterprise who currently have two-factor authentication disabled. */
	affiliatedUsersWithTwoFactorDisabled: GraphQLTypes["UserConnection"],
	/** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
	affiliatedUsersWithTwoFactorDisabledExist: boolean,
	/** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
	allowPrivateRepositoryForkingSetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided private repository forking setting value. */
	allowPrivateRepositoryForkingSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** The value for the allow private repository forking policy on the enterprise. */
	allowPrivateRepositoryForkingSettingPolicyValue?: GraphQLTypes["EnterpriseAllowPrivateRepositoryForkingPolicyValue"] | undefined,
	/** The setting value for base repository permissions for organizations in this enterprise. */
	defaultRepositoryPermissionSetting: GraphQLTypes["EnterpriseDefaultRepositoryPermissionSettingValue"],
	/** A list of enterprise organizations configured with the provided base repository permission. */
	defaultRepositoryPermissionSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** A list of domains owned by the enterprise. */
	domains: GraphQLTypes["VerifiableDomainConnection"],
	/** Enterprise Server installations owned by the enterprise. */
	enterpriseServerInstallations: GraphQLTypes["EnterpriseServerInstallationConnection"],
	/** The setting value for whether the enterprise has an IP allow list enabled. */
	ipAllowListEnabledSetting: GraphQLTypes["IpAllowListEnabledSettingValue"],
	/** The IP addresses that are allowed to access resources owned by the enterprise. */
	ipAllowListEntries: GraphQLTypes["IpAllowListEntryConnection"],
	/** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
	ipAllowListForInstalledAppsEnabledSetting: GraphQLTypes["IpAllowListForInstalledAppsEnabledSettingValue"],
	/** Whether or not the base repository permission is currently being updated. */
	isUpdatingDefaultRepositoryPermission: boolean,
	/** Whether the two-factor authentication requirement is currently being enforced. */
	isUpdatingTwoFactorRequirement: boolean,
	/** The setting value for whether organization members with admin permissions on a
repository can change repository visibility. */
	membersCanChangeRepositoryVisibilitySetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
	membersCanChangeRepositoryVisibilitySettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** The setting value for whether members of organizations in the enterprise can create internal repositories. */
	membersCanCreateInternalRepositoriesSetting?: boolean | undefined,
	/** The setting value for whether members of organizations in the enterprise can create private repositories. */
	membersCanCreatePrivateRepositoriesSetting?: boolean | undefined,
	/** The setting value for whether members of organizations in the enterprise can create public repositories. */
	membersCanCreatePublicRepositoriesSetting?: boolean | undefined,
	/** The setting value for whether members of organizations in the enterprise can create repositories. */
	membersCanCreateRepositoriesSetting?: GraphQLTypes["EnterpriseMembersCanCreateRepositoriesSettingValue"] | undefined,
	/** A list of enterprise organizations configured with the provided repository creation setting value. */
	membersCanCreateRepositoriesSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** The setting value for whether members with admin permissions for repositories can delete issues. */
	membersCanDeleteIssuesSetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can delete issues setting value. */
	membersCanDeleteIssuesSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
	membersCanDeleteRepositoriesSetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
	membersCanDeleteRepositoriesSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
	membersCanInviteCollaboratorsSetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
	membersCanInviteCollaboratorsSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
	membersCanMakePurchasesSetting: GraphQLTypes["EnterpriseMembersCanMakePurchasesSettingValue"],
	/** The setting value for whether members with admin permissions for repositories can update protected branches. */
	membersCanUpdateProtectedBranchesSetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
	membersCanUpdateProtectedBranchesSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** The setting value for whether members can view dependency insights. */
	membersCanViewDependencyInsightsSetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
	membersCanViewDependencyInsightsSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
	notificationDeliveryRestrictionEnabledSetting: GraphQLTypes["NotificationRestrictionSettingValue"],
	/** The OIDC Identity Provider for the enterprise. */
	oidcProvider?: GraphQLTypes["OIDCProvider"] | undefined,
	/** The setting value for whether organization projects are enabled for organizations in this enterprise. */
	organizationProjectsSetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided organization projects setting value. */
	organizationProjectsSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** A list of outside collaborators across the repositories in the enterprise. */
	outsideCollaborators: GraphQLTypes["EnterpriseOutsideCollaboratorConnection"],
	/** A list of pending administrator invitations for the enterprise. */
	pendingAdminInvitations: GraphQLTypes["EnterpriseAdministratorInvitationConnection"],
	/** A list of pending collaborator invitations across the repositories in the enterprise. */
	pendingCollaboratorInvitations: GraphQLTypes["RepositoryInvitationConnection"],
	/** A list of pending member invitations for organizations in the enterprise. */
	pendingMemberInvitations: GraphQLTypes["EnterprisePendingMemberInvitationConnection"],
	/** The setting value for whether repository projects are enabled in this enterprise. */
	repositoryProjectsSetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided repository projects setting value. */
	repositoryProjectsSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** The SAML Identity Provider for the enterprise. When used by a GitHub App,
requires an installation token with read and write access to members. */
	samlIdentityProvider?: GraphQLTypes["EnterpriseIdentityProvider"] | undefined,
	/** A list of enterprise organizations configured with the SAML single sign-on setting value. */
	samlIdentityProviderSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** A list of members with a support entitlement. */
	supportEntitlements: GraphQLTypes["EnterpriseMemberConnection"],
	/** The setting value for whether team discussions are enabled for organizations in this enterprise. */
	teamDiscussionsSetting: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"],
	/** A list of enterprise organizations configured with the provided team discussions setting value. */
	teamDiscussionsSettingOrganizations: GraphQLTypes["OrganizationConnection"],
	/** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
	twoFactorRequiredSetting: GraphQLTypes["EnterpriseEnabledSettingValue"],
	/** A list of enterprise organizations configured with the two-factor authentication setting value. */
	twoFactorRequiredSettingOrganizations: GraphQLTypes["OrganizationConnection"]
};
	/** The connection type for OrganizationInvitation. */
["EnterprisePendingMemberInvitationConnection"]: {
	__typename: "EnterprisePendingMemberInvitationConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterprisePendingMemberInvitationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["OrganizationInvitation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** Identifies the total count of unique users in the connection. */
	totalUniqueUserCount: number
};
	/** An invitation to be a member in an enterprise organization. */
["EnterprisePendingMemberInvitationEdge"]: {
	__typename: "EnterprisePendingMemberInvitationEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["OrganizationInvitation"] | undefined
};
	/** A subset of repository information queryable from an enterprise. */
["EnterpriseRepositoryInfo"]: {
	__typename: "EnterpriseRepositoryInfo",
	id: string,
	/** Identifies if the repository is private or internal. */
	isPrivate: boolean,
	/** The repository's name. */
	name: string,
	/** The repository's name with owner. */
	nameWithOwner: string
};
	/** The connection type for EnterpriseRepositoryInfo. */
["EnterpriseRepositoryInfoConnection"]: {
	__typename: "EnterpriseRepositoryInfoConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseRepositoryInfoEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["EnterpriseRepositoryInfo"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseRepositoryInfoEdge"]: {
	__typename: "EnterpriseRepositoryInfoEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["EnterpriseRepositoryInfo"] | undefined
};
	/** An Enterprise Server installation. */
["EnterpriseServerInstallation"]: {
	__typename: "EnterpriseServerInstallation",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The customer name to which the Enterprise Server installation belongs. */
	customerName: string,
	/** The host name of the Enterprise Server installation. */
	hostName: string,
	id: string,
	/** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
	isConnected: boolean,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** User accounts on this Enterprise Server installation. */
	userAccounts: GraphQLTypes["EnterpriseServerUserAccountConnection"],
	/** User accounts uploads for the Enterprise Server installation. */
	userAccountsUploads: GraphQLTypes["EnterpriseServerUserAccountsUploadConnection"]
};
	/** The connection type for EnterpriseServerInstallation. */
["EnterpriseServerInstallationConnection"]: {
	__typename: "EnterpriseServerInstallationConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseServerInstallationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["EnterpriseServerInstallation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseServerInstallationEdge"]: {
	__typename: "EnterpriseServerInstallationEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["EnterpriseServerInstallation"] | undefined
};
	/** Ordering options for Enterprise Server installation connections. */
["EnterpriseServerInstallationOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order Enterprise Server installations by. */
	field: GraphQLTypes["EnterpriseServerInstallationOrderField"]
};
	/** Properties by which Enterprise Server installation connections can be ordered. */
["EnterpriseServerInstallationOrderField"]: EnterpriseServerInstallationOrderField;
	/** A user account on an Enterprise Server installation. */
["EnterpriseServerUserAccount"]: {
	__typename: "EnterpriseServerUserAccount",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** User emails belonging to this user account. */
	emails: GraphQLTypes["EnterpriseServerUserAccountEmailConnection"],
	/** The Enterprise Server installation on which this user account exists. */
	enterpriseServerInstallation: GraphQLTypes["EnterpriseServerInstallation"],
	id: string,
	/** Whether the user account is a site administrator on the Enterprise Server installation. */
	isSiteAdmin: boolean,
	/** The login of the user account on the Enterprise Server installation. */
	login: string,
	/** The profile name of the user account on the Enterprise Server installation. */
	profileName?: string | undefined,
	/** The date and time when the user account was created on the Enterprise Server installation. */
	remoteCreatedAt: GraphQLTypes["DateTime"],
	/** The ID of the user account on the Enterprise Server installation. */
	remoteUserId: number,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for EnterpriseServerUserAccount. */
["EnterpriseServerUserAccountConnection"]: {
	__typename: "EnterpriseServerUserAccountConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseServerUserAccountEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["EnterpriseServerUserAccount"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseServerUserAccountEdge"]: {
	__typename: "EnterpriseServerUserAccountEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["EnterpriseServerUserAccount"] | undefined
};
	/** An email belonging to a user account on an Enterprise Server installation. */
["EnterpriseServerUserAccountEmail"]: {
	__typename: "EnterpriseServerUserAccountEmail",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The email address. */
	email: string,
	id: string,
	/** Indicates whether this is the primary email of the associated user account. */
	isPrimary: boolean,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The user account to which the email belongs. */
	userAccount: GraphQLTypes["EnterpriseServerUserAccount"]
};
	/** The connection type for EnterpriseServerUserAccountEmail. */
["EnterpriseServerUserAccountEmailConnection"]: {
	__typename: "EnterpriseServerUserAccountEmailConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseServerUserAccountEmailEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["EnterpriseServerUserAccountEmail"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseServerUserAccountEmailEdge"]: {
	__typename: "EnterpriseServerUserAccountEmailEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["EnterpriseServerUserAccountEmail"] | undefined
};
	/** Ordering options for Enterprise Server user account email connections. */
["EnterpriseServerUserAccountEmailOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order emails by. */
	field: GraphQLTypes["EnterpriseServerUserAccountEmailOrderField"]
};
	/** Properties by which Enterprise Server user account email connections can be ordered. */
["EnterpriseServerUserAccountEmailOrderField"]: EnterpriseServerUserAccountEmailOrderField;
	/** Ordering options for Enterprise Server user account connections. */
["EnterpriseServerUserAccountOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order user accounts by. */
	field: GraphQLTypes["EnterpriseServerUserAccountOrderField"]
};
	/** Properties by which Enterprise Server user account connections can be ordered. */
["EnterpriseServerUserAccountOrderField"]: EnterpriseServerUserAccountOrderField;
	/** A user accounts upload from an Enterprise Server installation. */
["EnterpriseServerUserAccountsUpload"]: {
	__typename: "EnterpriseServerUserAccountsUpload",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The enterprise to which this upload belongs. */
	enterprise: GraphQLTypes["Enterprise"],
	/** The Enterprise Server installation for which this upload was generated. */
	enterpriseServerInstallation: GraphQLTypes["EnterpriseServerInstallation"],
	id: string,
	/** The name of the file uploaded. */
	name: string,
	/** The synchronization state of the upload */
	syncState: GraphQLTypes["EnterpriseServerUserAccountsUploadSyncState"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for EnterpriseServerUserAccountsUpload. */
["EnterpriseServerUserAccountsUploadConnection"]: {
	__typename: "EnterpriseServerUserAccountsUploadConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnterpriseServerUserAccountsUploadEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["EnterpriseServerUserAccountsUpload"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnterpriseServerUserAccountsUploadEdge"]: {
	__typename: "EnterpriseServerUserAccountsUploadEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["EnterpriseServerUserAccountsUpload"] | undefined
};
	/** Ordering options for Enterprise Server user accounts upload connections. */
["EnterpriseServerUserAccountsUploadOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order user accounts uploads by. */
	field: GraphQLTypes["EnterpriseServerUserAccountsUploadOrderField"]
};
	/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
["EnterpriseServerUserAccountsUploadOrderField"]: EnterpriseServerUserAccountsUploadOrderField;
	/** Synchronization state of the Enterprise Server user accounts upload */
["EnterpriseServerUserAccountsUploadSyncState"]: EnterpriseServerUserAccountsUploadSyncState;
	/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
["EnterpriseUserAccount"]: {
	__typename: "EnterpriseUserAccount",
	/** A URL pointing to the enterprise user account's public avatar. */
	avatarUrl: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The enterprise in which this user account exists. */
	enterprise: GraphQLTypes["Enterprise"],
	id: string,
	/** An identifier for the enterprise user account, a login or email address */
	login: string,
	/** The name of the enterprise user account */
	name?: string | undefined,
	/** A list of enterprise organizations this user is a member of. */
	organizations: GraphQLTypes["EnterpriseOrganizationMembershipConnection"],
	/** The HTTP path for this user. */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this user. */
	url: GraphQLTypes["URI"],
	/** The user within the enterprise. */
	user?: GraphQLTypes["User"] | undefined
};
	/** The possible roles for enterprise membership. */
["EnterpriseUserAccountMembershipRole"]: EnterpriseUserAccountMembershipRole;
	/** The possible GitHub Enterprise deployments where this user can exist. */
["EnterpriseUserDeployment"]: EnterpriseUserDeployment;
	/** An environment. */
["Environment"]: {
	__typename: "Environment",
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The name of the environment */
	name: string,
	/** The protection rules defined for this environment */
	protectionRules: GraphQLTypes["DeploymentProtectionRuleConnection"]
};
	/** The connection type for Environment. */
["EnvironmentConnection"]: {
	__typename: "EnvironmentConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["EnvironmentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Environment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["EnvironmentEdge"]: {
	__typename: "EnvironmentEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Environment"] | undefined
};
	/** An external identity provisioned by SAML SSO or SCIM. */
["ExternalIdentity"]: {
	__typename: "ExternalIdentity",
	/** The GUID for this identity */
	guid: string,
	id: string,
	/** Organization invitation for this SCIM-provisioned external identity */
	organizationInvitation?: GraphQLTypes["OrganizationInvitation"] | undefined,
	/** SAML Identity attributes */
	samlIdentity?: GraphQLTypes["ExternalIdentitySamlAttributes"] | undefined,
	/** SCIM Identity attributes */
	scimIdentity?: GraphQLTypes["ExternalIdentityScimAttributes"] | undefined,
	/** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
	user?: GraphQLTypes["User"] | undefined
};
	/** An attribute for the External Identity attributes collection */
["ExternalIdentityAttribute"]: {
	__typename: "ExternalIdentityAttribute",
	/** The attribute metadata as JSON */
	metadata?: string | undefined,
	/** The attribute name */
	name: string,
	/** The attribute value */
	value: string
};
	/** The connection type for ExternalIdentity. */
["ExternalIdentityConnection"]: {
	__typename: "ExternalIdentityConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ExternalIdentityEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ExternalIdentity"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ExternalIdentityEdge"]: {
	__typename: "ExternalIdentityEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ExternalIdentity"] | undefined
};
	/** SAML attributes for the External Identity */
["ExternalIdentitySamlAttributes"]: {
	__typename: "ExternalIdentitySamlAttributes",
	/** SAML Identity attributes */
	attributes: Array<GraphQLTypes["ExternalIdentityAttribute"]>,
	/** The emails associated with the SAML identity */
	emails?: Array<GraphQLTypes["UserEmailMetadata"]> | undefined,
	/** Family name of the SAML identity */
	familyName?: string | undefined,
	/** Given name of the SAML identity */
	givenName?: string | undefined,
	/** The groups linked to this identity in IDP */
	groups?: Array<string> | undefined,
	/** The NameID of the SAML identity */
	nameId?: string | undefined,
	/** The userName of the SAML identity */
	username?: string | undefined
};
	/** SCIM attributes for the External Identity */
["ExternalIdentityScimAttributes"]: {
	__typename: "ExternalIdentityScimAttributes",
	/** The emails associated with the SCIM identity */
	emails?: Array<GraphQLTypes["UserEmailMetadata"]> | undefined,
	/** Family name of the SCIM identity */
	familyName?: string | undefined,
	/** Given name of the SCIM identity */
	givenName?: string | undefined,
	/** The groups linked to this identity in IDP */
	groups?: Array<string> | undefined,
	/** The userName of the SCIM identity */
	username?: string | undefined
};
	/** A command to add a file at the given path with the given contents as part of a
commit.  Any existing file at that that path will be replaced. */
["FileAddition"]: {
		/** The base64 encoded contents of the file */
	contents: GraphQLTypes["Base64String"],
	/** The path in the repository where the file will be located */
	path: string
};
	/** A description of a set of changes to a file tree to be made as part of
a git commit, modeled as zero or more file `additions` and zero or more
file `deletions`.

Both fields are optional; omitting both will produce a commit with no
file changes.

`deletions` and `additions` describe changes to files identified
by their path in the git tree using unix-style path separators, i.e.
`/`.  The root of a git tree is an empty string, so paths are not
slash-prefixed.

`path` values must be unique across all `additions` and `deletions`
provided.  Any duplication will result in a validation error.

### Encoding

File contents must be provided in full for each `FileAddition`.

The `contents` of a `FileAddition` must be encoded using RFC 4648
compliant base64, i.e. correct padding is required and no characters
outside the standard alphabet may be used.  Invalid base64
encoding will be rejected with a validation error.

The encoded contents may be binary.

For text files, no assumptions are made about the character encoding of
the file contents (after base64 decoding).  No charset transcoding or
line-ending normalization will be performed; it is the client's
responsibility to manage the character encoding of files they provide.
However, for maximum compatibility we recommend using UTF-8 encoding
and ensuring that all files in a repository use a consistent
line-ending convention (`\n` or `\r\n`), and that all files end
with a newline.

### Modeling file changes

Each of the the five types of conceptual changes that can be made in a
git commit can be described using the `FileChanges` type as follows:

1. New file addition: create file `hello world\n` at path `docs/README.txt`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }

2. Existing file modification: change existing `docs/README.txt` to have new
   content `new content here\n`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("new content here\n")
           }
         ]
       }

3. Existing file deletion: remove existing file `docs/README.txt`.
   Note that the path is required to exist -- specifying a
   path that does not exist on the given branch will abort the
   commit and return an error.

       {
         "deletions" [
           {
             "path": "docs/README.txt"
           }
         ]
       }


4. File rename with no changes: rename `docs/README.txt` with
   previous content `hello world\n` to the same content at
   `newdocs/README.txt`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }


5. File rename with changes: rename `docs/README.txt` with
   previous content `hello world\n` to a file at path
   `newdocs/README.txt` with content `new contents\n`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("new contents\n")
           }
         ]
       } */
["FileChanges"]: {
		/** File to add or change. */
	additions?: Array<GraphQLTypes["FileAddition"]> | undefined,
	/** Files to delete. */
	deletions?: Array<GraphQLTypes["FileDeletion"]> | undefined
};
	/** A command to delete the file at the given path as part of a commit. */
["FileDeletion"]: {
		/** The path to delete */
	path: string
};
	/** The possible viewed states of a file . */
["FileViewedState"]: FileViewedState;
	/** Autogenerated input type of FollowOrganization */
["FollowOrganizationInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the organization to follow. */
	organizationId: string
};
	/** Autogenerated return type of FollowOrganization */
["FollowOrganizationPayload"]: {
	__typename: "FollowOrganizationPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organization that was followed. */
	organization?: GraphQLTypes["Organization"] | undefined
};
	/** Autogenerated input type of FollowUser */
["FollowUserInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the user to follow. */
	userId: string
};
	/** Autogenerated return type of FollowUser */
["FollowUserPayload"]: {
	__typename: "FollowUserPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The user that was followed. */
	user?: GraphQLTypes["User"] | undefined
};
	/** The connection type for User. */
["FollowerConnection"]: {
	__typename: "FollowerConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["UserEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** The connection type for User. */
["FollowingConnection"]: {
	__typename: "FollowingConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["UserEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A funding platform link for a repository. */
["FundingLink"]: {
	__typename: "FundingLink",
	/** The funding platform this link is for. */
	platform: GraphQLTypes["FundingPlatform"],
	/** The configured URL for this funding link. */
	url: GraphQLTypes["URI"]
};
	/** The possible funding platforms for repository funding links. */
["FundingPlatform"]: FundingPlatform;
	/** A generic hovercard context with a message and icon */
["GenericHovercardContext"]: {
	__typename: "GenericHovercardContext",
	/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string
};
	/** A Gist. */
["Gist"]: {
	__typename: "Gist",
	/** A list of comments associated with the gist */
	comments: GraphQLTypes["GistCommentConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The gist description. */
	description?: string | undefined,
	/** The files in this gist. */
	files?: Array<GraphQLTypes["GistFile"] | undefined> | undefined,
	/** A list of forks associated with the gist */
	forks: GraphQLTypes["GistConnection"],
	id: string,
	/** Identifies if the gist is a fork. */
	isFork: boolean,
	/** Whether the gist is public or not. */
	isPublic: boolean,
	/** The gist name. */
	name: string,
	/** The gist owner. */
	owner?: GraphQLTypes["RepositoryOwner"] | undefined,
	/** Identifies when the gist was last pushed to. */
	pushedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The HTML path to this resource. */
	resourcePath: GraphQLTypes["URI"],
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount: number,
	/** A list of users who have starred this starrable. */
	stargazers: GraphQLTypes["StargazerConnection"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this Gist. */
	url: GraphQLTypes["URI"],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred: boolean
};
	/** Represents a comment on an Gist. */
["GistComment"]: {
	__typename: "GistComment",
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the gist. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** Identifies the comment body. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	/** The associated gist. */
	gist: GraphQLTypes["Gist"],
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for GistComment. */
["GistCommentConnection"]: {
	__typename: "GistCommentConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["GistCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["GistComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["GistCommentEdge"]: {
	__typename: "GistCommentEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["GistComment"] | undefined
};
	/** The connection type for Gist. */
["GistConnection"]: {
	__typename: "GistConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["GistEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Gist"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["GistEdge"]: {
	__typename: "GistEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Gist"] | undefined
};
	/** A file in a gist. */
["GistFile"]: {
	__typename: "GistFile",
	/** The file name encoded to remove characters that are invalid in URL paths. */
	encodedName?: string | undefined,
	/** The gist file encoding. */
	encoding?: string | undefined,
	/** The file extension from the file name. */
	extension?: string | undefined,
	/** Indicates if this file is an image. */
	isImage: boolean,
	/** Whether the file's contents were truncated. */
	isTruncated: boolean,
	/** The programming language this file is written in. */
	language?: GraphQLTypes["Language"] | undefined,
	/** The gist file name. */
	name?: string | undefined,
	/** The gist file size in bytes. */
	size?: number | undefined,
	/** UTF8 text data or null if the file is binary */
	text?: string | undefined
};
	/** Ordering options for gist connections */
["GistOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order repositories by. */
	field: GraphQLTypes["GistOrderField"]
};
	/** Properties by which gist connections can be ordered. */
["GistOrderField"]: GistOrderField;
	/** The privacy of a Gist */
["GistPrivacy"]: GistPrivacy;
	/** Represents an actor in a Git commit (ie. an author or committer). */
["GitActor"]: {
	__typename: "GitActor",
	/** A URL pointing to the author's public avatar. */
	avatarUrl: GraphQLTypes["URI"],
	/** The timestamp of the Git action (authoring or committing). */
	date?: GraphQLTypes["GitTimestamp"] | undefined,
	/** The email in the Git commit. */
	email?: string | undefined,
	/** The name in the Git commit. */
	name?: string | undefined,
	/** The GitHub user corresponding to the email field. Null if no such user exists. */
	user?: GraphQLTypes["User"] | undefined
};
	/** The connection type for GitActor. */
["GitActorConnection"]: {
	__typename: "GitActorConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["GitActorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["GitActor"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["GitActorEdge"]: {
	__typename: "GitActorEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["GitActor"] | undefined
};
	/** Represents information about the GitHub instance. */
["GitHubMetadata"]: {
	__typename: "GitHubMetadata",
	/** Returns a String that's a SHA of `github-services` */
	gitHubServicesSha: GraphQLTypes["GitObjectID"],
	/** IP addresses that users connect to for git operations */
	gitIpAddresses?: Array<string> | undefined,
	/** IP addresses that service hooks are sent from */
	hookIpAddresses?: Array<string> | undefined,
	/** IP addresses that the importer connects from */
	importerIpAddresses?: Array<string> | undefined,
	/** Whether or not users are verified */
	isPasswordAuthenticationVerifiable: boolean,
	/** IP addresses for GitHub Pages' A records */
	pagesIpAddresses?: Array<string> | undefined
};
	/** Represents a Git object. */
["GitObject"]: {
	__typename:"Blob" | "Commit" | "Tag" | "Tree",
	/** An abbreviated version of the Git object ID */
	abbreviatedOid: string,
	/** The HTTP path for this Git object */
	commitResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this Git object */
	commitUrl: GraphQLTypes["URI"],
	id: string,
	/** The Git object ID */
	oid: GraphQLTypes["GitObjectID"],
	/** The Repository the Git object belongs to */
	repository: GraphQLTypes["Repository"]
	['...on Blob']: '__union' & GraphQLTypes["Blob"];
	['...on Commit']: '__union' & GraphQLTypes["Commit"];
	['...on Tag']: '__union' & GraphQLTypes["Tag"];
	['...on Tree']: '__union' & GraphQLTypes["Tree"];
};
	/** A Git object ID. */
["GitObjectID"]: "scalar" & { name: "GitObjectID" };
	/** A fully qualified reference name (e.g. `refs/heads/master`). */
["GitRefname"]: "scalar" & { name: "GitRefname" };
	/** Git SSH string */
["GitSSHRemote"]: "scalar" & { name: "GitSSHRemote" };
	/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
["GitSignature"]: {
	__typename:"GpgSignature" | "SmimeSignature" | "SshSignature" | "UnknownSignature",
	/** Email used to sign this object. */
	email: string,
	/** True if the signature is valid and verified by GitHub. */
	isValid: boolean,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload: string,
	/** ASCII-armored signature header from object. */
	signature: string,
	/** GitHub user corresponding to the email signing this commit. */
	signer?: GraphQLTypes["User"] | undefined,
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state: GraphQLTypes["GitSignatureState"],
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub: boolean
	['...on GpgSignature']: '__union' & GraphQLTypes["GpgSignature"];
	['...on SmimeSignature']: '__union' & GraphQLTypes["SmimeSignature"];
	['...on SshSignature']: '__union' & GraphQLTypes["SshSignature"];
	['...on UnknownSignature']: '__union' & GraphQLTypes["UnknownSignature"];
};
	/** The state of a Git signature. */
["GitSignatureState"]: GitSignatureState;
	/** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
["GitTimestamp"]: "scalar" & { name: "GitTimestamp" };
	/** Represents a GPG signature on a Commit or Tag. */
["GpgSignature"]: {
	__typename: "GpgSignature",
	/** Email used to sign this object. */
	email: string,
	/** True if the signature is valid and verified by GitHub. */
	isValid: boolean,
	/** Hex-encoded ID of the key that signed this object. */
	keyId?: string | undefined,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload: string,
	/** ASCII-armored signature header from object. */
	signature: string,
	/** GitHub user corresponding to the email signing this commit. */
	signer?: GraphQLTypes["User"] | undefined,
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state: GraphQLTypes["GitSignatureState"],
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub: boolean
};
	/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
["GrantEnterpriseOrganizationsMigratorRoleInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
	enterpriseId: string,
	/** The login of the user to grant the migrator role */
	login: string
};
	/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
["GrantEnterpriseOrganizationsMigratorRolePayload"]: {
	__typename: "GrantEnterpriseOrganizationsMigratorRolePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organizations that had the migrator role applied to for the given user. */
	organizations?: GraphQLTypes["OrganizationConnection"] | undefined
};
	/** Autogenerated input type of GrantMigratorRole */
["GrantMigratorRoleInput"]: {
		/** The user login or Team slug to grant the migrator role. */
	actor: string,
	/** Specifies the type of the actor, can be either USER or TEAM. */
	actorType: GraphQLTypes["ActorType"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization that the user/team belongs to. */
	organizationId: string
};
	/** Autogenerated return type of GrantMigratorRole */
["GrantMigratorRolePayload"]: {
	__typename: "GrantMigratorRolePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Did the operation succeed? */
	success?: boolean | undefined
};
	/** A string containing HTML code. */
["HTML"]: "scalar" & { name: "HTML" };
	/** Represents a 'head_ref_deleted' event on a given pull request. */
["HeadRefDeletedEvent"]: {
	__typename: "HeadRefDeletedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the Ref associated with the `head_ref_deleted` event. */
	headRef?: GraphQLTypes["Ref"] | undefined,
	/** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
	headRefName: string,
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"]
};
	/** Represents a 'head_ref_force_pushed' event on a given pull request. */
["HeadRefForcePushedEvent"]: {
	__typename: "HeadRefForcePushedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
	afterCommit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
	beforeCommit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
	ref?: GraphQLTypes["Ref"] | undefined
};
	/** Represents a 'head_ref_restored' event on a given pull request. */
["HeadRefRestoredEvent"]: {
	__typename: "HeadRefRestoredEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"]
};
	/** Detail needed to display a hovercard for a user */
["Hovercard"]: {
	__typename: "Hovercard",
	/** Each of the contexts for this hovercard */
	contexts: Array<GraphQLTypes["HovercardContext"]>
};
	/** An individual line of a hovercard */
["HovercardContext"]: {
	__typename:"GenericHovercardContext" | "OrganizationTeamsHovercardContext" | "OrganizationsHovercardContext" | "ReviewStatusHovercardContext" | "ViewerHovercardContext",
	/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string
	['...on GenericHovercardContext']: '__union' & GraphQLTypes["GenericHovercardContext"];
	['...on OrganizationTeamsHovercardContext']: '__union' & GraphQLTypes["OrganizationTeamsHovercardContext"];
	['...on OrganizationsHovercardContext']: '__union' & GraphQLTypes["OrganizationsHovercardContext"];
	['...on ReviewStatusHovercardContext']: '__union' & GraphQLTypes["ReviewStatusHovercardContext"];
	['...on ViewerHovercardContext']: '__union' & GraphQLTypes["ViewerHovercardContext"];
};
	/** The possible states in which authentication can be configured with an identity provider. */
["IdentityProviderConfigurationState"]: IdentityProviderConfigurationState;
	/** Autogenerated input type of ImportProject */
["ImportProjectInput"]: {
		/** The description of Project. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A list of columns containing issues and pull requests. */
	columnImports: Array<GraphQLTypes["ProjectColumnImport"]>,
	/** The name of Project. */
	name: string,
	/** The name of the Organization or User to create the Project under. */
	ownerName: string,
	/** Whether the Project is public or not. */
	public?: boolean | undefined
};
	/** Autogenerated return type of ImportProject */
["ImportProjectPayload"]: {
	__typename: "ImportProjectPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new Project! */
	project?: GraphQLTypes["Project"] | undefined
};
	/** Autogenerated input type of InviteEnterpriseAdmin */
["InviteEnterpriseAdminInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The email of the person to invite as an administrator. */
	email?: string | undefined,
	/** The ID of the enterprise to which you want to invite an administrator. */
	enterpriseId: string,
	/** The login of a user to invite as an administrator. */
	invitee?: string | undefined,
	/** The role of the administrator. */
	role?: GraphQLTypes["EnterpriseAdministratorRole"] | undefined
};
	/** Autogenerated return type of InviteEnterpriseAdmin */
["InviteEnterpriseAdminPayload"]: {
	__typename: "InviteEnterpriseAdminPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The created enterprise administrator invitation. */
	invitation?: GraphQLTypes["EnterpriseAdministratorInvitation"] | undefined
};
	/** The possible values for the IP allow list enabled setting. */
["IpAllowListEnabledSettingValue"]: IpAllowListEnabledSettingValue;
	/** An IP address or range of addresses that is allowed to access an owner's resources. */
["IpAllowListEntry"]: {
	__typename: "IpAllowListEntry",
	/** A single IP address or range of IP addresses in CIDR notation. */
	allowListValue: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Whether the entry is currently active. */
	isActive: boolean,
	/** The name of the IP allow list entry. */
	name?: string | undefined,
	/** The owner of the IP allow list entry. */
	owner: GraphQLTypes["IpAllowListOwner"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for IpAllowListEntry. */
["IpAllowListEntryConnection"]: {
	__typename: "IpAllowListEntryConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["IpAllowListEntryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["IpAllowListEntry"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["IpAllowListEntryEdge"]: {
	__typename: "IpAllowListEntryEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["IpAllowListEntry"] | undefined
};
	/** Ordering options for IP allow list entry connections. */
["IpAllowListEntryOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order IP allow list entries by. */
	field: GraphQLTypes["IpAllowListEntryOrderField"]
};
	/** Properties by which IP allow list entry connections can be ordered. */
["IpAllowListEntryOrderField"]: IpAllowListEntryOrderField;
	/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
["IpAllowListForInstalledAppsEnabledSettingValue"]: IpAllowListForInstalledAppsEnabledSettingValue;
	/** Types that can own an IP allow list. */
["IpAllowListOwner"]:{
        	__typename:"App" | "Enterprise" | "Organization"
        	['...on App']: '__union' & GraphQLTypes["App"];
	['...on Enterprise']: '__union' & GraphQLTypes["Enterprise"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
};
	/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
["Issue"]: {
	__typename: "Issue",
	/** Reason that the conversation was locked. */
	activeLockReason?: GraphQLTypes["LockReason"] | undefined,
	/** A list of Users assigned to this object. */
	assignees: GraphQLTypes["UserConnection"],
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** Identifies the body of the issue. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The http path for this issue body */
	bodyResourcePath: GraphQLTypes["URI"],
	/** Identifies the body of the issue rendered to text. */
	bodyText: string,
	/** The http URL for this issue body */
	bodyUrl: GraphQLTypes["URI"],
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of comments associated with the Issue. */
	comments: GraphQLTypes["IssueCommentConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	/** The hovercard information for this issue */
	hovercard: GraphQLTypes["Hovercard"],
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Indicates whether or not this issue is currently pinned to the repository issues list */
	isPinned?: boolean | undefined,
	/** Is this issue read by the viewer */
	isReadByViewer?: boolean | undefined,
	/** A list of labels associated with the object. */
	labels?: GraphQLTypes["LabelConnection"] | undefined,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Branches linked to this issue. */
	linkedBranches: GraphQLTypes["LinkedBranchConnection"],
	/** `true` if the object is locked */
	locked: boolean,
	/** Identifies the milestone associated with the issue. */
	milestone?: GraphQLTypes["Milestone"] | undefined,
	/** Identifies the issue number. */
	number: number,
	/** A list of Users that are participating in the Issue conversation. */
	participants: GraphQLTypes["UserConnection"],
	/** List of project cards associated with this issue. */
	projectCards: GraphQLTypes["ProjectCardConnection"],
	/** List of project items associated with this issue. */
	projectItems: GraphQLTypes["ProjectV2ItemConnection"],
	/** Find a project by project (beta) number. */
	projectNext?: GraphQLTypes["ProjectNext"] | undefined,
	/** List of project (beta) items associated with this issue. */
	projectNextItems: GraphQLTypes["ProjectNextItemConnection"],
	/** Find a project by number. */
	projectV2?: GraphQLTypes["ProjectV2"] | undefined,
	/** A list of projects (beta) under the owner. */
	projectsNext: GraphQLTypes["ProjectNextConnection"],
	/** A list of projects under the owner. */
	projectsV2: GraphQLTypes["ProjectV2Connection"],
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this issue */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the state of the issue. */
	state: GraphQLTypes["IssueState"],
	/** Identifies the reason for the issue state. */
	stateReason?: GraphQLTypes["IssueStateReason"] | undefined,
	/** A list of events, comments, commits, etc. associated with the issue. */
	timeline: GraphQLTypes["IssueTimelineConnection"],
	/** A list of events, comments, commits, etc. associated with the issue. */
	timelineItems: GraphQLTypes["IssueTimelineItemsConnection"],
	/** Identifies the issue title. */
	title: string,
	/** Identifies the issue title rendered to HTML. */
	titleHTML: string,
	/** A list of issues that track this issue */
	trackedInIssues: GraphQLTypes["IssueConnection"],
	/** A list of issues tracked inside the current issue */
	trackedIssues: GraphQLTypes["IssueConnection"],
	/** The number of tracked issues for this issue */
	trackedIssuesCount: number,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this issue */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: GraphQLTypes["SubscriptionState"] | undefined
};
	/** The possible state reasons of a closed issue. */
["IssueClosedStateReason"]: IssueClosedStateReason;
	/** Represents a comment on an Issue. */
["IssueComment"]: {
	__typename: "IssueComment",
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** Identifies the issue associated with the comment. */
	issue: GraphQLTypes["Issue"],
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Returns the pull request associated with the comment, if this comment was made on a
pull request. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this issue comment */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this issue comment */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for IssueComment. */
["IssueCommentConnection"]: {
	__typename: "IssueCommentConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["IssueCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["IssueComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["IssueCommentEdge"]: {
	__typename: "IssueCommentEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["IssueComment"] | undefined
};
	/** Ways in which lists of issue comments can be ordered upon return. */
["IssueCommentOrder"]: {
		/** The direction in which to order issue comments by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order issue comments by. */
	field: GraphQLTypes["IssueCommentOrderField"]
};
	/** Properties by which issue comment connections can be ordered. */
["IssueCommentOrderField"]: IssueCommentOrderField;
	/** The connection type for Issue. */
["IssueConnection"]: {
	__typename: "IssueConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["IssueEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Issue"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** This aggregates issues opened by a user within one repository. */
["IssueContributionsByRepository"]: {
	__typename: "IssueContributionsByRepository",
	/** The issue contributions. */
	contributions: GraphQLTypes["CreatedIssueContributionConnection"],
	/** The repository in which the issues were opened. */
	repository: GraphQLTypes["Repository"]
};
	/** An edge in a connection. */
["IssueEdge"]: {
	__typename: "IssueEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Issue"] | undefined
};
	/** Ways in which to filter lists of issues. */
["IssueFilters"]: {
		/** List issues assigned to given name. Pass in `null` for issues with no assigned
user, and `*` for issues assigned to any user. */
	assignee?: string | undefined,
	/** List issues created by given name. */
	createdBy?: string | undefined,
	/** List issues where the list of label names exist on the issue. */
	labels?: Array<string> | undefined,
	/** List issues where the given name is mentioned in the issue. */
	mentioned?: string | undefined,
	/** List issues by given milestone argument. If an string representation of an
integer is passed, it should refer to a milestone by its database ID. Pass in
`null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
	milestone?: string | undefined,
	/** List issues by given milestone argument. If an string representation of an
integer is passed, it should refer to a milestone by its number field. Pass in
`null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
	milestoneNumber?: string | undefined,
	/** List issues that have been updated at or after the given date. */
	since?: GraphQLTypes["DateTime"] | undefined,
	/** List issues filtered by the list of states given. */
	states?: Array<GraphQLTypes["IssueState"]> | undefined,
	/** List issues subscribed to by viewer. */
	viewerSubscribed?: boolean | undefined
};
	/** Used for return value of Repository.issueOrPullRequest. */
["IssueOrPullRequest"]:{
        	__typename:"Issue" | "PullRequest"
        	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** Ways in which lists of issues can be ordered upon return. */
["IssueOrder"]: {
		/** The direction in which to order issues by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order issues by. */
	field: GraphQLTypes["IssueOrderField"]
};
	/** Properties by which issue connections can be ordered. */
["IssueOrderField"]: IssueOrderField;
	/** The possible states of an issue. */
["IssueState"]: IssueState;
	/** The possible state reasons of an issue. */
["IssueStateReason"]: IssueStateReason;
	/** A repository issue template. */
["IssueTemplate"]: {
	__typename: "IssueTemplate",
	/** The template purpose. */
	about?: string | undefined,
	/** The suggested issue body. */
	body?: string | undefined,
	/** The template filename. */
	filename: string,
	/** The template name. */
	name: string,
	/** The suggested issue title. */
	title?: string | undefined
};
	/** The connection type for IssueTimelineItem. */
["IssueTimelineConnection"]: {
	__typename: "IssueTimelineConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["IssueTimelineItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["IssueTimelineItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An item in an issue timeline */
["IssueTimelineItem"]:{
        	__typename:"AssignedEvent" | "ClosedEvent" | "Commit" | "CrossReferencedEvent" | "DemilestonedEvent" | "IssueComment" | "LabeledEvent" | "LockedEvent" | "MilestonedEvent" | "ReferencedEvent" | "RenamedTitleEvent" | "ReopenedEvent" | "SubscribedEvent" | "TransferredEvent" | "UnassignedEvent" | "UnlabeledEvent" | "UnlockedEvent" | "UnsubscribedEvent" | "UserBlockedEvent"
        	['...on AssignedEvent']: '__union' & GraphQLTypes["AssignedEvent"];
	['...on ClosedEvent']: '__union' & GraphQLTypes["ClosedEvent"];
	['...on Commit']: '__union' & GraphQLTypes["Commit"];
	['...on CrossReferencedEvent']: '__union' & GraphQLTypes["CrossReferencedEvent"];
	['...on DemilestonedEvent']: '__union' & GraphQLTypes["DemilestonedEvent"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on LabeledEvent']: '__union' & GraphQLTypes["LabeledEvent"];
	['...on LockedEvent']: '__union' & GraphQLTypes["LockedEvent"];
	['...on MilestonedEvent']: '__union' & GraphQLTypes["MilestonedEvent"];
	['...on ReferencedEvent']: '__union' & GraphQLTypes["ReferencedEvent"];
	['...on RenamedTitleEvent']: '__union' & GraphQLTypes["RenamedTitleEvent"];
	['...on ReopenedEvent']: '__union' & GraphQLTypes["ReopenedEvent"];
	['...on SubscribedEvent']: '__union' & GraphQLTypes["SubscribedEvent"];
	['...on TransferredEvent']: '__union' & GraphQLTypes["TransferredEvent"];
	['...on UnassignedEvent']: '__union' & GraphQLTypes["UnassignedEvent"];
	['...on UnlabeledEvent']: '__union' & GraphQLTypes["UnlabeledEvent"];
	['...on UnlockedEvent']: '__union' & GraphQLTypes["UnlockedEvent"];
	['...on UnsubscribedEvent']: '__union' & GraphQLTypes["UnsubscribedEvent"];
	['...on UserBlockedEvent']: '__union' & GraphQLTypes["UserBlockedEvent"];
};
	/** An edge in a connection. */
["IssueTimelineItemEdge"]: {
	__typename: "IssueTimelineItemEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["IssueTimelineItem"] | undefined
};
	/** An item in an issue timeline */
["IssueTimelineItems"]:{
        	__typename:"AddedToProjectEvent" | "AssignedEvent" | "ClosedEvent" | "CommentDeletedEvent" | "ConnectedEvent" | "ConvertedNoteToIssueEvent" | "ConvertedToDiscussionEvent" | "CrossReferencedEvent" | "DemilestonedEvent" | "DisconnectedEvent" | "IssueComment" | "LabeledEvent" | "LockedEvent" | "MarkedAsDuplicateEvent" | "MentionedEvent" | "MilestonedEvent" | "MovedColumnsInProjectEvent" | "PinnedEvent" | "ReferencedEvent" | "RemovedFromProjectEvent" | "RenamedTitleEvent" | "ReopenedEvent" | "SubscribedEvent" | "TransferredEvent" | "UnassignedEvent" | "UnlabeledEvent" | "UnlockedEvent" | "UnmarkedAsDuplicateEvent" | "UnpinnedEvent" | "UnsubscribedEvent" | "UserBlockedEvent"
        	['...on AddedToProjectEvent']: '__union' & GraphQLTypes["AddedToProjectEvent"];
	['...on AssignedEvent']: '__union' & GraphQLTypes["AssignedEvent"];
	['...on ClosedEvent']: '__union' & GraphQLTypes["ClosedEvent"];
	['...on CommentDeletedEvent']: '__union' & GraphQLTypes["CommentDeletedEvent"];
	['...on ConnectedEvent']: '__union' & GraphQLTypes["ConnectedEvent"];
	['...on ConvertedNoteToIssueEvent']: '__union' & GraphQLTypes["ConvertedNoteToIssueEvent"];
	['...on ConvertedToDiscussionEvent']: '__union' & GraphQLTypes["ConvertedToDiscussionEvent"];
	['...on CrossReferencedEvent']: '__union' & GraphQLTypes["CrossReferencedEvent"];
	['...on DemilestonedEvent']: '__union' & GraphQLTypes["DemilestonedEvent"];
	['...on DisconnectedEvent']: '__union' & GraphQLTypes["DisconnectedEvent"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on LabeledEvent']: '__union' & GraphQLTypes["LabeledEvent"];
	['...on LockedEvent']: '__union' & GraphQLTypes["LockedEvent"];
	['...on MarkedAsDuplicateEvent']: '__union' & GraphQLTypes["MarkedAsDuplicateEvent"];
	['...on MentionedEvent']: '__union' & GraphQLTypes["MentionedEvent"];
	['...on MilestonedEvent']: '__union' & GraphQLTypes["MilestonedEvent"];
	['...on MovedColumnsInProjectEvent']: '__union' & GraphQLTypes["MovedColumnsInProjectEvent"];
	['...on PinnedEvent']: '__union' & GraphQLTypes["PinnedEvent"];
	['...on ReferencedEvent']: '__union' & GraphQLTypes["ReferencedEvent"];
	['...on RemovedFromProjectEvent']: '__union' & GraphQLTypes["RemovedFromProjectEvent"];
	['...on RenamedTitleEvent']: '__union' & GraphQLTypes["RenamedTitleEvent"];
	['...on ReopenedEvent']: '__union' & GraphQLTypes["ReopenedEvent"];
	['...on SubscribedEvent']: '__union' & GraphQLTypes["SubscribedEvent"];
	['...on TransferredEvent']: '__union' & GraphQLTypes["TransferredEvent"];
	['...on UnassignedEvent']: '__union' & GraphQLTypes["UnassignedEvent"];
	['...on UnlabeledEvent']: '__union' & GraphQLTypes["UnlabeledEvent"];
	['...on UnlockedEvent']: '__union' & GraphQLTypes["UnlockedEvent"];
	['...on UnmarkedAsDuplicateEvent']: '__union' & GraphQLTypes["UnmarkedAsDuplicateEvent"];
	['...on UnpinnedEvent']: '__union' & GraphQLTypes["UnpinnedEvent"];
	['...on UnsubscribedEvent']: '__union' & GraphQLTypes["UnsubscribedEvent"];
	['...on UserBlockedEvent']: '__union' & GraphQLTypes["UserBlockedEvent"];
};
	/** The connection type for IssueTimelineItems. */
["IssueTimelineItemsConnection"]: {
	__typename: "IssueTimelineItemsConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["IssueTimelineItemsEdge"] | undefined> | undefined,
	/** Identifies the count of items after applying `before` and `after` filters. */
	filteredCount: number,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["IssueTimelineItems"] | undefined> | undefined,
	/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
	pageCount: number,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** Identifies the date and time when the timeline was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** An edge in a connection. */
["IssueTimelineItemsEdge"]: {
	__typename: "IssueTimelineItemsEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["IssueTimelineItems"] | undefined
};
	/** The possible item types found in a timeline. */
["IssueTimelineItemsItemType"]: IssueTimelineItemsItemType;
	/** Represents a user signing up for a GitHub account. */
["JoinedGitHubContribution"]: {
	__typename: "JoinedGitHubContribution",
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: GraphQLTypes["DateTime"],
	/** The HTTP path for this contribution. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: GraphQLTypes["URI"],
	/** The user who made this contribution. */
	user: GraphQLTypes["User"]
};
	/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
["Label"]: {
	__typename: "Label",
	/** Identifies the label color. */
	color: string,
	/** Identifies the date and time when the label was created. */
	createdAt?: GraphQLTypes["DateTime"] | undefined,
	/** A brief description of this label. */
	description?: string | undefined,
	id: string,
	/** Indicates whether or not this is a default label. */
	isDefault: boolean,
	/** A list of issues associated with this label. */
	issues: GraphQLTypes["IssueConnection"],
	/** Identifies the label name. */
	name: string,
	/** A list of pull requests associated with this label. */
	pullRequests: GraphQLTypes["PullRequestConnection"],
	/** The repository associated with this label. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this label. */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the label was last updated. */
	updatedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The HTTP URL for this label. */
	url: GraphQLTypes["URI"]
};
	/** The connection type for Label. */
["LabelConnection"]: {
	__typename: "LabelConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["LabelEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Label"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["LabelEdge"]: {
	__typename: "LabelEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Label"] | undefined
};
	/** Ways in which lists of labels can be ordered upon return. */
["LabelOrder"]: {
		/** The direction in which to order labels by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order labels by. */
	field: GraphQLTypes["LabelOrderField"]
};
	/** Properties by which label connections can be ordered. */
["LabelOrderField"]: LabelOrderField;
	/** An object that can have labels assigned to it. */
["Labelable"]: {
	__typename:"Discussion" | "Issue" | "PullRequest",
	/** A list of labels associated with the object. */
	labels?: GraphQLTypes["LabelConnection"] | undefined
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** Represents a 'labeled' event on a given issue or pull request. */
["LabeledEvent"]: {
	__typename: "LabeledEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Identifies the label associated with the 'labeled' event. */
	label: GraphQLTypes["Label"],
	/** Identifies the `Labelable` associated with the event. */
	labelable: GraphQLTypes["Labelable"]
};
	/** Represents a given language found in repositories. */
["Language"]: {
	__typename: "Language",
	/** The color defined for the current language. */
	color?: string | undefined,
	id: string,
	/** The name of the current language. */
	name: string
};
	/** A list of languages associated with the parent. */
["LanguageConnection"]: {
	__typename: "LanguageConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["LanguageEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Language"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** The total size in bytes of files written in that language. */
	totalSize: number
};
	/** Represents the language of a repository. */
["LanguageEdge"]: {
	__typename: "LanguageEdge",
	cursor: string,
	node: GraphQLTypes["Language"],
	/** The number of bytes of code written in the language. */
	size: number
};
	/** Ordering options for language connections. */
["LanguageOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order languages by. */
	field: GraphQLTypes["LanguageOrderField"]
};
	/** Properties by which language connections can be ordered. */
["LanguageOrderField"]: LanguageOrderField;
	/** A repository's open source license */
["License"]: {
	__typename: "License",
	/** The full text of the license */
	body: string,
	/** The conditions set by the license */
	conditions: Array<GraphQLTypes["LicenseRule"] | undefined>,
	/** A human-readable description of the license */
	description?: string | undefined,
	/** Whether the license should be featured */
	featured: boolean,
	/** Whether the license should be displayed in license pickers */
	hidden: boolean,
	id: string,
	/** Instructions on how to implement the license */
	implementation?: string | undefined,
	/** The lowercased SPDX ID of the license */
	key: string,
	/** The limitations set by the license */
	limitations: Array<GraphQLTypes["LicenseRule"] | undefined>,
	/** The license full name specified by <https://spdx.org/licenses> */
	name: string,
	/** Customary short name if applicable (e.g, GPLv3) */
	nickname?: string | undefined,
	/** The permissions set by the license */
	permissions: Array<GraphQLTypes["LicenseRule"] | undefined>,
	/** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
	pseudoLicense: boolean,
	/** Short identifier specified by <https://spdx.org/licenses> */
	spdxId?: string | undefined,
	/** URL to the license on <https://choosealicense.com> */
	url?: GraphQLTypes["URI"] | undefined
};
	/** Describes a License's conditions, permissions, and limitations */
["LicenseRule"]: {
	__typename: "LicenseRule",
	/** A description of the rule */
	description: string,
	/** The machine-readable rule key */
	key: string,
	/** The human-readable rule label */
	label: string
};
	/** Autogenerated input type of LinkRepositoryToProject */
["LinkRepositoryToProjectInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Project to link to a Repository */
	projectId: string,
	/** The ID of the Repository to link to a Project. */
	repositoryId: string
};
	/** Autogenerated return type of LinkRepositoryToProject */
["LinkRepositoryToProjectPayload"]: {
	__typename: "LinkRepositoryToProjectPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The linked Project. */
	project?: GraphQLTypes["Project"] | undefined,
	/** The linked Repository. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** A branch linked to an issue. */
["LinkedBranch"]: {
	__typename: "LinkedBranch",
	id: string,
	/** The branch's ref. */
	ref?: GraphQLTypes["Ref"] | undefined
};
	/** The connection type for LinkedBranch. */
["LinkedBranchConnection"]: {
	__typename: "LinkedBranchConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["LinkedBranchEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["LinkedBranch"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["LinkedBranchEdge"]: {
	__typename: "LinkedBranchEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["LinkedBranch"] | undefined
};
	/** Autogenerated input type of LockLockable */
["LockLockableInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A reason for why the item will be locked. */
	lockReason?: GraphQLTypes["LockReason"] | undefined,
	/** ID of the item to be locked. */
	lockableId: string
};
	/** Autogenerated return type of LockLockable */
["LockLockablePayload"]: {
	__typename: "LockLockablePayload",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item that was locked. */
	lockedRecord?: GraphQLTypes["Lockable"] | undefined
};
	/** The possible reasons that an issue or pull request was locked. */
["LockReason"]: LockReason;
	/** An object that can be locked. */
["Lockable"]: {
	__typename:"Discussion" | "Issue" | "PullRequest",
	/** Reason that the conversation was locked. */
	activeLockReason?: GraphQLTypes["LockReason"] | undefined,
	/** `true` if the object is locked */
	locked: boolean
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** Represents a 'locked' event on a given issue or pull request. */
["LockedEvent"]: {
	__typename: "LockedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Reason that the conversation was locked (optional). */
	lockReason?: GraphQLTypes["LockReason"] | undefined,
	/** Object that was locked. */
	lockable: GraphQLTypes["Lockable"]
};
	/** A placeholder user for attribution of imported data on GitHub. */
["Mannequin"]: {
	__typename: "Mannequin",
	/** A URL pointing to the GitHub App's public avatar. */
	avatarUrl: GraphQLTypes["URI"],
	/** The user that has claimed the data attributed to this mannequin. */
	claimant?: GraphQLTypes["User"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The mannequin's email on the source instance. */
	email?: string | undefined,
	id: string,
	/** The username of the actor. */
	login: string,
	/** The HTML path to this resource. */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The URL to this resource. */
	url: GraphQLTypes["URI"]
};
	/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
["MarkDiscussionCommentAsAnswerInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion comment to mark as an answer. */
	id: string
};
	/** Autogenerated return type of MarkDiscussionCommentAsAnswer */
["MarkDiscussionCommentAsAnswerPayload"]: {
	__typename: "MarkDiscussionCommentAsAnswerPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion that includes the chosen comment. */
	discussion?: GraphQLTypes["Discussion"] | undefined
};
	/** Autogenerated input type of MarkFileAsViewed */
["MarkFileAsViewedInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The path of the file to mark as viewed */
	path: string,
	/** The Node ID of the pull request. */
	pullRequestId: string
};
	/** Autogenerated return type of MarkFileAsViewed */
["MarkFileAsViewedPayload"]: {
	__typename: "MarkFileAsViewedPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of MarkPullRequestReadyForReview */
["MarkPullRequestReadyForReviewInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to be marked as ready for review. */
	pullRequestId: string
};
	/** Autogenerated return type of MarkPullRequestReadyForReview */
["MarkPullRequestReadyForReviewPayload"]: {
	__typename: "MarkPullRequestReadyForReviewPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that is ready for review. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
["MarkedAsDuplicateEvent"]: {
	__typename: "MarkedAsDuplicateEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** The authoritative issue or pull request which has been duplicated by another. */
	canonical?: GraphQLTypes["IssueOrPullRequest"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The issue or pull request which has been marked as a duplicate of another. */
	duplicate?: GraphQLTypes["IssueOrPullRequest"] | undefined,
	id: string,
	/** Canonical and duplicate belong to different repositories. */
	isCrossRepository: boolean
};
	/** A public description of a Marketplace category. */
["MarketplaceCategory"]: {
	__typename: "MarketplaceCategory",
	/** The category's description. */
	description?: string | undefined,
	/** The technical description of how apps listed in this category work with GitHub. */
	howItWorks?: string | undefined,
	id: string,
	/** The category's name. */
	name: string,
	/** How many Marketplace listings have this as their primary category. */
	primaryListingCount: number,
	/** The HTTP path for this Marketplace category. */
	resourcePath: GraphQLTypes["URI"],
	/** How many Marketplace listings have this as their secondary category. */
	secondaryListingCount: number,
	/** The short name of the category used in its URL. */
	slug: string,
	/** The HTTP URL for this Marketplace category. */
	url: GraphQLTypes["URI"]
};
	/** A listing in the GitHub integration marketplace. */
["MarketplaceListing"]: {
	__typename: "MarketplaceListing",
	/** The GitHub App this listing represents. */
	app?: GraphQLTypes["App"] | undefined,
	/** URL to the listing owner's company site. */
	companyUrl?: GraphQLTypes["URI"] | undefined,
	/** The HTTP path for configuring access to the listing's integration or OAuth app */
	configurationResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for configuring access to the listing's integration or OAuth app */
	configurationUrl: GraphQLTypes["URI"],
	/** URL to the listing's documentation. */
	documentationUrl?: GraphQLTypes["URI"] | undefined,
	/** The listing's detailed description. */
	extendedDescription?: string | undefined,
	/** The listing's detailed description rendered to HTML. */
	extendedDescriptionHTML: GraphQLTypes["HTML"],
	/** The listing's introductory description. */
	fullDescription: string,
	/** The listing's introductory description rendered to HTML. */
	fullDescriptionHTML: GraphQLTypes["HTML"],
	/** Does this listing have any plans with a free trial? */
	hasPublishedFreeTrialPlans: boolean,
	/** Does this listing have a terms of service link? */
	hasTermsOfService: boolean,
	/** Whether the creator of the app is a verified org */
	hasVerifiedOwner: boolean,
	/** A technical description of how this app works with GitHub. */
	howItWorks?: string | undefined,
	/** The listing's technical description rendered to HTML. */
	howItWorksHTML: GraphQLTypes["HTML"],
	id: string,
	/** URL to install the product to the viewer's account or organization. */
	installationUrl?: GraphQLTypes["URI"] | undefined,
	/** Whether this listing's app has been installed for the current viewer */
	installedForViewer: boolean,
	/** Whether this listing has been removed from the Marketplace. */
	isArchived: boolean,
	/** Whether this listing is still an editable draft that has not been submitted
for review and is not publicly visible in the Marketplace. */
	isDraft: boolean,
	/** Whether the product this listing represents is available as part of a paid plan. */
	isPaid: boolean,
	/** Whether this listing has been approved for display in the Marketplace. */
	isPublic: boolean,
	/** Whether this listing has been rejected by GitHub for display in the Marketplace. */
	isRejected: boolean,
	/** Whether this listing has been approved for unverified display in the Marketplace. */
	isUnverified: boolean,
	/** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
	isUnverifiedPending: boolean,
	/** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
	isVerificationPendingFromDraft: boolean,
	/** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
	isVerificationPendingFromUnverified: boolean,
	/** Whether this listing has been approved for verified display in the Marketplace. */
	isVerified: boolean,
	/** The hex color code, without the leading '#', for the logo background. */
	logoBackgroundColor: string,
	/** URL for the listing's logo image. */
	logoUrl?: GraphQLTypes["URI"] | undefined,
	/** The listing's full name. */
	name: string,
	/** The listing's very short description without a trailing period or ampersands. */
	normalizedShortDescription: string,
	/** URL to the listing's detailed pricing. */
	pricingUrl?: GraphQLTypes["URI"] | undefined,
	/** The category that best describes the listing. */
	primaryCategory: GraphQLTypes["MarketplaceCategory"],
	/** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
	privacyPolicyUrl: GraphQLTypes["URI"],
	/** The HTTP path for the Marketplace listing. */
	resourcePath: GraphQLTypes["URI"],
	/** The URLs for the listing's screenshots. */
	screenshotUrls: Array<string | undefined>,
	/** An alternate category that describes the listing. */
	secondaryCategory?: GraphQLTypes["MarketplaceCategory"] | undefined,
	/** The listing's very short description. */
	shortDescription: string,
	/** The short name of the listing used in its URL. */
	slug: string,
	/** URL to the listing's status page. */
	statusUrl?: GraphQLTypes["URI"] | undefined,
	/** An email address for support for this listing's app. */
	supportEmail?: string | undefined,
	/** Either a URL or an email address for support for this listing's app, may
return an empty string for listings that do not require a support URL. */
	supportUrl: GraphQLTypes["URI"],
	/** URL to the listing's terms of service. */
	termsOfServiceUrl?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the Marketplace listing. */
	url: GraphQLTypes["URI"],
	/** Can the current viewer add plans for this Marketplace listing. */
	viewerCanAddPlans: boolean,
	/** Can the current viewer approve this Marketplace listing. */
	viewerCanApprove: boolean,
	/** Can the current viewer delist this Marketplace listing. */
	viewerCanDelist: boolean,
	/** Can the current viewer edit this Marketplace listing. */
	viewerCanEdit: boolean,
	/** Can the current viewer edit the primary and secondary category of this
Marketplace listing. */
	viewerCanEditCategories: boolean,
	/** Can the current viewer edit the plans for this Marketplace listing. */
	viewerCanEditPlans: boolean,
	/** Can the current viewer return this Marketplace listing to draft state
so it becomes editable again. */
	viewerCanRedraft: boolean,
	/** Can the current viewer reject this Marketplace listing by returning it to
an editable draft state or rejecting it entirely. */
	viewerCanReject: boolean,
	/** Can the current viewer request this listing be reviewed for display in
the Marketplace as verified. */
	viewerCanRequestApproval: boolean,
	/** Indicates whether the current user has an active subscription to this Marketplace listing. */
	viewerHasPurchased: boolean,
	/** Indicates if the current user has purchased a subscription to this Marketplace listing
for all of the organizations the user owns. */
	viewerHasPurchasedForAllOrganizations: boolean,
	/** Does the current viewer role allow them to administer this Marketplace listing. */
	viewerIsListingAdmin: boolean
};
	/** Look up Marketplace Listings */
["MarketplaceListingConnection"]: {
	__typename: "MarketplaceListingConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["MarketplaceListingEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["MarketplaceListing"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["MarketplaceListingEdge"]: {
	__typename: "MarketplaceListingEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["MarketplaceListing"] | undefined
};
	/** Entities that have members who can set status messages. */
["MemberStatusable"]: {
	__typename:"Organization" | "Team",
	/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
	memberStatuses: GraphQLTypes["UserStatusConnection"]
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on Team']: '__union' & GraphQLTypes["Team"];
};
	/** Audit log entry for a members_can_delete_repos.clear event. */
["MembersCanDeleteReposClearAuditEntry"]: {
	__typename: "MembersCanDeleteReposClearAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a members_can_delete_repos.disable event. */
["MembersCanDeleteReposDisableAuditEntry"]: {
	__typename: "MembersCanDeleteReposDisableAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a members_can_delete_repos.enable event. */
["MembersCanDeleteReposEnableAuditEntry"]: {
	__typename: "MembersCanDeleteReposEnableAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Represents a 'mentioned' event on a given issue or pull request. */
["MentionedEvent"]: {
	__typename: "MentionedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string
};
	/** Autogenerated input type of MergeBranch */
["MergeBranchInput"]: {
		/** The email address to associate with this commit. */
	authorEmail?: string | undefined,
	/** The name of the base branch that the provided head will be merged into. */
	base: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Message to use for the merge commit. If omitted, a default will be used. */
	commitMessage?: string | undefined,
	/** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
	head: string,
	/** The Node ID of the Repository containing the base branch that will be modified. */
	repositoryId: string
};
	/** Autogenerated return type of MergeBranch */
["MergeBranchPayload"]: {
	__typename: "MergeBranchPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The resulting merge Commit. */
	mergeCommit?: GraphQLTypes["Commit"] | undefined
};
	/** The possible default commit messages for merges. */
["MergeCommitMessage"]: MergeCommitMessage;
	/** The possible default commit titles for merges. */
["MergeCommitTitle"]: MergeCommitTitle;
	/** Autogenerated input type of MergePullRequest */
["MergePullRequestInput"]: {
		/** The email address to associate with this merge. */
	authorEmail?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Commit body to use for the merge commit; if omitted, a default message will be used */
	commitBody?: string | undefined,
	/** Commit headline to use for the merge commit; if omitted, a default message will be used. */
	commitHeadline?: string | undefined,
	/** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
	expectedHeadOid?: GraphQLTypes["GitObjectID"] | undefined,
	/** The merge method to use. If omitted, defaults to 'MERGE' */
	mergeMethod?: GraphQLTypes["PullRequestMergeMethod"] | undefined,
	/** ID of the pull request to be merged. */
	pullRequestId: string
};
	/** Autogenerated return type of MergePullRequest */
["MergePullRequestPayload"]: {
	__typename: "MergePullRequestPayload",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that was merged. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Detailed status information about a pull request merge. */
["MergeStateStatus"]: MergeStateStatus;
	/** Whether or not a PullRequest can be merged. */
["MergeableState"]: MergeableState;
	/** Represents a 'merged' event on a given pull request. */
["MergedEvent"]: {
	__typename: "MergedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the commit associated with the `merge` event. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Identifies the Ref associated with the `merge` event. */
	mergeRef?: GraphQLTypes["Ref"] | undefined,
	/** Identifies the name of the Ref associated with the `merge` event. */
	mergeRefName: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The HTTP path for this merged event. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this merged event. */
	url: GraphQLTypes["URI"]
};
	/** Represents an Octoshift migration. */
["Migration"]: {
	__typename:"RepositoryMigration",
	/** The Octoshift migration flag to continue on error. */
	continueOnError: boolean,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: string | undefined,
	/** The reason the migration failed. */
	failureReason?: string | undefined,
	id: string,
	/** The URL for the migration log (expires 1 day after migration completes). */
	migrationLogUrl?: GraphQLTypes["URI"] | undefined,
	/** The Octoshift migration source. */
	migrationSource: GraphQLTypes["MigrationSource"],
	/** The target repository name. */
	repositoryName: string,
	/** The Octoshift migration source URL. */
	sourceUrl: GraphQLTypes["URI"],
	/** The Octoshift migration state. */
	state: GraphQLTypes["MigrationState"]
	['...on RepositoryMigration']: '__union' & GraphQLTypes["RepositoryMigration"];
};
	/** An Octoshift migration source. */
["MigrationSource"]: {
	__typename: "MigrationSource",
	id: string,
	/** The Octoshift migration source name. */
	name: string,
	/** The Octoshift migration source type. */
	type: GraphQLTypes["MigrationSourceType"],
	/** The Octoshift migration source URL. */
	url: GraphQLTypes["URI"]
};
	/** Represents the different Octoshift migration sources. */
["MigrationSourceType"]: MigrationSourceType;
	/** The Octoshift migration state. */
["MigrationState"]: MigrationState;
	/** Represents a Milestone object on a given repository. */
["Milestone"]: {
	__typename: "Milestone",
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the actor who created the milestone. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the description of the milestone. */
	description?: string | undefined,
	/** Identifies the due date of the milestone. */
	dueOn?: GraphQLTypes["DateTime"] | undefined,
	id: string,
	/** A list of issues associated with the milestone. */
	issues: GraphQLTypes["IssueConnection"],
	/** Identifies the number of the milestone. */
	number: number,
	/** Identifies the percentage complete for the milestone */
	progressPercentage: number,
	/** A list of pull requests associated with the milestone. */
	pullRequests: GraphQLTypes["PullRequestConnection"],
	/** The repository associated with this milestone. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this milestone */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the state of the milestone. */
	state: GraphQLTypes["MilestoneState"],
	/** Identifies the title of the milestone. */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this milestone */
	url: GraphQLTypes["URI"]
};
	/** The connection type for Milestone. */
["MilestoneConnection"]: {
	__typename: "MilestoneConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["MilestoneEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Milestone"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["MilestoneEdge"]: {
	__typename: "MilestoneEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Milestone"] | undefined
};
	/** Types that can be inside a Milestone. */
["MilestoneItem"]:{
        	__typename:"Issue" | "PullRequest"
        	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** Ordering options for milestone connections. */
["MilestoneOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order milestones by. */
	field: GraphQLTypes["MilestoneOrderField"]
};
	/** Properties by which milestone connections can be ordered. */
["MilestoneOrderField"]: MilestoneOrderField;
	/** The possible states of a milestone. */
["MilestoneState"]: MilestoneState;
	/** Represents a 'milestoned' event on a given issue or pull request. */
["MilestonedEvent"]: {
	__typename: "MilestonedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Identifies the milestone title associated with the 'milestoned' event. */
	milestoneTitle: string,
	/** Object referenced by event. */
	subject: GraphQLTypes["MilestoneItem"]
};
	/** Entities that can be minimized. */
["Minimizable"]: {
	__typename:"CommitComment" | "DiscussionComment" | "GistComment" | "IssueComment" | "PullRequestReviewComment",
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean
	['...on CommitComment']: '__union' & GraphQLTypes["CommitComment"];
	['...on DiscussionComment']: '__union' & GraphQLTypes["DiscussionComment"];
	['...on GistComment']: '__union' & GraphQLTypes["GistComment"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on PullRequestReviewComment']: '__union' & GraphQLTypes["PullRequestReviewComment"];
};
	/** Autogenerated input type of MinimizeComment */
["MinimizeCommentInput"]: {
		/** The classification of comment */
	classifier: GraphQLTypes["ReportedContentClassifiers"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of MinimizeComment */
["MinimizeCommentPayload"]: {
	__typename: "MinimizeCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The comment that was minimized. */
	minimizedComment?: GraphQLTypes["Minimizable"] | undefined
};
	/** Autogenerated input type of MoveProjectCard */
["MoveProjectCardInput"]: {
		/** Place the new card after the card with this id. Pass null to place it at the top. */
	afterCardId?: string | undefined,
	/** The id of the card to move. */
	cardId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the column to move it into. */
	columnId: string
};
	/** Autogenerated return type of MoveProjectCard */
["MoveProjectCardPayload"]: {
	__typename: "MoveProjectCardPayload",
	/** The new edge of the moved card. */
	cardEdge?: GraphQLTypes["ProjectCardEdge"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of MoveProjectColumn */
["MoveProjectColumnInput"]: {
		/** Place the new column after the column with this id. Pass null to place it at the front. */
	afterColumnId?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the column to move. */
	columnId: string
};
	/** Autogenerated return type of MoveProjectColumn */
["MoveProjectColumnPayload"]: {
	__typename: "MoveProjectColumnPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new edge of the moved column. */
	columnEdge?: GraphQLTypes["ProjectColumnEdge"] | undefined
};
	/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
["MovedColumnsInProjectEvent"]: {
	__typename: "MovedColumnsInProjectEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Column name the issue or pull request was moved from. */
	previousProjectColumnName: string,
	/** Project referenced by event. */
	project?: GraphQLTypes["Project"] | undefined,
	/** Project card referenced by this project event. */
	projectCard?: GraphQLTypes["ProjectCard"] | undefined,
	/** Column name the issue or pull request was moved to. */
	projectColumnName: string
};
	/** The root query for implementing GraphQL mutations. */
["Mutation"]: {
	__typename: "Mutation",
	/** Clear all of a customer's queued migrations */
	abortQueuedMigrations?: GraphQLTypes["AbortQueuedMigrationsPayload"] | undefined,
	/** Accepts a pending invitation for a user to become an administrator of an enterprise. */
	acceptEnterpriseAdministratorInvitation?: GraphQLTypes["AcceptEnterpriseAdministratorInvitationPayload"] | undefined,
	/** Applies a suggested topic to the repository. */
	acceptTopicSuggestion?: GraphQLTypes["AcceptTopicSuggestionPayload"] | undefined,
	/** Adds assignees to an assignable object. */
	addAssigneesToAssignable?: GraphQLTypes["AddAssigneesToAssignablePayload"] | undefined,
	/** Adds a comment to an Issue or Pull Request. */
	addComment?: GraphQLTypes["AddCommentPayload"] | undefined,
	/** Adds a comment to a Discussion, possibly as a reply to another comment. */
	addDiscussionComment?: GraphQLTypes["AddDiscussionCommentPayload"] | undefined,
	/** Vote for an option in a discussion poll. */
	addDiscussionPollVote?: GraphQLTypes["AddDiscussionPollVotePayload"] | undefined,
	/** Adds a support entitlement to an enterprise member. */
	addEnterpriseSupportEntitlement?: GraphQLTypes["AddEnterpriseSupportEntitlementPayload"] | undefined,
	/** Adds labels to a labelable object. */
	addLabelsToLabelable?: GraphQLTypes["AddLabelsToLabelablePayload"] | undefined,
	/** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
	addProjectCard?: GraphQLTypes["AddProjectCardPayload"] | undefined,
	/** Adds a column to a Project. */
	addProjectColumn?: GraphQLTypes["AddProjectColumnPayload"] | undefined,
	/** Creates a new draft issue and add it to a Project. */
	addProjectDraftIssue?: GraphQLTypes["AddProjectDraftIssuePayload"] | undefined,
	/** Adds an existing item (Issue or PullRequest) to a Project. */
	addProjectNextItem?: GraphQLTypes["AddProjectNextItemPayload"] | undefined,
	/** Creates a new draft issue and add it to a Project. */
	addProjectV2DraftIssue?: GraphQLTypes["AddProjectV2DraftIssuePayload"] | undefined,
	/** Links an existing content instance to a Project. */
	addProjectV2ItemById?: GraphQLTypes["AddProjectV2ItemByIdPayload"] | undefined,
	/** Adds a review to a Pull Request. */
	addPullRequestReview?: GraphQLTypes["AddPullRequestReviewPayload"] | undefined,
	/** Adds a comment to a review. */
	addPullRequestReviewComment?: GraphQLTypes["AddPullRequestReviewCommentPayload"] | undefined,
	/** Adds a new thread to a pending Pull Request Review. */
	addPullRequestReviewThread?: GraphQLTypes["AddPullRequestReviewThreadPayload"] | undefined,
	/** Adds a reaction to a subject. */
	addReaction?: GraphQLTypes["AddReactionPayload"] | undefined,
	/** Adds a star to a Starrable. */
	addStar?: GraphQLTypes["AddStarPayload"] | undefined,
	/** Add an upvote to a discussion or discussion comment. */
	addUpvote?: GraphQLTypes["AddUpvotePayload"] | undefined,
	/** Adds a verifiable domain to an owning account. */
	addVerifiableDomain?: GraphQLTypes["AddVerifiableDomainPayload"] | undefined,
	/** Approve all pending deployments under one or more environments */
	approveDeployments?: GraphQLTypes["ApproveDeploymentsPayload"] | undefined,
	/** Approve a verifiable domain for notification delivery. */
	approveVerifiableDomain?: GraphQLTypes["ApproveVerifiableDomainPayload"] | undefined,
	/** Marks a repository as archived. */
	archiveRepository?: GraphQLTypes["ArchiveRepositoryPayload"] | undefined,
	/** Cancels a pending invitation for an administrator to join an enterprise. */
	cancelEnterpriseAdminInvitation?: GraphQLTypes["CancelEnterpriseAdminInvitationPayload"] | undefined,
	/** Cancel an active sponsorship. */
	cancelSponsorship?: GraphQLTypes["CancelSponsorshipPayload"] | undefined,
	/** Update your status on GitHub. */
	changeUserStatus?: GraphQLTypes["ChangeUserStatusPayload"] | undefined,
	/** Clears all labels from a labelable object. */
	clearLabelsFromLabelable?: GraphQLTypes["ClearLabelsFromLabelablePayload"] | undefined,
	/** This mutation clears the value of a field for an item in a Project. Currently
only text, number, date, assignees, labels, single-select, iteration and
milestone fields are supported. */
	clearProjectV2ItemFieldValue?: GraphQLTypes["ClearProjectV2ItemFieldValuePayload"] | undefined,
	/** Creates a new project by cloning configuration from an existing project. */
	cloneProject?: GraphQLTypes["CloneProjectPayload"] | undefined,
	/** Create a new repository with the same files and directory structure as a template repository. */
	cloneTemplateRepository?: GraphQLTypes["CloneTemplateRepositoryPayload"] | undefined,
	/** Close an issue. */
	closeIssue?: GraphQLTypes["CloseIssuePayload"] | undefined,
	/** Close a pull request. */
	closePullRequest?: GraphQLTypes["ClosePullRequestPayload"] | undefined,
	/** Convert a project note card to one associated with a newly created issue. */
	convertProjectCardNoteToIssue?: GraphQLTypes["ConvertProjectCardNoteToIssuePayload"] | undefined,
	/** Converts a pull request to draft */
	convertPullRequestToDraft?: GraphQLTypes["ConvertPullRequestToDraftPayload"] | undefined,
	/** Create a new branch protection rule */
	createBranchProtectionRule?: GraphQLTypes["CreateBranchProtectionRulePayload"] | undefined,
	/** Create a check run. */
	createCheckRun?: GraphQLTypes["CreateCheckRunPayload"] | undefined,
	/** Create a check suite */
	createCheckSuite?: GraphQLTypes["CreateCheckSuitePayload"] | undefined,
	/** Appends a commit to the given branch as the authenticated user.

This mutation creates a commit whose parent is the HEAD of the provided
branch and also updates that branch to point to the new commit.
It can be thought of as similar to `git commit`.

### Locating a Branch

Commits are appended to a `branch` of type `Ref`.
This must refer to a git branch (i.e.  the fully qualified path must
begin with `refs/heads/`, although including this prefix is optional.

Callers may specify the `branch` to commit to either by its global node
ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
more details see the documentation for `CommittableBranch`.

### Describing Changes

`fileChanges` are specified as a `FilesChanges` object describing
`FileAdditions` and `FileDeletions`.

Please see the documentation for `FileChanges` for more information on
how to use this argument to describe any set of file changes.

### Authorship

Similar to the web commit interface, this mutation does not support
specifying the author or committer of the commit and will not add
support for this in the future.

A commit created by a successful execution of this mutation will be
authored by the owner of the credential which authenticates the API
request.  The committer will be identical to that of commits authored
using the web interface.

If you need full control over author and committer information, please
use the Git Database REST API instead.

### Commit Signing

Commits made using this mutation are automatically signed by GitHub if
supported and will be marked as verified in the user interface. */
	createCommitOnBranch?: GraphQLTypes["CreateCommitOnBranchPayload"] | undefined,
	/** Creates a new deployment event. */
	createDeployment?: GraphQLTypes["CreateDeploymentPayload"] | undefined,
	/** Create a deployment status. */
	createDeploymentStatus?: GraphQLTypes["CreateDeploymentStatusPayload"] | undefined,
	/** Create a discussion. */
	createDiscussion?: GraphQLTypes["CreateDiscussionPayload"] | undefined,
	/** Creates an organization as part of an enterprise account. */
	createEnterpriseOrganization?: GraphQLTypes["CreateEnterpriseOrganizationPayload"] | undefined,
	/** Creates an environment or simply returns it if already exists. */
	createEnvironment?: GraphQLTypes["CreateEnvironmentPayload"] | undefined,
	/** Creates a new IP allow list entry. */
	createIpAllowListEntry?: GraphQLTypes["CreateIpAllowListEntryPayload"] | undefined,
	/** Creates a new issue. */
	createIssue?: GraphQLTypes["CreateIssuePayload"] | undefined,
	/** Creates a new label. */
	createLabel?: GraphQLTypes["CreateLabelPayload"] | undefined,
	/** Create a branch linked to an issue. */
	createLinkedBranch?: GraphQLTypes["CreateLinkedBranchPayload"] | undefined,
	/** Creates an Octoshift migration source. */
	createMigrationSource?: GraphQLTypes["CreateMigrationSourcePayload"] | undefined,
	/** Creates a new project. */
	createProject?: GraphQLTypes["CreateProjectPayload"] | undefined,
	/** Creates a new project. */
	createProjectV2?: GraphQLTypes["CreateProjectV2Payload"] | undefined,
	/** Create a new pull request */
	createPullRequest?: GraphQLTypes["CreatePullRequestPayload"] | undefined,
	/** Create a new Git Ref. */
	createRef?: GraphQLTypes["CreateRefPayload"] | undefined,
	/** Create a new repository. */
	createRepository?: GraphQLTypes["CreateRepositoryPayload"] | undefined,
	/** Create a new payment tier for your GitHub Sponsors profile. */
	createSponsorsTier?: GraphQLTypes["CreateSponsorsTierPayload"] | undefined,
	/** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
	createSponsorship?: GraphQLTypes["CreateSponsorshipPayload"] | undefined,
	/** Creates a new team discussion. */
	createTeamDiscussion?: GraphQLTypes["CreateTeamDiscussionPayload"] | undefined,
	/** Creates a new team discussion comment. */
	createTeamDiscussionComment?: GraphQLTypes["CreateTeamDiscussionCommentPayload"] | undefined,
	/** Rejects a suggested topic for the repository. */
	declineTopicSuggestion?: GraphQLTypes["DeclineTopicSuggestionPayload"] | undefined,
	/** Delete a branch protection rule */
	deleteBranchProtectionRule?: GraphQLTypes["DeleteBranchProtectionRulePayload"] | undefined,
	/** Deletes a deployment. */
	deleteDeployment?: GraphQLTypes["DeleteDeploymentPayload"] | undefined,
	/** Delete a discussion and all of its replies. */
	deleteDiscussion?: GraphQLTypes["DeleteDiscussionPayload"] | undefined,
	/** Delete a discussion comment. If it has replies, wipe it instead. */
	deleteDiscussionComment?: GraphQLTypes["DeleteDiscussionCommentPayload"] | undefined,
	/** Deletes an environment */
	deleteEnvironment?: GraphQLTypes["DeleteEnvironmentPayload"] | undefined,
	/** Deletes an IP allow list entry. */
	deleteIpAllowListEntry?: GraphQLTypes["DeleteIpAllowListEntryPayload"] | undefined,
	/** Deletes an Issue object. */
	deleteIssue?: GraphQLTypes["DeleteIssuePayload"] | undefined,
	/** Deletes an IssueComment object. */
	deleteIssueComment?: GraphQLTypes["DeleteIssueCommentPayload"] | undefined,
	/** Deletes a label. */
	deleteLabel?: GraphQLTypes["DeleteLabelPayload"] | undefined,
	/** Unlink a branch from an issue. */
	deleteLinkedBranch?: GraphQLTypes["DeleteLinkedBranchPayload"] | undefined,
	/** Delete a package version. */
	deletePackageVersion?: GraphQLTypes["DeletePackageVersionPayload"] | undefined,
	/** Deletes a project. */
	deleteProject?: GraphQLTypes["DeleteProjectPayload"] | undefined,
	/** Deletes a project card. */
	deleteProjectCard?: GraphQLTypes["DeleteProjectCardPayload"] | undefined,
	/** Deletes a project column. */
	deleteProjectColumn?: GraphQLTypes["DeleteProjectColumnPayload"] | undefined,
	/** Deletes an item from a Project. */
	deleteProjectNextItem?: GraphQLTypes["DeleteProjectNextItemPayload"] | undefined,
	/** Deletes an item from a Project. */
	deleteProjectV2Item?: GraphQLTypes["DeleteProjectV2ItemPayload"] | undefined,
	/** Deletes a pull request review. */
	deletePullRequestReview?: GraphQLTypes["DeletePullRequestReviewPayload"] | undefined,
	/** Deletes a pull request review comment. */
	deletePullRequestReviewComment?: GraphQLTypes["DeletePullRequestReviewCommentPayload"] | undefined,
	/** Delete a Git Ref. */
	deleteRef?: GraphQLTypes["DeleteRefPayload"] | undefined,
	/** Deletes a team discussion. */
	deleteTeamDiscussion?: GraphQLTypes["DeleteTeamDiscussionPayload"] | undefined,
	/** Deletes a team discussion comment. */
	deleteTeamDiscussionComment?: GraphQLTypes["DeleteTeamDiscussionCommentPayload"] | undefined,
	/** Deletes a verifiable domain. */
	deleteVerifiableDomain?: GraphQLTypes["DeleteVerifiableDomainPayload"] | undefined,
	/** Disable auto merge on the given pull request */
	disablePullRequestAutoMerge?: GraphQLTypes["DisablePullRequestAutoMergePayload"] | undefined,
	/** Dismisses an approved or rejected pull request review. */
	dismissPullRequestReview?: GraphQLTypes["DismissPullRequestReviewPayload"] | undefined,
	/** Dismisses the Dependabot alert. */
	dismissRepositoryVulnerabilityAlert?: GraphQLTypes["DismissRepositoryVulnerabilityAlertPayload"] | undefined,
	/** Enable the default auto-merge on a pull request. */
	enablePullRequestAutoMerge?: GraphQLTypes["EnablePullRequestAutoMergePayload"] | undefined,
	/** Follow an organization. */
	followOrganization?: GraphQLTypes["FollowOrganizationPayload"] | undefined,
	/** Follow a user. */
	followUser?: GraphQLTypes["FollowUserPayload"] | undefined,
	/** Grant the migrator role to a user for all organizations under an enterprise account. */
	grantEnterpriseOrganizationsMigratorRole?: GraphQLTypes["GrantEnterpriseOrganizationsMigratorRolePayload"] | undefined,
	/** Grant the migrator role to a user or a team. */
	grantMigratorRole?: GraphQLTypes["GrantMigratorRolePayload"] | undefined,
	/** Creates a new project by importing columns and a list of issues/PRs. */
	importProject?: GraphQLTypes["ImportProjectPayload"] | undefined,
	/** Invite someone to become an administrator of the enterprise. */
	inviteEnterpriseAdmin?: GraphQLTypes["InviteEnterpriseAdminPayload"] | undefined,
	/** Creates a repository link for a project. */
	linkRepositoryToProject?: GraphQLTypes["LinkRepositoryToProjectPayload"] | undefined,
	/** Lock a lockable object */
	lockLockable?: GraphQLTypes["LockLockablePayload"] | undefined,
	/** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
	markDiscussionCommentAsAnswer?: GraphQLTypes["MarkDiscussionCommentAsAnswerPayload"] | undefined,
	/** Mark a pull request file as viewed */
	markFileAsViewed?: GraphQLTypes["MarkFileAsViewedPayload"] | undefined,
	/** Marks a pull request ready for review. */
	markPullRequestReadyForReview?: GraphQLTypes["MarkPullRequestReadyForReviewPayload"] | undefined,
	/** Merge a head into a branch. */
	mergeBranch?: GraphQLTypes["MergeBranchPayload"] | undefined,
	/** Merge a pull request. */
	mergePullRequest?: GraphQLTypes["MergePullRequestPayload"] | undefined,
	/** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
	minimizeComment?: GraphQLTypes["MinimizeCommentPayload"] | undefined,
	/** Moves a project card to another place. */
	moveProjectCard?: GraphQLTypes["MoveProjectCardPayload"] | undefined,
	/** Moves a project column to another place. */
	moveProjectColumn?: GraphQLTypes["MoveProjectColumnPayload"] | undefined,
	/** Pin an issue to a repository */
	pinIssue?: GraphQLTypes["PinIssuePayload"] | undefined,
	/** Regenerates the identity provider recovery codes for an enterprise */
	regenerateEnterpriseIdentityProviderRecoveryCodes?: GraphQLTypes["RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"] | undefined,
	/** Regenerates a verifiable domain's verification token. */
	regenerateVerifiableDomainToken?: GraphQLTypes["RegenerateVerifiableDomainTokenPayload"] | undefined,
	/** Reject all pending deployments under one or more environments */
	rejectDeployments?: GraphQLTypes["RejectDeploymentsPayload"] | undefined,
	/** Removes assignees from an assignable object. */
	removeAssigneesFromAssignable?: GraphQLTypes["RemoveAssigneesFromAssignablePayload"] | undefined,
	/** Removes an administrator from the enterprise. */
	removeEnterpriseAdmin?: GraphQLTypes["RemoveEnterpriseAdminPayload"] | undefined,
	/** Removes the identity provider from an enterprise */
	removeEnterpriseIdentityProvider?: GraphQLTypes["RemoveEnterpriseIdentityProviderPayload"] | undefined,
	/** Removes an organization from the enterprise */
	removeEnterpriseOrganization?: GraphQLTypes["RemoveEnterpriseOrganizationPayload"] | undefined,
	/** Removes a support entitlement from an enterprise member. */
	removeEnterpriseSupportEntitlement?: GraphQLTypes["RemoveEnterpriseSupportEntitlementPayload"] | undefined,
	/** Removes labels from a Labelable object. */
	removeLabelsFromLabelable?: GraphQLTypes["RemoveLabelsFromLabelablePayload"] | undefined,
	/** Removes outside collaborator from all repositories in an organization. */
	removeOutsideCollaborator?: GraphQLTypes["RemoveOutsideCollaboratorPayload"] | undefined,
	/** Removes a reaction from a subject. */
	removeReaction?: GraphQLTypes["RemoveReactionPayload"] | undefined,
	/** Removes a star from a Starrable. */
	removeStar?: GraphQLTypes["RemoveStarPayload"] | undefined,
	/** Remove an upvote to a discussion or discussion comment. */
	removeUpvote?: GraphQLTypes["RemoveUpvotePayload"] | undefined,
	/** Reopen a issue. */
	reopenIssue?: GraphQLTypes["ReopenIssuePayload"] | undefined,
	/** Reopen a pull request. */
	reopenPullRequest?: GraphQLTypes["ReopenPullRequestPayload"] | undefined,
	/** Set review requests on a pull request. */
	requestReviews?: GraphQLTypes["RequestReviewsPayload"] | undefined,
	/** Rerequests an existing check suite. */
	rerequestCheckSuite?: GraphQLTypes["RerequestCheckSuitePayload"] | undefined,
	/** Marks a review thread as resolved. */
	resolveReviewThread?: GraphQLTypes["ResolveReviewThreadPayload"] | undefined,
	/** Revoke the migrator role to a user for all organizations under an enterprise account. */
	revokeEnterpriseOrganizationsMigratorRole?: GraphQLTypes["RevokeEnterpriseOrganizationsMigratorRolePayload"] | undefined,
	/** Revoke the migrator role from a user or a team. */
	revokeMigratorRole?: GraphQLTypes["RevokeMigratorRolePayload"] | undefined,
	/** Creates or updates the identity provider for an enterprise. */
	setEnterpriseIdentityProvider?: GraphQLTypes["SetEnterpriseIdentityProviderPayload"] | undefined,
	/** Set an organization level interaction limit for an organization's public repositories. */
	setOrganizationInteractionLimit?: GraphQLTypes["SetOrganizationInteractionLimitPayload"] | undefined,
	/** Sets an interaction limit setting for a repository. */
	setRepositoryInteractionLimit?: GraphQLTypes["SetRepositoryInteractionLimitPayload"] | undefined,
	/** Set a user level interaction limit for an user's public repositories. */
	setUserInteractionLimit?: GraphQLTypes["SetUserInteractionLimitPayload"] | undefined,
	/** Start a repository migration. */
	startRepositoryMigration?: GraphQLTypes["StartRepositoryMigrationPayload"] | undefined,
	/** Submits a pending pull request review. */
	submitPullRequestReview?: GraphQLTypes["SubmitPullRequestReviewPayload"] | undefined,
	/** Transfer an issue to a different repository */
	transferIssue?: GraphQLTypes["TransferIssuePayload"] | undefined,
	/** Unarchives a repository. */
	unarchiveRepository?: GraphQLTypes["UnarchiveRepositoryPayload"] | undefined,
	/** Unfollow an organization. */
	unfollowOrganization?: GraphQLTypes["UnfollowOrganizationPayload"] | undefined,
	/** Unfollow a user. */
	unfollowUser?: GraphQLTypes["UnfollowUserPayload"] | undefined,
	/** Deletes a repository link from a project. */
	unlinkRepositoryFromProject?: GraphQLTypes["UnlinkRepositoryFromProjectPayload"] | undefined,
	/** Unlock a lockable object */
	unlockLockable?: GraphQLTypes["UnlockLockablePayload"] | undefined,
	/** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
	unmarkDiscussionCommentAsAnswer?: GraphQLTypes["UnmarkDiscussionCommentAsAnswerPayload"] | undefined,
	/** Unmark a pull request file as viewed */
	unmarkFileAsViewed?: GraphQLTypes["UnmarkFileAsViewedPayload"] | undefined,
	/** Unmark an issue as a duplicate of another issue. */
	unmarkIssueAsDuplicate?: GraphQLTypes["UnmarkIssueAsDuplicatePayload"] | undefined,
	/** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
	unminimizeComment?: GraphQLTypes["UnminimizeCommentPayload"] | undefined,
	/** Unpin a pinned issue from a repository */
	unpinIssue?: GraphQLTypes["UnpinIssuePayload"] | undefined,
	/** Marks a review thread as unresolved. */
	unresolveReviewThread?: GraphQLTypes["UnresolveReviewThreadPayload"] | undefined,
	/** Update a branch protection rule */
	updateBranchProtectionRule?: GraphQLTypes["UpdateBranchProtectionRulePayload"] | undefined,
	/** Update a check run */
	updateCheckRun?: GraphQLTypes["UpdateCheckRunPayload"] | undefined,
	/** Modifies the settings of an existing check suite */
	updateCheckSuitePreferences?: GraphQLTypes["UpdateCheckSuitePreferencesPayload"] | undefined,
	/** Update a discussion */
	updateDiscussion?: GraphQLTypes["UpdateDiscussionPayload"] | undefined,
	/** Update the contents of a comment on a Discussion */
	updateDiscussionComment?: GraphQLTypes["UpdateDiscussionCommentPayload"] | undefined,
	/** Updates the role of an enterprise administrator. */
	updateEnterpriseAdministratorRole?: GraphQLTypes["UpdateEnterpriseAdministratorRolePayload"] | undefined,
	/** Sets whether private repository forks are enabled for an enterprise. */
	updateEnterpriseAllowPrivateRepositoryForkingSetting?: GraphQLTypes["UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"] | undefined,
	/** Sets the base repository permission for organizations in an enterprise. */
	updateEnterpriseDefaultRepositoryPermissionSetting?: GraphQLTypes["UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"] | undefined,
	/** Sets whether organization members with admin permissions on a repository can change repository visibility. */
	updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: GraphQLTypes["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"] | undefined,
	/** Sets the members can create repositories setting for an enterprise. */
	updateEnterpriseMembersCanCreateRepositoriesSetting?: GraphQLTypes["UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"] | undefined,
	/** Sets the members can delete issues setting for an enterprise. */
	updateEnterpriseMembersCanDeleteIssuesSetting?: GraphQLTypes["UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"] | undefined,
	/** Sets the members can delete repositories setting for an enterprise. */
	updateEnterpriseMembersCanDeleteRepositoriesSetting?: GraphQLTypes["UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"] | undefined,
	/** Sets whether members can invite collaborators are enabled for an enterprise. */
	updateEnterpriseMembersCanInviteCollaboratorsSetting?: GraphQLTypes["UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"] | undefined,
	/** Sets whether or not an organization admin can make purchases. */
	updateEnterpriseMembersCanMakePurchasesSetting?: GraphQLTypes["UpdateEnterpriseMembersCanMakePurchasesSettingPayload"] | undefined,
	/** Sets the members can update protected branches setting for an enterprise. */
	updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: GraphQLTypes["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"] | undefined,
	/** Sets the members can view dependency insights for an enterprise. */
	updateEnterpriseMembersCanViewDependencyInsightsSetting?: GraphQLTypes["UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"] | undefined,
	/** Sets whether organization projects are enabled for an enterprise. */
	updateEnterpriseOrganizationProjectsSetting?: GraphQLTypes["UpdateEnterpriseOrganizationProjectsSettingPayload"] | undefined,
	/** Updates the role of an enterprise owner with an organization. */
	updateEnterpriseOwnerOrganizationRole?: GraphQLTypes["UpdateEnterpriseOwnerOrganizationRolePayload"] | undefined,
	/** Updates an enterprise's profile. */
	updateEnterpriseProfile?: GraphQLTypes["UpdateEnterpriseProfilePayload"] | undefined,
	/** Sets whether repository projects are enabled for a enterprise. */
	updateEnterpriseRepositoryProjectsSetting?: GraphQLTypes["UpdateEnterpriseRepositoryProjectsSettingPayload"] | undefined,
	/** Sets whether team discussions are enabled for an enterprise. */
	updateEnterpriseTeamDiscussionsSetting?: GraphQLTypes["UpdateEnterpriseTeamDiscussionsSettingPayload"] | undefined,
	/** Sets whether two factor authentication is required for all users in an enterprise. */
	updateEnterpriseTwoFactorAuthenticationRequiredSetting?: GraphQLTypes["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"] | undefined,
	/** Updates an environment. */
	updateEnvironment?: GraphQLTypes["UpdateEnvironmentPayload"] | undefined,
	/** Sets whether an IP allow list is enabled on an owner. */
	updateIpAllowListEnabledSetting?: GraphQLTypes["UpdateIpAllowListEnabledSettingPayload"] | undefined,
	/** Updates an IP allow list entry. */
	updateIpAllowListEntry?: GraphQLTypes["UpdateIpAllowListEntryPayload"] | undefined,
	/** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
	updateIpAllowListForInstalledAppsEnabledSetting?: GraphQLTypes["UpdateIpAllowListForInstalledAppsEnabledSettingPayload"] | undefined,
	/** Updates an Issue. */
	updateIssue?: GraphQLTypes["UpdateIssuePayload"] | undefined,
	/** Updates an IssueComment object. */
	updateIssueComment?: GraphQLTypes["UpdateIssueCommentPayload"] | undefined,
	/** Updates an existing label. */
	updateLabel?: GraphQLTypes["UpdateLabelPayload"] | undefined,
	/** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
	updateNotificationRestrictionSetting?: GraphQLTypes["UpdateNotificationRestrictionSettingPayload"] | undefined,
	/** Sets whether private repository forks are enabled for an organization. */
	updateOrganizationAllowPrivateRepositoryForkingSetting?: GraphQLTypes["UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"] | undefined,
	/** Sets whether contributors are required to sign off on web-based commits for repositories in an organization. */
	updateOrganizationWebCommitSignoffSetting?: GraphQLTypes["UpdateOrganizationWebCommitSignoffSettingPayload"] | undefined,
	/** Updates an existing project. */
	updateProject?: GraphQLTypes["UpdateProjectPayload"] | undefined,
	/** Updates an existing project card. */
	updateProjectCard?: GraphQLTypes["UpdateProjectCardPayload"] | undefined,
	/** Updates an existing project column. */
	updateProjectColumn?: GraphQLTypes["UpdateProjectColumnPayload"] | undefined,
	/** Updates a draft issue within a Project. */
	updateProjectDraftIssue?: GraphQLTypes["UpdateProjectDraftIssuePayload"] | undefined,
	/** Updates an existing project (beta). */
	updateProjectNext?: GraphQLTypes["UpdateProjectNextPayload"] | undefined,
	/** Updates a field of an item from a Project. */
	updateProjectNextItemField?: GraphQLTypes["UpdateProjectNextItemFieldPayload"] | undefined,
	/** Updates an existing project (beta). */
	updateProjectV2?: GraphQLTypes["UpdateProjectV2Payload"] | undefined,
	/** Updates a draft issue within a Project. */
	updateProjectV2DraftIssue?: GraphQLTypes["UpdateProjectV2DraftIssuePayload"] | undefined,
	/** This mutation updates the value of a field for an item in a Project. Currently
only single-select, text, number, date, and iteration fields are supported. */
	updateProjectV2ItemFieldValue?: GraphQLTypes["UpdateProjectV2ItemFieldValuePayload"] | undefined,
	/** This mutation updates the position of the item in the project, where the position represents the priority of an item. */
	updateProjectV2ItemPosition?: GraphQLTypes["UpdateProjectV2ItemPositionPayload"] | undefined,
	/** Update a pull request */
	updatePullRequest?: GraphQLTypes["UpdatePullRequestPayload"] | undefined,
	/** Merge or Rebase HEAD from upstream branch into pull request branch */
	updatePullRequestBranch?: GraphQLTypes["UpdatePullRequestBranchPayload"] | undefined,
	/** Updates the body of a pull request review. */
	updatePullRequestReview?: GraphQLTypes["UpdatePullRequestReviewPayload"] | undefined,
	/** Updates a pull request review comment. */
	updatePullRequestReviewComment?: GraphQLTypes["UpdatePullRequestReviewCommentPayload"] | undefined,
	/** Update a Git Ref. */
	updateRef?: GraphQLTypes["UpdateRefPayload"] | undefined,
	/** Creates, updates and/or deletes multiple refs in a repository.

This mutation takes a list of `RefUpdate`s and performs these updates
on the repository. All updates are performed atomically, meaning that
if one of them is rejected, no other ref will be modified.

`RefUpdate.beforeOid` specifies that the given reference needs to point
to the given value before performing any updates. A value of
`0000000000000000000000000000000000000000` can be used to verify that
the references should not exist.

`RefUpdate.afterOid` specifies the value that the given reference
will point to after performing all updates. A value of
`0000000000000000000000000000000000000000` can be used to delete a
reference.

If `RefUpdate.force` is set to `true`, a non-fast-forward updates
for the given reference will be allowed. */
	updateRefs?: GraphQLTypes["UpdateRefsPayload"] | undefined,
	/** Update information about a repository. */
	updateRepository?: GraphQLTypes["UpdateRepositoryPayload"] | undefined,
	/** Sets whether contributors are required to sign off on web-based commits for a repository. */
	updateRepositoryWebCommitSignoffSetting?: GraphQLTypes["UpdateRepositoryWebCommitSignoffSettingPayload"] | undefined,
	/** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
	updateSponsorshipPreferences?: GraphQLTypes["UpdateSponsorshipPreferencesPayload"] | undefined,
	/** Updates the state for subscribable subjects. */
	updateSubscription?: GraphQLTypes["UpdateSubscriptionPayload"] | undefined,
	/** Updates a team discussion. */
	updateTeamDiscussion?: GraphQLTypes["UpdateTeamDiscussionPayload"] | undefined,
	/** Updates a discussion comment. */
	updateTeamDiscussionComment?: GraphQLTypes["UpdateTeamDiscussionCommentPayload"] | undefined,
	/** Updates team review assignment. */
	updateTeamReviewAssignment?: GraphQLTypes["UpdateTeamReviewAssignmentPayload"] | undefined,
	/** Update team repository. */
	updateTeamsRepository?: GraphQLTypes["UpdateTeamsRepositoryPayload"] | undefined,
	/** Replaces the repository's topics with the given topics. */
	updateTopics?: GraphQLTypes["UpdateTopicsPayload"] | undefined,
	/** Verify that a verifiable domain has the expected DNS record. */
	verifyVerifiableDomain?: GraphQLTypes["VerifyVerifiableDomainPayload"] | undefined
};
	/** An object with an ID. */
["Node"]: {
	__typename:"AddedToProjectEvent" | "App" | "AssignedEvent" | "AutoMergeDisabledEvent" | "AutoMergeEnabledEvent" | "AutoRebaseEnabledEvent" | "AutoSquashEnabledEvent" | "AutomaticBaseChangeFailedEvent" | "AutomaticBaseChangeSucceededEvent" | "BaseRefChangedEvent" | "BaseRefDeletedEvent" | "BaseRefForcePushedEvent" | "Blob" | "Bot" | "BranchProtectionRule" | "BypassForcePushAllowance" | "BypassPullRequestAllowance" | "CWE" | "CheckRun" | "CheckSuite" | "ClosedEvent" | "CodeOfConduct" | "CommentDeletedEvent" | "Commit" | "CommitComment" | "CommitCommentThread" | "Comparison" | "ConnectedEvent" | "ConvertToDraftEvent" | "ConvertedNoteToIssueEvent" | "ConvertedToDiscussionEvent" | "CrossReferencedEvent" | "DemilestonedEvent" | "DependencyGraphManifest" | "DeployKey" | "DeployedEvent" | "Deployment" | "DeploymentEnvironmentChangedEvent" | "DeploymentReview" | "DeploymentStatus" | "DisconnectedEvent" | "Discussion" | "DiscussionCategory" | "DiscussionComment" | "DiscussionPoll" | "DiscussionPollOption" | "DraftIssue" | "Enterprise" | "EnterpriseAdministratorInvitation" | "EnterpriseIdentityProvider" | "EnterpriseRepositoryInfo" | "EnterpriseServerInstallation" | "EnterpriseServerUserAccount" | "EnterpriseServerUserAccountEmail" | "EnterpriseServerUserAccountsUpload" | "EnterpriseUserAccount" | "Environment" | "ExternalIdentity" | "Gist" | "GistComment" | "HeadRefDeletedEvent" | "HeadRefForcePushedEvent" | "HeadRefRestoredEvent" | "IpAllowListEntry" | "Issue" | "IssueComment" | "Label" | "LabeledEvent" | "Language" | "License" | "LinkedBranch" | "LockedEvent" | "Mannequin" | "MarkedAsDuplicateEvent" | "MarketplaceCategory" | "MarketplaceListing" | "MembersCanDeleteReposClearAuditEntry" | "MembersCanDeleteReposDisableAuditEntry" | "MembersCanDeleteReposEnableAuditEntry" | "MentionedEvent" | "MergedEvent" | "MigrationSource" | "Milestone" | "MilestonedEvent" | "MovedColumnsInProjectEvent" | "OIDCProvider" | "OauthApplicationCreateAuditEntry" | "OrgAddBillingManagerAuditEntry" | "OrgAddMemberAuditEntry" | "OrgBlockUserAuditEntry" | "OrgConfigDisableCollaboratorsOnlyAuditEntry" | "OrgConfigEnableCollaboratorsOnlyAuditEntry" | "OrgCreateAuditEntry" | "OrgDisableOauthAppRestrictionsAuditEntry" | "OrgDisableSamlAuditEntry" | "OrgDisableTwoFactorRequirementAuditEntry" | "OrgEnableOauthAppRestrictionsAuditEntry" | "OrgEnableSamlAuditEntry" | "OrgEnableTwoFactorRequirementAuditEntry" | "OrgInviteMemberAuditEntry" | "OrgInviteToBusinessAuditEntry" | "OrgOauthAppAccessApprovedAuditEntry" | "OrgOauthAppAccessDeniedAuditEntry" | "OrgOauthAppAccessRequestedAuditEntry" | "OrgRemoveBillingManagerAuditEntry" | "OrgRemoveMemberAuditEntry" | "OrgRemoveOutsideCollaboratorAuditEntry" | "OrgRestoreMemberAuditEntry" | "OrgUnblockUserAuditEntry" | "OrgUpdateDefaultRepositoryPermissionAuditEntry" | "OrgUpdateMemberAuditEntry" | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" | "Organization" | "OrganizationIdentityProvider" | "OrganizationInvitation" | "Package" | "PackageFile" | "PackageTag" | "PackageVersion" | "PinnedDiscussion" | "PinnedEvent" | "PinnedIssue" | "PrivateRepositoryForkingDisableAuditEntry" | "PrivateRepositoryForkingEnableAuditEntry" | "Project" | "ProjectCard" | "ProjectColumn" | "ProjectNext" | "ProjectNextField" | "ProjectNextItem" | "ProjectNextItemFieldValue" | "ProjectV2" | "ProjectV2Field" | "ProjectV2Item" | "ProjectV2ItemFieldDateValue" | "ProjectV2ItemFieldIterationValue" | "ProjectV2ItemFieldNumberValue" | "ProjectV2ItemFieldSingleSelectValue" | "ProjectV2ItemFieldTextValue" | "ProjectV2IterationField" | "ProjectV2SingleSelectField" | "ProjectV2View" | "ProjectView" | "PublicKey" | "PullRequest" | "PullRequestCommit" | "PullRequestCommitCommentThread" | "PullRequestReview" | "PullRequestReviewComment" | "PullRequestReviewThread" | "PullRequestThread" | "Push" | "PushAllowance" | "Reaction" | "ReadyForReviewEvent" | "Ref" | "ReferencedEvent" | "Release" | "ReleaseAsset" | "RemovedFromProjectEvent" | "RenamedTitleEvent" | "ReopenedEvent" | "RepoAccessAuditEntry" | "RepoAddMemberAuditEntry" | "RepoAddTopicAuditEntry" | "RepoArchivedAuditEntry" | "RepoChangeMergeSettingAuditEntry" | "RepoConfigDisableAnonymousGitAccessAuditEntry" | "RepoConfigDisableCollaboratorsOnlyAuditEntry" | "RepoConfigDisableContributorsOnlyAuditEntry" | "RepoConfigDisableSockpuppetDisallowedAuditEntry" | "RepoConfigEnableAnonymousGitAccessAuditEntry" | "RepoConfigEnableCollaboratorsOnlyAuditEntry" | "RepoConfigEnableContributorsOnlyAuditEntry" | "RepoConfigEnableSockpuppetDisallowedAuditEntry" | "RepoConfigLockAnonymousGitAccessAuditEntry" | "RepoConfigUnlockAnonymousGitAccessAuditEntry" | "RepoCreateAuditEntry" | "RepoDestroyAuditEntry" | "RepoRemoveMemberAuditEntry" | "RepoRemoveTopicAuditEntry" | "Repository" | "RepositoryInvitation" | "RepositoryMigration" | "RepositoryTopic" | "RepositoryVisibilityChangeDisableAuditEntry" | "RepositoryVisibilityChangeEnableAuditEntry" | "RepositoryVulnerabilityAlert" | "ReviewDismissalAllowance" | "ReviewDismissedEvent" | "ReviewRequest" | "ReviewRequestRemovedEvent" | "ReviewRequestedEvent" | "SavedReply" | "SecurityAdvisory" | "SponsorsActivity" | "SponsorsListing" | "SponsorsTier" | "Sponsorship" | "SponsorshipNewsletter" | "Status" | "StatusCheckRollup" | "StatusContext" | "SubscribedEvent" | "Tag" | "Team" | "TeamAddMemberAuditEntry" | "TeamAddRepositoryAuditEntry" | "TeamChangeParentTeamAuditEntry" | "TeamDiscussion" | "TeamDiscussionComment" | "TeamRemoveMemberAuditEntry" | "TeamRemoveRepositoryAuditEntry" | "Topic" | "TransferredEvent" | "Tree" | "UnassignedEvent" | "UnlabeledEvent" | "UnlockedEvent" | "UnmarkedAsDuplicateEvent" | "UnpinnedEvent" | "UnsubscribedEvent" | "User" | "UserBlockedEvent" | "UserContentEdit" | "UserStatus" | "VerifiableDomain" | "Workflow" | "WorkflowRun",
	/** ID of the object. */
	id: string
	['...on AddedToProjectEvent']: '__union' & GraphQLTypes["AddedToProjectEvent"];
	['...on App']: '__union' & GraphQLTypes["App"];
	['...on AssignedEvent']: '__union' & GraphQLTypes["AssignedEvent"];
	['...on AutoMergeDisabledEvent']: '__union' & GraphQLTypes["AutoMergeDisabledEvent"];
	['...on AutoMergeEnabledEvent']: '__union' & GraphQLTypes["AutoMergeEnabledEvent"];
	['...on AutoRebaseEnabledEvent']: '__union' & GraphQLTypes["AutoRebaseEnabledEvent"];
	['...on AutoSquashEnabledEvent']: '__union' & GraphQLTypes["AutoSquashEnabledEvent"];
	['...on AutomaticBaseChangeFailedEvent']: '__union' & GraphQLTypes["AutomaticBaseChangeFailedEvent"];
	['...on AutomaticBaseChangeSucceededEvent']: '__union' & GraphQLTypes["AutomaticBaseChangeSucceededEvent"];
	['...on BaseRefChangedEvent']: '__union' & GraphQLTypes["BaseRefChangedEvent"];
	['...on BaseRefDeletedEvent']: '__union' & GraphQLTypes["BaseRefDeletedEvent"];
	['...on BaseRefForcePushedEvent']: '__union' & GraphQLTypes["BaseRefForcePushedEvent"];
	['...on Blob']: '__union' & GraphQLTypes["Blob"];
	['...on Bot']: '__union' & GraphQLTypes["Bot"];
	['...on BranchProtectionRule']: '__union' & GraphQLTypes["BranchProtectionRule"];
	['...on BypassForcePushAllowance']: '__union' & GraphQLTypes["BypassForcePushAllowance"];
	['...on BypassPullRequestAllowance']: '__union' & GraphQLTypes["BypassPullRequestAllowance"];
	['...on CWE']: '__union' & GraphQLTypes["CWE"];
	['...on CheckRun']: '__union' & GraphQLTypes["CheckRun"];
	['...on CheckSuite']: '__union' & GraphQLTypes["CheckSuite"];
	['...on ClosedEvent']: '__union' & GraphQLTypes["ClosedEvent"];
	['...on CodeOfConduct']: '__union' & GraphQLTypes["CodeOfConduct"];
	['...on CommentDeletedEvent']: '__union' & GraphQLTypes["CommentDeletedEvent"];
	['...on Commit']: '__union' & GraphQLTypes["Commit"];
	['...on CommitComment']: '__union' & GraphQLTypes["CommitComment"];
	['...on CommitCommentThread']: '__union' & GraphQLTypes["CommitCommentThread"];
	['...on Comparison']: '__union' & GraphQLTypes["Comparison"];
	['...on ConnectedEvent']: '__union' & GraphQLTypes["ConnectedEvent"];
	['...on ConvertToDraftEvent']: '__union' & GraphQLTypes["ConvertToDraftEvent"];
	['...on ConvertedNoteToIssueEvent']: '__union' & GraphQLTypes["ConvertedNoteToIssueEvent"];
	['...on ConvertedToDiscussionEvent']: '__union' & GraphQLTypes["ConvertedToDiscussionEvent"];
	['...on CrossReferencedEvent']: '__union' & GraphQLTypes["CrossReferencedEvent"];
	['...on DemilestonedEvent']: '__union' & GraphQLTypes["DemilestonedEvent"];
	['...on DependencyGraphManifest']: '__union' & GraphQLTypes["DependencyGraphManifest"];
	['...on DeployKey']: '__union' & GraphQLTypes["DeployKey"];
	['...on DeployedEvent']: '__union' & GraphQLTypes["DeployedEvent"];
	['...on Deployment']: '__union' & GraphQLTypes["Deployment"];
	['...on DeploymentEnvironmentChangedEvent']: '__union' & GraphQLTypes["DeploymentEnvironmentChangedEvent"];
	['...on DeploymentReview']: '__union' & GraphQLTypes["DeploymentReview"];
	['...on DeploymentStatus']: '__union' & GraphQLTypes["DeploymentStatus"];
	['...on DisconnectedEvent']: '__union' & GraphQLTypes["DisconnectedEvent"];
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on DiscussionCategory']: '__union' & GraphQLTypes["DiscussionCategory"];
	['...on DiscussionComment']: '__union' & GraphQLTypes["DiscussionComment"];
	['...on DiscussionPoll']: '__union' & GraphQLTypes["DiscussionPoll"];
	['...on DiscussionPollOption']: '__union' & GraphQLTypes["DiscussionPollOption"];
	['...on DraftIssue']: '__union' & GraphQLTypes["DraftIssue"];
	['...on Enterprise']: '__union' & GraphQLTypes["Enterprise"];
	['...on EnterpriseAdministratorInvitation']: '__union' & GraphQLTypes["EnterpriseAdministratorInvitation"];
	['...on EnterpriseIdentityProvider']: '__union' & GraphQLTypes["EnterpriseIdentityProvider"];
	['...on EnterpriseRepositoryInfo']: '__union' & GraphQLTypes["EnterpriseRepositoryInfo"];
	['...on EnterpriseServerInstallation']: '__union' & GraphQLTypes["EnterpriseServerInstallation"];
	['...on EnterpriseServerUserAccount']: '__union' & GraphQLTypes["EnterpriseServerUserAccount"];
	['...on EnterpriseServerUserAccountEmail']: '__union' & GraphQLTypes["EnterpriseServerUserAccountEmail"];
	['...on EnterpriseServerUserAccountsUpload']: '__union' & GraphQLTypes["EnterpriseServerUserAccountsUpload"];
	['...on EnterpriseUserAccount']: '__union' & GraphQLTypes["EnterpriseUserAccount"];
	['...on Environment']: '__union' & GraphQLTypes["Environment"];
	['...on ExternalIdentity']: '__union' & GraphQLTypes["ExternalIdentity"];
	['...on Gist']: '__union' & GraphQLTypes["Gist"];
	['...on GistComment']: '__union' & GraphQLTypes["GistComment"];
	['...on HeadRefDeletedEvent']: '__union' & GraphQLTypes["HeadRefDeletedEvent"];
	['...on HeadRefForcePushedEvent']: '__union' & GraphQLTypes["HeadRefForcePushedEvent"];
	['...on HeadRefRestoredEvent']: '__union' & GraphQLTypes["HeadRefRestoredEvent"];
	['...on IpAllowListEntry']: '__union' & GraphQLTypes["IpAllowListEntry"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on Label']: '__union' & GraphQLTypes["Label"];
	['...on LabeledEvent']: '__union' & GraphQLTypes["LabeledEvent"];
	['...on Language']: '__union' & GraphQLTypes["Language"];
	['...on License']: '__union' & GraphQLTypes["License"];
	['...on LinkedBranch']: '__union' & GraphQLTypes["LinkedBranch"];
	['...on LockedEvent']: '__union' & GraphQLTypes["LockedEvent"];
	['...on Mannequin']: '__union' & GraphQLTypes["Mannequin"];
	['...on MarkedAsDuplicateEvent']: '__union' & GraphQLTypes["MarkedAsDuplicateEvent"];
	['...on MarketplaceCategory']: '__union' & GraphQLTypes["MarketplaceCategory"];
	['...on MarketplaceListing']: '__union' & GraphQLTypes["MarketplaceListing"];
	['...on MembersCanDeleteReposClearAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposClearAuditEntry"];
	['...on MembersCanDeleteReposDisableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposDisableAuditEntry"];
	['...on MembersCanDeleteReposEnableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposEnableAuditEntry"];
	['...on MentionedEvent']: '__union' & GraphQLTypes["MentionedEvent"];
	['...on MergedEvent']: '__union' & GraphQLTypes["MergedEvent"];
	['...on MigrationSource']: '__union' & GraphQLTypes["MigrationSource"];
	['...on Milestone']: '__union' & GraphQLTypes["Milestone"];
	['...on MilestonedEvent']: '__union' & GraphQLTypes["MilestonedEvent"];
	['...on MovedColumnsInProjectEvent']: '__union' & GraphQLTypes["MovedColumnsInProjectEvent"];
	['...on OIDCProvider']: '__union' & GraphQLTypes["OIDCProvider"];
	['...on OauthApplicationCreateAuditEntry']: '__union' & GraphQLTypes["OauthApplicationCreateAuditEntry"];
	['...on OrgAddBillingManagerAuditEntry']: '__union' & GraphQLTypes["OrgAddBillingManagerAuditEntry"];
	['...on OrgAddMemberAuditEntry']: '__union' & GraphQLTypes["OrgAddMemberAuditEntry"];
	['...on OrgBlockUserAuditEntry']: '__union' & GraphQLTypes["OrgBlockUserAuditEntry"];
	['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"];
	['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"];
	['...on OrgCreateAuditEntry']: '__union' & GraphQLTypes["OrgCreateAuditEntry"];
	['...on OrgDisableOauthAppRestrictionsAuditEntry']: '__union' & GraphQLTypes["OrgDisableOauthAppRestrictionsAuditEntry"];
	['...on OrgDisableSamlAuditEntry']: '__union' & GraphQLTypes["OrgDisableSamlAuditEntry"];
	['...on OrgDisableTwoFactorRequirementAuditEntry']: '__union' & GraphQLTypes["OrgDisableTwoFactorRequirementAuditEntry"];
	['...on OrgEnableOauthAppRestrictionsAuditEntry']: '__union' & GraphQLTypes["OrgEnableOauthAppRestrictionsAuditEntry"];
	['...on OrgEnableSamlAuditEntry']: '__union' & GraphQLTypes["OrgEnableSamlAuditEntry"];
	['...on OrgEnableTwoFactorRequirementAuditEntry']: '__union' & GraphQLTypes["OrgEnableTwoFactorRequirementAuditEntry"];
	['...on OrgInviteMemberAuditEntry']: '__union' & GraphQLTypes["OrgInviteMemberAuditEntry"];
	['...on OrgInviteToBusinessAuditEntry']: '__union' & GraphQLTypes["OrgInviteToBusinessAuditEntry"];
	['...on OrgOauthAppAccessApprovedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessApprovedAuditEntry"];
	['...on OrgOauthAppAccessDeniedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessDeniedAuditEntry"];
	['...on OrgOauthAppAccessRequestedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessRequestedAuditEntry"];
	['...on OrgRemoveBillingManagerAuditEntry']: '__union' & GraphQLTypes["OrgRemoveBillingManagerAuditEntry"];
	['...on OrgRemoveMemberAuditEntry']: '__union' & GraphQLTypes["OrgRemoveMemberAuditEntry"];
	['...on OrgRemoveOutsideCollaboratorAuditEntry']: '__union' & GraphQLTypes["OrgRemoveOutsideCollaboratorAuditEntry"];
	['...on OrgRestoreMemberAuditEntry']: '__union' & GraphQLTypes["OrgRestoreMemberAuditEntry"];
	['...on OrgUnblockUserAuditEntry']: '__union' & GraphQLTypes["OrgUnblockUserAuditEntry"];
	['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"];
	['...on OrgUpdateMemberAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberAuditEntry"];
	['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"];
	['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on OrganizationIdentityProvider']: '__union' & GraphQLTypes["OrganizationIdentityProvider"];
	['...on OrganizationInvitation']: '__union' & GraphQLTypes["OrganizationInvitation"];
	['...on Package']: '__union' & GraphQLTypes["Package"];
	['...on PackageFile']: '__union' & GraphQLTypes["PackageFile"];
	['...on PackageTag']: '__union' & GraphQLTypes["PackageTag"];
	['...on PackageVersion']: '__union' & GraphQLTypes["PackageVersion"];
	['...on PinnedDiscussion']: '__union' & GraphQLTypes["PinnedDiscussion"];
	['...on PinnedEvent']: '__union' & GraphQLTypes["PinnedEvent"];
	['...on PinnedIssue']: '__union' & GraphQLTypes["PinnedIssue"];
	['...on PrivateRepositoryForkingDisableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingDisableAuditEntry"];
	['...on PrivateRepositoryForkingEnableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingEnableAuditEntry"];
	['...on Project']: '__union' & GraphQLTypes["Project"];
	['...on ProjectCard']: '__union' & GraphQLTypes["ProjectCard"];
	['...on ProjectColumn']: '__union' & GraphQLTypes["ProjectColumn"];
	['...on ProjectNext']: '__union' & GraphQLTypes["ProjectNext"];
	['...on ProjectNextField']: '__union' & GraphQLTypes["ProjectNextField"];
	['...on ProjectNextItem']: '__union' & GraphQLTypes["ProjectNextItem"];
	['...on ProjectNextItemFieldValue']: '__union' & GraphQLTypes["ProjectNextItemFieldValue"];
	['...on ProjectV2']: '__union' & GraphQLTypes["ProjectV2"];
	['...on ProjectV2Field']: '__union' & GraphQLTypes["ProjectV2Field"];
	['...on ProjectV2Item']: '__union' & GraphQLTypes["ProjectV2Item"];
	['...on ProjectV2ItemFieldDateValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldDateValue"];
	['...on ProjectV2ItemFieldIterationValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldIterationValue"];
	['...on ProjectV2ItemFieldNumberValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldNumberValue"];
	['...on ProjectV2ItemFieldSingleSelectValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldSingleSelectValue"];
	['...on ProjectV2ItemFieldTextValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldTextValue"];
	['...on ProjectV2IterationField']: '__union' & GraphQLTypes["ProjectV2IterationField"];
	['...on ProjectV2SingleSelectField']: '__union' & GraphQLTypes["ProjectV2SingleSelectField"];
	['...on ProjectV2View']: '__union' & GraphQLTypes["ProjectV2View"];
	['...on ProjectView']: '__union' & GraphQLTypes["ProjectView"];
	['...on PublicKey']: '__union' & GraphQLTypes["PublicKey"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on PullRequestCommit']: '__union' & GraphQLTypes["PullRequestCommit"];
	['...on PullRequestCommitCommentThread']: '__union' & GraphQLTypes["PullRequestCommitCommentThread"];
	['...on PullRequestReview']: '__union' & GraphQLTypes["PullRequestReview"];
	['...on PullRequestReviewComment']: '__union' & GraphQLTypes["PullRequestReviewComment"];
	['...on PullRequestReviewThread']: '__union' & GraphQLTypes["PullRequestReviewThread"];
	['...on PullRequestThread']: '__union' & GraphQLTypes["PullRequestThread"];
	['...on Push']: '__union' & GraphQLTypes["Push"];
	['...on PushAllowance']: '__union' & GraphQLTypes["PushAllowance"];
	['...on Reaction']: '__union' & GraphQLTypes["Reaction"];
	['...on ReadyForReviewEvent']: '__union' & GraphQLTypes["ReadyForReviewEvent"];
	['...on Ref']: '__union' & GraphQLTypes["Ref"];
	['...on ReferencedEvent']: '__union' & GraphQLTypes["ReferencedEvent"];
	['...on Release']: '__union' & GraphQLTypes["Release"];
	['...on ReleaseAsset']: '__union' & GraphQLTypes["ReleaseAsset"];
	['...on RemovedFromProjectEvent']: '__union' & GraphQLTypes["RemovedFromProjectEvent"];
	['...on RenamedTitleEvent']: '__union' & GraphQLTypes["RenamedTitleEvent"];
	['...on ReopenedEvent']: '__union' & GraphQLTypes["ReopenedEvent"];
	['...on RepoAccessAuditEntry']: '__union' & GraphQLTypes["RepoAccessAuditEntry"];
	['...on RepoAddMemberAuditEntry']: '__union' & GraphQLTypes["RepoAddMemberAuditEntry"];
	['...on RepoAddTopicAuditEntry']: '__union' & GraphQLTypes["RepoAddTopicAuditEntry"];
	['...on RepoArchivedAuditEntry']: '__union' & GraphQLTypes["RepoArchivedAuditEntry"];
	['...on RepoChangeMergeSettingAuditEntry']: '__union' & GraphQLTypes["RepoChangeMergeSettingAuditEntry"];
	['...on RepoConfigDisableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigDisableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableContributorsOnlyAuditEntry"];
	['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigEnableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigEnableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableContributorsOnlyAuditEntry"];
	['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigLockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigLockAnonymousGitAccessAuditEntry"];
	['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"];
	['...on RepoCreateAuditEntry']: '__union' & GraphQLTypes["RepoCreateAuditEntry"];
	['...on RepoDestroyAuditEntry']: '__union' & GraphQLTypes["RepoDestroyAuditEntry"];
	['...on RepoRemoveMemberAuditEntry']: '__union' & GraphQLTypes["RepoRemoveMemberAuditEntry"];
	['...on RepoRemoveTopicAuditEntry']: '__union' & GraphQLTypes["RepoRemoveTopicAuditEntry"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
	['...on RepositoryInvitation']: '__union' & GraphQLTypes["RepositoryInvitation"];
	['...on RepositoryMigration']: '__union' & GraphQLTypes["RepositoryMigration"];
	['...on RepositoryTopic']: '__union' & GraphQLTypes["RepositoryTopic"];
	['...on RepositoryVisibilityChangeDisableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeDisableAuditEntry"];
	['...on RepositoryVisibilityChangeEnableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeEnableAuditEntry"];
	['...on RepositoryVulnerabilityAlert']: '__union' & GraphQLTypes["RepositoryVulnerabilityAlert"];
	['...on ReviewDismissalAllowance']: '__union' & GraphQLTypes["ReviewDismissalAllowance"];
	['...on ReviewDismissedEvent']: '__union' & GraphQLTypes["ReviewDismissedEvent"];
	['...on ReviewRequest']: '__union' & GraphQLTypes["ReviewRequest"];
	['...on ReviewRequestRemovedEvent']: '__union' & GraphQLTypes["ReviewRequestRemovedEvent"];
	['...on ReviewRequestedEvent']: '__union' & GraphQLTypes["ReviewRequestedEvent"];
	['...on SavedReply']: '__union' & GraphQLTypes["SavedReply"];
	['...on SecurityAdvisory']: '__union' & GraphQLTypes["SecurityAdvisory"];
	['...on SponsorsActivity']: '__union' & GraphQLTypes["SponsorsActivity"];
	['...on SponsorsListing']: '__union' & GraphQLTypes["SponsorsListing"];
	['...on SponsorsTier']: '__union' & GraphQLTypes["SponsorsTier"];
	['...on Sponsorship']: '__union' & GraphQLTypes["Sponsorship"];
	['...on SponsorshipNewsletter']: '__union' & GraphQLTypes["SponsorshipNewsletter"];
	['...on Status']: '__union' & GraphQLTypes["Status"];
	['...on StatusCheckRollup']: '__union' & GraphQLTypes["StatusCheckRollup"];
	['...on StatusContext']: '__union' & GraphQLTypes["StatusContext"];
	['...on SubscribedEvent']: '__union' & GraphQLTypes["SubscribedEvent"];
	['...on Tag']: '__union' & GraphQLTypes["Tag"];
	['...on Team']: '__union' & GraphQLTypes["Team"];
	['...on TeamAddMemberAuditEntry']: '__union' & GraphQLTypes["TeamAddMemberAuditEntry"];
	['...on TeamAddRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamAddRepositoryAuditEntry"];
	['...on TeamChangeParentTeamAuditEntry']: '__union' & GraphQLTypes["TeamChangeParentTeamAuditEntry"];
	['...on TeamDiscussion']: '__union' & GraphQLTypes["TeamDiscussion"];
	['...on TeamDiscussionComment']: '__union' & GraphQLTypes["TeamDiscussionComment"];
	['...on TeamRemoveMemberAuditEntry']: '__union' & GraphQLTypes["TeamRemoveMemberAuditEntry"];
	['...on TeamRemoveRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamRemoveRepositoryAuditEntry"];
	['...on Topic']: '__union' & GraphQLTypes["Topic"];
	['...on TransferredEvent']: '__union' & GraphQLTypes["TransferredEvent"];
	['...on Tree']: '__union' & GraphQLTypes["Tree"];
	['...on UnassignedEvent']: '__union' & GraphQLTypes["UnassignedEvent"];
	['...on UnlabeledEvent']: '__union' & GraphQLTypes["UnlabeledEvent"];
	['...on UnlockedEvent']: '__union' & GraphQLTypes["UnlockedEvent"];
	['...on UnmarkedAsDuplicateEvent']: '__union' & GraphQLTypes["UnmarkedAsDuplicateEvent"];
	['...on UnpinnedEvent']: '__union' & GraphQLTypes["UnpinnedEvent"];
	['...on UnsubscribedEvent']: '__union' & GraphQLTypes["UnsubscribedEvent"];
	['...on User']: '__union' & GraphQLTypes["User"];
	['...on UserBlockedEvent']: '__union' & GraphQLTypes["UserBlockedEvent"];
	['...on UserContentEdit']: '__union' & GraphQLTypes["UserContentEdit"];
	['...on UserStatus']: '__union' & GraphQLTypes["UserStatus"];
	['...on VerifiableDomain']: '__union' & GraphQLTypes["VerifiableDomain"];
	['...on Workflow']: '__union' & GraphQLTypes["Workflow"];
	['...on WorkflowRun']: '__union' & GraphQLTypes["WorkflowRun"];
};
	/** The possible values for the notification restriction setting. */
["NotificationRestrictionSettingValue"]: NotificationRestrictionSettingValue;
	/** An OIDC identity provider configured to provision identities for an enterprise. */
["OIDCProvider"]: {
	__typename: "OIDCProvider",
	/** The enterprise this identity provider belongs to. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** ExternalIdentities provisioned by this identity provider. */
	externalIdentities: GraphQLTypes["ExternalIdentityConnection"],
	id: string,
	/** The OIDC identity provider type */
	providerType: GraphQLTypes["OIDCProviderType"],
	/** The id of the tenant this provider is attached to */
	tenantId: string
};
	/** The OIDC identity provider type */
["OIDCProviderType"]: OIDCProviderType;
	/** Metadata for an audit entry with action oauth_application.* */
["OauthApplicationAuditEntryData"]: {
	__typename:"OauthApplicationCreateAuditEntry" | "OrgOauthAppAccessApprovedAuditEntry" | "OrgOauthAppAccessDeniedAuditEntry" | "OrgOauthAppAccessRequestedAuditEntry",
	/** The name of the OAuth Application. */
	oauthApplicationName?: string | undefined,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?: GraphQLTypes["URI"] | undefined
	['...on OauthApplicationCreateAuditEntry']: '__union' & GraphQLTypes["OauthApplicationCreateAuditEntry"];
	['...on OrgOauthAppAccessApprovedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessApprovedAuditEntry"];
	['...on OrgOauthAppAccessDeniedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessDeniedAuditEntry"];
	['...on OrgOauthAppAccessRequestedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessRequestedAuditEntry"];
};
	/** Audit log entry for a oauth_application.create event. */
["OauthApplicationCreateAuditEntry"]: {
	__typename: "OauthApplicationCreateAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The application URL of the OAuth Application. */
	applicationUrl?: GraphQLTypes["URI"] | undefined,
	/** The callback URL of the OAuth Application. */
	callbackUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The name of the OAuth Application. */
	oauthApplicationName?: string | undefined,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?: GraphQLTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The rate limit of the OAuth Application. */
	rateLimit?: number | undefined,
	/** The state of the OAuth Application. */
	state?: GraphQLTypes["OauthApplicationCreateAuditEntryState"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The state of an OAuth Application when it was created. */
["OauthApplicationCreateAuditEntryState"]: OauthApplicationCreateAuditEntryState;
	/** The corresponding operation type for the action */
["OperationType"]: OperationType;
	/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
["OrderDirection"]: OrderDirection;
	/** Audit log entry for a org.add_billing_manager */
["OrgAddBillingManagerAuditEntry"]: {
	__typename: "OrgAddBillingManagerAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The email address used to invite a billing manager for the organization. */
	invitationEmail?: string | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.add_member */
["OrgAddMemberAuditEntry"]: {
	__typename: "OrgAddMemberAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The permission level of the member added to the organization. */
	permission?: GraphQLTypes["OrgAddMemberAuditEntryPermission"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The permissions available to members on an Organization. */
["OrgAddMemberAuditEntryPermission"]: OrgAddMemberAuditEntryPermission;
	/** Audit log entry for a org.block_user */
["OrgBlockUserAuditEntry"]: {
	__typename: "OrgBlockUserAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The blocked user. */
	blockedUser?: GraphQLTypes["User"] | undefined,
	/** The username of the blocked user. */
	blockedUserName?: string | undefined,
	/** The HTTP path for the blocked user. */
	blockedUserResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the blocked user. */
	blockedUserUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.config.disable_collaborators_only event. */
["OrgConfigDisableCollaboratorsOnlyAuditEntry"]: {
	__typename: "OrgConfigDisableCollaboratorsOnlyAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.config.enable_collaborators_only event. */
["OrgConfigEnableCollaboratorsOnlyAuditEntry"]: {
	__typename: "OrgConfigEnableCollaboratorsOnlyAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.create event. */
["OrgCreateAuditEntry"]: {
	__typename: "OrgCreateAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The billing plan for the Organization. */
	billingPlan?: GraphQLTypes["OrgCreateAuditEntryBillingPlan"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The billing plans available for organizations. */
["OrgCreateAuditEntryBillingPlan"]: OrgCreateAuditEntryBillingPlan;
	/** Audit log entry for a org.disable_oauth_app_restrictions event. */
["OrgDisableOauthAppRestrictionsAuditEntry"]: {
	__typename: "OrgDisableOauthAppRestrictionsAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.disable_saml event. */
["OrgDisableSamlAuditEntry"]: {
	__typename: "OrgDisableSamlAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The SAML provider's digest algorithm URL. */
	digestMethodUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The SAML provider's issuer URL. */
	issuerUrl?: GraphQLTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The SAML provider's signature algorithm URL. */
	signatureMethodUrl?: GraphQLTypes["URI"] | undefined,
	/** The SAML provider's single sign-on URL. */
	singleSignOnUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.disable_two_factor_requirement event. */
["OrgDisableTwoFactorRequirementAuditEntry"]: {
	__typename: "OrgDisableTwoFactorRequirementAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.enable_oauth_app_restrictions event. */
["OrgEnableOauthAppRestrictionsAuditEntry"]: {
	__typename: "OrgEnableOauthAppRestrictionsAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.enable_saml event. */
["OrgEnableSamlAuditEntry"]: {
	__typename: "OrgEnableSamlAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The SAML provider's digest algorithm URL. */
	digestMethodUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The SAML provider's issuer URL. */
	issuerUrl?: GraphQLTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The SAML provider's signature algorithm URL. */
	signatureMethodUrl?: GraphQLTypes["URI"] | undefined,
	/** The SAML provider's single sign-on URL. */
	singleSignOnUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.enable_two_factor_requirement event. */
["OrgEnableTwoFactorRequirementAuditEntry"]: {
	__typename: "OrgEnableTwoFactorRequirementAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Ordering options for an organization's enterprise owner connections. */
["OrgEnterpriseOwnerOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order enterprise owners by. */
	field: GraphQLTypes["OrgEnterpriseOwnerOrderField"]
};
	/** Properties by which enterprise owners can be ordered. */
["OrgEnterpriseOwnerOrderField"]: OrgEnterpriseOwnerOrderField;
	/** Audit log entry for a org.invite_member event. */
["OrgInviteMemberAuditEntry"]: {
	__typename: "OrgInviteMemberAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The email address of the organization invitation. */
	email?: string | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The organization invitation. */
	organizationInvitation?: GraphQLTypes["OrganizationInvitation"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.invite_to_business event. */
["OrgInviteToBusinessAuditEntry"]: {
	__typename: "OrgInviteToBusinessAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.oauth_app_access_approved event. */
["OrgOauthAppAccessApprovedAuditEntry"]: {
	__typename: "OrgOauthAppAccessApprovedAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The name of the OAuth Application. */
	oauthApplicationName?: string | undefined,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?: GraphQLTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.oauth_app_access_denied event. */
["OrgOauthAppAccessDeniedAuditEntry"]: {
	__typename: "OrgOauthAppAccessDeniedAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The name of the OAuth Application. */
	oauthApplicationName?: string | undefined,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?: GraphQLTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.oauth_app_access_requested event. */
["OrgOauthAppAccessRequestedAuditEntry"]: {
	__typename: "OrgOauthAppAccessRequestedAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The name of the OAuth Application. */
	oauthApplicationName?: string | undefined,
	/** The HTTP path for the OAuth Application */
	oauthApplicationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the OAuth Application */
	oauthApplicationUrl?: GraphQLTypes["URI"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.remove_billing_manager event. */
["OrgRemoveBillingManagerAuditEntry"]: {
	__typename: "OrgRemoveBillingManagerAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The reason for the billing manager being removed. */
	reason?: GraphQLTypes["OrgRemoveBillingManagerAuditEntryReason"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The reason a billing manager was removed from an Organization. */
["OrgRemoveBillingManagerAuditEntryReason"]: OrgRemoveBillingManagerAuditEntryReason;
	/** Audit log entry for a org.remove_member event. */
["OrgRemoveMemberAuditEntry"]: {
	__typename: "OrgRemoveMemberAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The types of membership the member has with the organization. */
	membershipTypes?: Array<GraphQLTypes["OrgRemoveMemberAuditEntryMembershipType"]> | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The reason for the member being removed. */
	reason?: GraphQLTypes["OrgRemoveMemberAuditEntryReason"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The type of membership a user has with an Organization. */
["OrgRemoveMemberAuditEntryMembershipType"]: OrgRemoveMemberAuditEntryMembershipType;
	/** The reason a member was removed from an Organization. */
["OrgRemoveMemberAuditEntryReason"]: OrgRemoveMemberAuditEntryReason;
	/** Audit log entry for a org.remove_outside_collaborator event. */
["OrgRemoveOutsideCollaboratorAuditEntry"]: {
	__typename: "OrgRemoveOutsideCollaboratorAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The types of membership the outside collaborator has with the organization. */
	membershipTypes?: Array<GraphQLTypes["OrgRemoveOutsideCollaboratorAuditEntryMembershipType"]> | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The reason for the outside collaborator being removed from the Organization. */
	reason?: GraphQLTypes["OrgRemoveOutsideCollaboratorAuditEntryReason"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The type of membership a user has with an Organization. */
["OrgRemoveOutsideCollaboratorAuditEntryMembershipType"]: OrgRemoveOutsideCollaboratorAuditEntryMembershipType;
	/** The reason an outside collaborator was removed from an Organization. */
["OrgRemoveOutsideCollaboratorAuditEntryReason"]: OrgRemoveOutsideCollaboratorAuditEntryReason;
	/** Audit log entry for a org.restore_member event. */
["OrgRestoreMemberAuditEntry"]: {
	__typename: "OrgRestoreMemberAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The number of custom email routings for the restored member. */
	restoredCustomEmailRoutingsCount?: number | undefined,
	/** The number of issue assignments for the restored member. */
	restoredIssueAssignmentsCount?: number | undefined,
	/** Restored organization membership objects. */
	restoredMemberships?: Array<GraphQLTypes["OrgRestoreMemberAuditEntryMembership"]> | undefined,
	/** The number of restored memberships. */
	restoredMembershipsCount?: number | undefined,
	/** The number of repositories of the restored member. */
	restoredRepositoriesCount?: number | undefined,
	/** The number of starred repositories for the restored member. */
	restoredRepositoryStarsCount?: number | undefined,
	/** The number of watched repositories for the restored member. */
	restoredRepositoryWatchesCount?: number | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Types of memberships that can be restored for an Organization member. */
["OrgRestoreMemberAuditEntryMembership"]:{
        	__typename:"OrgRestoreMemberMembershipOrganizationAuditEntryData" | "OrgRestoreMemberMembershipRepositoryAuditEntryData" | "OrgRestoreMemberMembershipTeamAuditEntryData"
        	['...on OrgRestoreMemberMembershipOrganizationAuditEntryData']: '__union' & GraphQLTypes["OrgRestoreMemberMembershipOrganizationAuditEntryData"];
	['...on OrgRestoreMemberMembershipRepositoryAuditEntryData']: '__union' & GraphQLTypes["OrgRestoreMemberMembershipRepositoryAuditEntryData"];
	['...on OrgRestoreMemberMembershipTeamAuditEntryData']: '__union' & GraphQLTypes["OrgRestoreMemberMembershipTeamAuditEntryData"];
};
	/** Metadata for an organization membership for org.restore_member actions */
["OrgRestoreMemberMembershipOrganizationAuditEntryData"]: {
	__typename: "OrgRestoreMemberMembershipOrganizationAuditEntryData",
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined
};
	/** Metadata for a repository membership for org.restore_member actions */
["OrgRestoreMemberMembershipRepositoryAuditEntryData"]: {
	__typename: "OrgRestoreMemberMembershipRepositoryAuditEntryData",
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined
};
	/** Metadata for a team membership for org.restore_member actions */
["OrgRestoreMemberMembershipTeamAuditEntryData"]: {
	__typename: "OrgRestoreMemberMembershipTeamAuditEntryData",
	/** The team associated with the action */
	team?: GraphQLTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.unblock_user */
["OrgUnblockUserAuditEntry"]: {
	__typename: "OrgUnblockUserAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The user being unblocked by the organization. */
	blockedUser?: GraphQLTypes["User"] | undefined,
	/** The username of the blocked user. */
	blockedUserName?: string | undefined,
	/** The HTTP path for the blocked user. */
	blockedUserResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the blocked user. */
	blockedUserUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a org.update_default_repository_permission */
["OrgUpdateDefaultRepositoryPermissionAuditEntry"]: {
	__typename: "OrgUpdateDefaultRepositoryPermissionAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The new base repository permission level for the organization. */
	permission?: GraphQLTypes["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"] | undefined,
	/** The former base repository permission level for the organization. */
	permissionWas?: GraphQLTypes["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The default permission a repository can have in an Organization. */
["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"]: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission;
	/** Audit log entry for a org.update_member event. */
["OrgUpdateMemberAuditEntry"]: {
	__typename: "OrgUpdateMemberAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The new member permission level for the organization. */
	permission?: GraphQLTypes["OrgUpdateMemberAuditEntryPermission"] | undefined,
	/** The former member permission level for the organization. */
	permissionWas?: GraphQLTypes["OrgUpdateMemberAuditEntryPermission"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The permissions available to members on an Organization. */
["OrgUpdateMemberAuditEntryPermission"]: OrgUpdateMemberAuditEntryPermission;
	/** Audit log entry for a org.update_member_repository_creation_permission event. */
["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"]: {
	__typename: "OrgUpdateMemberRepositoryCreationPermissionAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** Can members create repositories in the organization. */
	canCreateRepositories?: boolean | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined,
	/** The permission for visibility level of repositories for this organization. */
	visibility?: GraphQLTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"] | undefined
};
	/** The permissions available for repository creation on an Organization. */
["OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"]: OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility;
	/** Audit log entry for a org.update_member_repository_invitation_permission event. */
["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"]: {
	__typename: "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** Can outside collaborators be invited to repositories in the organization. */
	canInviteOutsideCollaboratorsToRepositories?: boolean | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
["Organization"]: {
	__typename: "Organization",
	/** Determine if this repository owner has any items that can be pinned to their profile. */
	anyPinnableItems: boolean,
	/** Audit log entries of the organization */
	auditLog: GraphQLTypes["OrganizationAuditEntryConnection"],
	/** A URL pointing to the organization's public avatar. */
	avatarUrl: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The organization's public profile description. */
	description?: string | undefined,
	/** The organization's public profile description rendered to HTML. */
	descriptionHTML?: string | undefined,
	/** A list of domains owned by the organization. */
	domains?: GraphQLTypes["VerifiableDomainConnection"] | undefined,
	/** The organization's public email. */
	email?: string | undefined,
	/** A list of owners of the organization's enterprise account. */
	enterpriseOwners: GraphQLTypes["OrganizationEnterpriseOwnerConnection"],
	/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents: number,
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing: boolean,
	id: string,
	/** The interaction ability settings for this organization. */
	interactionAbility?: GraphQLTypes["RepositoryInteractionAbility"] | undefined,
	/** The setting value for whether the organization has an IP allow list enabled. */
	ipAllowListEnabledSetting: GraphQLTypes["IpAllowListEnabledSettingValue"],
	/** The IP addresses that are allowed to access resources owned by the organization. */
	ipAllowListEntries: GraphQLTypes["IpAllowListEntryConnection"],
	/** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
	ipAllowListForInstalledAppsEnabledSetting: GraphQLTypes["IpAllowListForInstalledAppsEnabledSettingValue"],
	/** Check if the given account is sponsoring this user/organization. */
	isSponsoredBy: boolean,
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer: boolean,
	/** Whether the organization has verified its profile email and website. */
	isVerified: boolean,
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase: GraphQLTypes["ProfileItemShowcase"],
	/** The organization's public profile location. */
	location?: string | undefined,
	/** The organization's login name. */
	login: string,
	/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
	memberStatuses: GraphQLTypes["UserStatusConnection"],
	/** Members can fork private repositories in this organization */
	membersCanForkPrivateRepositories: boolean,
	/** A list of users who are members of this organization. */
	membersWithRole: GraphQLTypes["OrganizationMemberConnection"],
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents: number,
	/** The organization's public profile name. */
	name?: string | undefined,
	/** The HTTP path creating a new team */
	newTeamResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL creating a new team */
	newTeamUrl: GraphQLTypes["URI"],
	/** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
	notificationDeliveryRestrictionEnabledSetting: GraphQLTypes["NotificationRestrictionSettingValue"],
	/** The billing email for the organization. */
	organizationBillingEmail?: string | undefined,
	/** A list of packages under the owner. */
	packages: GraphQLTypes["PackageConnection"],
	/** A list of users who have been invited to join this organization. */
	pendingMembers: GraphQLTypes["UserConnection"],
	/** A list of repositories and gists this profile owner can pin to their profile. */
	pinnableItems: GraphQLTypes["PinnableItemConnection"],
	/** A list of repositories and gists this profile owner has pinned to their profile */
	pinnedItems: GraphQLTypes["PinnableItemConnection"],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining: number,
	/** Find project by number. */
	project?: GraphQLTypes["Project"] | undefined,
	/** Find a project by project (beta) number. */
	projectNext?: GraphQLTypes["ProjectNext"] | undefined,
	/** Find a project by number. */
	projectV2?: GraphQLTypes["ProjectV2"] | undefined,
	/** A list of projects under the owner. */
	projects: GraphQLTypes["ProjectConnection"],
	/** A list of projects (beta) under the owner. */
	projectsNext: GraphQLTypes["ProjectNextConnection"],
	/** The HTTP path listing organization's projects */
	projectsResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL listing organization's projects */
	projectsUrl: GraphQLTypes["URI"],
	/** A list of projects under the owner. */
	projectsV2: GraphQLTypes["ProjectV2Connection"],
	/** Recent projects that this user has modified in the context of the owner. */
	recentProjects: GraphQLTypes["ProjectV2Connection"],
	/** A list of repositories that the user owns. */
	repositories: GraphQLTypes["RepositoryConnection"],
	/** Find Repository. */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** Discussion comments this user has authored. */
	repositoryDiscussionComments: GraphQLTypes["DiscussionCommentConnection"],
	/** Discussions this user has started. */
	repositoryDiscussions: GraphQLTypes["DiscussionConnection"],
	/** A list of all repository migrations for this organization. */
	repositoryMigrations: GraphQLTypes["RepositoryMigrationConnection"],
	/** When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication. */
	requiresTwoFactorAuthentication?: boolean | undefined,
	/** The HTTP path for this organization. */
	resourcePath: GraphQLTypes["URI"],
	/** The Organization's SAML identity providers */
	samlIdentityProvider?: GraphQLTypes["OrganizationIdentityProvider"] | undefined,
	/** List of users and organizations this entity is sponsoring. */
	sponsoring: GraphQLTypes["SponsorConnection"],
	/** List of sponsors for this user or organization. */
	sponsors: GraphQLTypes["SponsorConnection"],
	/** Events involving this sponsorable, such as new sponsorships. */
	sponsorsActivities: GraphQLTypes["SponsorsActivityConnection"],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?: GraphQLTypes["SponsorsListing"] | undefined,
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?: GraphQLTypes["Sponsorship"] | undefined,
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?: GraphQLTypes["Sponsorship"] | undefined,
	/** List of sponsorship updates sent from this sponsorable to sponsors. */
	sponsorshipNewsletters: GraphQLTypes["SponsorshipNewsletterConnection"],
	/** This object's sponsorships as the maintainer. */
	sponsorshipsAsMaintainer: GraphQLTypes["SponsorshipConnection"],
	/** This object's sponsorships as the sponsor. */
	sponsorshipsAsSponsor: GraphQLTypes["SponsorshipConnection"],
	/** Find an organization's team by its slug. */
	team?: GraphQLTypes["Team"] | undefined,
	/** A list of teams in this organization. */
	teams: GraphQLTypes["TeamConnection"],
	/** The HTTP path listing organization's teams */
	teamsResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL listing organization's teams */
	teamsUrl: GraphQLTypes["URI"],
	/** The organization's Twitter username. */
	twitterUsername?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this organization. */
	url: GraphQLTypes["URI"],
	/** Organization is adminable by the viewer. */
	viewerCanAdminister: boolean,
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems: boolean,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects: boolean,
	/** Viewer can create repositories on this organization */
	viewerCanCreateRepositories: boolean,
	/** Viewer can create teams on this organization. */
	viewerCanCreateTeams: boolean,
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor: boolean,
	/** Viewer is an active member of this organization. */
	viewerIsAMember: boolean,
	/** Whether or not this Organization is followed by the viewer. */
	viewerIsFollowing: boolean,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring: boolean,
	/** Whether contributors are required to sign off on web-based commits for repositories in this organization. */
	webCommitSignoffRequired: boolean,
	/** The organization's public profile URL. */
	websiteUrl?: GraphQLTypes["URI"] | undefined
};
	/** An audit entry in an organization audit log. */
["OrganizationAuditEntry"]:{
        	__typename:"MembersCanDeleteReposClearAuditEntry" | "MembersCanDeleteReposDisableAuditEntry" | "MembersCanDeleteReposEnableAuditEntry" | "OauthApplicationCreateAuditEntry" | "OrgAddBillingManagerAuditEntry" | "OrgAddMemberAuditEntry" | "OrgBlockUserAuditEntry" | "OrgConfigDisableCollaboratorsOnlyAuditEntry" | "OrgConfigEnableCollaboratorsOnlyAuditEntry" | "OrgCreateAuditEntry" | "OrgDisableOauthAppRestrictionsAuditEntry" | "OrgDisableSamlAuditEntry" | "OrgDisableTwoFactorRequirementAuditEntry" | "OrgEnableOauthAppRestrictionsAuditEntry" | "OrgEnableSamlAuditEntry" | "OrgEnableTwoFactorRequirementAuditEntry" | "OrgInviteMemberAuditEntry" | "OrgInviteToBusinessAuditEntry" | "OrgOauthAppAccessApprovedAuditEntry" | "OrgOauthAppAccessDeniedAuditEntry" | "OrgOauthAppAccessRequestedAuditEntry" | "OrgRemoveBillingManagerAuditEntry" | "OrgRemoveMemberAuditEntry" | "OrgRemoveOutsideCollaboratorAuditEntry" | "OrgRestoreMemberAuditEntry" | "OrgUnblockUserAuditEntry" | "OrgUpdateDefaultRepositoryPermissionAuditEntry" | "OrgUpdateMemberAuditEntry" | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" | "PrivateRepositoryForkingDisableAuditEntry" | "PrivateRepositoryForkingEnableAuditEntry" | "RepoAccessAuditEntry" | "RepoAddMemberAuditEntry" | "RepoAddTopicAuditEntry" | "RepoArchivedAuditEntry" | "RepoChangeMergeSettingAuditEntry" | "RepoConfigDisableAnonymousGitAccessAuditEntry" | "RepoConfigDisableCollaboratorsOnlyAuditEntry" | "RepoConfigDisableContributorsOnlyAuditEntry" | "RepoConfigDisableSockpuppetDisallowedAuditEntry" | "RepoConfigEnableAnonymousGitAccessAuditEntry" | "RepoConfigEnableCollaboratorsOnlyAuditEntry" | "RepoConfigEnableContributorsOnlyAuditEntry" | "RepoConfigEnableSockpuppetDisallowedAuditEntry" | "RepoConfigLockAnonymousGitAccessAuditEntry" | "RepoConfigUnlockAnonymousGitAccessAuditEntry" | "RepoCreateAuditEntry" | "RepoDestroyAuditEntry" | "RepoRemoveMemberAuditEntry" | "RepoRemoveTopicAuditEntry" | "RepositoryVisibilityChangeDisableAuditEntry" | "RepositoryVisibilityChangeEnableAuditEntry" | "TeamAddMemberAuditEntry" | "TeamAddRepositoryAuditEntry" | "TeamChangeParentTeamAuditEntry" | "TeamRemoveMemberAuditEntry" | "TeamRemoveRepositoryAuditEntry"
        	['...on MembersCanDeleteReposClearAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposClearAuditEntry"];
	['...on MembersCanDeleteReposDisableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposDisableAuditEntry"];
	['...on MembersCanDeleteReposEnableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposEnableAuditEntry"];
	['...on OauthApplicationCreateAuditEntry']: '__union' & GraphQLTypes["OauthApplicationCreateAuditEntry"];
	['...on OrgAddBillingManagerAuditEntry']: '__union' & GraphQLTypes["OrgAddBillingManagerAuditEntry"];
	['...on OrgAddMemberAuditEntry']: '__union' & GraphQLTypes["OrgAddMemberAuditEntry"];
	['...on OrgBlockUserAuditEntry']: '__union' & GraphQLTypes["OrgBlockUserAuditEntry"];
	['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"];
	['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"];
	['...on OrgCreateAuditEntry']: '__union' & GraphQLTypes["OrgCreateAuditEntry"];
	['...on OrgDisableOauthAppRestrictionsAuditEntry']: '__union' & GraphQLTypes["OrgDisableOauthAppRestrictionsAuditEntry"];
	['...on OrgDisableSamlAuditEntry']: '__union' & GraphQLTypes["OrgDisableSamlAuditEntry"];
	['...on OrgDisableTwoFactorRequirementAuditEntry']: '__union' & GraphQLTypes["OrgDisableTwoFactorRequirementAuditEntry"];
	['...on OrgEnableOauthAppRestrictionsAuditEntry']: '__union' & GraphQLTypes["OrgEnableOauthAppRestrictionsAuditEntry"];
	['...on OrgEnableSamlAuditEntry']: '__union' & GraphQLTypes["OrgEnableSamlAuditEntry"];
	['...on OrgEnableTwoFactorRequirementAuditEntry']: '__union' & GraphQLTypes["OrgEnableTwoFactorRequirementAuditEntry"];
	['...on OrgInviteMemberAuditEntry']: '__union' & GraphQLTypes["OrgInviteMemberAuditEntry"];
	['...on OrgInviteToBusinessAuditEntry']: '__union' & GraphQLTypes["OrgInviteToBusinessAuditEntry"];
	['...on OrgOauthAppAccessApprovedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessApprovedAuditEntry"];
	['...on OrgOauthAppAccessDeniedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessDeniedAuditEntry"];
	['...on OrgOauthAppAccessRequestedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessRequestedAuditEntry"];
	['...on OrgRemoveBillingManagerAuditEntry']: '__union' & GraphQLTypes["OrgRemoveBillingManagerAuditEntry"];
	['...on OrgRemoveMemberAuditEntry']: '__union' & GraphQLTypes["OrgRemoveMemberAuditEntry"];
	['...on OrgRemoveOutsideCollaboratorAuditEntry']: '__union' & GraphQLTypes["OrgRemoveOutsideCollaboratorAuditEntry"];
	['...on OrgRestoreMemberAuditEntry']: '__union' & GraphQLTypes["OrgRestoreMemberAuditEntry"];
	['...on OrgUnblockUserAuditEntry']: '__union' & GraphQLTypes["OrgUnblockUserAuditEntry"];
	['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"];
	['...on OrgUpdateMemberAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberAuditEntry"];
	['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"];
	['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"];
	['...on PrivateRepositoryForkingDisableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingDisableAuditEntry"];
	['...on PrivateRepositoryForkingEnableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingEnableAuditEntry"];
	['...on RepoAccessAuditEntry']: '__union' & GraphQLTypes["RepoAccessAuditEntry"];
	['...on RepoAddMemberAuditEntry']: '__union' & GraphQLTypes["RepoAddMemberAuditEntry"];
	['...on RepoAddTopicAuditEntry']: '__union' & GraphQLTypes["RepoAddTopicAuditEntry"];
	['...on RepoArchivedAuditEntry']: '__union' & GraphQLTypes["RepoArchivedAuditEntry"];
	['...on RepoChangeMergeSettingAuditEntry']: '__union' & GraphQLTypes["RepoChangeMergeSettingAuditEntry"];
	['...on RepoConfigDisableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigDisableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableContributorsOnlyAuditEntry"];
	['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigEnableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigEnableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableContributorsOnlyAuditEntry"];
	['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigLockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigLockAnonymousGitAccessAuditEntry"];
	['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"];
	['...on RepoCreateAuditEntry']: '__union' & GraphQLTypes["RepoCreateAuditEntry"];
	['...on RepoDestroyAuditEntry']: '__union' & GraphQLTypes["RepoDestroyAuditEntry"];
	['...on RepoRemoveMemberAuditEntry']: '__union' & GraphQLTypes["RepoRemoveMemberAuditEntry"];
	['...on RepoRemoveTopicAuditEntry']: '__union' & GraphQLTypes["RepoRemoveTopicAuditEntry"];
	['...on RepositoryVisibilityChangeDisableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeDisableAuditEntry"];
	['...on RepositoryVisibilityChangeEnableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeEnableAuditEntry"];
	['...on TeamAddMemberAuditEntry']: '__union' & GraphQLTypes["TeamAddMemberAuditEntry"];
	['...on TeamAddRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamAddRepositoryAuditEntry"];
	['...on TeamChangeParentTeamAuditEntry']: '__union' & GraphQLTypes["TeamChangeParentTeamAuditEntry"];
	['...on TeamRemoveMemberAuditEntry']: '__union' & GraphQLTypes["TeamRemoveMemberAuditEntry"];
	['...on TeamRemoveRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamRemoveRepositoryAuditEntry"];
};
	/** The connection type for OrganizationAuditEntry. */
["OrganizationAuditEntryConnection"]: {
	__typename: "OrganizationAuditEntryConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["OrganizationAuditEntryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["OrganizationAuditEntry"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Metadata for an audit entry with action org.* */
["OrganizationAuditEntryData"]: {
	__typename:"MembersCanDeleteReposClearAuditEntry" | "MembersCanDeleteReposDisableAuditEntry" | "MembersCanDeleteReposEnableAuditEntry" | "OauthApplicationCreateAuditEntry" | "OrgAddBillingManagerAuditEntry" | "OrgAddMemberAuditEntry" | "OrgBlockUserAuditEntry" | "OrgConfigDisableCollaboratorsOnlyAuditEntry" | "OrgConfigEnableCollaboratorsOnlyAuditEntry" | "OrgCreateAuditEntry" | "OrgDisableOauthAppRestrictionsAuditEntry" | "OrgDisableSamlAuditEntry" | "OrgDisableTwoFactorRequirementAuditEntry" | "OrgEnableOauthAppRestrictionsAuditEntry" | "OrgEnableSamlAuditEntry" | "OrgEnableTwoFactorRequirementAuditEntry" | "OrgInviteMemberAuditEntry" | "OrgInviteToBusinessAuditEntry" | "OrgOauthAppAccessApprovedAuditEntry" | "OrgOauthAppAccessDeniedAuditEntry" | "OrgOauthAppAccessRequestedAuditEntry" | "OrgRemoveBillingManagerAuditEntry" | "OrgRemoveMemberAuditEntry" | "OrgRemoveOutsideCollaboratorAuditEntry" | "OrgRestoreMemberAuditEntry" | "OrgRestoreMemberMembershipOrganizationAuditEntryData" | "OrgUnblockUserAuditEntry" | "OrgUpdateDefaultRepositoryPermissionAuditEntry" | "OrgUpdateMemberAuditEntry" | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" | "PrivateRepositoryForkingDisableAuditEntry" | "PrivateRepositoryForkingEnableAuditEntry" | "RepoAccessAuditEntry" | "RepoAddMemberAuditEntry" | "RepoAddTopicAuditEntry" | "RepoArchivedAuditEntry" | "RepoChangeMergeSettingAuditEntry" | "RepoConfigDisableAnonymousGitAccessAuditEntry" | "RepoConfigDisableCollaboratorsOnlyAuditEntry" | "RepoConfigDisableContributorsOnlyAuditEntry" | "RepoConfigDisableSockpuppetDisallowedAuditEntry" | "RepoConfigEnableAnonymousGitAccessAuditEntry" | "RepoConfigEnableCollaboratorsOnlyAuditEntry" | "RepoConfigEnableContributorsOnlyAuditEntry" | "RepoConfigEnableSockpuppetDisallowedAuditEntry" | "RepoConfigLockAnonymousGitAccessAuditEntry" | "RepoConfigUnlockAnonymousGitAccessAuditEntry" | "RepoCreateAuditEntry" | "RepoDestroyAuditEntry" | "RepoRemoveMemberAuditEntry" | "RepoRemoveTopicAuditEntry" | "RepositoryVisibilityChangeDisableAuditEntry" | "RepositoryVisibilityChangeEnableAuditEntry" | "TeamAddMemberAuditEntry" | "TeamAddRepositoryAuditEntry" | "TeamChangeParentTeamAuditEntry" | "TeamRemoveMemberAuditEntry" | "TeamRemoveRepositoryAuditEntry",
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined
	['...on MembersCanDeleteReposClearAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposClearAuditEntry"];
	['...on MembersCanDeleteReposDisableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposDisableAuditEntry"];
	['...on MembersCanDeleteReposEnableAuditEntry']: '__union' & GraphQLTypes["MembersCanDeleteReposEnableAuditEntry"];
	['...on OauthApplicationCreateAuditEntry']: '__union' & GraphQLTypes["OauthApplicationCreateAuditEntry"];
	['...on OrgAddBillingManagerAuditEntry']: '__union' & GraphQLTypes["OrgAddBillingManagerAuditEntry"];
	['...on OrgAddMemberAuditEntry']: '__union' & GraphQLTypes["OrgAddMemberAuditEntry"];
	['...on OrgBlockUserAuditEntry']: '__union' & GraphQLTypes["OrgBlockUserAuditEntry"];
	['...on OrgConfigDisableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["OrgConfigDisableCollaboratorsOnlyAuditEntry"];
	['...on OrgConfigEnableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["OrgConfigEnableCollaboratorsOnlyAuditEntry"];
	['...on OrgCreateAuditEntry']: '__union' & GraphQLTypes["OrgCreateAuditEntry"];
	['...on OrgDisableOauthAppRestrictionsAuditEntry']: '__union' & GraphQLTypes["OrgDisableOauthAppRestrictionsAuditEntry"];
	['...on OrgDisableSamlAuditEntry']: '__union' & GraphQLTypes["OrgDisableSamlAuditEntry"];
	['...on OrgDisableTwoFactorRequirementAuditEntry']: '__union' & GraphQLTypes["OrgDisableTwoFactorRequirementAuditEntry"];
	['...on OrgEnableOauthAppRestrictionsAuditEntry']: '__union' & GraphQLTypes["OrgEnableOauthAppRestrictionsAuditEntry"];
	['...on OrgEnableSamlAuditEntry']: '__union' & GraphQLTypes["OrgEnableSamlAuditEntry"];
	['...on OrgEnableTwoFactorRequirementAuditEntry']: '__union' & GraphQLTypes["OrgEnableTwoFactorRequirementAuditEntry"];
	['...on OrgInviteMemberAuditEntry']: '__union' & GraphQLTypes["OrgInviteMemberAuditEntry"];
	['...on OrgInviteToBusinessAuditEntry']: '__union' & GraphQLTypes["OrgInviteToBusinessAuditEntry"];
	['...on OrgOauthAppAccessApprovedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessApprovedAuditEntry"];
	['...on OrgOauthAppAccessDeniedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessDeniedAuditEntry"];
	['...on OrgOauthAppAccessRequestedAuditEntry']: '__union' & GraphQLTypes["OrgOauthAppAccessRequestedAuditEntry"];
	['...on OrgRemoveBillingManagerAuditEntry']: '__union' & GraphQLTypes["OrgRemoveBillingManagerAuditEntry"];
	['...on OrgRemoveMemberAuditEntry']: '__union' & GraphQLTypes["OrgRemoveMemberAuditEntry"];
	['...on OrgRemoveOutsideCollaboratorAuditEntry']: '__union' & GraphQLTypes["OrgRemoveOutsideCollaboratorAuditEntry"];
	['...on OrgRestoreMemberAuditEntry']: '__union' & GraphQLTypes["OrgRestoreMemberAuditEntry"];
	['...on OrgRestoreMemberMembershipOrganizationAuditEntryData']: '__union' & GraphQLTypes["OrgRestoreMemberMembershipOrganizationAuditEntryData"];
	['...on OrgUnblockUserAuditEntry']: '__union' & GraphQLTypes["OrgUnblockUserAuditEntry"];
	['...on OrgUpdateDefaultRepositoryPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateDefaultRepositoryPermissionAuditEntry"];
	['...on OrgUpdateMemberAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberAuditEntry"];
	['...on OrgUpdateMemberRepositoryCreationPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntry"];
	['...on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']: '__union' & GraphQLTypes["OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"];
	['...on PrivateRepositoryForkingDisableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingDisableAuditEntry"];
	['...on PrivateRepositoryForkingEnableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingEnableAuditEntry"];
	['...on RepoAccessAuditEntry']: '__union' & GraphQLTypes["RepoAccessAuditEntry"];
	['...on RepoAddMemberAuditEntry']: '__union' & GraphQLTypes["RepoAddMemberAuditEntry"];
	['...on RepoAddTopicAuditEntry']: '__union' & GraphQLTypes["RepoAddTopicAuditEntry"];
	['...on RepoArchivedAuditEntry']: '__union' & GraphQLTypes["RepoArchivedAuditEntry"];
	['...on RepoChangeMergeSettingAuditEntry']: '__union' & GraphQLTypes["RepoChangeMergeSettingAuditEntry"];
	['...on RepoConfigDisableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigDisableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableContributorsOnlyAuditEntry"];
	['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigEnableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigEnableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableContributorsOnlyAuditEntry"];
	['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigLockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigLockAnonymousGitAccessAuditEntry"];
	['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"];
	['...on RepoCreateAuditEntry']: '__union' & GraphQLTypes["RepoCreateAuditEntry"];
	['...on RepoDestroyAuditEntry']: '__union' & GraphQLTypes["RepoDestroyAuditEntry"];
	['...on RepoRemoveMemberAuditEntry']: '__union' & GraphQLTypes["RepoRemoveMemberAuditEntry"];
	['...on RepoRemoveTopicAuditEntry']: '__union' & GraphQLTypes["RepoRemoveTopicAuditEntry"];
	['...on RepositoryVisibilityChangeDisableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeDisableAuditEntry"];
	['...on RepositoryVisibilityChangeEnableAuditEntry']: '__union' & GraphQLTypes["RepositoryVisibilityChangeEnableAuditEntry"];
	['...on TeamAddMemberAuditEntry']: '__union' & GraphQLTypes["TeamAddMemberAuditEntry"];
	['...on TeamAddRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamAddRepositoryAuditEntry"];
	['...on TeamChangeParentTeamAuditEntry']: '__union' & GraphQLTypes["TeamChangeParentTeamAuditEntry"];
	['...on TeamRemoveMemberAuditEntry']: '__union' & GraphQLTypes["TeamRemoveMemberAuditEntry"];
	['...on TeamRemoveRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamRemoveRepositoryAuditEntry"];
};
	/** An edge in a connection. */
["OrganizationAuditEntryEdge"]: {
	__typename: "OrganizationAuditEntryEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["OrganizationAuditEntry"] | undefined
};
	/** A list of organizations managed by an enterprise. */
["OrganizationConnection"]: {
	__typename: "OrganizationConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["OrganizationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Organization"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["OrganizationEdge"]: {
	__typename: "OrganizationEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Organization"] | undefined
};
	/** The connection type for User. */
["OrganizationEnterpriseOwnerConnection"]: {
	__typename: "OrganizationEnterpriseOwnerConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["OrganizationEnterpriseOwnerEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An enterprise owner in the context of an organization that is part of the enterprise. */
["OrganizationEnterpriseOwnerEdge"]: {
	__typename: "OrganizationEnterpriseOwnerEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["User"] | undefined,
	/** The role of the owner with respect to the organization. */
	organizationRole: GraphQLTypes["RoleInOrganization"]
};
	/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
["OrganizationIdentityProvider"]: {
	__typename: "OrganizationIdentityProvider",
	/** The digest algorithm used to sign SAML requests for the Identity Provider. */
	digestMethod?: GraphQLTypes["URI"] | undefined,
	/** External Identities provisioned by this Identity Provider */
	externalIdentities: GraphQLTypes["ExternalIdentityConnection"],
	id: string,
	/** The x509 certificate used by the Identity Provider to sign assertions and responses. */
	idpCertificate?: GraphQLTypes["X509Certificate"] | undefined,
	/** The Issuer Entity ID for the SAML Identity Provider */
	issuer?: string | undefined,
	/** Organization this Identity Provider belongs to */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The signature algorithm used to sign SAML requests for the Identity Provider. */
	signatureMethod?: GraphQLTypes["URI"] | undefined,
	/** The URL endpoint for the Identity Provider's SAML SSO. */
	ssoUrl?: GraphQLTypes["URI"] | undefined
};
	/** An Invitation for a user to an organization. */
["OrganizationInvitation"]: {
	__typename: "OrganizationInvitation",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The email address of the user invited to the organization. */
	email?: string | undefined,
	id: string,
	/** The type of invitation that was sent (e.g. email, user). */
	invitationType: GraphQLTypes["OrganizationInvitationType"],
	/** The user who was invited to the organization. */
	invitee?: GraphQLTypes["User"] | undefined,
	/** The user who created the invitation. */
	inviter: GraphQLTypes["User"],
	/** The organization the invite is for */
	organization: GraphQLTypes["Organization"],
	/** The user's pending role in the organization (e.g. member, owner). */
	role: GraphQLTypes["OrganizationInvitationRole"]
};
	/** The connection type for OrganizationInvitation. */
["OrganizationInvitationConnection"]: {
	__typename: "OrganizationInvitationConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["OrganizationInvitationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["OrganizationInvitation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["OrganizationInvitationEdge"]: {
	__typename: "OrganizationInvitationEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["OrganizationInvitation"] | undefined
};
	/** The possible organization invitation roles. */
["OrganizationInvitationRole"]: OrganizationInvitationRole;
	/** The possible organization invitation types. */
["OrganizationInvitationType"]: OrganizationInvitationType;
	/** The connection type for User. */
["OrganizationMemberConnection"]: {
	__typename: "OrganizationMemberConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["OrganizationMemberEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user within an organization. */
["OrganizationMemberEdge"]: {
	__typename: "OrganizationMemberEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
	hasTwoFactorEnabled?: boolean | undefined,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["User"] | undefined,
	/** The role this user has in the organization. */
	role?: GraphQLTypes["OrganizationMemberRole"] | undefined
};
	/** The possible roles within an organization for its members. */
["OrganizationMemberRole"]: OrganizationMemberRole;
	/** The possible values for the members can create repositories setting on an organization. */
["OrganizationMembersCanCreateRepositoriesSettingValue"]: OrganizationMembersCanCreateRepositoriesSettingValue;
	/** Used for argument of CreateProjectV2 mutation. */
["OrganizationOrUser"]:{
        	__typename:"Organization" | "User"
        	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Ordering options for organization connections. */
["OrganizationOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order organizations by. */
	field: GraphQLTypes["OrganizationOrderField"]
};
	/** Properties by which organization connections can be ordered. */
["OrganizationOrderField"]: OrganizationOrderField;
	/** An organization teams hovercard context */
["OrganizationTeamsHovercardContext"]: {
	__typename: "OrganizationTeamsHovercardContext",
	/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string,
	/** Teams in this organization the user is a member of that are relevant */
	relevantTeams: GraphQLTypes["TeamConnection"],
	/** The path for the full team list for this user */
	teamsResourcePath: GraphQLTypes["URI"],
	/** The URL for the full team list for this user */
	teamsUrl: GraphQLTypes["URI"],
	/** The total number of teams the user is on in the organization */
	totalTeamCount: number
};
	/** An organization list hovercard context */
["OrganizationsHovercardContext"]: {
	__typename: "OrganizationsHovercardContext",
	/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string,
	/** Organizations this user is a member of that are relevant */
	relevantOrganizations: GraphQLTypes["OrganizationConnection"],
	/** The total number of organizations this user is in */
	totalOrganizationCount: number
};
	/** Information for an uploaded package. */
["Package"]: {
	__typename: "Package",
	id: string,
	/** Find the latest version for the package. */
	latestVersion?: GraphQLTypes["PackageVersion"] | undefined,
	/** Identifies the name of the package. */
	name: string,
	/** Identifies the type of the package. */
	packageType: GraphQLTypes["PackageType"],
	/** The repository this package belongs to. */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** Statistics about package activity. */
	statistics?: GraphQLTypes["PackageStatistics"] | undefined,
	/** Find package version by version string. */
	version?: GraphQLTypes["PackageVersion"] | undefined,
	/** list of versions for this package */
	versions: GraphQLTypes["PackageVersionConnection"]
};
	/** The connection type for Package. */
["PackageConnection"]: {
	__typename: "PackageConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PackageEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Package"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PackageEdge"]: {
	__typename: "PackageEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Package"] | undefined
};
	/** A file in a package version. */
["PackageFile"]: {
	__typename: "PackageFile",
	id: string,
	/** MD5 hash of the file. */
	md5?: string | undefined,
	/** Name of the file. */
	name: string,
	/** The package version this file belongs to. */
	packageVersion?: GraphQLTypes["PackageVersion"] | undefined,
	/** SHA1 hash of the file. */
	sha1?: string | undefined,
	/** SHA256 hash of the file. */
	sha256?: string | undefined,
	/** Size of the file in bytes. */
	size?: number | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** URL to download the asset. */
	url?: GraphQLTypes["URI"] | undefined
};
	/** The connection type for PackageFile. */
["PackageFileConnection"]: {
	__typename: "PackageFileConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PackageFileEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PackageFile"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PackageFileEdge"]: {
	__typename: "PackageFileEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PackageFile"] | undefined
};
	/** Ways in which lists of package files can be ordered upon return. */
["PackageFileOrder"]: {
		/** The direction in which to order package files by the specified field. */
	direction?: GraphQLTypes["OrderDirection"] | undefined,
	/** The field in which to order package files by. */
	field?: GraphQLTypes["PackageFileOrderField"] | undefined
};
	/** Properties by which package file connections can be ordered. */
["PackageFileOrderField"]: PackageFileOrderField;
	/** Ways in which lists of packages can be ordered upon return. */
["PackageOrder"]: {
		/** The direction in which to order packages by the specified field. */
	direction?: GraphQLTypes["OrderDirection"] | undefined,
	/** The field in which to order packages by. */
	field?: GraphQLTypes["PackageOrderField"] | undefined
};
	/** Properties by which package connections can be ordered. */
["PackageOrderField"]: PackageOrderField;
	/** Represents an owner of a package. */
["PackageOwner"]: {
	__typename:"Organization" | "Repository" | "User",
	id: string,
	/** A list of packages under the owner. */
	packages: GraphQLTypes["PackageConnection"]
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Represents a object that contains package activity statistics such as downloads. */
["PackageStatistics"]: {
	__typename: "PackageStatistics",
	/** Number of times the package was downloaded since it was created. */
	downloadsTotalCount: number
};
	/** A version tag contains the mapping between a tag name and a version. */
["PackageTag"]: {
	__typename: "PackageTag",
	id: string,
	/** Identifies the tag name of the version. */
	name: string,
	/** Version that the tag is associated with. */
	version?: GraphQLTypes["PackageVersion"] | undefined
};
	/** The possible types of a package. */
["PackageType"]: PackageType;
	/** Information about a specific package version. */
["PackageVersion"]: {
	__typename: "PackageVersion",
	/** List of files associated with this package version */
	files: GraphQLTypes["PackageFileConnection"],
	id: string,
	/** The package associated with this version. */
	package?: GraphQLTypes["Package"] | undefined,
	/** The platform this version was built for. */
	platform?: string | undefined,
	/** Whether or not this version is a pre-release. */
	preRelease: boolean,
	/** The README of this package version. */
	readme?: string | undefined,
	/** The release associated with this package version. */
	release?: GraphQLTypes["Release"] | undefined,
	/** Statistics about package activity. */
	statistics?: GraphQLTypes["PackageVersionStatistics"] | undefined,
	/** The package version summary. */
	summary?: string | undefined,
	/** The version string. */
	version: string
};
	/** The connection type for PackageVersion. */
["PackageVersionConnection"]: {
	__typename: "PackageVersionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PackageVersionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PackageVersion"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PackageVersionEdge"]: {
	__typename: "PackageVersionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PackageVersion"] | undefined
};
	/** Ways in which lists of package versions can be ordered upon return. */
["PackageVersionOrder"]: {
		/** The direction in which to order package versions by the specified field. */
	direction?: GraphQLTypes["OrderDirection"] | undefined,
	/** The field in which to order package versions by. */
	field?: GraphQLTypes["PackageVersionOrderField"] | undefined
};
	/** Properties by which package version connections can be ordered. */
["PackageVersionOrderField"]: PackageVersionOrderField;
	/** Represents a object that contains package version activity statistics such as downloads. */
["PackageVersionStatistics"]: {
	__typename: "PackageVersionStatistics",
	/** Number of times the package was downloaded since it was created. */
	downloadsTotalCount: number
};
	/** Information about pagination in a connection. */
["PageInfo"]: {
	__typename: "PageInfo",
	/** When paginating forwards, the cursor to continue. */
	endCursor?: string | undefined,
	/** When paginating forwards, are there more items? */
	hasNextPage: boolean,
	/** When paginating backwards, are there more items? */
	hasPreviousPage: boolean,
	/** When paginating backwards, the cursor to continue. */
	startCursor?: string | undefined
};
	/** The possible types of patch statuses. */
["PatchStatus"]: PatchStatus;
	/** Types that can grant permissions on a repository to a user */
["PermissionGranter"]:{
        	__typename:"Organization" | "Repository" | "Team"
        	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
	['...on Team']: '__union' & GraphQLTypes["Team"];
};
	/** A level of permission and source for a user's access to a repository. */
["PermissionSource"]: {
	__typename: "PermissionSource",
	/** The organization the repository belongs to. */
	organization: GraphQLTypes["Organization"],
	/** The level of access this source has granted to the user. */
	permission: GraphQLTypes["DefaultRepositoryPermissionField"],
	/** The source of this permission. */
	source: GraphQLTypes["PermissionGranter"]
};
	/** Autogenerated input type of PinIssue */
["PinIssueInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the issue to be pinned */
	issueId: string
};
	/** Autogenerated return type of PinIssue */
["PinIssuePayload"]: {
	__typename: "PinIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was pinned */
	issue?: GraphQLTypes["Issue"] | undefined
};
	/** Types that can be pinned to a profile page. */
["PinnableItem"]:{
        	__typename:"Gist" | "Repository"
        	['...on Gist']: '__union' & GraphQLTypes["Gist"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
};
	/** The connection type for PinnableItem. */
["PinnableItemConnection"]: {
	__typename: "PinnableItemConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PinnableItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PinnableItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PinnableItemEdge"]: {
	__typename: "PinnableItemEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PinnableItem"] | undefined
};
	/** Represents items that can be pinned to a profile page or dashboard. */
["PinnableItemType"]: PinnableItemType;
	/** A Pinned Discussion is a discussion pinned to a repository's index page. */
["PinnedDiscussion"]: {
	__typename: "PinnedDiscussion",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The discussion that was pinned. */
	discussion: GraphQLTypes["Discussion"],
	/** Color stops of the chosen gradient */
	gradientStopColors: Array<string>,
	id: string,
	/** Background texture pattern */
	pattern: GraphQLTypes["PinnedDiscussionPattern"],
	/** The actor that pinned this discussion. */
	pinnedBy: GraphQLTypes["Actor"],
	/** Preconfigured background gradient option */
	preconfiguredGradient?: GraphQLTypes["PinnedDiscussionGradient"] | undefined,
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for PinnedDiscussion. */
["PinnedDiscussionConnection"]: {
	__typename: "PinnedDiscussionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PinnedDiscussionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PinnedDiscussion"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PinnedDiscussionEdge"]: {
	__typename: "PinnedDiscussionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PinnedDiscussion"] | undefined
};
	/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
["PinnedDiscussionGradient"]: PinnedDiscussionGradient;
	/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
["PinnedDiscussionPattern"]: PinnedDiscussionPattern;
	/** Represents a 'pinned' event on a given issue or pull request. */
["PinnedEvent"]: {
	__typename: "PinnedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Identifies the issue associated with the event. */
	issue: GraphQLTypes["Issue"]
};
	/** A Pinned Issue is a issue pinned to a repository's index page. */
["PinnedIssue"]: {
	__typename: "PinnedIssue",
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The issue that was pinned. */
	issue: GraphQLTypes["Issue"],
	/** The actor that pinned this issue. */
	pinnedBy: GraphQLTypes["Actor"],
	/** The repository that this issue was pinned to. */
	repository: GraphQLTypes["Repository"]
};
	/** The connection type for PinnedIssue. */
["PinnedIssueConnection"]: {
	__typename: "PinnedIssueConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PinnedIssueEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PinnedIssue"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PinnedIssueEdge"]: {
	__typename: "PinnedIssueEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PinnedIssue"] | undefined
};
	/** An ISO-8601 encoded UTC date string with millisecond precision. */
["PreciseDateTime"]: "scalar" & { name: "PreciseDateTime" };
	/** Audit log entry for a private_repository_forking.disable event. */
["PrivateRepositoryForkingDisableAuditEntry"]: {
	__typename: "PrivateRepositoryForkingDisableAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a private_repository_forking.enable event. */
["PrivateRepositoryForkingEnableAuditEntry"]: {
	__typename: "PrivateRepositoryForkingEnableAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own. */
["ProfileItemShowcase"]: {
	__typename: "ProfileItemShowcase",
	/** Whether or not the owner has pinned any repositories or gists. */
	hasPinnedItems: boolean,
	/** The repositories and gists in the showcase. If the profile owner has any
pinned items, those will be returned. Otherwise, the profile owner's popular
repositories will be returned. */
	items: GraphQLTypes["PinnableItemConnection"]
};
	/** Represents any entity on GitHub that has a profile page. */
["ProfileOwner"]: {
	__typename:"Organization" | "User",
	/** Determine if this repository owner has any items that can be pinned to their profile. */
	anyPinnableItems: boolean,
	/** The public profile email. */
	email?: string | undefined,
	id: string,
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase: GraphQLTypes["ProfileItemShowcase"],
	/** The public profile location. */
	location?: string | undefined,
	/** The username used to login. */
	login: string,
	/** The public profile name. */
	name?: string | undefined,
	/** A list of repositories and gists this profile owner can pin to their profile. */
	pinnableItems: GraphQLTypes["PinnableItemConnection"],
	/** A list of repositories and gists this profile owner has pinned to their profile */
	pinnedItems: GraphQLTypes["PinnableItemConnection"],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining: number,
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems: boolean,
	/** The public profile website URL. */
	websiteUrl?: GraphQLTypes["URI"] | undefined
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Projects manage issues, pull requests and notes within a project owner. */
["Project"]: {
	__typename: "Project",
	/** The project's description body. */
	body?: string | undefined,
	/** The projects description body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** `true` if the object is closed (definition of closed may depend on type) */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: GraphQLTypes["DateTime"] | undefined,
	/** List of columns in the project */
	columns: GraphQLTypes["ProjectColumnConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who originally created the project. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project's name. */
	name: string,
	/** The project's number. */
	number: number,
	/** The project's owner. Currently limited to repositories, organizations, and users. */
	owner: GraphQLTypes["ProjectOwner"],
	/** List of pending cards in this project */
	pendingCards: GraphQLTypes["ProjectCardConnection"],
	/** Project progress details. */
	progress: GraphQLTypes["ProjectProgress"],
	/** The HTTP path for this project */
	resourcePath: GraphQLTypes["URI"],
	/** Whether the project is open or closed. */
	state: GraphQLTypes["ProjectState"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this project */
	url: GraphQLTypes["URI"],
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean
};
	/** A card in a project. */
["ProjectCard"]: {
	__typename: "ProjectCard",
	/** The project column this card is associated under. A card may only belong to one
project column at a time. The column field will be null if the card is created
in a pending state and has yet to be associated with a column. Once cards are
associated with a column, they will not become pending in the future. */
	column?: GraphQLTypes["ProjectColumn"] | undefined,
	/** The card content item */
	content?: GraphQLTypes["ProjectCardItem"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created this card */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Whether the card is archived */
	isArchived: boolean,
	/** The card note */
	note?: string | undefined,
	/** The project that contains this card. */
	project: GraphQLTypes["Project"],
	/** The HTTP path for this card */
	resourcePath: GraphQLTypes["URI"],
	/** The state of ProjectCard */
	state?: GraphQLTypes["ProjectCardState"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this card */
	url: GraphQLTypes["URI"]
};
	/** The possible archived states of a project card. */
["ProjectCardArchivedState"]: ProjectCardArchivedState;
	/** The connection type for ProjectCard. */
["ProjectCardConnection"]: {
	__typename: "ProjectCardConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectCardEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectCard"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectCardEdge"]: {
	__typename: "ProjectCardEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectCard"] | undefined
};
	/** An issue or PR and its owning repository to be used in a project card. */
["ProjectCardImport"]: {
		/** The issue or pull request number. */
	number: number,
	/** Repository name with owner (owner/repository). */
	repository: string
};
	/** Types that can be inside Project Cards. */
["ProjectCardItem"]:{
        	__typename:"Issue" | "PullRequest"
        	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** Various content states of a ProjectCard */
["ProjectCardState"]: ProjectCardState;
	/** A column inside a project. */
["ProjectColumn"]: {
	__typename: "ProjectColumn",
	/** List of cards in the column */
	cards: GraphQLTypes["ProjectCardConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project column's name. */
	name: string,
	/** The project that contains this column. */
	project: GraphQLTypes["Project"],
	/** The semantic purpose of the column */
	purpose?: GraphQLTypes["ProjectColumnPurpose"] | undefined,
	/** The HTTP path for this project column */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this project column */
	url: GraphQLTypes["URI"]
};
	/** The connection type for ProjectColumn. */
["ProjectColumnConnection"]: {
	__typename: "ProjectColumnConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectColumnEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectColumn"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectColumnEdge"]: {
	__typename: "ProjectColumnEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectColumn"] | undefined
};
	/** A project column and a list of its issues and PRs. */
["ProjectColumnImport"]: {
		/** The name of the column. */
	columnName: string,
	/** A list of issues and pull requests in the column. */
	issues?: Array<GraphQLTypes["ProjectCardImport"]> | undefined,
	/** The position of the column, starting from 0. */
	position: number
};
	/** The semantic purpose of the column - todo, in progress, or done. */
["ProjectColumnPurpose"]: ProjectColumnPurpose;
	/** A list of projects associated with the owner. */
["ProjectConnection"]: {
	__typename: "ProjectConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Project"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectEdge"]: {
	__typename: "ProjectEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Project"] | undefined
};
	/** The type of a project item. */
["ProjectItemType"]: ProjectItemType;
	/** New projects that manage issues, pull requests and drafts using tables and boards. */
["ProjectNext"]: {
	__typename: "ProjectNext",
	/** Returns true if the project is closed. */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who originally created the project. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project's description. */
	description?: string | undefined,
	/** List of fields in the project */
	fields: GraphQLTypes["ProjectNextFieldConnection"],
	id: string,
	/** List of items in the project */
	items: GraphQLTypes["ProjectNextItemConnection"],
	/** The project's number. */
	number: number,
	/** The project's owner. Currently limited to organizations and users. */
	owner: GraphQLTypes["ProjectNextOwner"],
	/** Returns true if the project is public. */
	public: boolean,
	/** The repositories the project is linked to. */
	repositories: GraphQLTypes["RepositoryConnection"],
	/** The HTTP path for this project */
	resourcePath: GraphQLTypes["URI"],
	/** The project's short description. */
	shortDescription?: string | undefined,
	/** The project's name. */
	title?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this project */
	url: GraphQLTypes["URI"],
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** List of views in the project */
	views: GraphQLTypes["ProjectViewConnection"]
};
	/** The connection type for ProjectNext. */
["ProjectNextConnection"]: {
	__typename: "ProjectNextConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectNextEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectNext"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectNextEdge"]: {
	__typename: "ProjectNextEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectNext"] | undefined
};
	/** A field inside a project. */
["ProjectNextField"]: {
	__typename: "ProjectNextField",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The field's type. */
	dataType: GraphQLTypes["ProjectNextFieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** The project that contains this field. */
	project: GraphQLTypes["ProjectNext"],
	/** The field's settings. */
	settings?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** Common fields across different field types */
["ProjectNextFieldCommon"]: {
	__typename:"ProjectNextField",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The field's type. */
	dataType: GraphQLTypes["ProjectNextFieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** The project that contains this field. */
	project: GraphQLTypes["ProjectNext"],
	/** The field's settings. */
	settings?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
	['...on ProjectNextField']: '__union' & GraphQLTypes["ProjectNextField"];
};
	/** The connection type for ProjectNextField. */
["ProjectNextFieldConnection"]: {
	__typename: "ProjectNextFieldConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectNextFieldEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectNextField"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectNextFieldEdge"]: {
	__typename: "ProjectNextFieldEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectNextField"] | undefined
};
	/** The type of a project next field. */
["ProjectNextFieldType"]: ProjectNextFieldType;
	/** An item within a new Project. */
["ProjectNextItem"]: {
	__typename: "ProjectNextItem",
	/** The content of the referenced draft issue, issue, or pull request */
	content?: GraphQLTypes["ProjectNextItemContent"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created the item. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** List of field values */
	fieldValues: GraphQLTypes["ProjectNextItemFieldValueConnection"],
	id: string,
	/** Whether the item is archived. */
	isArchived: boolean,
	/** The project that contains this item. */
	project: GraphQLTypes["ProjectNext"],
	/** The title of the item */
	title?: string | undefined,
	/** The type of the item. */
	type: GraphQLTypes["ProjectItemType"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for ProjectNextItem. */
["ProjectNextItemConnection"]: {
	__typename: "ProjectNextItemConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectNextItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectNextItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Types that can be inside Project Items. */
["ProjectNextItemContent"]:{
        	__typename:"DraftIssue" | "Issue" | "PullRequest"
        	['...on DraftIssue']: '__union' & GraphQLTypes["DraftIssue"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** An edge in a connection. */
["ProjectNextItemEdge"]: {
	__typename: "ProjectNextItemEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectNextItem"] | undefined
};
	/** An value of a field in an item of a new Project. */
["ProjectNextItemFieldValue"]: {
	__typename: "ProjectNextItemFieldValue",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created the item. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field that contains this value. */
	projectField: GraphQLTypes["ProjectNextField"],
	/** The project item that contains this value. */
	projectItem: GraphQLTypes["ProjectNextItem"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The value of a field */
	value?: string | undefined
};
	/** The connection type for ProjectNextItemFieldValue. */
["ProjectNextItemFieldValueConnection"]: {
	__typename: "ProjectNextItemFieldValueConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectNextItemFieldValueEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectNextItemFieldValue"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectNextItemFieldValueEdge"]: {
	__typename: "ProjectNextItemFieldValueEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectNextItemFieldValue"] | undefined
};
	/** Properties by which the return project can be ordered. */
["ProjectNextOrderField"]: ProjectNextOrderField;
	/** Represents an owner of a project (beta). */
["ProjectNextOwner"]: {
	__typename:"Issue" | "Organization" | "PullRequest" | "User",
	id: string,
	/** Find a project by project (beta) number. */
	projectNext?: GraphQLTypes["ProjectNext"] | undefined,
	/** A list of projects (beta) under the owner. */
	projectsNext: GraphQLTypes["ProjectNextConnection"]
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Ways in which lists of projects can be ordered upon return. */
["ProjectOrder"]: {
		/** The direction in which to order projects by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order projects by. */
	field: GraphQLTypes["ProjectOrderField"]
};
	/** Properties by which project connections can be ordered. */
["ProjectOrderField"]: ProjectOrderField;
	/** Represents an owner of a Project. */
["ProjectOwner"]: {
	__typename:"Organization" | "Repository" | "User",
	id: string,
	/** Find project by number. */
	project?: GraphQLTypes["Project"] | undefined,
	/** A list of projects under the owner. */
	projects: GraphQLTypes["ProjectConnection"],
	/** The HTTP path listing owners projects */
	projectsResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL listing owners projects */
	projectsUrl: GraphQLTypes["URI"],
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects: boolean
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Project progress stats. */
["ProjectProgress"]: {
	__typename: "ProjectProgress",
	/** The number of done cards. */
	doneCount: number,
	/** The percentage of done cards. */
	donePercentage: number,
	/** Whether progress tracking is enabled and cards with purpose exist for this project */
	enabled: boolean,
	/** The number of in-progress cards. */
	inProgressCount: number,
	/** The percentage of in-progress cards. */
	inProgressPercentage: number,
	/** The number of to do cards. */
	todoCount: number,
	/** The percentage of to do cards. */
	todoPercentage: number
};
	/** State of the project; either 'open' or 'closed' */
["ProjectState"]: ProjectState;
	/** GitHub-provided templates for Projects */
["ProjectTemplate"]: ProjectTemplate;
	/** New projects that manage issues, pull requests and drafts using tables and boards. */
["ProjectV2"]: {
	__typename: "ProjectV2",
	/** Returns true if the project is closed. */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who originally created the project. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** A field of the project */
	field?: GraphQLTypes["ProjectV2FieldConfiguration"] | undefined,
	/** List of fields and their constraints in the project */
	fields: GraphQLTypes["ProjectV2FieldConfigurationConnection"],
	id: string,
	/** List of items in the project */
	items: GraphQLTypes["ProjectV2ItemConnection"],
	/** The project's number. */
	number: number,
	/** The project's owner. Currently limited to organizations and users. */
	owner: GraphQLTypes["ProjectV2Owner"],
	/** Returns true if the project is public. */
	public: boolean,
	/** The project's readme. */
	readme?: string | undefined,
	/** The repositories the project is linked to. */
	repositories: GraphQLTypes["RepositoryConnection"],
	/** The HTTP path for this project */
	resourcePath: GraphQLTypes["URI"],
	/** The project's short description. */
	shortDescription?: string | undefined,
	/** The teams the project is linked to. */
	teams: GraphQLTypes["TeamConnection"],
	/** The project's name. */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this project */
	url: GraphQLTypes["URI"],
	/** A view of the project */
	view?: GraphQLTypes["ProjectV2View"] | undefined,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** List of views in the project */
	views: GraphQLTypes["ProjectV2ViewConnection"]
};
	/** The connection type for ProjectV2. */
["ProjectV2Connection"]: {
	__typename: "ProjectV2Connection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectV2Edge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectV2"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2Edge"]: {
	__typename: "ProjectV2Edge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectV2"] | undefined
};
	/** A field inside a project. */
["ProjectV2Field"]: {
	__typename: "ProjectV2Field",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The field's type. */
	dataType: GraphQLTypes["ProjectV2FieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** The project that contains this field. */
	project: GraphQLTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** Common fields across different project field types */
["ProjectV2FieldCommon"]: {
	__typename:"ProjectV2Field" | "ProjectV2IterationField" | "ProjectV2SingleSelectField",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The field's type. */
	dataType: GraphQLTypes["ProjectV2FieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** The project that contains this field. */
	project: GraphQLTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
	['...on ProjectV2Field']: '__union' & GraphQLTypes["ProjectV2Field"];
	['...on ProjectV2IterationField']: '__union' & GraphQLTypes["ProjectV2IterationField"];
	['...on ProjectV2SingleSelectField']: '__union' & GraphQLTypes["ProjectV2SingleSelectField"];
};
	/** Configurations for project fields. */
["ProjectV2FieldConfiguration"]:{
        	__typename:"ProjectV2Field" | "ProjectV2IterationField" | "ProjectV2SingleSelectField"
        	['...on ProjectV2Field']: '__union' & GraphQLTypes["ProjectV2Field"];
	['...on ProjectV2IterationField']: '__union' & GraphQLTypes["ProjectV2IterationField"];
	['...on ProjectV2SingleSelectField']: '__union' & GraphQLTypes["ProjectV2SingleSelectField"];
};
	/** The connection type for ProjectV2FieldConfiguration. */
["ProjectV2FieldConfigurationConnection"]: {
	__typename: "ProjectV2FieldConfigurationConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectV2FieldConfigurationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectV2FieldConfiguration"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2FieldConfigurationEdge"]: {
	__typename: "ProjectV2FieldConfigurationEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectV2FieldConfiguration"] | undefined
};
	/** The connection type for ProjectV2Field. */
["ProjectV2FieldConnection"]: {
	__typename: "ProjectV2FieldConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectV2FieldEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectV2Field"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2FieldEdge"]: {
	__typename: "ProjectV2FieldEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectV2Field"] | undefined
};
	/** Ordering options for project v2 field connections */
["ProjectV2FieldOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order the project v2 fields by. */
	field: GraphQLTypes["ProjectV2FieldOrderField"]
};
	/** Properties by which project v2 field connections can be ordered. */
["ProjectV2FieldOrderField"]: ProjectV2FieldOrderField;
	/** The type of a project field. */
["ProjectV2FieldType"]: ProjectV2FieldType;
	/** The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time. */
["ProjectV2FieldValue"]: {
		/** The ISO 8601 date to set on the field. */
	date?: GraphQLTypes["Date"] | undefined,
	/** The id of the iteration to set on the field. */
	iterationId?: string | undefined,
	/** The number to set on the field. */
	number?: number | undefined,
	/** The id of the single select option to set on the field. */
	singleSelectOptionId?: string | undefined,
	/** The text to set on the field. */
	text?: string | undefined
};
	/** An item within a Project. */
["ProjectV2Item"]: {
	__typename: "ProjectV2Item",
	/** The content of the referenced draft issue, issue, or pull request */
	content?: GraphQLTypes["ProjectV2ItemContent"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created the item. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** A specific field value given a field name */
	fieldValueByName?: GraphQLTypes["ProjectV2ItemFieldValue"] | undefined,
	/** List of field values */
	fieldValues: GraphQLTypes["ProjectV2ItemFieldValueConnection"],
	id: string,
	/** Whether the item is archived. */
	isArchived: boolean,
	/** The project that contains this item. */
	project: GraphQLTypes["ProjectV2"],
	/** The type of the item. */
	type: GraphQLTypes["ProjectV2ItemType"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for ProjectV2Item. */
["ProjectV2ItemConnection"]: {
	__typename: "ProjectV2ItemConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectV2ItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectV2Item"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Types that can be inside Project Items. */
["ProjectV2ItemContent"]:{
        	__typename:"DraftIssue" | "Issue" | "PullRequest"
        	['...on DraftIssue']: '__union' & GraphQLTypes["DraftIssue"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** An edge in a connection. */
["ProjectV2ItemEdge"]: {
	__typename: "ProjectV2ItemEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectV2Item"] | undefined
};
	/** The value of a date field in a Project item. */
["ProjectV2ItemFieldDateValue"]: {
	__typename: "ProjectV2ItemFieldDateValue",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created the item. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** Date value for the field */
	date?: GraphQLTypes["Date"] | undefined,
	/** The project field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: GraphQLTypes["ProjectV2Item"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The value of an iteration field in a Project item. */
["ProjectV2ItemFieldIterationValue"]: {
	__typename: "ProjectV2ItemFieldIterationValue",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created the item. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The duration of the iteration in days. */
	duration: number,
	/** The project field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: GraphQLTypes["ProjectV2Item"],
	/** The ID of the iteration. */
	iterationId: string,
	/** The start date of the iteration. */
	startDate: GraphQLTypes["Date"],
	/** The title of the iteration. */
	title: string,
	/** The title of the iteration, with HTML. */
	titleHTML: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The value of the labels field in a Project item. */
["ProjectV2ItemFieldLabelValue"]: {
	__typename: "ProjectV2ItemFieldLabelValue",
	/** The field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	/** Labels value of a field */
	labels?: GraphQLTypes["LabelConnection"] | undefined
};
	/** The value of a milestone field in a Project item. */
["ProjectV2ItemFieldMilestoneValue"]: {
	__typename: "ProjectV2ItemFieldMilestoneValue",
	/** The field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	/** Milestone value of a field */
	milestone?: GraphQLTypes["Milestone"] | undefined
};
	/** The value of a number field in a Project item. */
["ProjectV2ItemFieldNumberValue"]: {
	__typename: "ProjectV2ItemFieldNumberValue",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created the item. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: GraphQLTypes["ProjectV2Item"],
	/** Number as a float(8) */
	number?: number | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The value of a pull request field in a Project item. */
["ProjectV2ItemFieldPullRequestValue"]: {
	__typename: "ProjectV2ItemFieldPullRequestValue",
	/** The field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	/** The pull requests for this field */
	pullRequests?: GraphQLTypes["PullRequestConnection"] | undefined
};
	/** The value of a repository field in a Project item. */
["ProjectV2ItemFieldRepositoryValue"]: {
	__typename: "ProjectV2ItemFieldRepositoryValue",
	/** The field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	/** The repository for this field. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** The value of a reviewers field in a Project item. */
["ProjectV2ItemFieldReviewerValue"]: {
	__typename: "ProjectV2ItemFieldReviewerValue",
	/** The field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	/** The reviewers for this field. */
	reviewers?: GraphQLTypes["RequestedReviewerConnection"] | undefined
};
	/** The value of a single select field in a Project item. */
["ProjectV2ItemFieldSingleSelectValue"]: {
	__typename: "ProjectV2ItemFieldSingleSelectValue",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created the item. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: GraphQLTypes["ProjectV2Item"],
	/** The name of the selected single select option. */
	name?: string | undefined,
	/** The html name of the selected single select option. */
	nameHTML?: string | undefined,
	/** The id of the selected single select option. */
	optionId?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The value of a text field in a Project item. */
["ProjectV2ItemFieldTextValue"]: {
	__typename: "ProjectV2ItemFieldTextValue",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created the item. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: GraphQLTypes["ProjectV2Item"],
	/** Text value of a field */
	text?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The value of a user field in a Project item. */
["ProjectV2ItemFieldUserValue"]: {
	__typename: "ProjectV2ItemFieldUserValue",
	/** The field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	/** The users for this field */
	users?: GraphQLTypes["UserConnection"] | undefined
};
	/** Project field values */
["ProjectV2ItemFieldValue"]:{
        	__typename:"ProjectV2ItemFieldDateValue" | "ProjectV2ItemFieldIterationValue" | "ProjectV2ItemFieldLabelValue" | "ProjectV2ItemFieldMilestoneValue" | "ProjectV2ItemFieldNumberValue" | "ProjectV2ItemFieldPullRequestValue" | "ProjectV2ItemFieldRepositoryValue" | "ProjectV2ItemFieldReviewerValue" | "ProjectV2ItemFieldSingleSelectValue" | "ProjectV2ItemFieldTextValue" | "ProjectV2ItemFieldUserValue"
        	['...on ProjectV2ItemFieldDateValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldDateValue"];
	['...on ProjectV2ItemFieldIterationValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldIterationValue"];
	['...on ProjectV2ItemFieldLabelValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldLabelValue"];
	['...on ProjectV2ItemFieldMilestoneValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldMilestoneValue"];
	['...on ProjectV2ItemFieldNumberValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldNumberValue"];
	['...on ProjectV2ItemFieldPullRequestValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldPullRequestValue"];
	['...on ProjectV2ItemFieldRepositoryValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldRepositoryValue"];
	['...on ProjectV2ItemFieldReviewerValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldReviewerValue"];
	['...on ProjectV2ItemFieldSingleSelectValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldSingleSelectValue"];
	['...on ProjectV2ItemFieldTextValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldTextValue"];
	['...on ProjectV2ItemFieldUserValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldUserValue"];
};
	/** Common fields across different project field value types */
["ProjectV2ItemFieldValueCommon"]: {
	__typename:"ProjectV2ItemFieldDateValue" | "ProjectV2ItemFieldIterationValue" | "ProjectV2ItemFieldNumberValue" | "ProjectV2ItemFieldSingleSelectValue" | "ProjectV2ItemFieldTextValue",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created the item. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project field that contains this value. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"],
	id: string,
	/** The project item that contains this value. */
	item: GraphQLTypes["ProjectV2Item"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
	['...on ProjectV2ItemFieldDateValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldDateValue"];
	['...on ProjectV2ItemFieldIterationValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldIterationValue"];
	['...on ProjectV2ItemFieldNumberValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldNumberValue"];
	['...on ProjectV2ItemFieldSingleSelectValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldSingleSelectValue"];
	['...on ProjectV2ItemFieldTextValue']: '__union' & GraphQLTypes["ProjectV2ItemFieldTextValue"];
};
	/** The connection type for ProjectV2ItemFieldValue. */
["ProjectV2ItemFieldValueConnection"]: {
	__typename: "ProjectV2ItemFieldValueConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectV2ItemFieldValueEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectV2ItemFieldValue"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2ItemFieldValueEdge"]: {
	__typename: "ProjectV2ItemFieldValueEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectV2ItemFieldValue"] | undefined
};
	/** Ordering options for project v2 item field value connections */
["ProjectV2ItemFieldValueOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order the project v2 item field values by. */
	field: GraphQLTypes["ProjectV2ItemFieldValueOrderField"]
};
	/** Properties by which project v2 item field value connections can be ordered. */
["ProjectV2ItemFieldValueOrderField"]: ProjectV2ItemFieldValueOrderField;
	/** Ordering options for project v2 item connections */
["ProjectV2ItemOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order the project v2 items by. */
	field: GraphQLTypes["ProjectV2ItemOrderField"]
};
	/** Properties by which project v2 item connections can be ordered. */
["ProjectV2ItemOrderField"]: ProjectV2ItemOrderField;
	/** The type of a project item. */
["ProjectV2ItemType"]: ProjectV2ItemType;
	/** An iteration field inside a project. */
["ProjectV2IterationField"]: {
	__typename: "ProjectV2IterationField",
	/** Iteration configuration settings */
	configuration: GraphQLTypes["ProjectV2IterationFieldConfiguration"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The field's type. */
	dataType: GraphQLTypes["ProjectV2FieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** The project that contains this field. */
	project: GraphQLTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** Iteration field configuration for a project. */
["ProjectV2IterationFieldConfiguration"]: {
	__typename: "ProjectV2IterationFieldConfiguration",
	/** The iteration's completed iterations */
	completedIterations: Array<GraphQLTypes["ProjectV2IterationFieldIteration"]>,
	/** The iteration's duration in days */
	duration: number,
	/** The iteration's iterations */
	iterations: Array<GraphQLTypes["ProjectV2IterationFieldIteration"]>,
	/** The iteration's start day of the week */
	startDay: number
};
	/** Iteration field iteration settings for a project. */
["ProjectV2IterationFieldIteration"]: {
	__typename: "ProjectV2IterationFieldIteration",
	/** The iteration's duration in days */
	duration: number,
	/** The iteration's ID. */
	id: string,
	/** The iteration's start date */
	startDate: GraphQLTypes["Date"],
	/** The iteration's title. */
	title: string,
	/** The iteration's html title. */
	titleHTML: string
};
	/** Ways in which lists of projects can be ordered upon return. */
["ProjectV2Order"]: {
		/** The direction in which to order projects by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order projects by. */
	field: GraphQLTypes["ProjectV2OrderField"]
};
	/** Properties by which projects can be ordered. */
["ProjectV2OrderField"]: ProjectV2OrderField;
	/** Represents an owner of a project (beta). */
["ProjectV2Owner"]: {
	__typename:"Issue" | "Organization" | "PullRequest" | "User",
	id: string,
	/** Find a project by number. */
	projectV2?: GraphQLTypes["ProjectV2"] | undefined,
	/** A list of projects under the owner. */
	projectsV2: GraphQLTypes["ProjectV2Connection"]
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Recent projects for the owner. */
["ProjectV2Recent"]: {
	__typename:"Organization" | "Repository" | "User",
	/** Recent projects that this user has modified in the context of the owner. */
	recentProjects: GraphQLTypes["ProjectV2Connection"]
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** A single select field inside a project. */
["ProjectV2SingleSelectField"]: {
	__typename: "ProjectV2SingleSelectField",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The field's type. */
	dataType: GraphQLTypes["ProjectV2FieldType"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The project field's name. */
	name: string,
	/** Options for the single select field */
	options: Array<GraphQLTypes["ProjectV2SingleSelectFieldOption"]>,
	/** The project that contains this field. */
	project: GraphQLTypes["ProjectV2"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** Single select field option for a configuration for a project. */
["ProjectV2SingleSelectFieldOption"]: {
	__typename: "ProjectV2SingleSelectFieldOption",
	/** The option's ID. */
	id: string,
	/** The option's name. */
	name: string,
	/** The option's html name. */
	nameHTML: string
};
	/** Represents a sort by field and direction. */
["ProjectV2SortBy"]: {
	__typename: "ProjectV2SortBy",
	/** The direction of the sorting. Possible values are ASC and DESC. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field by which items are sorted. */
	field: GraphQLTypes["ProjectV2Field"]
};
	/** The connection type for ProjectV2SortBy. */
["ProjectV2SortByConnection"]: {
	__typename: "ProjectV2SortByConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectV2SortByEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectV2SortBy"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2SortByEdge"]: {
	__typename: "ProjectV2SortByEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectV2SortBy"] | undefined
};
	/** Represents a sort by field and direction. */
["ProjectV2SortByField"]: {
	__typename: "ProjectV2SortByField",
	/** The direction of the sorting. Possible values are ASC and DESC. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field by which items are sorted. */
	field: GraphQLTypes["ProjectV2FieldConfiguration"]
};
	/** The connection type for ProjectV2SortByField. */
["ProjectV2SortByFieldConnection"]: {
	__typename: "ProjectV2SortByFieldConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectV2SortByFieldEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectV2SortByField"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2SortByFieldEdge"]: {
	__typename: "ProjectV2SortByFieldEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectV2SortByField"] | undefined
};
	/** A view within a ProjectV2. */
["ProjectV2View"]: {
	__typename: "ProjectV2View",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The view's visible fields. */
	fields?: GraphQLTypes["ProjectV2FieldConfigurationConnection"] | undefined,
	/** The project view's filter. */
	filter?: string | undefined,
	/** The view's group-by field. */
	groupBy?: GraphQLTypes["ProjectV2FieldConnection"] | undefined,
	/** The view's group-by field. */
	groupByFields?: GraphQLTypes["ProjectV2FieldConfigurationConnection"] | undefined,
	id: string,
	/** The project view's layout. */
	layout: GraphQLTypes["ProjectV2ViewLayout"],
	/** The project view's name. */
	name: string,
	/** The project view's number. */
	number: number,
	/** The project that contains this view. */
	project: GraphQLTypes["ProjectV2"],
	/** The view's sort-by config. */
	sortBy?: GraphQLTypes["ProjectV2SortByConnection"] | undefined,
	/** The view's sort-by config. */
	sortByFields?: GraphQLTypes["ProjectV2SortByFieldConnection"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The view's vertical-group-by field. */
	verticalGroupBy?: GraphQLTypes["ProjectV2FieldConnection"] | undefined,
	/** The view's vertical-group-by field. */
	verticalGroupByFields?: GraphQLTypes["ProjectV2FieldConfigurationConnection"] | undefined,
	/** The view's visible fields. */
	visibleFields?: GraphQLTypes["ProjectV2FieldConnection"] | undefined
};
	/** The connection type for ProjectV2View. */
["ProjectV2ViewConnection"]: {
	__typename: "ProjectV2ViewConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectV2ViewEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectV2View"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectV2ViewEdge"]: {
	__typename: "ProjectV2ViewEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectV2View"] | undefined
};
	/** The layout of a project v2 view. */
["ProjectV2ViewLayout"]: ProjectV2ViewLayout;
	/** Ordering options for project v2 view connections */
["ProjectV2ViewOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order the project v2 views by. */
	field: GraphQLTypes["ProjectV2ViewOrderField"]
};
	/** Properties by which project v2 view connections can be ordered. */
["ProjectV2ViewOrderField"]: ProjectV2ViewOrderField;
	/** A view within a Project. */
["ProjectView"]: {
	__typename: "ProjectView",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The project view's filter. */
	filter?: string | undefined,
	/** The view's group-by field. */
	groupBy?: Array<number> | undefined,
	id: string,
	/** The project view's layout. */
	layout: GraphQLTypes["ProjectViewLayout"],
	/** The project view's name. */
	name: string,
	/** The project view's number. */
	number: number,
	/** The project that contains this view. */
	project: GraphQLTypes["ProjectNext"],
	/** The view's sort-by config. */
	sortBy?: Array<GraphQLTypes["SortBy"]> | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The view's vertical-group-by field. */
	verticalGroupBy?: Array<number> | undefined,
	/** The view's visible fields. */
	visibleFields?: Array<number> | undefined
};
	/** The connection type for ProjectView. */
["ProjectViewConnection"]: {
	__typename: "ProjectViewConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ProjectViewEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ProjectView"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ProjectViewEdge"]: {
	__typename: "ProjectViewEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ProjectView"] | undefined
};
	/** The layout of a project view. */
["ProjectViewLayout"]: ProjectViewLayout;
	/** A user's public key. */
["PublicKey"]: {
	__typename: "PublicKey",
	/** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
	accessedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the date and time when the key was created. Keys created before
March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
	createdAt?: GraphQLTypes["DateTime"] | undefined,
	/** The fingerprint for this PublicKey. */
	fingerprint: string,
	id: string,
	/** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
	isReadOnly?: boolean | undefined,
	/** The public key string. */
	key: string,
	/** Identifies the date and time when the key was updated. Keys created before
March 5th, 2014 may have inaccurate values. Values will be null for keys not
owned by the user. */
	updatedAt?: GraphQLTypes["DateTime"] | undefined
};
	/** The connection type for PublicKey. */
["PublicKeyConnection"]: {
	__typename: "PublicKeyConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PublicKeyEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PublicKey"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PublicKeyEdge"]: {
	__typename: "PublicKeyEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PublicKey"] | undefined
};
	/** A repository pull request. */
["PullRequest"]: {
	__typename: "PullRequest",
	/** Reason that the conversation was locked. */
	activeLockReason?: GraphQLTypes["LockReason"] | undefined,
	/** The number of additions in this pull request. */
	additions: number,
	/** A list of Users assigned to this object. */
	assignees: GraphQLTypes["UserConnection"],
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** Returns the auto-merge request object if one exists for this pull request. */
	autoMergeRequest?: GraphQLTypes["AutoMergeRequest"] | undefined,
	/** Identifies the base Ref associated with the pull request. */
	baseRef?: GraphQLTypes["Ref"] | undefined,
	/** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
	baseRefName: string,
	/** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
	baseRefOid: GraphQLTypes["GitObjectID"],
	/** The repository associated with this pull request's base Ref. */
	baseRepository?: GraphQLTypes["Repository"] | undefined,
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Whether or not the pull request is rebaseable. */
	canBeRebased: boolean,
	/** The number of changed files in this pull request. */
	changedFiles: number,
	/** The HTTP path for the checks of this pull request. */
	checksResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for the checks of this pull request. */
	checksUrl: GraphQLTypes["URI"],
	/** `true` if the pull request is closed */
	closed: boolean,
	/** Identifies the date and time when the object was closed. */
	closedAt?: GraphQLTypes["DateTime"] | undefined,
	/** List of issues that were may be closed by this pull request */
	closingIssuesReferences?: GraphQLTypes["IssueConnection"] | undefined,
	/** A list of comments associated with the pull request. */
	comments: GraphQLTypes["IssueCommentConnection"],
	/** A list of commits present in this pull request's head branch not present in the base branch. */
	commits: GraphQLTypes["PullRequestCommitConnection"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The number of deletions in this pull request. */
	deletions: number,
	/** The actor who edited this pull request's body. */
	editor?: GraphQLTypes["Actor"] | undefined,
	/** Lists the files changed within this pull request. */
	files?: GraphQLTypes["PullRequestChangedFileConnection"] | undefined,
	/** Identifies the head Ref associated with the pull request. */
	headRef?: GraphQLTypes["Ref"] | undefined,
	/** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
	headRefName: string,
	/** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
	headRefOid: GraphQLTypes["GitObjectID"],
	/** The repository associated with this pull request's head Ref. */
	headRepository?: GraphQLTypes["Repository"] | undefined,
	/** The owner of the repository associated with this pull request's head Ref. */
	headRepositoryOwner?: GraphQLTypes["RepositoryOwner"] | undefined,
	/** The hovercard information for this issue */
	hovercard: GraphQLTypes["Hovercard"],
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** The head and base repositories are different. */
	isCrossRepository: boolean,
	/** Identifies if the pull request is a draft. */
	isDraft: boolean,
	/** Is this pull request read by the viewer */
	isReadByViewer?: boolean | undefined,
	/** A list of labels associated with the object. */
	labels?: GraphQLTypes["LabelConnection"] | undefined,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of latest reviews per user associated with the pull request. */
	latestOpinionatedReviews?: GraphQLTypes["PullRequestReviewConnection"] | undefined,
	/** A list of latest reviews per user associated with the pull request that are not also pending review. */
	latestReviews?: GraphQLTypes["PullRequestReviewConnection"] | undefined,
	/** `true` if the pull request is locked */
	locked: boolean,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify: boolean,
	/** The commit that was created when this pull request was merged. */
	mergeCommit?: GraphQLTypes["Commit"] | undefined,
	/** Detailed information about the current pull request merge state status. */
	mergeStateStatus: GraphQLTypes["MergeStateStatus"],
	/** Whether or not the pull request can be merged based on the existence of merge conflicts. */
	mergeable: GraphQLTypes["MergeableState"],
	/** Whether or not the pull request was merged. */
	merged: boolean,
	/** The date and time that the pull request was merged. */
	mergedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The actor who merged the pull request. */
	mergedBy?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the milestone associated with the pull request. */
	milestone?: GraphQLTypes["Milestone"] | undefined,
	/** Identifies the pull request number. */
	number: number,
	/** A list of Users that are participating in the Pull Request conversation. */
	participants: GraphQLTypes["UserConnection"],
	/** The permalink to the pull request. */
	permalink: GraphQLTypes["URI"],
	/** The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request. */
	potentialMergeCommit?: GraphQLTypes["Commit"] | undefined,
	/** List of project cards associated with this pull request. */
	projectCards: GraphQLTypes["ProjectCardConnection"],
	/** List of project items associated with this pull request. */
	projectItems: GraphQLTypes["ProjectV2ItemConnection"],
	/** Find a project by project (beta) number. */
	projectNext?: GraphQLTypes["ProjectNext"] | undefined,
	/** List of project (beta) items associated with this pull request. */
	projectNextItems: GraphQLTypes["ProjectNextItemConnection"],
	/** Find a project by number. */
	projectV2?: GraphQLTypes["ProjectV2"] | undefined,
	/** A list of projects (beta) under the owner. */
	projectsNext: GraphQLTypes["ProjectNextConnection"],
	/** A list of projects under the owner. */
	projectsV2: GraphQLTypes["ProjectV2Connection"],
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this pull request. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP path for reverting this pull request. */
	revertResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for reverting this pull request. */
	revertUrl: GraphQLTypes["URI"],
	/** The current status of this pull request with respect to code review. */
	reviewDecision?: GraphQLTypes["PullRequestReviewDecision"] | undefined,
	/** A list of review requests associated with the pull request. */
	reviewRequests?: GraphQLTypes["ReviewRequestConnection"] | undefined,
	/** The list of all review threads for this pull request. */
	reviewThreads: GraphQLTypes["PullRequestReviewThreadConnection"],
	/** A list of reviews associated with the pull request. */
	reviews?: GraphQLTypes["PullRequestReviewConnection"] | undefined,
	/** Identifies the state of the pull request. */
	state: GraphQLTypes["PullRequestState"],
	/** A list of reviewer suggestions based on commit history and past review comments. */
	suggestedReviewers: Array<GraphQLTypes["SuggestedReviewer"] | undefined>,
	/** A list of events, comments, commits, etc. associated with the pull request. */
	timeline: GraphQLTypes["PullRequestTimelineConnection"],
	/** A list of events, comments, commits, etc. associated with the pull request. */
	timelineItems: GraphQLTypes["PullRequestTimelineItemsConnection"],
	/** Identifies the pull request title. */
	title: string,
	/** Identifies the pull request title rendered to HTML. */
	titleHTML: GraphQLTypes["HTML"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this pull request. */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Whether or not the viewer can apply suggestion. */
	viewerCanApplySuggestion: boolean,
	/** Check if the viewer can restore the deleted head ref. */
	viewerCanDeleteHeadRef: boolean,
	/** Whether or not the viewer can disable auto-merge */
	viewerCanDisableAutoMerge: boolean,
	/** Can the viewer edit files within this pull request. */
	viewerCanEditFiles: boolean,
	/** Whether or not the viewer can enable auto-merge */
	viewerCanEnableAutoMerge: boolean,
	/** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
	viewerCanMergeAsAdmin: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** The latest review given from the viewer. */
	viewerLatestReview?: GraphQLTypes["PullRequestReview"] | undefined,
	/** The person who has requested the viewer for review on this pull request. */
	viewerLatestReviewRequest?: GraphQLTypes["ReviewRequest"] | undefined,
	/** The merge body text for the viewer and method. */
	viewerMergeBodyText: string,
	/** The merge headline text for the viewer and method. */
	viewerMergeHeadlineText: string,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: GraphQLTypes["SubscriptionState"] | undefined
};
	/** A file changed in a pull request. */
["PullRequestChangedFile"]: {
	__typename: "PullRequestChangedFile",
	/** The number of additions to the file. */
	additions: number,
	/** How the file was changed in this PullRequest */
	changeType: GraphQLTypes["PatchStatus"],
	/** The number of deletions to the file. */
	deletions: number,
	/** The path of the file. */
	path: string,
	/** The state of the file for the viewer. */
	viewerViewedState: GraphQLTypes["FileViewedState"]
};
	/** The connection type for PullRequestChangedFile. */
["PullRequestChangedFileConnection"]: {
	__typename: "PullRequestChangedFileConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PullRequestChangedFileEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PullRequestChangedFile"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PullRequestChangedFileEdge"]: {
	__typename: "PullRequestChangedFileEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PullRequestChangedFile"] | undefined
};
	/** Represents a Git commit part of a pull request. */
["PullRequestCommit"]: {
	__typename: "PullRequestCommit",
	/** The Git commit object */
	commit: GraphQLTypes["Commit"],
	id: string,
	/** The pull request this commit belongs to */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The HTTP path for this pull request commit */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this pull request commit */
	url: GraphQLTypes["URI"]
};
	/** Represents a commit comment thread part of a pull request. */
["PullRequestCommitCommentThread"]: {
	__typename: "PullRequestCommitCommentThread",
	/** The comments that exist in this thread. */
	comments: GraphQLTypes["CommitCommentConnection"],
	/** The commit the comments were made on. */
	commit: GraphQLTypes["Commit"],
	id: string,
	/** The file the comments were made on. */
	path?: string | undefined,
	/** The position in the diff for the commit that the comment was made on. */
	position?: number | undefined,
	/** The pull request this commit comment thread belongs to */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"]
};
	/** The connection type for PullRequestCommit. */
["PullRequestCommitConnection"]: {
	__typename: "PullRequestCommitConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PullRequestCommitEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PullRequestCommit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PullRequestCommitEdge"]: {
	__typename: "PullRequestCommitEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PullRequestCommit"] | undefined
};
	/** The connection type for PullRequest. */
["PullRequestConnection"]: {
	__typename: "PullRequestConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PullRequestEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PullRequest"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** This aggregates pull requests opened by a user within one repository. */
["PullRequestContributionsByRepository"]: {
	__typename: "PullRequestContributionsByRepository",
	/** The pull request contributions. */
	contributions: GraphQLTypes["CreatedPullRequestContributionConnection"],
	/** The repository in which the pull requests were opened. */
	repository: GraphQLTypes["Repository"]
};
	/** An edge in a connection. */
["PullRequestEdge"]: {
	__typename: "PullRequestEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents available types of methods to use when merging a pull request. */
["PullRequestMergeMethod"]: PullRequestMergeMethod;
	/** Ways in which lists of issues can be ordered upon return. */
["PullRequestOrder"]: {
		/** The direction in which to order pull requests by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order pull requests by. */
	field: GraphQLTypes["PullRequestOrderField"]
};
	/** Properties by which pull_requests connections can be ordered. */
["PullRequestOrderField"]: PullRequestOrderField;
	/** A review object for a given pull request. */
["PullRequestReview"]: {
	__typename: "PullRequestReview",
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** Indicates whether the author of this review has push access to the repository. */
	authorCanPushToRepository: boolean,
	/** Identifies the pull request review body. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body of this review rendered as plain text. */
	bodyText: string,
	/** A list of review comments for the current pull request review. */
	comments: GraphQLTypes["PullRequestReviewCommentConnection"],
	/** Identifies the commit associated with this pull request review. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of teams that this review was made on behalf of. */
	onBehalfOf: GraphQLTypes["TeamConnection"],
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the pull request associated with this pull request review. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path permalink for this PullRequestReview. */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the current state of the pull request review. */
	state: GraphQLTypes["PullRequestReviewState"],
	/** Identifies when the Pull Request Review was submitted */
	submittedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL permalink for this PullRequestReview. */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** A review comment associated with a given repository pull request. */
["PullRequestReviewComment"]: {
	__typename: "PullRequestReviewComment",
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the subject of the comment. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** The comment body of this review comment. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The comment body of this review comment rendered as plain text. */
	bodyText: string,
	/** Identifies the commit associated with the comment. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies when the comment was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The diff hunk to which the comment applies. */
	diffHunk: string,
	/** Identifies when the comment was created in a draft state. */
	draftedAt: GraphQLTypes["DateTime"],
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Returns whether or not a comment has been minimized. */
	isMinimized: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation. */
	minimizedReason?: string | undefined,
	/** Identifies the original commit associated with the comment. */
	originalCommit?: GraphQLTypes["Commit"] | undefined,
	/** The original line index in the diff to which the comment applies. */
	originalPosition: number,
	/** Identifies when the comment body is outdated */
	outdated: boolean,
	/** The path to which the comment applies. */
	path: string,
	/** The line index in the diff to which the comment applies. */
	position?: number | undefined,
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The pull request associated with this review comment. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The pull request review associated with this review comment. */
	pullRequestReview?: GraphQLTypes["PullRequestReview"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The comment this is a reply to. */
	replyTo?: GraphQLTypes["PullRequestReviewComment"] | undefined,
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path permalink for this review comment. */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the state of the comment. */
	state: GraphQLTypes["PullRequestReviewCommentState"],
	/** Identifies when the comment was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL permalink for this review comment. */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Check if the current viewer can minimize this object. */
	viewerCanMinimize: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for PullRequestReviewComment. */
["PullRequestReviewCommentConnection"]: {
	__typename: "PullRequestReviewCommentConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PullRequestReviewCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PullRequestReviewComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PullRequestReviewCommentEdge"]: {
	__typename: "PullRequestReviewCommentEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PullRequestReviewComment"] | undefined
};
	/** The possible states of a pull request review comment. */
["PullRequestReviewCommentState"]: PullRequestReviewCommentState;
	/** The connection type for PullRequestReview. */
["PullRequestReviewConnection"]: {
	__typename: "PullRequestReviewConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PullRequestReviewEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PullRequestReview"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** This aggregates pull request reviews made by a user within one repository. */
["PullRequestReviewContributionsByRepository"]: {
	__typename: "PullRequestReviewContributionsByRepository",
	/** The pull request review contributions. */
	contributions: GraphQLTypes["CreatedPullRequestReviewContributionConnection"],
	/** The repository in which the pull request reviews were made. */
	repository: GraphQLTypes["Repository"]
};
	/** The review status of a pull request. */
["PullRequestReviewDecision"]: PullRequestReviewDecision;
	/** An edge in a connection. */
["PullRequestReviewEdge"]: {
	__typename: "PullRequestReviewEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PullRequestReview"] | undefined
};
	/** The possible events to perform on a pull request review. */
["PullRequestReviewEvent"]: PullRequestReviewEvent;
	/** The possible states of a pull request review. */
["PullRequestReviewState"]: PullRequestReviewState;
	/** A threaded list of comments for a given pull request. */
["PullRequestReviewThread"]: {
	__typename: "PullRequestReviewThread",
	/** A list of pull request comments associated with the thread. */
	comments: GraphQLTypes["PullRequestReviewCommentConnection"],
	/** The side of the diff on which this thread was placed. */
	diffSide: GraphQLTypes["DiffSide"],
	id: string,
	/** Whether or not the thread has been collapsed (resolved) */
	isCollapsed: boolean,
	/** Indicates whether this thread was outdated by newer changes. */
	isOutdated: boolean,
	/** Whether this thread has been resolved */
	isResolved: boolean,
	/** The line in the file to which this thread refers */
	line?: number | undefined,
	/** The original line in the file to which this thread refers. */
	originalLine?: number | undefined,
	/** The original start line in the file to which this thread refers (multi-line only). */
	originalStartLine?: number | undefined,
	/** Identifies the file path of this thread. */
	path: string,
	/** Identifies the pull request associated with this thread. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** Identifies the repository associated with this thread. */
	repository: GraphQLTypes["Repository"],
	/** The user who resolved this thread */
	resolvedBy?: GraphQLTypes["User"] | undefined,
	/** The side of the diff that the first line of the thread starts on (multi-line only) */
	startDiffSide?: GraphQLTypes["DiffSide"] | undefined,
	/** The start line in the file to which this thread refers (multi-line only) */
	startLine?: number | undefined,
	/** Indicates whether the current viewer can reply to this thread. */
	viewerCanReply: boolean,
	/** Whether or not the viewer can resolve this thread */
	viewerCanResolve: boolean,
	/** Whether or not the viewer can unresolve this thread */
	viewerCanUnresolve: boolean
};
	/** Review comment threads for a pull request review. */
["PullRequestReviewThreadConnection"]: {
	__typename: "PullRequestReviewThreadConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PullRequestReviewThreadEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PullRequestReviewThread"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PullRequestReviewThreadEdge"]: {
	__typename: "PullRequestReviewThreadEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PullRequestReviewThread"] | undefined
};
	/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
["PullRequestRevisionMarker"]: {
	__typename: "PullRequestRevisionMarker",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The last commit the viewer has seen. */
	lastSeenCommit: GraphQLTypes["Commit"],
	/** The pull request to which the marker belongs. */
	pullRequest: GraphQLTypes["PullRequest"]
};
	/** The possible states of a pull request. */
["PullRequestState"]: PullRequestState;
	/** A repository pull request template. */
["PullRequestTemplate"]: {
	__typename: "PullRequestTemplate",
	/** The body of the template */
	body?: string | undefined,
	/** The filename of the template */
	filename?: string | undefined,
	/** The repository the template belongs to */
	repository: GraphQLTypes["Repository"]
};
	/** A threaded list of comments for a given pull request. */
["PullRequestThread"]: {
	__typename: "PullRequestThread",
	/** A list of pull request comments associated with the thread. */
	comments: GraphQLTypes["PullRequestReviewCommentConnection"],
	/** The side of the diff on which this thread was placed. */
	diffSide: GraphQLTypes["DiffSide"],
	id: string,
	/** Whether or not the thread has been collapsed (resolved) */
	isCollapsed: boolean,
	/** Indicates whether this thread was outdated by newer changes. */
	isOutdated: boolean,
	/** Whether this thread has been resolved */
	isResolved: boolean,
	/** The line in the file to which this thread refers */
	line?: number | undefined,
	/** Identifies the pull request associated with this thread. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** Identifies the repository associated with this thread. */
	repository: GraphQLTypes["Repository"],
	/** The user who resolved this thread */
	resolvedBy?: GraphQLTypes["User"] | undefined,
	/** The side of the diff that the first line of the thread starts on (multi-line only) */
	startDiffSide?: GraphQLTypes["DiffSide"] | undefined,
	/** The line of the first file diff in the thread. */
	startLine?: number | undefined,
	/** Indicates whether the current viewer can reply to this thread. */
	viewerCanReply: boolean,
	/** Whether or not the viewer can resolve this thread */
	viewerCanResolve: boolean,
	/** Whether or not the viewer can unresolve this thread */
	viewerCanUnresolve: boolean
};
	/** The connection type for PullRequestTimelineItem. */
["PullRequestTimelineConnection"]: {
	__typename: "PullRequestTimelineConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PullRequestTimelineItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PullRequestTimelineItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An item in a pull request timeline */
["PullRequestTimelineItem"]:{
        	__typename:"AssignedEvent" | "BaseRefDeletedEvent" | "BaseRefForcePushedEvent" | "ClosedEvent" | "Commit" | "CommitCommentThread" | "CrossReferencedEvent" | "DemilestonedEvent" | "DeployedEvent" | "DeploymentEnvironmentChangedEvent" | "HeadRefDeletedEvent" | "HeadRefForcePushedEvent" | "HeadRefRestoredEvent" | "IssueComment" | "LabeledEvent" | "LockedEvent" | "MergedEvent" | "MilestonedEvent" | "PullRequestReview" | "PullRequestReviewComment" | "PullRequestReviewThread" | "ReferencedEvent" | "RenamedTitleEvent" | "ReopenedEvent" | "ReviewDismissedEvent" | "ReviewRequestRemovedEvent" | "ReviewRequestedEvent" | "SubscribedEvent" | "UnassignedEvent" | "UnlabeledEvent" | "UnlockedEvent" | "UnsubscribedEvent" | "UserBlockedEvent"
        	['...on AssignedEvent']: '__union' & GraphQLTypes["AssignedEvent"];
	['...on BaseRefDeletedEvent']: '__union' & GraphQLTypes["BaseRefDeletedEvent"];
	['...on BaseRefForcePushedEvent']: '__union' & GraphQLTypes["BaseRefForcePushedEvent"];
	['...on ClosedEvent']: '__union' & GraphQLTypes["ClosedEvent"];
	['...on Commit']: '__union' & GraphQLTypes["Commit"];
	['...on CommitCommentThread']: '__union' & GraphQLTypes["CommitCommentThread"];
	['...on CrossReferencedEvent']: '__union' & GraphQLTypes["CrossReferencedEvent"];
	['...on DemilestonedEvent']: '__union' & GraphQLTypes["DemilestonedEvent"];
	['...on DeployedEvent']: '__union' & GraphQLTypes["DeployedEvent"];
	['...on DeploymentEnvironmentChangedEvent']: '__union' & GraphQLTypes["DeploymentEnvironmentChangedEvent"];
	['...on HeadRefDeletedEvent']: '__union' & GraphQLTypes["HeadRefDeletedEvent"];
	['...on HeadRefForcePushedEvent']: '__union' & GraphQLTypes["HeadRefForcePushedEvent"];
	['...on HeadRefRestoredEvent']: '__union' & GraphQLTypes["HeadRefRestoredEvent"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on LabeledEvent']: '__union' & GraphQLTypes["LabeledEvent"];
	['...on LockedEvent']: '__union' & GraphQLTypes["LockedEvent"];
	['...on MergedEvent']: '__union' & GraphQLTypes["MergedEvent"];
	['...on MilestonedEvent']: '__union' & GraphQLTypes["MilestonedEvent"];
	['...on PullRequestReview']: '__union' & GraphQLTypes["PullRequestReview"];
	['...on PullRequestReviewComment']: '__union' & GraphQLTypes["PullRequestReviewComment"];
	['...on PullRequestReviewThread']: '__union' & GraphQLTypes["PullRequestReviewThread"];
	['...on ReferencedEvent']: '__union' & GraphQLTypes["ReferencedEvent"];
	['...on RenamedTitleEvent']: '__union' & GraphQLTypes["RenamedTitleEvent"];
	['...on ReopenedEvent']: '__union' & GraphQLTypes["ReopenedEvent"];
	['...on ReviewDismissedEvent']: '__union' & GraphQLTypes["ReviewDismissedEvent"];
	['...on ReviewRequestRemovedEvent']: '__union' & GraphQLTypes["ReviewRequestRemovedEvent"];
	['...on ReviewRequestedEvent']: '__union' & GraphQLTypes["ReviewRequestedEvent"];
	['...on SubscribedEvent']: '__union' & GraphQLTypes["SubscribedEvent"];
	['...on UnassignedEvent']: '__union' & GraphQLTypes["UnassignedEvent"];
	['...on UnlabeledEvent']: '__union' & GraphQLTypes["UnlabeledEvent"];
	['...on UnlockedEvent']: '__union' & GraphQLTypes["UnlockedEvent"];
	['...on UnsubscribedEvent']: '__union' & GraphQLTypes["UnsubscribedEvent"];
	['...on UserBlockedEvent']: '__union' & GraphQLTypes["UserBlockedEvent"];
};
	/** An edge in a connection. */
["PullRequestTimelineItemEdge"]: {
	__typename: "PullRequestTimelineItemEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PullRequestTimelineItem"] | undefined
};
	/** An item in a pull request timeline */
["PullRequestTimelineItems"]:{
        	__typename:"AddedToProjectEvent" | "AssignedEvent" | "AutoMergeDisabledEvent" | "AutoMergeEnabledEvent" | "AutoRebaseEnabledEvent" | "AutoSquashEnabledEvent" | "AutomaticBaseChangeFailedEvent" | "AutomaticBaseChangeSucceededEvent" | "BaseRefChangedEvent" | "BaseRefDeletedEvent" | "BaseRefForcePushedEvent" | "ClosedEvent" | "CommentDeletedEvent" | "ConnectedEvent" | "ConvertToDraftEvent" | "ConvertedNoteToIssueEvent" | "ConvertedToDiscussionEvent" | "CrossReferencedEvent" | "DemilestonedEvent" | "DeployedEvent" | "DeploymentEnvironmentChangedEvent" | "DisconnectedEvent" | "HeadRefDeletedEvent" | "HeadRefForcePushedEvent" | "HeadRefRestoredEvent" | "IssueComment" | "LabeledEvent" | "LockedEvent" | "MarkedAsDuplicateEvent" | "MentionedEvent" | "MergedEvent" | "MilestonedEvent" | "MovedColumnsInProjectEvent" | "PinnedEvent" | "PullRequestCommit" | "PullRequestCommitCommentThread" | "PullRequestReview" | "PullRequestReviewThread" | "PullRequestRevisionMarker" | "ReadyForReviewEvent" | "ReferencedEvent" | "RemovedFromProjectEvent" | "RenamedTitleEvent" | "ReopenedEvent" | "ReviewDismissedEvent" | "ReviewRequestRemovedEvent" | "ReviewRequestedEvent" | "SubscribedEvent" | "TransferredEvent" | "UnassignedEvent" | "UnlabeledEvent" | "UnlockedEvent" | "UnmarkedAsDuplicateEvent" | "UnpinnedEvent" | "UnsubscribedEvent" | "UserBlockedEvent"
        	['...on AddedToProjectEvent']: '__union' & GraphQLTypes["AddedToProjectEvent"];
	['...on AssignedEvent']: '__union' & GraphQLTypes["AssignedEvent"];
	['...on AutoMergeDisabledEvent']: '__union' & GraphQLTypes["AutoMergeDisabledEvent"];
	['...on AutoMergeEnabledEvent']: '__union' & GraphQLTypes["AutoMergeEnabledEvent"];
	['...on AutoRebaseEnabledEvent']: '__union' & GraphQLTypes["AutoRebaseEnabledEvent"];
	['...on AutoSquashEnabledEvent']: '__union' & GraphQLTypes["AutoSquashEnabledEvent"];
	['...on AutomaticBaseChangeFailedEvent']: '__union' & GraphQLTypes["AutomaticBaseChangeFailedEvent"];
	['...on AutomaticBaseChangeSucceededEvent']: '__union' & GraphQLTypes["AutomaticBaseChangeSucceededEvent"];
	['...on BaseRefChangedEvent']: '__union' & GraphQLTypes["BaseRefChangedEvent"];
	['...on BaseRefDeletedEvent']: '__union' & GraphQLTypes["BaseRefDeletedEvent"];
	['...on BaseRefForcePushedEvent']: '__union' & GraphQLTypes["BaseRefForcePushedEvent"];
	['...on ClosedEvent']: '__union' & GraphQLTypes["ClosedEvent"];
	['...on CommentDeletedEvent']: '__union' & GraphQLTypes["CommentDeletedEvent"];
	['...on ConnectedEvent']: '__union' & GraphQLTypes["ConnectedEvent"];
	['...on ConvertToDraftEvent']: '__union' & GraphQLTypes["ConvertToDraftEvent"];
	['...on ConvertedNoteToIssueEvent']: '__union' & GraphQLTypes["ConvertedNoteToIssueEvent"];
	['...on ConvertedToDiscussionEvent']: '__union' & GraphQLTypes["ConvertedToDiscussionEvent"];
	['...on CrossReferencedEvent']: '__union' & GraphQLTypes["CrossReferencedEvent"];
	['...on DemilestonedEvent']: '__union' & GraphQLTypes["DemilestonedEvent"];
	['...on DeployedEvent']: '__union' & GraphQLTypes["DeployedEvent"];
	['...on DeploymentEnvironmentChangedEvent']: '__union' & GraphQLTypes["DeploymentEnvironmentChangedEvent"];
	['...on DisconnectedEvent']: '__union' & GraphQLTypes["DisconnectedEvent"];
	['...on HeadRefDeletedEvent']: '__union' & GraphQLTypes["HeadRefDeletedEvent"];
	['...on HeadRefForcePushedEvent']: '__union' & GraphQLTypes["HeadRefForcePushedEvent"];
	['...on HeadRefRestoredEvent']: '__union' & GraphQLTypes["HeadRefRestoredEvent"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on LabeledEvent']: '__union' & GraphQLTypes["LabeledEvent"];
	['...on LockedEvent']: '__union' & GraphQLTypes["LockedEvent"];
	['...on MarkedAsDuplicateEvent']: '__union' & GraphQLTypes["MarkedAsDuplicateEvent"];
	['...on MentionedEvent']: '__union' & GraphQLTypes["MentionedEvent"];
	['...on MergedEvent']: '__union' & GraphQLTypes["MergedEvent"];
	['...on MilestonedEvent']: '__union' & GraphQLTypes["MilestonedEvent"];
	['...on MovedColumnsInProjectEvent']: '__union' & GraphQLTypes["MovedColumnsInProjectEvent"];
	['...on PinnedEvent']: '__union' & GraphQLTypes["PinnedEvent"];
	['...on PullRequestCommit']: '__union' & GraphQLTypes["PullRequestCommit"];
	['...on PullRequestCommitCommentThread']: '__union' & GraphQLTypes["PullRequestCommitCommentThread"];
	['...on PullRequestReview']: '__union' & GraphQLTypes["PullRequestReview"];
	['...on PullRequestReviewThread']: '__union' & GraphQLTypes["PullRequestReviewThread"];
	['...on PullRequestRevisionMarker']: '__union' & GraphQLTypes["PullRequestRevisionMarker"];
	['...on ReadyForReviewEvent']: '__union' & GraphQLTypes["ReadyForReviewEvent"];
	['...on ReferencedEvent']: '__union' & GraphQLTypes["ReferencedEvent"];
	['...on RemovedFromProjectEvent']: '__union' & GraphQLTypes["RemovedFromProjectEvent"];
	['...on RenamedTitleEvent']: '__union' & GraphQLTypes["RenamedTitleEvent"];
	['...on ReopenedEvent']: '__union' & GraphQLTypes["ReopenedEvent"];
	['...on ReviewDismissedEvent']: '__union' & GraphQLTypes["ReviewDismissedEvent"];
	['...on ReviewRequestRemovedEvent']: '__union' & GraphQLTypes["ReviewRequestRemovedEvent"];
	['...on ReviewRequestedEvent']: '__union' & GraphQLTypes["ReviewRequestedEvent"];
	['...on SubscribedEvent']: '__union' & GraphQLTypes["SubscribedEvent"];
	['...on TransferredEvent']: '__union' & GraphQLTypes["TransferredEvent"];
	['...on UnassignedEvent']: '__union' & GraphQLTypes["UnassignedEvent"];
	['...on UnlabeledEvent']: '__union' & GraphQLTypes["UnlabeledEvent"];
	['...on UnlockedEvent']: '__union' & GraphQLTypes["UnlockedEvent"];
	['...on UnmarkedAsDuplicateEvent']: '__union' & GraphQLTypes["UnmarkedAsDuplicateEvent"];
	['...on UnpinnedEvent']: '__union' & GraphQLTypes["UnpinnedEvent"];
	['...on UnsubscribedEvent']: '__union' & GraphQLTypes["UnsubscribedEvent"];
	['...on UserBlockedEvent']: '__union' & GraphQLTypes["UserBlockedEvent"];
};
	/** The connection type for PullRequestTimelineItems. */
["PullRequestTimelineItemsConnection"]: {
	__typename: "PullRequestTimelineItemsConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PullRequestTimelineItemsEdge"] | undefined> | undefined,
	/** Identifies the count of items after applying `before` and `after` filters. */
	filteredCount: number,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PullRequestTimelineItems"] | undefined> | undefined,
	/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
	pageCount: number,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** Identifies the date and time when the timeline was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** An edge in a connection. */
["PullRequestTimelineItemsEdge"]: {
	__typename: "PullRequestTimelineItemsEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PullRequestTimelineItems"] | undefined
};
	/** The possible item types found in a timeline. */
["PullRequestTimelineItemsItemType"]: PullRequestTimelineItemsItemType;
	/** The possible target states when updating a pull request. */
["PullRequestUpdateState"]: PullRequestUpdateState;
	/** A Git push. */
["Push"]: {
	__typename: "Push",
	id: string,
	/** The SHA after the push */
	nextSha?: GraphQLTypes["GitObjectID"] | undefined,
	/** The permalink for this push. */
	permalink: GraphQLTypes["URI"],
	/** The SHA before the push */
	previousSha?: GraphQLTypes["GitObjectID"] | undefined,
	/** The actor who pushed */
	pusher: GraphQLTypes["Actor"],
	/** The repository that was pushed to */
	repository: GraphQLTypes["Repository"]
};
	/** A team, user, or app who has the ability to push to a protected branch. */
["PushAllowance"]: {
	__typename: "PushAllowance",
	/** The actor that can push. */
	actor?: GraphQLTypes["PushAllowanceActor"] | undefined,
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?: GraphQLTypes["BranchProtectionRule"] | undefined,
	id: string
};
	/** Types that can be an actor. */
["PushAllowanceActor"]:{
        	__typename:"App" | "Team" | "User"
        	['...on App']: '__union' & GraphQLTypes["App"];
	['...on Team']: '__union' & GraphQLTypes["Team"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** The connection type for PushAllowance. */
["PushAllowanceConnection"]: {
	__typename: "PushAllowanceConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["PushAllowanceEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["PushAllowance"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["PushAllowanceEdge"]: {
	__typename: "PushAllowanceEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["PushAllowance"] | undefined
};
	/** The query root of GitHub's GraphQL interface. */
["Query"]: {
	__typename: "Query",
	/** Look up a code of conduct by its key */
	codeOfConduct?: GraphQLTypes["CodeOfConduct"] | undefined,
	/** Look up a code of conduct by its key */
	codesOfConduct?: Array<GraphQLTypes["CodeOfConduct"] | undefined> | undefined,
	/** Look up an enterprise by URL slug. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
	enterpriseAdministratorInvitation?: GraphQLTypes["EnterpriseAdministratorInvitation"] | undefined,
	/** Look up a pending enterprise administrator invitation by invitation token. */
	enterpriseAdministratorInvitationByToken?: GraphQLTypes["EnterpriseAdministratorInvitation"] | undefined,
	/** Look up an open source license by its key */
	license?: GraphQLTypes["License"] | undefined,
	/** Return a list of known open source licenses */
	licenses: Array<GraphQLTypes["License"] | undefined>,
	/** Get alphabetically sorted list of Marketplace categories */
	marketplaceCategories: Array<GraphQLTypes["MarketplaceCategory"]>,
	/** Look up a Marketplace category by its slug. */
	marketplaceCategory?: GraphQLTypes["MarketplaceCategory"] | undefined,
	/** Look up a single Marketplace listing */
	marketplaceListing?: GraphQLTypes["MarketplaceListing"] | undefined,
	/** Look up Marketplace listings */
	marketplaceListings: GraphQLTypes["MarketplaceListingConnection"],
	/** Return information about the GitHub instance */
	meta: GraphQLTypes["GitHubMetadata"],
	/** Fetches an object given its ID. */
	node?: GraphQLTypes["Node"] | undefined,
	/** Lookup nodes by a list of IDs. */
	nodes: Array<GraphQLTypes["Node"] | undefined>,
	/** Lookup a organization by login. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The client's rate limit information. */
	rateLimit?: GraphQLTypes["RateLimit"] | undefined,
	/** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
	relay: GraphQLTypes["Query"],
	/** Lookup a given repository by the owner and repository name. */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** Lookup a repository owner (ie. either a User or an Organization) by login. */
	repositoryOwner?: GraphQLTypes["RepositoryOwner"] | undefined,
	/** Lookup resource by a URL. */
	resource?: GraphQLTypes["UniformResourceLocatable"] | undefined,
	/** Perform a search across resources, returning a maximum of 1,000 results. */
	search: GraphQLTypes["SearchResultItemConnection"],
	/** GitHub Security Advisories */
	securityAdvisories: GraphQLTypes["SecurityAdvisoryConnection"],
	/** Fetch a Security Advisory by its GHSA ID */
	securityAdvisory?: GraphQLTypes["SecurityAdvisory"] | undefined,
	/** Software Vulnerabilities documented by GitHub Security Advisories */
	securityVulnerabilities: GraphQLTypes["SecurityVulnerabilityConnection"],
	/** Users and organizations who can be sponsored via GitHub Sponsors. */
	sponsorables: GraphQLTypes["SponsorableItemConnection"],
	/** Look up a topic by name. */
	topic?: GraphQLTypes["Topic"] | undefined,
	/** Lookup a user by login. */
	user?: GraphQLTypes["User"] | undefined,
	/** The currently authenticated user. */
	viewer: GraphQLTypes["User"]
};
	/** Represents the client's rate limit. */
["RateLimit"]: {
	__typename: "RateLimit",
	/** The point cost for the current query counting against the rate limit. */
	cost: number,
	/** The maximum number of points the client is permitted to consume in a 60 minute window. */
	limit: number,
	/** The maximum number of nodes this query may return */
	nodeCount: number,
	/** The number of points remaining in the current rate limit window. */
	remaining: number,
	/** The time at which the current rate limit window resets in UTC epoch seconds. */
	resetAt: GraphQLTypes["DateTime"],
	/** The number of points used in the current rate limit window. */
	used: number
};
	/** Represents a subject that can be reacted on. */
["Reactable"]: {
	__typename:"CommitComment" | "Discussion" | "DiscussionComment" | "Issue" | "IssueComment" | "PullRequest" | "PullRequestReview" | "PullRequestReviewComment" | "Release" | "TeamDiscussion" | "TeamDiscussionComment",
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** Can user react to this subject */
	viewerCanReact: boolean
	['...on CommitComment']: '__union' & GraphQLTypes["CommitComment"];
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on DiscussionComment']: '__union' & GraphQLTypes["DiscussionComment"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on PullRequestReview']: '__union' & GraphQLTypes["PullRequestReview"];
	['...on PullRequestReviewComment']: '__union' & GraphQLTypes["PullRequestReviewComment"];
	['...on Release']: '__union' & GraphQLTypes["Release"];
	['...on TeamDiscussion']: '__union' & GraphQLTypes["TeamDiscussion"];
	['...on TeamDiscussionComment']: '__union' & GraphQLTypes["TeamDiscussionComment"];
};
	/** The connection type for User. */
["ReactingUserConnection"]: {
	__typename: "ReactingUserConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ReactingUserEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user that's made a reaction. */
["ReactingUserEdge"]: {
	__typename: "ReactingUserEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	node: GraphQLTypes["User"],
	/** The moment when the user made the reaction. */
	reactedAt: GraphQLTypes["DateTime"]
};
	/** An emoji reaction to a particular piece of content. */
["Reaction"]: {
	__typename: "Reaction",
	/** Identifies the emoji reaction. */
	content: GraphQLTypes["ReactionContent"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The reactable piece of content */
	reactable: GraphQLTypes["Reactable"],
	/** Identifies the user who created this reaction. */
	user?: GraphQLTypes["User"] | undefined
};
	/** A list of reactions that have been left on the subject. */
["ReactionConnection"]: {
	__typename: "ReactionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ReactionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Reaction"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** Whether or not the authenticated user has left a reaction on the subject. */
	viewerHasReacted: boolean
};
	/** Emojis that can be attached to Issues, Pull Requests and Comments. */
["ReactionContent"]: ReactionContent;
	/** An edge in a connection. */
["ReactionEdge"]: {
	__typename: "ReactionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Reaction"] | undefined
};
	/** A group of emoji reactions to a particular piece of content. */
["ReactionGroup"]: {
	__typename: "ReactionGroup",
	/** Identifies the emoji reaction. */
	content: GraphQLTypes["ReactionContent"],
	/** Identifies when the reaction was created. */
	createdAt?: GraphQLTypes["DateTime"] | undefined,
	/** Reactors to the reaction subject with the emotion represented by this reaction group. */
	reactors: GraphQLTypes["ReactorConnection"],
	/** The subject that was reacted to. */
	subject: GraphQLTypes["Reactable"],
	/** Users who have reacted to the reaction subject with the emotion represented by this reaction group */
	users: GraphQLTypes["ReactingUserConnection"],
	/** Whether or not the authenticated user has left a reaction on the subject. */
	viewerHasReacted: boolean
};
	/** Ways in which lists of reactions can be ordered upon return. */
["ReactionOrder"]: {
		/** The direction in which to order reactions by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order reactions by. */
	field: GraphQLTypes["ReactionOrderField"]
};
	/** A list of fields that reactions can be ordered by. */
["ReactionOrderField"]: ReactionOrderField;
	/** Types that can be assigned to reactions. */
["Reactor"]:{
        	__typename:"Bot" | "Mannequin" | "Organization" | "User"
        	['...on Bot']: '__union' & GraphQLTypes["Bot"];
	['...on Mannequin']: '__union' & GraphQLTypes["Mannequin"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** The connection type for Reactor. */
["ReactorConnection"]: {
	__typename: "ReactorConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ReactorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Reactor"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents an author of a reaction. */
["ReactorEdge"]: {
	__typename: "ReactorEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The author of the reaction. */
	node: GraphQLTypes["Reactor"],
	/** The moment when the user made the reaction. */
	reactedAt: GraphQLTypes["DateTime"]
};
	/** Represents a 'ready_for_review' event on a given pull request. */
["ReadyForReviewEvent"]: {
	__typename: "ReadyForReviewEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The HTTP path for this ready for review event. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this ready for review event. */
	url: GraphQLTypes["URI"]
};
	/** Represents a Git reference. */
["Ref"]: {
	__typename: "Ref",
	/** A list of pull requests with this ref as the head ref. */
	associatedPullRequests: GraphQLTypes["PullRequestConnection"],
	/** Branch protection rules for this ref */
	branchProtectionRule?: GraphQLTypes["BranchProtectionRule"] | undefined,
	/** Compares the current ref as a base ref to another head ref, if the comparison can be made. */
	compare?: GraphQLTypes["Comparison"] | undefined,
	id: string,
	/** The ref name. */
	name: string,
	/** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
	prefix: string,
	/** Branch protection rules that are viewable by non-admins */
	refUpdateRule?: GraphQLTypes["RefUpdateRule"] | undefined,
	/** The repository the ref belongs to. */
	repository: GraphQLTypes["Repository"],
	/** The object the ref points to. Returns null when object does not exist. */
	target?: GraphQLTypes["GitObject"] | undefined
};
	/** The connection type for Ref. */
["RefConnection"]: {
	__typename: "RefConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["RefEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Ref"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["RefEdge"]: {
	__typename: "RefEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Ref"] | undefined
};
	/** Ways in which lists of git refs can be ordered upon return. */
["RefOrder"]: {
		/** The direction in which to order refs by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order refs by. */
	field: GraphQLTypes["RefOrderField"]
};
	/** Properties by which ref connections can be ordered. */
["RefOrderField"]: RefOrderField;
	/** A ref update */
["RefUpdate"]: {
		/** The value this ref should be updated to. */
	afterOid: GraphQLTypes["GitObjectID"],
	/** The value this ref needs to point to before the update. */
	beforeOid?: GraphQLTypes["GitObjectID"] | undefined,
	/** Force a non fast-forward update. */
	force?: boolean | undefined,
	/** The fully qualified name of the ref to be update. For example `refs/heads/branch-name` */
	name: GraphQLTypes["GitRefname"]
};
	/** A ref update rules for a viewer. */
["RefUpdateRule"]: {
	__typename: "RefUpdateRule",
	/** Can this branch be deleted. */
	allowsDeletions: boolean,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes: boolean,
	/** Can matching branches be created. */
	blocksCreations: boolean,
	/** Identifies the protection rule pattern. */
	pattern: string,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string | undefined> | undefined,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews: boolean,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution: boolean,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory: boolean,
	/** Are commits required to be signed. */
	requiresSignatures: boolean,
	/** Is the viewer allowed to dismiss reviews. */
	viewerAllowedToDismissReviews: boolean,
	/** Can the viewer push to the branch */
	viewerCanPush: boolean
};
	/** Represents a 'referenced' event on a given `ReferencedSubject`. */
["ReferencedEvent"]: {
	__typename: "ReferencedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the commit associated with the 'referenced' event. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** Identifies the repository associated with the 'referenced' event. */
	commitRepository: GraphQLTypes["Repository"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Reference originated in a different repository. */
	isCrossRepository: boolean,
	/** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
	isDirectReference: boolean,
	/** Object referenced by event. */
	subject: GraphQLTypes["ReferencedSubject"]
};
	/** Any referencable object */
["ReferencedSubject"]:{
        	__typename:"Issue" | "PullRequest"
        	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
["RegenerateEnterpriseIdentityProviderRecoveryCodesInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set an identity provider. */
	enterpriseId: string
};
	/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
["RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"]: {
	__typename: "RegenerateEnterpriseIdentityProviderRecoveryCodesPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The identity provider for the enterprise. */
	identityProvider?: GraphQLTypes["EnterpriseIdentityProvider"] | undefined
};
	/** Autogenerated input type of RegenerateVerifiableDomainToken */
["RegenerateVerifiableDomainTokenInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the verifiable domain to regenerate the verification token of. */
	id: string
};
	/** Autogenerated return type of RegenerateVerifiableDomainToken */
["RegenerateVerifiableDomainTokenPayload"]: {
	__typename: "RegenerateVerifiableDomainTokenPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The verification token that was generated. */
	verificationToken?: string | undefined
};
	/** Autogenerated input type of RejectDeployments */
["RejectDeploymentsInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Optional comment for rejecting deployments */
	comment?: string | undefined,
	/** The ids of environments to reject deployments */
	environmentIds: Array<string>,
	/** The node ID of the workflow run containing the pending deployments. */
	workflowRunId: string
};
	/** Autogenerated return type of RejectDeployments */
["RejectDeploymentsPayload"]: {
	__typename: "RejectDeploymentsPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The affected deployments. */
	deployments?: Array<GraphQLTypes["Deployment"]> | undefined
};
	/** A release contains the content for a release. */
["Release"]: {
	__typename: "Release",
	/** The author of the release */
	author?: GraphQLTypes["User"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The description of the release. */
	description?: string | undefined,
	/** The description of this release rendered to HTML. */
	descriptionHTML?: GraphQLTypes["HTML"] | undefined,
	id: string,
	/** Whether or not the release is a draft */
	isDraft: boolean,
	/** Whether or not the release is the latest releast */
	isLatest: boolean,
	/** Whether or not the release is a prerelease */
	isPrerelease: boolean,
	/** A list of users mentioned in the release description */
	mentions?: GraphQLTypes["UserConnection"] | undefined,
	/** The title of the release. */
	name?: string | undefined,
	/** Identifies the date and time when the release was created. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** List of releases assets which are dependent on this release. */
	releaseAssets: GraphQLTypes["ReleaseAssetConnection"],
	/** The repository that the release belongs to. */
	repository: GraphQLTypes["Repository"],
	/** The HTTP path for this issue */
	resourcePath: GraphQLTypes["URI"],
	/** A description of the release, rendered to HTML without any links in it. */
	shortDescriptionHTML?: GraphQLTypes["HTML"] | undefined,
	/** The Git tag the release points to */
	tag?: GraphQLTypes["Ref"] | undefined,
	/** The tag commit for this release. */
	tagCommit?: GraphQLTypes["Commit"] | undefined,
	/** The name of the release's Git tag */
	tagName: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this issue */
	url: GraphQLTypes["URI"],
	/** Can user react to this subject */
	viewerCanReact: boolean
};
	/** A release asset contains the content for a release asset. */
["ReleaseAsset"]: {
	__typename: "ReleaseAsset",
	/** The asset's content-type */
	contentType: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The number of times this asset was downloaded */
	downloadCount: number,
	/** Identifies the URL where you can download the release asset via the browser. */
	downloadUrl: GraphQLTypes["URI"],
	id: string,
	/** Identifies the title of the release asset. */
	name: string,
	/** Release that the asset is associated with */
	release?: GraphQLTypes["Release"] | undefined,
	/** The size (in bytes) of the asset */
	size: number,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The user that performed the upload */
	uploadedBy: GraphQLTypes["User"],
	/** Identifies the URL of the release asset. */
	url: GraphQLTypes["URI"]
};
	/** The connection type for ReleaseAsset. */
["ReleaseAssetConnection"]: {
	__typename: "ReleaseAssetConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ReleaseAssetEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ReleaseAsset"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ReleaseAssetEdge"]: {
	__typename: "ReleaseAssetEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ReleaseAsset"] | undefined
};
	/** The connection type for Release. */
["ReleaseConnection"]: {
	__typename: "ReleaseConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ReleaseEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Release"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ReleaseEdge"]: {
	__typename: "ReleaseEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Release"] | undefined
};
	/** Ways in which lists of releases can be ordered upon return. */
["ReleaseOrder"]: {
		/** The direction in which to order releases by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order releases by. */
	field: GraphQLTypes["ReleaseOrderField"]
};
	/** Properties by which release connections can be ordered. */
["ReleaseOrderField"]: ReleaseOrderField;
	/** Autogenerated input type of RemoveAssigneesFromAssignable */
["RemoveAssigneesFromAssignableInput"]: {
		/** The id of the assignable object to remove assignees from. */
	assignableId: string,
	/** The id of users to remove as assignees. */
	assigneeIds: Array<string>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated return type of RemoveAssigneesFromAssignable */
["RemoveAssigneesFromAssignablePayload"]: {
	__typename: "RemoveAssigneesFromAssignablePayload",
	/** The item that was unassigned. */
	assignable?: GraphQLTypes["Assignable"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of RemoveEnterpriseAdmin */
["RemoveEnterpriseAdminInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Enterprise ID from which to remove the administrator. */
	enterpriseId: string,
	/** The login of the user to remove as an administrator. */
	login: string
};
	/** Autogenerated return type of RemoveEnterpriseAdmin */
["RemoveEnterpriseAdminPayload"]: {
	__typename: "RemoveEnterpriseAdminPayload",
	/** The user who was removed as an administrator. */
	admin?: GraphQLTypes["User"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated enterprise. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of removing an administrator. */
	message?: string | undefined,
	/** The viewer performing the mutation. */
	viewer?: GraphQLTypes["User"] | undefined
};
	/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
["RemoveEnterpriseIdentityProviderInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise from which to remove the identity provider. */
	enterpriseId: string
};
	/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
["RemoveEnterpriseIdentityProviderPayload"]: {
	__typename: "RemoveEnterpriseIdentityProviderPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The identity provider that was removed from the enterprise. */
	identityProvider?: GraphQLTypes["EnterpriseIdentityProvider"] | undefined
};
	/** Autogenerated input type of RemoveEnterpriseOrganization */
["RemoveEnterpriseOrganizationInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise from which the organization should be removed. */
	enterpriseId: string,
	/** The ID of the organization to remove from the enterprise. */
	organizationId: string
};
	/** Autogenerated return type of RemoveEnterpriseOrganization */
["RemoveEnterpriseOrganizationPayload"]: {
	__typename: "RemoveEnterpriseOrganizationPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated enterprise. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** The organization that was removed from the enterprise. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The viewer performing the mutation. */
	viewer?: GraphQLTypes["User"] | undefined
};
	/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
["RemoveEnterpriseSupportEntitlementInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string,
	/** The login of a member who will lose the support entitlement. */
	login: string
};
	/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */
["RemoveEnterpriseSupportEntitlementPayload"]: {
	__typename: "RemoveEnterpriseSupportEntitlementPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of removing the support entitlement. */
	message?: string | undefined
};
	/** Autogenerated input type of RemoveLabelsFromLabelable */
["RemoveLabelsFromLabelableInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ids of labels to remove. */
	labelIds: Array<string>,
	/** The id of the Labelable to remove labels from. */
	labelableId: string
};
	/** Autogenerated return type of RemoveLabelsFromLabelable */
["RemoveLabelsFromLabelablePayload"]: {
	__typename: "RemoveLabelsFromLabelablePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Labelable the labels were removed from. */
	labelable?: GraphQLTypes["Labelable"] | undefined
};
	/** Autogenerated input type of RemoveOutsideCollaborator */
["RemoveOutsideCollaboratorInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization to remove the outside collaborator from. */
	organizationId: string,
	/** The ID of the outside collaborator to remove. */
	userId: string
};
	/** Autogenerated return type of RemoveOutsideCollaborator */
["RemoveOutsideCollaboratorPayload"]: {
	__typename: "RemoveOutsideCollaboratorPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The user that was removed as an outside collaborator. */
	removedUser?: GraphQLTypes["User"] | undefined
};
	/** Autogenerated input type of RemoveReaction */
["RemoveReactionInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of the emoji reaction to remove. */
	content: GraphQLTypes["ReactionContent"],
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of RemoveReaction */
["RemoveReactionPayload"]: {
	__typename: "RemoveReactionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The reaction object. */
	reaction?: GraphQLTypes["Reaction"] | undefined,
	/** The reactable subject. */
	subject?: GraphQLTypes["Reactable"] | undefined
};
	/** Autogenerated input type of RemoveStar */
["RemoveStarInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Starrable ID to unstar. */
	starrableId: string
};
	/** Autogenerated return type of RemoveStar */
["RemoveStarPayload"]: {
	__typename: "RemoveStarPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The starrable. */
	starrable?: GraphQLTypes["Starrable"] | undefined
};
	/** Autogenerated input type of RemoveUpvote */
["RemoveUpvoteInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion or comment to remove upvote. */
	subjectId: string
};
	/** Autogenerated return type of RemoveUpvote */
["RemoveUpvotePayload"]: {
	__typename: "RemoveUpvotePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The votable subject. */
	subject?: GraphQLTypes["Votable"] | undefined
};
	/** Represents a 'removed_from_project' event on a given issue or pull request. */
["RemovedFromProjectEvent"]: {
	__typename: "RemovedFromProjectEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Project referenced by event. */
	project?: GraphQLTypes["Project"] | undefined,
	/** Column name referenced by this project event. */
	projectColumnName: string
};
	/** Represents a 'renamed' event on a given issue or pull request */
["RenamedTitleEvent"]: {
	__typename: "RenamedTitleEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the current title of the issue or pull request. */
	currentTitle: string,
	id: string,
	/** Identifies the previous title of the issue or pull request. */
	previousTitle: string,
	/** Subject that was renamed. */
	subject: GraphQLTypes["RenamedTitleSubject"]
};
	/** An object which has a renamable title */
["RenamedTitleSubject"]:{
        	__typename:"Issue" | "PullRequest"
        	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
};
	/** Autogenerated input type of ReopenIssue */
["ReopenIssueInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the issue to be opened. */
	issueId: string
};
	/** Autogenerated return type of ReopenIssue */
["ReopenIssuePayload"]: {
	__typename: "ReopenIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was opened. */
	issue?: GraphQLTypes["Issue"] | undefined
};
	/** Autogenerated input type of ReopenPullRequest */
["ReopenPullRequestInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the pull request to be reopened. */
	pullRequestId: string
};
	/** Autogenerated return type of ReopenPullRequest */
["ReopenPullRequestPayload"]: {
	__typename: "ReopenPullRequestPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that was reopened. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Represents a 'reopened' event on any `Closable`. */
["ReopenedEvent"]: {
	__typename: "ReopenedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Object that was reopened. */
	closable: GraphQLTypes["Closable"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** The reason the issue state was changed to open. */
	stateReason?: GraphQLTypes["IssueStateReason"] | undefined
};
	/** Audit log entry for a repo.access event. */
["RepoAccessAuditEntry"]: {
	__typename: "RepoAccessAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: GraphQLTypes["RepoAccessAuditEntryVisibility"] | undefined
};
	/** The privacy of a repository */
["RepoAccessAuditEntryVisibility"]: RepoAccessAuditEntryVisibility;
	/** Audit log entry for a repo.add_member event. */
["RepoAddMemberAuditEntry"]: {
	__typename: "RepoAddMemberAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: GraphQLTypes["RepoAddMemberAuditEntryVisibility"] | undefined
};
	/** The privacy of a repository */
["RepoAddMemberAuditEntryVisibility"]: RepoAddMemberAuditEntryVisibility;
	/** Audit log entry for a repo.add_topic event. */
["RepoAddTopicAuditEntry"]: {
	__typename: "RepoAddTopicAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The name of the topic added to the repository */
	topic?: GraphQLTypes["Topic"] | undefined,
	/** The name of the topic added to the repository */
	topicName?: string | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.archived event. */
["RepoArchivedAuditEntry"]: {
	__typename: "RepoArchivedAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: GraphQLTypes["RepoArchivedAuditEntryVisibility"] | undefined
};
	/** The privacy of a repository */
["RepoArchivedAuditEntryVisibility"]: RepoArchivedAuditEntryVisibility;
	/** Audit log entry for a repo.change_merge_setting event. */
["RepoChangeMergeSettingAuditEntry"]: {
	__typename: "RepoChangeMergeSettingAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** Whether the change was to enable (true) or disable (false) the merge type */
	isEnabled?: boolean | undefined,
	/** The merge method affected by the change */
	mergeType?: GraphQLTypes["RepoChangeMergeSettingAuditEntryMergeType"] | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The merge options available for pull requests to this repository. */
["RepoChangeMergeSettingAuditEntryMergeType"]: RepoChangeMergeSettingAuditEntryMergeType;
	/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
["RepoConfigDisableAnonymousGitAccessAuditEntry"]: {
	__typename: "RepoConfigDisableAnonymousGitAccessAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.disable_collaborators_only event. */
["RepoConfigDisableCollaboratorsOnlyAuditEntry"]: {
	__typename: "RepoConfigDisableCollaboratorsOnlyAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.disable_contributors_only event. */
["RepoConfigDisableContributorsOnlyAuditEntry"]: {
	__typename: "RepoConfigDisableContributorsOnlyAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
["RepoConfigDisableSockpuppetDisallowedAuditEntry"]: {
	__typename: "RepoConfigDisableSockpuppetDisallowedAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
["RepoConfigEnableAnonymousGitAccessAuditEntry"]: {
	__typename: "RepoConfigEnableAnonymousGitAccessAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.enable_collaborators_only event. */
["RepoConfigEnableCollaboratorsOnlyAuditEntry"]: {
	__typename: "RepoConfigEnableCollaboratorsOnlyAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.enable_contributors_only event. */
["RepoConfigEnableContributorsOnlyAuditEntry"]: {
	__typename: "RepoConfigEnableContributorsOnlyAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
["RepoConfigEnableSockpuppetDisallowedAuditEntry"]: {
	__typename: "RepoConfigEnableSockpuppetDisallowedAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
["RepoConfigLockAnonymousGitAccessAuditEntry"]: {
	__typename: "RepoConfigLockAnonymousGitAccessAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
["RepoConfigUnlockAnonymousGitAccessAuditEntry"]: {
	__typename: "RepoConfigUnlockAnonymousGitAccessAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repo.create event. */
["RepoCreateAuditEntry"]: {
	__typename: "RepoCreateAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The name of the parent repository for this forked repository. */
	forkParentName?: string | undefined,
	/** The name of the root repository for this network. */
	forkSourceName?: string | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: GraphQLTypes["RepoCreateAuditEntryVisibility"] | undefined
};
	/** The privacy of a repository */
["RepoCreateAuditEntryVisibility"]: RepoCreateAuditEntryVisibility;
	/** Audit log entry for a repo.destroy event. */
["RepoDestroyAuditEntry"]: {
	__typename: "RepoDestroyAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: GraphQLTypes["RepoDestroyAuditEntryVisibility"] | undefined
};
	/** The privacy of a repository */
["RepoDestroyAuditEntryVisibility"]: RepoDestroyAuditEntryVisibility;
	/** Audit log entry for a repo.remove_member event. */
["RepoRemoveMemberAuditEntry"]: {
	__typename: "RepoRemoveMemberAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined,
	/** The visibility of the repository */
	visibility?: GraphQLTypes["RepoRemoveMemberAuditEntryVisibility"] | undefined
};
	/** The privacy of a repository */
["RepoRemoveMemberAuditEntryVisibility"]: RepoRemoveMemberAuditEntryVisibility;
	/** Audit log entry for a repo.remove_topic event. */
["RepoRemoveTopicAuditEntry"]: {
	__typename: "RepoRemoveTopicAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The name of the topic added to the repository */
	topic?: GraphQLTypes["Topic"] | undefined,
	/** The name of the topic added to the repository */
	topicName?: string | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The reasons a piece of content can be reported or minimized. */
["ReportedContentClassifiers"]: ReportedContentClassifiers;
	/** A repository contains the content for a project. */
["Repository"]: {
	__typename: "Repository",
	/** Whether or not a pull request head branch that is behind its base branch can
always be updated even if it is not required to be up to date before merging. */
	allowUpdateBranch: boolean,
	/** A list of users that can be assigned to issues in this repository. */
	assignableUsers: GraphQLTypes["UserConnection"],
	/** Whether or not Auto-merge can be enabled on pull requests in this repository. */
	autoMergeAllowed: boolean,
	/** A list of branch protection rules for this repository. */
	branchProtectionRules: GraphQLTypes["BranchProtectionRuleConnection"],
	/** Returns the code of conduct for this repository */
	codeOfConduct?: GraphQLTypes["CodeOfConduct"] | undefined,
	/** Information extracted from the repository's `CODEOWNERS` file. */
	codeowners?: GraphQLTypes["RepositoryCodeowners"] | undefined,
	/** A list of collaborators associated with the repository. */
	collaborators?: GraphQLTypes["RepositoryCollaboratorConnection"] | undefined,
	/** A list of commit comments associated with the repository. */
	commitComments: GraphQLTypes["CommitCommentConnection"],
	/** Returns a list of contact links associated to the repository */
	contactLinks?: Array<GraphQLTypes["RepositoryContactLink"]> | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The Ref associated with the repository's default branch. */
	defaultBranchRef?: GraphQLTypes["Ref"] | undefined,
	/** Whether or not branches are automatically deleted when merged in this repository. */
	deleteBranchOnMerge: boolean,
	/** A list of dependency manifests contained in the repository */
	dependencyGraphManifests?: GraphQLTypes["DependencyGraphManifestConnection"] | undefined,
	/** A list of deploy keys that are on this repository. */
	deployKeys: GraphQLTypes["DeployKeyConnection"],
	/** Deployments associated with the repository */
	deployments: GraphQLTypes["DeploymentConnection"],
	/** The description of the repository. */
	description?: string | undefined,
	/** The description of the repository rendered to HTML. */
	descriptionHTML: GraphQLTypes["HTML"],
	/** Returns a single discussion from the current repository by number. */
	discussion?: GraphQLTypes["Discussion"] | undefined,
	/** A list of discussion categories that are available in the repository. */
	discussionCategories: GraphQLTypes["DiscussionCategoryConnection"],
	/** A discussion category by slug. */
	discussionCategory?: GraphQLTypes["DiscussionCategory"] | undefined,
	/** A list of discussions that have been opened in the repository. */
	discussions: GraphQLTypes["DiscussionConnection"],
	/** The number of kilobytes this repository occupies on disk. */
	diskUsage?: number | undefined,
	/** Returns a single active environment from the current repository by name. */
	environment?: GraphQLTypes["Environment"] | undefined,
	/** A list of environments that are in this repository. */
	environments: GraphQLTypes["EnvironmentConnection"],
	/** Returns how many forks there are of this repository in the whole network. */
	forkCount: number,
	/** Whether this repository allows forks. */
	forkingAllowed: boolean,
	/** A list of direct forked repositories. */
	forks: GraphQLTypes["RepositoryConnection"],
	/** The funding links for this repository */
	fundingLinks: Array<GraphQLTypes["FundingLink"]>,
	/** Indicates if the repository has issues feature enabled. */
	hasIssuesEnabled: boolean,
	/** Indicates if the repository has the Projects feature enabled. */
	hasProjectsEnabled: boolean,
	/** Indicates if the repository has wiki feature enabled. */
	hasWikiEnabled: boolean,
	/** The repository's URL. */
	homepageUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The interaction ability settings for this repository. */
	interactionAbility?: GraphQLTypes["RepositoryInteractionAbility"] | undefined,
	/** Indicates if the repository is unmaintained. */
	isArchived: boolean,
	/** Returns true if blank issue creation is allowed */
	isBlankIssuesEnabled: boolean,
	/** Returns whether or not this repository disabled. */
	isDisabled: boolean,
	/** Returns whether or not this repository is empty. */
	isEmpty: boolean,
	/** Identifies if the repository is a fork. */
	isFork: boolean,
	/** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
	isInOrganization: boolean,
	/** Indicates if the repository has been locked or not. */
	isLocked: boolean,
	/** Identifies if the repository is a mirror. */
	isMirror: boolean,
	/** Identifies if the repository is private or internal. */
	isPrivate: boolean,
	/** Returns true if this repository has a security policy */
	isSecurityPolicyEnabled?: boolean | undefined,
	/** Identifies if the repository is a template that can be used to generate new repositories. */
	isTemplate: boolean,
	/** Is this repository a user configuration repository? */
	isUserConfigurationRepository: boolean,
	/** Returns a single issue from the current repository by number. */
	issue?: GraphQLTypes["Issue"] | undefined,
	/** Returns a single issue-like object from the current repository by number. */
	issueOrPullRequest?: GraphQLTypes["IssueOrPullRequest"] | undefined,
	/** Returns a list of issue templates associated to the repository */
	issueTemplates?: Array<GraphQLTypes["IssueTemplate"]> | undefined,
	/** A list of issues that have been opened in the repository. */
	issues: GraphQLTypes["IssueConnection"],
	/** Returns a single label by name */
	label?: GraphQLTypes["Label"] | undefined,
	/** A list of labels associated with the repository. */
	labels?: GraphQLTypes["LabelConnection"] | undefined,
	/** A list containing a breakdown of the language composition of the repository. */
	languages?: GraphQLTypes["LanguageConnection"] | undefined,
	/** Get the latest release for the repository if one exists. */
	latestRelease?: GraphQLTypes["Release"] | undefined,
	/** The license associated with the repository */
	licenseInfo?: GraphQLTypes["License"] | undefined,
	/** The reason the repository has been locked. */
	lockReason?: GraphQLTypes["RepositoryLockReason"] | undefined,
	/** A list of Users that can be mentioned in the context of the repository. */
	mentionableUsers: GraphQLTypes["UserConnection"],
	/** Whether or not PRs are merged with a merge commit on this repository. */
	mergeCommitAllowed: boolean,
	/** How the default commit message will be generated when merging a pull request. */
	mergeCommitMessage: GraphQLTypes["MergeCommitMessage"],
	/** How the default commit title will be generated when merging a pull request. */
	mergeCommitTitle: GraphQLTypes["MergeCommitTitle"],
	/** Returns a single milestone from the current repository by number. */
	milestone?: GraphQLTypes["Milestone"] | undefined,
	/** A list of milestones associated with the repository. */
	milestones?: GraphQLTypes["MilestoneConnection"] | undefined,
	/** The repository's original mirror URL. */
	mirrorUrl?: GraphQLTypes["URI"] | undefined,
	/** The name of the repository. */
	name: string,
	/** The repository's name with owner. */
	nameWithOwner: string,
	/** A Git object in the repository */
	object?: GraphQLTypes["GitObject"] | undefined,
	/** The image used to represent this repository in Open Graph data. */
	openGraphImageUrl: GraphQLTypes["URI"],
	/** The User owner of the repository. */
	owner: GraphQLTypes["RepositoryOwner"],
	/** A list of packages under the owner. */
	packages: GraphQLTypes["PackageConnection"],
	/** The repository parent, if this is a fork. */
	parent?: GraphQLTypes["Repository"] | undefined,
	/** A list of discussions that have been pinned in this repository. */
	pinnedDiscussions: GraphQLTypes["PinnedDiscussionConnection"],
	/** A list of pinned issues for this repository. */
	pinnedIssues?: GraphQLTypes["PinnedIssueConnection"] | undefined,
	/** The primary language of the repository's code. */
	primaryLanguage?: GraphQLTypes["Language"] | undefined,
	/** Find project by number. */
	project?: GraphQLTypes["Project"] | undefined,
	/** Finds and returns the Project (beta) according to the provided Project (beta) number. */
	projectNext?: GraphQLTypes["ProjectNext"] | undefined,
	/** Finds and returns the Project according to the provided Project number. */
	projectV2?: GraphQLTypes["ProjectV2"] | undefined,
	/** A list of projects under the owner. */
	projects: GraphQLTypes["ProjectConnection"],
	/** List of projects (beta) linked to this repository. */
	projectsNext: GraphQLTypes["ProjectNextConnection"],
	/** The HTTP path listing the repository's projects */
	projectsResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL listing the repository's projects */
	projectsUrl: GraphQLTypes["URI"],
	/** List of projects linked to this repository. */
	projectsV2: GraphQLTypes["ProjectV2Connection"],
	/** Returns a single pull request from the current repository by number. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined,
	/** Returns a list of pull request templates associated to the repository */
	pullRequestTemplates?: Array<GraphQLTypes["PullRequestTemplate"]> | undefined,
	/** A list of pull requests that have been opened in the repository. */
	pullRequests: GraphQLTypes["PullRequestConnection"],
	/** Identifies when the repository was last pushed to. */
	pushedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Whether or not rebase-merging is enabled on this repository. */
	rebaseMergeAllowed: boolean,
	/** Recent projects that this user has modified in the context of the owner. */
	recentProjects: GraphQLTypes["ProjectV2Connection"],
	/** Fetch a given ref from the repository */
	ref?: GraphQLTypes["Ref"] | undefined,
	/** Fetch a list of refs from the repository */
	refs?: GraphQLTypes["RefConnection"] | undefined,
	/** Lookup a single release given various criteria. */
	release?: GraphQLTypes["Release"] | undefined,
	/** List of releases which are dependent on this repository. */
	releases: GraphQLTypes["ReleaseConnection"],
	/** A list of applied repository-topic associations for this repository. */
	repositoryTopics: GraphQLTypes["RepositoryTopicConnection"],
	/** The HTTP path for this repository */
	resourcePath: GraphQLTypes["URI"],
	/** The security policy URL. */
	securityPolicyUrl?: GraphQLTypes["URI"] | undefined,
	/** A description of the repository, rendered to HTML without any links in it. */
	shortDescriptionHTML: GraphQLTypes["HTML"],
	/** Whether or not squash-merging is enabled on this repository. */
	squashMergeAllowed: boolean,
	/** How the default commit message will be generated when squash merging a pull request. */
	squashMergeCommitMessage: GraphQLTypes["SquashMergeCommitMessage"],
	/** How the default commit title will be generated when squash merging a pull request. */
	squashMergeCommitTitle: GraphQLTypes["SquashMergeCommitTitle"],
	/** Whether a squash merge commit can use the pull request title as default. */
	squashPrTitleUsedAsDefault: boolean,
	/** The SSH URL to clone this repository */
	sshUrl: GraphQLTypes["GitSSHRemote"],
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount: number,
	/** A list of users who have starred this starrable. */
	stargazers: GraphQLTypes["StargazerConnection"],
	/** Returns a list of all submodules in this repository parsed from the
.gitmodules file as of the default branch's HEAD commit. */
	submodules: GraphQLTypes["SubmoduleConnection"],
	/** Temporary authentication token for cloning this repository. */
	tempCloneToken?: string | undefined,
	/** The repository from which this repository was generated, if any. */
	templateRepository?: GraphQLTypes["Repository"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this repository */
	url: GraphQLTypes["URI"],
	/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
	usesCustomOpenGraphImage: boolean,
	/** Indicates whether the viewer has admin permissions on this repository. */
	viewerCanAdminister: boolean,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Indicates whether the viewer can update the topics of this repository. */
	viewerCanUpdateTopics: boolean,
	/** The last commit email for the viewer. */
	viewerDefaultCommitEmail?: string | undefined,
	/** The last used merge method by the viewer or the default for the repository. */
	viewerDefaultMergeMethod: GraphQLTypes["PullRequestMergeMethod"],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred: boolean,
	/** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
	viewerPermission?: GraphQLTypes["RepositoryPermission"] | undefined,
	/** A list of emails this viewer can commit with. */
	viewerPossibleCommitEmails?: Array<string> | undefined,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: GraphQLTypes["SubscriptionState"] | undefined,
	/** Indicates the repository's visibility level. */
	visibility: GraphQLTypes["RepositoryVisibility"],
	/** A list of vulnerability alerts that are on this repository. */
	vulnerabilityAlerts?: GraphQLTypes["RepositoryVulnerabilityAlertConnection"] | undefined,
	/** A list of users watching the repository. */
	watchers: GraphQLTypes["UserConnection"],
	/** Whether contributors are required to sign off on web-based commits in this repository. */
	webCommitSignoffRequired: boolean
};
	/** The affiliation of a user to a repository */
["RepositoryAffiliation"]: RepositoryAffiliation;
	/** Metadata for an audit entry with action repo.* */
["RepositoryAuditEntryData"]: {
	__typename:"OrgRestoreMemberMembershipRepositoryAuditEntryData" | "PrivateRepositoryForkingDisableAuditEntry" | "PrivateRepositoryForkingEnableAuditEntry" | "RepoAccessAuditEntry" | "RepoAddMemberAuditEntry" | "RepoAddTopicAuditEntry" | "RepoArchivedAuditEntry" | "RepoChangeMergeSettingAuditEntry" | "RepoConfigDisableAnonymousGitAccessAuditEntry" | "RepoConfigDisableCollaboratorsOnlyAuditEntry" | "RepoConfigDisableContributorsOnlyAuditEntry" | "RepoConfigDisableSockpuppetDisallowedAuditEntry" | "RepoConfigEnableAnonymousGitAccessAuditEntry" | "RepoConfigEnableCollaboratorsOnlyAuditEntry" | "RepoConfigEnableContributorsOnlyAuditEntry" | "RepoConfigEnableSockpuppetDisallowedAuditEntry" | "RepoConfigLockAnonymousGitAccessAuditEntry" | "RepoConfigUnlockAnonymousGitAccessAuditEntry" | "RepoCreateAuditEntry" | "RepoDestroyAuditEntry" | "RepoRemoveMemberAuditEntry" | "RepoRemoveTopicAuditEntry" | "TeamAddRepositoryAuditEntry" | "TeamRemoveRepositoryAuditEntry",
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined
	['...on OrgRestoreMemberMembershipRepositoryAuditEntryData']: '__union' & GraphQLTypes["OrgRestoreMemberMembershipRepositoryAuditEntryData"];
	['...on PrivateRepositoryForkingDisableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingDisableAuditEntry"];
	['...on PrivateRepositoryForkingEnableAuditEntry']: '__union' & GraphQLTypes["PrivateRepositoryForkingEnableAuditEntry"];
	['...on RepoAccessAuditEntry']: '__union' & GraphQLTypes["RepoAccessAuditEntry"];
	['...on RepoAddMemberAuditEntry']: '__union' & GraphQLTypes["RepoAddMemberAuditEntry"];
	['...on RepoAddTopicAuditEntry']: '__union' & GraphQLTypes["RepoAddTopicAuditEntry"];
	['...on RepoArchivedAuditEntry']: '__union' & GraphQLTypes["RepoArchivedAuditEntry"];
	['...on RepoChangeMergeSettingAuditEntry']: '__union' & GraphQLTypes["RepoChangeMergeSettingAuditEntry"];
	['...on RepoConfigDisableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigDisableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigDisableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableContributorsOnlyAuditEntry"];
	['...on RepoConfigDisableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigDisableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigEnableAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableAnonymousGitAccessAuditEntry"];
	['...on RepoConfigEnableCollaboratorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableCollaboratorsOnlyAuditEntry"];
	['...on RepoConfigEnableContributorsOnlyAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableContributorsOnlyAuditEntry"];
	['...on RepoConfigEnableSockpuppetDisallowedAuditEntry']: '__union' & GraphQLTypes["RepoConfigEnableSockpuppetDisallowedAuditEntry"];
	['...on RepoConfigLockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigLockAnonymousGitAccessAuditEntry"];
	['...on RepoConfigUnlockAnonymousGitAccessAuditEntry']: '__union' & GraphQLTypes["RepoConfigUnlockAnonymousGitAccessAuditEntry"];
	['...on RepoCreateAuditEntry']: '__union' & GraphQLTypes["RepoCreateAuditEntry"];
	['...on RepoDestroyAuditEntry']: '__union' & GraphQLTypes["RepoDestroyAuditEntry"];
	['...on RepoRemoveMemberAuditEntry']: '__union' & GraphQLTypes["RepoRemoveMemberAuditEntry"];
	['...on RepoRemoveTopicAuditEntry']: '__union' & GraphQLTypes["RepoRemoveTopicAuditEntry"];
	['...on TeamAddRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamAddRepositoryAuditEntry"];
	['...on TeamRemoveRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamRemoveRepositoryAuditEntry"];
};
	/** Information extracted from a repository's `CODEOWNERS` file. */
["RepositoryCodeowners"]: {
	__typename: "RepositoryCodeowners",
	/** Any problems that were encountered while parsing the `CODEOWNERS` file. */
	errors: Array<GraphQLTypes["RepositoryCodeownersError"]>
};
	/** An error in a `CODEOWNERS` file. */
["RepositoryCodeownersError"]: {
	__typename: "RepositoryCodeownersError",
	/** The column number where the error occurs. */
	column: number,
	/** A short string describing the type of error. */
	kind: string,
	/** The line number where the error occurs. */
	line: number,
	/** A complete description of the error, combining information from other fields. */
	message: string,
	/** The path to the file when the error occurs. */
	path: string,
	/** The content of the line where the error occurs. */
	source: string,
	/** A suggestion of how to fix the error. */
	suggestion?: string | undefined
};
	/** The connection type for User. */
["RepositoryCollaboratorConnection"]: {
	__typename: "RepositoryCollaboratorConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["RepositoryCollaboratorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user who is a collaborator of a repository. */
["RepositoryCollaboratorEdge"]: {
	__typename: "RepositoryCollaboratorEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	node: GraphQLTypes["User"],
	/** The permission the user has on the repository. */
	permission: GraphQLTypes["RepositoryPermission"],
	/** A list of sources for the user's access to the repository. */
	permissionSources?: Array<GraphQLTypes["PermissionSource"]> | undefined
};
	/** A list of repositories owned by the subject. */
["RepositoryConnection"]: {
	__typename: "RepositoryConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["RepositoryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Repository"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** The total size in kilobytes of all repositories in the connection. */
	totalDiskUsage: number
};
	/** A repository contact link. */
["RepositoryContactLink"]: {
	__typename: "RepositoryContactLink",
	/** The contact link purpose. */
	about: string,
	/** The contact link name. */
	name: string,
	/** The contact link URL. */
	url: GraphQLTypes["URI"]
};
	/** The reason a repository is listed as 'contributed'. */
["RepositoryContributionType"]: RepositoryContributionType;
	/** Represents an author of discussions in repositories. */
["RepositoryDiscussionAuthor"]: {
	__typename:"Organization" | "User",
	/** Discussions this user has started. */
	repositoryDiscussions: GraphQLTypes["DiscussionConnection"]
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Represents an author of discussion comments in repositories. */
["RepositoryDiscussionCommentAuthor"]: {
	__typename:"Organization" | "User",
	/** Discussion comments this user has authored. */
	repositoryDiscussionComments: GraphQLTypes["DiscussionCommentConnection"]
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** An edge in a connection. */
["RepositoryEdge"]: {
	__typename: "RepositoryEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Repository"] | undefined
};
	/** A subset of repository info. */
["RepositoryInfo"]: {
	__typename:"Repository",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The description of the repository. */
	description?: string | undefined,
	/** The description of the repository rendered to HTML. */
	descriptionHTML: GraphQLTypes["HTML"],
	/** Returns how many forks there are of this repository in the whole network. */
	forkCount: number,
	/** Indicates if the repository has issues feature enabled. */
	hasIssuesEnabled: boolean,
	/** Indicates if the repository has the Projects feature enabled. */
	hasProjectsEnabled: boolean,
	/** Indicates if the repository has wiki feature enabled. */
	hasWikiEnabled: boolean,
	/** The repository's URL. */
	homepageUrl?: GraphQLTypes["URI"] | undefined,
	/** Indicates if the repository is unmaintained. */
	isArchived: boolean,
	/** Identifies if the repository is a fork. */
	isFork: boolean,
	/** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
	isInOrganization: boolean,
	/** Indicates if the repository has been locked or not. */
	isLocked: boolean,
	/** Identifies if the repository is a mirror. */
	isMirror: boolean,
	/** Identifies if the repository is private or internal. */
	isPrivate: boolean,
	/** Identifies if the repository is a template that can be used to generate new repositories. */
	isTemplate: boolean,
	/** The license associated with the repository */
	licenseInfo?: GraphQLTypes["License"] | undefined,
	/** The reason the repository has been locked. */
	lockReason?: GraphQLTypes["RepositoryLockReason"] | undefined,
	/** The repository's original mirror URL. */
	mirrorUrl?: GraphQLTypes["URI"] | undefined,
	/** The name of the repository. */
	name: string,
	/** The repository's name with owner. */
	nameWithOwner: string,
	/** The image used to represent this repository in Open Graph data. */
	openGraphImageUrl: GraphQLTypes["URI"],
	/** The User owner of the repository. */
	owner: GraphQLTypes["RepositoryOwner"],
	/** Identifies when the repository was last pushed to. */
	pushedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The HTTP path for this repository */
	resourcePath: GraphQLTypes["URI"],
	/** A description of the repository, rendered to HTML without any links in it. */
	shortDescriptionHTML: GraphQLTypes["HTML"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this repository */
	url: GraphQLTypes["URI"],
	/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
	usesCustomOpenGraphImage: boolean,
	/** Indicates the repository's visibility level. */
	visibility: GraphQLTypes["RepositoryVisibility"]
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
};
	/** Repository interaction limit that applies to this object. */
["RepositoryInteractionAbility"]: {
	__typename: "RepositoryInteractionAbility",
	/** The time the currently active limit expires. */
	expiresAt?: GraphQLTypes["DateTime"] | undefined,
	/** The current limit that is enabled on this object. */
	limit: GraphQLTypes["RepositoryInteractionLimit"],
	/** The origin of the currently active interaction limit. */
	origin: GraphQLTypes["RepositoryInteractionLimitOrigin"]
};
	/** A repository interaction limit. */
["RepositoryInteractionLimit"]: RepositoryInteractionLimit;
	/** The length for a repository interaction limit to be enabled for. */
["RepositoryInteractionLimitExpiry"]: RepositoryInteractionLimitExpiry;
	/** Indicates where an interaction limit is configured. */
["RepositoryInteractionLimitOrigin"]: RepositoryInteractionLimitOrigin;
	/** An invitation for a user to be added to a repository. */
["RepositoryInvitation"]: {
	__typename: "RepositoryInvitation",
	/** The email address that received the invitation. */
	email?: string | undefined,
	id: string,
	/** The user who received the invitation. */
	invitee?: GraphQLTypes["User"] | undefined,
	/** The user who created the invitation. */
	inviter: GraphQLTypes["User"],
	/** The permalink for this repository invitation. */
	permalink: GraphQLTypes["URI"],
	/** The permission granted on this repository by this invitation. */
	permission: GraphQLTypes["RepositoryPermission"],
	/** The Repository the user is invited to. */
	repository?: GraphQLTypes["RepositoryInfo"] | undefined
};
	/** A list of repository invitations. */
["RepositoryInvitationConnection"]: {
	__typename: "RepositoryInvitationConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["RepositoryInvitationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["RepositoryInvitation"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["RepositoryInvitationEdge"]: {
	__typename: "RepositoryInvitationEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["RepositoryInvitation"] | undefined
};
	/** Ordering options for repository invitation connections. */
["RepositoryInvitationOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order repository invitations by. */
	field: GraphQLTypes["RepositoryInvitationOrderField"]
};
	/** Properties by which repository invitation connections can be ordered. */
["RepositoryInvitationOrderField"]: RepositoryInvitationOrderField;
	/** The possible reasons a given repository could be in a locked state. */
["RepositoryLockReason"]: RepositoryLockReason;
	/** An Octoshift repository migration. */
["RepositoryMigration"]: {
	__typename: "RepositoryMigration",
	/** The Octoshift migration flag to continue on error. */
	continueOnError: boolean,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: string | undefined,
	/** The reason the migration failed. */
	failureReason?: string | undefined,
	id: string,
	/** The URL for the migration log (expires 1 day after migration completes). */
	migrationLogUrl?: GraphQLTypes["URI"] | undefined,
	/** The Octoshift migration source. */
	migrationSource: GraphQLTypes["MigrationSource"],
	/** The target repository name. */
	repositoryName: string,
	/** The Octoshift migration source URL. */
	sourceUrl: GraphQLTypes["URI"],
	/** The Octoshift migration state. */
	state: GraphQLTypes["MigrationState"]
};
	/** The connection type for RepositoryMigration. */
["RepositoryMigrationConnection"]: {
	__typename: "RepositoryMigrationConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["RepositoryMigrationEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["RepositoryMigration"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a repository migration. */
["RepositoryMigrationEdge"]: {
	__typename: "RepositoryMigrationEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["RepositoryMigration"] | undefined
};
	/** Ordering options for repository migrations. */
["RepositoryMigrationOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["RepositoryMigrationOrderDirection"],
	/** The field to order repository migrations by. */
	field: GraphQLTypes["RepositoryMigrationOrderField"]
};
	/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
["RepositoryMigrationOrderDirection"]: RepositoryMigrationOrderDirection;
	/** Properties by which repository migrations can be ordered. */
["RepositoryMigrationOrderField"]: RepositoryMigrationOrderField;
	/** Represents a object that belongs to a repository. */
["RepositoryNode"]: {
	__typename:"CommitComment" | "CommitCommentThread" | "DependabotUpdate" | "Discussion" | "DiscussionCategory" | "Issue" | "IssueComment" | "PinnedDiscussion" | "PullRequest" | "PullRequestCommitCommentThread" | "PullRequestReview" | "PullRequestReviewComment" | "RepositoryVulnerabilityAlert",
	/** The repository associated with this node. */
	repository: GraphQLTypes["Repository"]
	['...on CommitComment']: '__union' & GraphQLTypes["CommitComment"];
	['...on CommitCommentThread']: '__union' & GraphQLTypes["CommitCommentThread"];
	['...on DependabotUpdate']: '__union' & GraphQLTypes["DependabotUpdate"];
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on DiscussionCategory']: '__union' & GraphQLTypes["DiscussionCategory"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on PinnedDiscussion']: '__union' & GraphQLTypes["PinnedDiscussion"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on PullRequestCommitCommentThread']: '__union' & GraphQLTypes["PullRequestCommitCommentThread"];
	['...on PullRequestReview']: '__union' & GraphQLTypes["PullRequestReview"];
	['...on PullRequestReviewComment']: '__union' & GraphQLTypes["PullRequestReviewComment"];
	['...on RepositoryVulnerabilityAlert']: '__union' & GraphQLTypes["RepositoryVulnerabilityAlert"];
};
	/** Ordering options for repository connections */
["RepositoryOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order repositories by. */
	field: GraphQLTypes["RepositoryOrderField"]
};
	/** Properties by which repository connections can be ordered. */
["RepositoryOrderField"]: RepositoryOrderField;
	/** Represents an owner of a Repository. */
["RepositoryOwner"]: {
	__typename:"Organization" | "User",
	/** A URL pointing to the owner's public avatar. */
	avatarUrl: GraphQLTypes["URI"],
	id: string,
	/** The username used to login. */
	login: string,
	/** A list of repositories that the user owns. */
	repositories: GraphQLTypes["RepositoryConnection"],
	/** Find Repository. */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The HTTP URL for the owner. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for the owner. */
	url: GraphQLTypes["URI"]
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** The access level to a repository */
["RepositoryPermission"]: RepositoryPermission;
	/** The privacy of a repository */
["RepositoryPrivacy"]: RepositoryPrivacy;
	/** A repository-topic connects a repository to a topic. */
["RepositoryTopic"]: {
	__typename: "RepositoryTopic",
	id: string,
	/** The HTTP path for this repository-topic. */
	resourcePath: GraphQLTypes["URI"],
	/** The topic. */
	topic: GraphQLTypes["Topic"],
	/** The HTTP URL for this repository-topic. */
	url: GraphQLTypes["URI"]
};
	/** The connection type for RepositoryTopic. */
["RepositoryTopicConnection"]: {
	__typename: "RepositoryTopicConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["RepositoryTopicEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["RepositoryTopic"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["RepositoryTopicEdge"]: {
	__typename: "RepositoryTopicEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["RepositoryTopic"] | undefined
};
	/** The repository's visibility level. */
["RepositoryVisibility"]: RepositoryVisibility;
	/** Audit log entry for a repository_visibility_change.disable event. */
["RepositoryVisibilityChangeDisableAuditEntry"]: {
	__typename: "RepositoryVisibilityChangeDisableAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a repository_visibility_change.enable event. */
["RepositoryVisibilityChangeEnableAuditEntry"]: {
	__typename: "RepositoryVisibilityChangeEnableAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	/** The HTTP path for this enterprise. */
	enterpriseResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The slug of the enterprise. */
	enterpriseSlug?: string | undefined,
	/** The HTTP URL for this enterprise. */
	enterpriseUrl?: GraphQLTypes["URI"] | undefined,
	id: string,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
["RepositoryVulnerabilityAlert"]: {
	__typename: "RepositoryVulnerabilityAlert",
	/** When was the alert created? */
	createdAt: GraphQLTypes["DateTime"],
	/** The associated Dependabot update */
	dependabotUpdate?: GraphQLTypes["DependabotUpdate"] | undefined,
	/** The scope of an alert's dependency */
	dependencyScope?: GraphQLTypes["RepositoryVulnerabilityAlertDependencyScope"] | undefined,
	/** Comment explaining the reason the alert was dismissed */
	dismissComment?: string | undefined,
	/** The reason the alert was dismissed */
	dismissReason?: string | undefined,
	/** When was the alert dismissed? */
	dismissedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The user who dismissed the alert */
	dismisser?: GraphQLTypes["User"] | undefined,
	/** The reason the alert was marked as fixed. */
	fixReason?: string | undefined,
	/** When was the alert fixed? */
	fixedAt?: GraphQLTypes["DateTime"] | undefined,
	id: string,
	/** Identifies the alert number. */
	number: number,
	/** The associated repository */
	repository: GraphQLTypes["Repository"],
	/** The associated security advisory */
	securityAdvisory?: GraphQLTypes["SecurityAdvisory"] | undefined,
	/** The associated security vulnerability */
	securityVulnerability?: GraphQLTypes["SecurityVulnerability"] | undefined,
	/** Identifies the state of the alert. */
	state: GraphQLTypes["RepositoryVulnerabilityAlertState"],
	/** The vulnerable manifest filename */
	vulnerableManifestFilename: string,
	/** The vulnerable manifest path */
	vulnerableManifestPath: string,
	/** The vulnerable requirements */
	vulnerableRequirements?: string | undefined
};
	/** The connection type for RepositoryVulnerabilityAlert. */
["RepositoryVulnerabilityAlertConnection"]: {
	__typename: "RepositoryVulnerabilityAlertConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["RepositoryVulnerabilityAlertEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["RepositoryVulnerabilityAlert"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** The possible scopes of an alert's dependency. */
["RepositoryVulnerabilityAlertDependencyScope"]: RepositoryVulnerabilityAlertDependencyScope;
	/** An edge in a connection. */
["RepositoryVulnerabilityAlertEdge"]: {
	__typename: "RepositoryVulnerabilityAlertEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["RepositoryVulnerabilityAlert"] | undefined
};
	/** The possible states of an alert */
["RepositoryVulnerabilityAlertState"]: RepositoryVulnerabilityAlertState;
	/** Autogenerated input type of RequestReviews */
["RequestReviewsInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the pull request to modify. */
	pullRequestId: string,
	/** The Node IDs of the team to request. */
	teamIds?: Array<string> | undefined,
	/** Add users to the set rather than replace. */
	union?: boolean | undefined,
	/** The Node IDs of the user to request. */
	userIds?: Array<string> | undefined
};
	/** Autogenerated return type of RequestReviews */
["RequestReviewsPayload"]: {
	__typename: "RequestReviewsPayload",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The pull request that is getting requests. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined,
	/** The edge from the pull request to the requested reviewers. */
	requestedReviewersEdge?: GraphQLTypes["UserEdge"] | undefined
};
	/** The possible states that can be requested when creating a check run. */
["RequestableCheckStatusState"]: RequestableCheckStatusState;
	/** Types that can be requested reviewers. */
["RequestedReviewer"]:{
        	__typename:"Mannequin" | "Team" | "User"
        	['...on Mannequin']: '__union' & GraphQLTypes["Mannequin"];
	['...on Team']: '__union' & GraphQLTypes["Team"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** The connection type for RequestedReviewer. */
["RequestedReviewerConnection"]: {
	__typename: "RequestedReviewerConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["RequestedReviewerEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["RequestedReviewer"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["RequestedReviewerEdge"]: {
	__typename: "RequestedReviewerEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["RequestedReviewer"] | undefined
};
	/** Represents a type that can be required by a pull request for merging. */
["RequirableByPullRequest"]: {
	__typename:"CheckRun" | "StatusContext",
	/** Whether this is required to pass before merging for a specific pull request. */
	isRequired: boolean
	['...on CheckRun']: '__union' & GraphQLTypes["CheckRun"];
	['...on StatusContext']: '__union' & GraphQLTypes["StatusContext"];
};
	/** Represents a required status check for a protected branch, but not any specific run of that check. */
["RequiredStatusCheckDescription"]: {
	__typename: "RequiredStatusCheckDescription",
	/** The App that must provide this status in order for it to be accepted. */
	app?: GraphQLTypes["App"] | undefined,
	/** The name of this status. */
	context: string
};
	/** Specifies the attributes for a new or updated required status check. */
["RequiredStatusCheckInput"]: {
		/** The ID of the App that must set the status in order for it to be accepted.
Omit this value to use whichever app has recently been setting this status, or
use "any" to allow any app to set the status. */
	appId?: string | undefined,
	/** Status check context that must pass for commits to be accepted to the matching branch. */
	context: string
};
	/** Autogenerated input type of RerequestCheckSuite */
["RerequestCheckSuiteInput"]: {
		/** The Node ID of the check suite. */
	checkSuiteId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of RerequestCheckSuite */
["RerequestCheckSuitePayload"]: {
	__typename: "RerequestCheckSuitePayload",
	/** The requested check suite. */
	checkSuite?: GraphQLTypes["CheckSuite"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of ResolveReviewThread */
["ResolveReviewThreadInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the thread to resolve */
	threadId: string
};
	/** Autogenerated return type of ResolveReviewThread */
["ResolveReviewThreadPayload"]: {
	__typename: "ResolveReviewThreadPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The thread to resolve. */
	thread?: GraphQLTypes["PullRequestReviewThread"] | undefined
};
	/** Represents a private contribution a user made on GitHub. */
["RestrictedContribution"]: {
	__typename: "RestrictedContribution",
	/** Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access. */
	isRestricted: boolean,
	/** When this contribution was made. */
	occurredAt: GraphQLTypes["DateTime"],
	/** The HTTP path for this contribution. */
	resourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this contribution. */
	url: GraphQLTypes["URI"],
	/** The user who made this contribution. */
	user: GraphQLTypes["User"]
};
	/** A user, team, or app who has the ability to dismiss a review on a protected branch. */
["ReviewDismissalAllowance"]: {
	__typename: "ReviewDismissalAllowance",
	/** The actor that can dismiss. */
	actor?: GraphQLTypes["ReviewDismissalAllowanceActor"] | undefined,
	/** Identifies the branch protection rule associated with the allowed user, team, or app. */
	branchProtectionRule?: GraphQLTypes["BranchProtectionRule"] | undefined,
	id: string
};
	/** Types that can be an actor. */
["ReviewDismissalAllowanceActor"]:{
        	__typename:"App" | "Team" | "User"
        	['...on App']: '__union' & GraphQLTypes["App"];
	['...on Team']: '__union' & GraphQLTypes["Team"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** The connection type for ReviewDismissalAllowance. */
["ReviewDismissalAllowanceConnection"]: {
	__typename: "ReviewDismissalAllowanceConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ReviewDismissalAllowanceEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ReviewDismissalAllowance"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ReviewDismissalAllowanceEdge"]: {
	__typename: "ReviewDismissalAllowanceEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ReviewDismissalAllowance"] | undefined
};
	/** Represents a 'review_dismissed' event on a given issue or pull request. */
["ReviewDismissedEvent"]: {
	__typename: "ReviewDismissedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** Identifies the optional message associated with the 'review_dismissed' event. */
	dismissalMessage?: string | undefined,
	/** Identifies the optional message associated with the event, rendered to HTML. */
	dismissalMessageHTML?: string | undefined,
	id: string,
	/** Identifies the previous state of the review with the 'review_dismissed' event. */
	previousReviewState: GraphQLTypes["PullRequestReviewState"],
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** Identifies the commit which caused the review to become stale. */
	pullRequestCommit?: GraphQLTypes["PullRequestCommit"] | undefined,
	/** The HTTP path for this review dismissed event. */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the review associated with the 'review_dismissed' event. */
	review?: GraphQLTypes["PullRequestReview"] | undefined,
	/** The HTTP URL for this review dismissed event. */
	url: GraphQLTypes["URI"]
};
	/** A request for a user to review a pull request. */
["ReviewRequest"]: {
	__typename: "ReviewRequest",
	/** Whether this request was created for a code owner */
	asCodeOwner: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** Identifies the pull request associated with this review request. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** The reviewer that is requested. */
	requestedReviewer?: GraphQLTypes["RequestedReviewer"] | undefined
};
	/** The connection type for ReviewRequest. */
["ReviewRequestConnection"]: {
	__typename: "ReviewRequestConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["ReviewRequestEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["ReviewRequest"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["ReviewRequestEdge"]: {
	__typename: "ReviewRequestEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["ReviewRequest"] | undefined
};
	/** Represents an 'review_request_removed' event on a given pull request. */
["ReviewRequestRemovedEvent"]: {
	__typename: "ReviewRequestRemovedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** Identifies the reviewer whose review request was removed. */
	requestedReviewer?: GraphQLTypes["RequestedReviewer"] | undefined
};
	/** Represents an 'review_requested' event on a given pull request. */
["ReviewRequestedEvent"]: {
	__typename: "ReviewRequestedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** PullRequest referenced by event. */
	pullRequest: GraphQLTypes["PullRequest"],
	/** Identifies the reviewer whose review was requested. */
	requestedReviewer?: GraphQLTypes["RequestedReviewer"] | undefined
};
	/** A hovercard context with a message describing the current code review state of the pull
request. */
["ReviewStatusHovercardContext"]: {
	__typename: "ReviewStatusHovercardContext",
	/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string,
	/** The current status of the pull request with respect to code review. */
	reviewDecision?: GraphQLTypes["PullRequestReviewDecision"] | undefined
};
	/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
["RevokeEnterpriseOrganizationsMigratorRoleInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
	enterpriseId: string,
	/** The login of the user to revoke the migrator role */
	login: string
};
	/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
["RevokeEnterpriseOrganizationsMigratorRolePayload"]: {
	__typename: "RevokeEnterpriseOrganizationsMigratorRolePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organizations that had the migrator role revoked for the given user. */
	organizations?: GraphQLTypes["OrganizationConnection"] | undefined
};
	/** Autogenerated input type of RevokeMigratorRole */
["RevokeMigratorRoleInput"]: {
		/** The user login or Team slug to revoke the migrator role from. */
	actor: string,
	/** Specifies the type of the actor, can be either USER or TEAM. */
	actorType: GraphQLTypes["ActorType"],
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization that the user/team belongs to. */
	organizationId: string
};
	/** Autogenerated return type of RevokeMigratorRole */
["RevokeMigratorRolePayload"]: {
	__typename: "RevokeMigratorRolePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Did the operation succeed? */
	success?: boolean | undefined
};
	/** Possible roles a user may have in relation to an organization. */
["RoleInOrganization"]: RoleInOrganization;
	/** The possible digest algorithms used to sign SAML requests for an identity provider. */
["SamlDigestAlgorithm"]: SamlDigestAlgorithm;
	/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
["SamlSignatureAlgorithm"]: SamlSignatureAlgorithm;
	/** A Saved Reply is text a user can use to reply quickly. */
["SavedReply"]: {
	__typename: "SavedReply",
	/** The body of the saved reply. */
	body: string,
	/** The saved reply body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The title of the saved reply. */
	title: string,
	/** The user that saved this reply. */
	user?: GraphQLTypes["Actor"] | undefined
};
	/** The connection type for SavedReply. */
["SavedReplyConnection"]: {
	__typename: "SavedReplyConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SavedReplyEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["SavedReply"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SavedReplyEdge"]: {
	__typename: "SavedReplyEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["SavedReply"] | undefined
};
	/** Ordering options for saved reply connections. */
["SavedReplyOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order saved replies by. */
	field: GraphQLTypes["SavedReplyOrderField"]
};
	/** Properties by which saved reply connections can be ordered. */
["SavedReplyOrderField"]: SavedReplyOrderField;
	/** The results of a search. */
["SearchResultItem"]:{
        	__typename:"App" | "Discussion" | "Issue" | "MarketplaceListing" | "Organization" | "PullRequest" | "Repository" | "User"
        	['...on App']: '__union' & GraphQLTypes["App"];
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on MarketplaceListing']: '__union' & GraphQLTypes["MarketplaceListing"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages. */
["SearchResultItemConnection"]: {
	__typename: "SearchResultItemConnection",
	/** The total number of pieces of code that matched the search query. Regardless
of the total number of matches, a maximum of 1,000 results will be available
across all types. */
	codeCount: number,
	/** The total number of discussions that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	discussionCount: number,
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SearchResultItemEdge"] | undefined> | undefined,
	/** The total number of issues that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types. */
	issueCount: number,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["SearchResultItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** The total number of repositories that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	repositoryCount: number,
	/** The total number of users that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types. */
	userCount: number,
	/** The total number of wiki pages that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types. */
	wikiCount: number
};
	/** An edge in a connection. */
["SearchResultItemEdge"]: {
	__typename: "SearchResultItemEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["SearchResultItem"] | undefined,
	/** Text matches on the result found. */
	textMatches?: Array<GraphQLTypes["TextMatch"] | undefined> | undefined
};
	/** Represents the individual results of a search. */
["SearchType"]: SearchType;
	/** A GitHub Security Advisory */
["SecurityAdvisory"]: {
	__typename: "SecurityAdvisory",
	/** The classification of the advisory */
	classification: GraphQLTypes["SecurityAdvisoryClassification"],
	/** The CVSS associated with this advisory */
	cvss: GraphQLTypes["CVSS"],
	/** CWEs associated with this Advisory */
	cwes: GraphQLTypes["CWEConnection"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** This is a long plaintext description of the advisory */
	description: string,
	/** The GitHub Security Advisory ID */
	ghsaId: string,
	id: string,
	/** A list of identifiers for this advisory */
	identifiers: Array<GraphQLTypes["SecurityAdvisoryIdentifier"]>,
	/** The permalink for the advisory's dependabot alerts page */
	notificationsPermalink?: GraphQLTypes["URI"] | undefined,
	/** The organization that originated the advisory */
	origin: string,
	/** The permalink for the advisory */
	permalink?: GraphQLTypes["URI"] | undefined,
	/** When the advisory was published */
	publishedAt: GraphQLTypes["DateTime"],
	/** A list of references for this advisory */
	references: Array<GraphQLTypes["SecurityAdvisoryReference"]>,
	/** The severity of the advisory */
	severity: GraphQLTypes["SecurityAdvisorySeverity"],
	/** A short plaintext summary of the advisory */
	summary: string,
	/** When the advisory was last updated */
	updatedAt: GraphQLTypes["DateTime"],
	/** Vulnerabilities associated with this Advisory */
	vulnerabilities: GraphQLTypes["SecurityVulnerabilityConnection"],
	/** When the advisory was withdrawn, if it has been withdrawn */
	withdrawnAt?: GraphQLTypes["DateTime"] | undefined
};
	/** Classification of the advisory. */
["SecurityAdvisoryClassification"]: SecurityAdvisoryClassification;
	/** The connection type for SecurityAdvisory. */
["SecurityAdvisoryConnection"]: {
	__typename: "SecurityAdvisoryConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SecurityAdvisoryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["SecurityAdvisory"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** The possible ecosystems of a security vulnerability's package. */
["SecurityAdvisoryEcosystem"]: SecurityAdvisoryEcosystem;
	/** An edge in a connection. */
["SecurityAdvisoryEdge"]: {
	__typename: "SecurityAdvisoryEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["SecurityAdvisory"] | undefined
};
	/** A GitHub Security Advisory Identifier */
["SecurityAdvisoryIdentifier"]: {
	__typename: "SecurityAdvisoryIdentifier",
	/** The identifier type, e.g. GHSA, CVE */
	type: string,
	/** The identifier */
	value: string
};
	/** An advisory identifier to filter results on. */
["SecurityAdvisoryIdentifierFilter"]: {
		/** The identifier type. */
	type: GraphQLTypes["SecurityAdvisoryIdentifierType"],
	/** The identifier string. Supports exact or partial matching. */
	value: string
};
	/** Identifier formats available for advisories. */
["SecurityAdvisoryIdentifierType"]: SecurityAdvisoryIdentifierType;
	/** Ordering options for security advisory connections */
["SecurityAdvisoryOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order security advisories by. */
	field: GraphQLTypes["SecurityAdvisoryOrderField"]
};
	/** Properties by which security advisory connections can be ordered. */
["SecurityAdvisoryOrderField"]: SecurityAdvisoryOrderField;
	/** An individual package */
["SecurityAdvisoryPackage"]: {
	__typename: "SecurityAdvisoryPackage",
	/** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
	ecosystem: GraphQLTypes["SecurityAdvisoryEcosystem"],
	/** The package name */
	name: string
};
	/** An individual package version */
["SecurityAdvisoryPackageVersion"]: {
	__typename: "SecurityAdvisoryPackageVersion",
	/** The package name or version */
	identifier: string
};
	/** A GitHub Security Advisory Reference */
["SecurityAdvisoryReference"]: {
	__typename: "SecurityAdvisoryReference",
	/** A publicly accessible reference */
	url: GraphQLTypes["URI"]
};
	/** Severity of the vulnerability. */
["SecurityAdvisorySeverity"]: SecurityAdvisorySeverity;
	/** An individual vulnerability within an Advisory */
["SecurityVulnerability"]: {
	__typename: "SecurityVulnerability",
	/** The Advisory associated with this Vulnerability */
	advisory: GraphQLTypes["SecurityAdvisory"],
	/** The first version containing a fix for the vulnerability */
	firstPatchedVersion?: GraphQLTypes["SecurityAdvisoryPackageVersion"] | undefined,
	/** A description of the vulnerable package */
	package: GraphQLTypes["SecurityAdvisoryPackage"],
	/** The severity of the vulnerability within this package */
	severity: GraphQLTypes["SecurityAdvisorySeverity"],
	/** When the vulnerability was last updated */
	updatedAt: GraphQLTypes["DateTime"],
	/** A string that describes the vulnerable package versions.
This string follows a basic syntax with a few forms.
+ `= 0.2.0` denotes a single vulnerable version.
+ `<= 1.0.8` denotes a version range up to and including the specified version
+ `< 0.1.11` denotes a version range up to, but excluding, the specified version
+ `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
+ `>= 0.0.1` denotes a version range with a known minimum, but no known maximum */
	vulnerableVersionRange: string
};
	/** The connection type for SecurityVulnerability. */
["SecurityVulnerabilityConnection"]: {
	__typename: "SecurityVulnerabilityConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SecurityVulnerabilityEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["SecurityVulnerability"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SecurityVulnerabilityEdge"]: {
	__typename: "SecurityVulnerabilityEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["SecurityVulnerability"] | undefined
};
	/** Ordering options for security vulnerability connections */
["SecurityVulnerabilityOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order security vulnerabilities by. */
	field: GraphQLTypes["SecurityVulnerabilityOrderField"]
};
	/** Properties by which security vulnerability connections can be ordered. */
["SecurityVulnerabilityOrderField"]: SecurityVulnerabilityOrderField;
	/** Autogenerated input type of SetEnterpriseIdentityProvider */
["SetEnterpriseIdentityProviderInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The digest algorithm used to sign SAML requests for the identity provider. */
	digestMethod: GraphQLTypes["SamlDigestAlgorithm"],
	/** The ID of the enterprise on which to set an identity provider. */
	enterpriseId: string,
	/** The x509 certificate used by the identity provider to sign assertions and responses. */
	idpCertificate: string,
	/** The Issuer Entity ID for the SAML identity provider */
	issuer?: string | undefined,
	/** The signature algorithm used to sign SAML requests for the identity provider. */
	signatureMethod: GraphQLTypes["SamlSignatureAlgorithm"],
	/** The URL endpoint for the identity provider's SAML SSO. */
	ssoUrl: GraphQLTypes["URI"]
};
	/** Autogenerated return type of SetEnterpriseIdentityProvider */
["SetEnterpriseIdentityProviderPayload"]: {
	__typename: "SetEnterpriseIdentityProviderPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The identity provider for the enterprise. */
	identityProvider?: GraphQLTypes["EnterpriseIdentityProvider"] | undefined
};
	/** Autogenerated input type of SetOrganizationInteractionLimit */
["SetOrganizationInteractionLimitInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** When this limit should expire. */
	expiry?: GraphQLTypes["RepositoryInteractionLimitExpiry"] | undefined,
	/** The limit to set. */
	limit: GraphQLTypes["RepositoryInteractionLimit"],
	/** The ID of the organization to set a limit for. */
	organizationId: string
};
	/** Autogenerated return type of SetOrganizationInteractionLimit */
["SetOrganizationInteractionLimitPayload"]: {
	__typename: "SetOrganizationInteractionLimitPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organization that the interaction limit was set for. */
	organization?: GraphQLTypes["Organization"] | undefined
};
	/** Autogenerated input type of SetRepositoryInteractionLimit */
["SetRepositoryInteractionLimitInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** When this limit should expire. */
	expiry?: GraphQLTypes["RepositoryInteractionLimitExpiry"] | undefined,
	/** The limit to set. */
	limit: GraphQLTypes["RepositoryInteractionLimit"],
	/** The ID of the repository to set a limit for. */
	repositoryId: string
};
	/** Autogenerated return type of SetRepositoryInteractionLimit */
["SetRepositoryInteractionLimitPayload"]: {
	__typename: "SetRepositoryInteractionLimitPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository that the interaction limit was set for. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** Autogenerated input type of SetUserInteractionLimit */
["SetUserInteractionLimitInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** When this limit should expire. */
	expiry?: GraphQLTypes["RepositoryInteractionLimitExpiry"] | undefined,
	/** The limit to set. */
	limit: GraphQLTypes["RepositoryInteractionLimit"],
	/** The ID of the user to set a limit for. */
	userId: string
};
	/** Autogenerated return type of SetUserInteractionLimit */
["SetUserInteractionLimitPayload"]: {
	__typename: "SetUserInteractionLimitPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The user that the interaction limit was set for. */
	user?: GraphQLTypes["User"] | undefined
};
	/** Represents an S/MIME signature on a Commit or Tag. */
["SmimeSignature"]: {
	__typename: "SmimeSignature",
	/** Email used to sign this object. */
	email: string,
	/** True if the signature is valid and verified by GitHub. */
	isValid: boolean,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload: string,
	/** ASCII-armored signature header from object. */
	signature: string,
	/** GitHub user corresponding to the email signing this commit. */
	signer?: GraphQLTypes["User"] | undefined,
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state: GraphQLTypes["GitSignatureState"],
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub: boolean
};
	/** Represents a sort by field and direction. */
["SortBy"]: {
	__typename: "SortBy",
	/** The direction of the sorting. Possible values are ASC and DESC. */
	direction: GraphQLTypes["OrderDirection"],
	/** The id of the field by which the column is sorted. */
	field: number
};
	/** Entities that can sponsor others via GitHub Sponsors */
["Sponsor"]:{
        	__typename:"Organization" | "User"
        	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** The connection type for Sponsor. */
["SponsorConnection"]: {
	__typename: "SponsorConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SponsorEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Sponsor"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
["SponsorEdge"]: {
	__typename: "SponsorEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Sponsor"] | undefined
};
	/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
["SponsorOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order sponsor entities by. */
	field: GraphQLTypes["SponsorOrderField"]
};
	/** Properties by which sponsor connections can be ordered. */
["SponsorOrderField"]: SponsorOrderField;
	/** Entities that can be sponsored through GitHub Sponsors */
["Sponsorable"]: {
	__typename:"Organization" | "User",
	/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents: number,
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing: boolean,
	/** Check if the given account is sponsoring this user/organization. */
	isSponsoredBy: boolean,
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer: boolean,
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents: number,
	/** List of users and organizations this entity is sponsoring. */
	sponsoring: GraphQLTypes["SponsorConnection"],
	/** List of sponsors for this user or organization. */
	sponsors: GraphQLTypes["SponsorConnection"],
	/** Events involving this sponsorable, such as new sponsorships. */
	sponsorsActivities: GraphQLTypes["SponsorsActivityConnection"],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?: GraphQLTypes["SponsorsListing"] | undefined,
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?: GraphQLTypes["Sponsorship"] | undefined,
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?: GraphQLTypes["Sponsorship"] | undefined,
	/** List of sponsorship updates sent from this sponsorable to sponsors. */
	sponsorshipNewsletters: GraphQLTypes["SponsorshipNewsletterConnection"],
	/** This object's sponsorships as the maintainer. */
	sponsorshipsAsMaintainer: GraphQLTypes["SponsorshipConnection"],
	/** This object's sponsorships as the sponsor. */
	sponsorshipsAsSponsor: GraphQLTypes["SponsorshipConnection"],
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor: boolean,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring: boolean
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Entities that can be sponsored via GitHub Sponsors */
["SponsorableItem"]:{
        	__typename:"Organization" | "User"
        	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** The connection type for SponsorableItem. */
["SponsorableItemConnection"]: {
	__typename: "SponsorableItemConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SponsorableItemEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["SponsorableItem"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SponsorableItemEdge"]: {
	__typename: "SponsorableItemEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["SponsorableItem"] | undefined
};
	/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
["SponsorableOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order sponsorable entities by. */
	field: GraphQLTypes["SponsorableOrderField"]
};
	/** Properties by which sponsorable connections can be ordered. */
["SponsorableOrderField"]: SponsorableOrderField;
	/** An event related to sponsorship activity. */
["SponsorsActivity"]: {
	__typename: "SponsorsActivity",
	/** What action this activity indicates took place. */
	action: GraphQLTypes["SponsorsActivityAction"],
	id: string,
	/** The tier that the sponsorship used to use, for tier change events. */
	previousSponsorsTier?: GraphQLTypes["SponsorsTier"] | undefined,
	/** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
	sponsor?: GraphQLTypes["Sponsor"] | undefined,
	/** The user or organization that is being sponsored, the maintainer. */
	sponsorable: GraphQLTypes["Sponsorable"],
	/** The associated sponsorship tier. */
	sponsorsTier?: GraphQLTypes["SponsorsTier"] | undefined,
	/** The timestamp of this event. */
	timestamp?: GraphQLTypes["DateTime"] | undefined
};
	/** The possible actions that GitHub Sponsors activities can represent. */
["SponsorsActivityAction"]: SponsorsActivityAction;
	/** The connection type for SponsorsActivity. */
["SponsorsActivityConnection"]: {
	__typename: "SponsorsActivityConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SponsorsActivityEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["SponsorsActivity"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SponsorsActivityEdge"]: {
	__typename: "SponsorsActivityEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["SponsorsActivity"] | undefined
};
	/** Ordering options for GitHub Sponsors activity connections. */
["SponsorsActivityOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order activity by. */
	field: GraphQLTypes["SponsorsActivityOrderField"]
};
	/** Properties by which GitHub Sponsors activity connections can be ordered. */
["SponsorsActivityOrderField"]: SponsorsActivityOrderField;
	/** The possible time periods for which Sponsors activities can be requested. */
["SponsorsActivityPeriod"]: SponsorsActivityPeriod;
	/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
["SponsorsGoal"]: {
	__typename: "SponsorsGoal",
	/** A description of the goal from the maintainer. */
	description?: string | undefined,
	/** What the objective of this goal is. */
	kind: GraphQLTypes["SponsorsGoalKind"],
	/** The percentage representing how complete this goal is, between 0-100. */
	percentComplete: number,
	/** What the goal amount is. Represents an amount in USD for monthly sponsorship
amount goals. Represents a count of unique sponsors for total sponsors count goals. */
	targetValue: number,
	/** A brief summary of the kind and target value of this goal. */
	title: string
};
	/** The different kinds of goals a GitHub Sponsors member can have. */
["SponsorsGoalKind"]: SponsorsGoalKind;
	/** A GitHub Sponsors listing. */
["SponsorsListing"]: {
	__typename: "SponsorsListing",
	/** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
	activeGoal?: GraphQLTypes["SponsorsGoal"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The HTTP path for the Sponsors dashboard for this Sponsors listing. */
	dashboardResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for the Sponsors dashboard for this Sponsors listing. */
	dashboardUrl: GraphQLTypes["URI"],
	/** The full description of the listing. */
	fullDescription: string,
	/** The full description of the listing rendered to HTML. */
	fullDescriptionHTML: GraphQLTypes["HTML"],
	id: string,
	/** Whether this listing is publicly visible. */
	isPublic: boolean,
	/** The listing's full name. */
	name: string,
	/** A future date on which this listing is eligible to receive a payout. */
	nextPayoutDate?: GraphQLTypes["Date"] | undefined,
	/** The HTTP path for this Sponsors listing. */
	resourcePath: GraphQLTypes["URI"],
	/** The short description of the listing. */
	shortDescription: string,
	/** The short name of the listing. */
	slug: string,
	/** The entity this listing represents who can be sponsored on GitHub Sponsors. */
	sponsorable: GraphQLTypes["Sponsorable"],
	/** The published tiers for this GitHub Sponsors listing. */
	tiers?: GraphQLTypes["SponsorsTierConnection"] | undefined,
	/** The HTTP URL for this Sponsors listing. */
	url: GraphQLTypes["URI"]
};
	/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
["SponsorsTier"]: {
	__typename: "SponsorsTier",
	/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
	adminInfo?: GraphQLTypes["SponsorsTierAdminInfo"] | undefined,
	/** Get a different tier for this tier's maintainer that is at the same frequency
as this tier but with an equal or lesser cost. Returns the published tier with
the monthly price closest to this tier's without going over. */
	closestLesserValueTier?: GraphQLTypes["SponsorsTier"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The description of the tier. */
	description: string,
	/** The tier description rendered to HTML */
	descriptionHTML: GraphQLTypes["HTML"],
	id: string,
	/** Whether this tier was chosen at checkout time by the sponsor rather than
defined ahead of time by the maintainer who manages the Sponsors listing. */
	isCustomAmount: boolean,
	/** Whether this tier is only for use with one-time sponsorships. */
	isOneTime: boolean,
	/** How much this tier costs per month in cents. */
	monthlyPriceInCents: number,
	/** How much this tier costs per month in USD. */
	monthlyPriceInDollars: number,
	/** The name of the tier. */
	name: string,
	/** The sponsors listing that this tier belongs to. */
	sponsorsListing: GraphQLTypes["SponsorsListing"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
["SponsorsTierAdminInfo"]: {
	__typename: "SponsorsTierAdminInfo",
	/** The sponsorships associated with this tier. */
	sponsorships: GraphQLTypes["SponsorshipConnection"]
};
	/** The connection type for SponsorsTier. */
["SponsorsTierConnection"]: {
	__typename: "SponsorsTierConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SponsorsTierEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["SponsorsTier"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SponsorsTierEdge"]: {
	__typename: "SponsorsTierEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["SponsorsTier"] | undefined
};
	/** Ordering options for Sponsors tiers connections. */
["SponsorsTierOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order tiers by. */
	field: GraphQLTypes["SponsorsTierOrderField"]
};
	/** Properties by which Sponsors tiers connections can be ordered. */
["SponsorsTierOrderField"]: SponsorsTierOrderField;
	/** A sponsorship relationship between a sponsor and a maintainer */
["Sponsorship"]: {
	__typename: "Sponsorship",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
	isOneTimePayment: boolean,
	/** Check if the sponsor has chosen to receive sponsorship update emails sent from
the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
	isSponsorOptedIntoEmail?: boolean | undefined,
	/** The entity that is being sponsored */
	maintainer: GraphQLTypes["User"],
	/** The privacy level for this sponsorship. */
	privacyLevel: GraphQLTypes["SponsorshipPrivacy"],
	/** The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user. */
	sponsor?: GraphQLTypes["User"] | undefined,
	/** The user or organization that is sponsoring, if you have permission to view them. */
	sponsorEntity?: GraphQLTypes["Sponsor"] | undefined,
	/** The entity that is being sponsored */
	sponsorable: GraphQLTypes["Sponsorable"],
	/** The associated sponsorship tier */
	tier?: GraphQLTypes["SponsorsTier"] | undefined,
	/** Identifies the date and time when the current tier was chosen for this sponsorship. */
	tierSelectedAt?: GraphQLTypes["DateTime"] | undefined
};
	/** The connection type for Sponsorship. */
["SponsorshipConnection"]: {
	__typename: "SponsorshipConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SponsorshipEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Sponsorship"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number,
	/** The total amount in cents of all recurring sponsorships in the connection
whose amount you can view. Does not include one-time sponsorships. */
	totalRecurringMonthlyPriceInCents: number,
	/** The total amount in USD of all recurring sponsorships in the connection whose
amount you can view. Does not include one-time sponsorships. */
	totalRecurringMonthlyPriceInDollars: number
};
	/** An edge in a connection. */
["SponsorshipEdge"]: {
	__typename: "SponsorshipEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Sponsorship"] | undefined
};
	/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
["SponsorshipNewsletter"]: {
	__typename: "SponsorshipNewsletter",
	/** The contents of the newsletter, the message the sponsorable wanted to give. */
	body: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Indicates if the newsletter has been made available to sponsors. */
	isPublished: boolean,
	/** The user or organization this newsletter is from. */
	sponsorable: GraphQLTypes["Sponsorable"],
	/** The subject of the newsletter, what it's about. */
	subject: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** The connection type for SponsorshipNewsletter. */
["SponsorshipNewsletterConnection"]: {
	__typename: "SponsorshipNewsletterConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SponsorshipNewsletterEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["SponsorshipNewsletter"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SponsorshipNewsletterEdge"]: {
	__typename: "SponsorshipNewsletterEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["SponsorshipNewsletter"] | undefined
};
	/** Ordering options for sponsorship newsletter connections. */
["SponsorshipNewsletterOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order sponsorship newsletters by. */
	field: GraphQLTypes["SponsorshipNewsletterOrderField"]
};
	/** Properties by which sponsorship update connections can be ordered. */
["SponsorshipNewsletterOrderField"]: SponsorshipNewsletterOrderField;
	/** Ordering options for sponsorship connections. */
["SponsorshipOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order sponsorship by. */
	field: GraphQLTypes["SponsorshipOrderField"]
};
	/** Properties by which sponsorship connections can be ordered. */
["SponsorshipOrderField"]: SponsorshipOrderField;
	/** The privacy of a sponsorship */
["SponsorshipPrivacy"]: SponsorshipPrivacy;
	/** The possible default commit messages for squash merges. */
["SquashMergeCommitMessage"]: SquashMergeCommitMessage;
	/** The possible default commit titles for squash merges. */
["SquashMergeCommitTitle"]: SquashMergeCommitTitle;
	/** Represents an SSH signature on a Commit or Tag. */
["SshSignature"]: {
	__typename: "SshSignature",
	/** Email used to sign this object. */
	email: string,
	/** True if the signature is valid and verified by GitHub. */
	isValid: boolean,
	/** Hex-encoded fingerprint of the key that signed this object. */
	keyFingerprint?: string | undefined,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload: string,
	/** ASCII-armored signature header from object. */
	signature: string,
	/** GitHub user corresponding to the email signing this commit. */
	signer?: GraphQLTypes["User"] | undefined,
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state: GraphQLTypes["GitSignatureState"],
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub: boolean
};
	/** Ways in which star connections can be ordered. */
["StarOrder"]: {
		/** The direction in which to order nodes. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order nodes by. */
	field: GraphQLTypes["StarOrderField"]
};
	/** Properties by which star connections can be ordered. */
["StarOrderField"]: StarOrderField;
	/** The connection type for User. */
["StargazerConnection"]: {
	__typename: "StargazerConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["StargazerEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user that's starred a repository. */
["StargazerEdge"]: {
	__typename: "StargazerEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	node: GraphQLTypes["User"],
	/** Identifies when the item was starred. */
	starredAt: GraphQLTypes["DateTime"]
};
	/** Things that can be starred. */
["Starrable"]: {
	__typename:"Gist" | "Repository" | "Topic",
	id: string,
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount: number,
	/** A list of users who have starred this starrable. */
	stargazers: GraphQLTypes["StargazerConnection"],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred: boolean
	['...on Gist']: '__union' & GraphQLTypes["Gist"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
	['...on Topic']: '__union' & GraphQLTypes["Topic"];
};
	/** The connection type for Repository. */
["StarredRepositoryConnection"]: {
	__typename: "StarredRepositoryConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["StarredRepositoryEdge"] | undefined> | undefined,
	/** Is the list of stars for this user truncated? This is true for users that have many stars. */
	isOverLimit: boolean,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Repository"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a starred repository. */
["StarredRepositoryEdge"]: {
	__typename: "StarredRepositoryEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	node: GraphQLTypes["Repository"],
	/** Identifies when the item was starred. */
	starredAt: GraphQLTypes["DateTime"]
};
	/** Autogenerated input type of StartRepositoryMigration */
["StartRepositoryMigrationInput"]: {
		/** The Octoshift migration source access token. */
	accessToken: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether to continue the migration on error */
	continueOnError?: boolean | undefined,
	/** The signed URL to access the user-uploaded git archive */
	gitArchiveUrl?: string | undefined,
	/** The GitHub personal access token of the user importing to the target repository. */
	githubPat?: string | undefined,
	/** Whether to lock the source repository. */
	lockSource?: boolean | undefined,
	/** The signed URL to access the user-uploaded metadata archive */
	metadataArchiveUrl?: string | undefined,
	/** The ID of the organization that will own the imported repository. */
	ownerId: string,
	/** The name of the imported repository. */
	repositoryName: string,
	/** Whether to skip migrating releases for the repository. */
	skipReleases?: boolean | undefined,
	/** The ID of the Octoshift migration source. */
	sourceId: string,
	/** The Octoshift migration source repository URL. */
	sourceRepositoryUrl: GraphQLTypes["URI"],
	/** The visibility of the imported repository. */
	targetRepoVisibility?: string | undefined
};
	/** Autogenerated return type of StartRepositoryMigration */
["StartRepositoryMigrationPayload"]: {
	__typename: "StartRepositoryMigrationPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new Octoshift repository migration. */
	repositoryMigration?: GraphQLTypes["RepositoryMigration"] | undefined
};
	/** Represents a commit status. */
["Status"]: {
	__typename: "Status",
	/** A list of status contexts and check runs for this commit. */
	combinedContexts: GraphQLTypes["StatusCheckRollupContextConnection"],
	/** The commit this status is attached to. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** Looks up an individual status context by context name. */
	context?: GraphQLTypes["StatusContext"] | undefined,
	/** The individual status contexts for this commit. */
	contexts: Array<GraphQLTypes["StatusContext"]>,
	id: string,
	/** The combined commit status. */
	state: GraphQLTypes["StatusState"]
};
	/** Represents the rollup for both the check runs and status for a commit. */
["StatusCheckRollup"]: {
	__typename: "StatusCheckRollup",
	/** The commit the status and check runs are attached to. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** A list of status contexts and check runs for this commit. */
	contexts: GraphQLTypes["StatusCheckRollupContextConnection"],
	id: string,
	/** The combined status for the commit. */
	state: GraphQLTypes["StatusState"]
};
	/** Types that can be inside a StatusCheckRollup context. */
["StatusCheckRollupContext"]:{
        	__typename:"CheckRun" | "StatusContext"
        	['...on CheckRun']: '__union' & GraphQLTypes["CheckRun"];
	['...on StatusContext']: '__union' & GraphQLTypes["StatusContext"];
};
	/** The connection type for StatusCheckRollupContext. */
["StatusCheckRollupContextConnection"]: {
	__typename: "StatusCheckRollupContextConnection",
	/** The number of check runs in this rollup. */
	checkRunCount: number,
	/** Counts of check runs by state. */
	checkRunCountsByState?: Array<GraphQLTypes["CheckRunStateCount"]> | undefined,
	/** A list of edges. */
	edges?: Array<GraphQLTypes["StatusCheckRollupContextEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["StatusCheckRollupContext"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** The number of status contexts in this rollup. */
	statusContextCount: number,
	/** Counts of status contexts by state. */
	statusContextCountsByState?: Array<GraphQLTypes["StatusContextStateCount"]> | undefined,
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["StatusCheckRollupContextEdge"]: {
	__typename: "StatusCheckRollupContextEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["StatusCheckRollupContext"] | undefined
};
	/** Represents an individual commit status context */
["StatusContext"]: {
	__typename: "StatusContext",
	/** The avatar of the OAuth application or the user that created the status */
	avatarUrl?: GraphQLTypes["URI"] | undefined,
	/** This commit this status context is attached to. */
	commit?: GraphQLTypes["Commit"] | undefined,
	/** The name of this status context. */
	context: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The actor who created this status context. */
	creator?: GraphQLTypes["Actor"] | undefined,
	/** The description for this status context. */
	description?: string | undefined,
	id: string,
	/** Whether this is required to pass before merging for a specific pull request. */
	isRequired: boolean,
	/** The state of this status context. */
	state: GraphQLTypes["StatusState"],
	/** The URL for this status context. */
	targetUrl?: GraphQLTypes["URI"] | undefined
};
	/** Represents a count of the state of a status context. */
["StatusContextStateCount"]: {
	__typename: "StatusContextStateCount",
	/** The number of statuses with this state. */
	count: number,
	/** The state of a status context. */
	state: GraphQLTypes["StatusState"]
};
	/** The possible commit status states. */
["StatusState"]: StatusState;
	/** Autogenerated input type of SubmitPullRequestReview */
["SubmitPullRequestReviewInput"]: {
		/** The text field to set on the Pull Request Review. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The event to send to the Pull Request Review. */
	event: GraphQLTypes["PullRequestReviewEvent"],
	/** The Pull Request ID to submit any pending reviews. */
	pullRequestId?: string | undefined,
	/** The Pull Request Review ID to submit. */
	pullRequestReviewId?: string | undefined
};
	/** Autogenerated return type of SubmitPullRequestReview */
["SubmitPullRequestReviewPayload"]: {
	__typename: "SubmitPullRequestReviewPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The submitted pull request review. */
	pullRequestReview?: GraphQLTypes["PullRequestReview"] | undefined
};
	/** A pointer to a repository at a specific revision embedded inside another repository. */
["Submodule"]: {
	__typename: "Submodule",
	/** The branch of the upstream submodule for tracking updates */
	branch?: string | undefined,
	/** The git URL of the submodule repository */
	gitUrl: GraphQLTypes["URI"],
	/** The name of the submodule in .gitmodules */
	name: string,
	/** The path in the superproject that this submodule is located in */
	path: string,
	/** The commit revision of the subproject repository being tracked by the submodule */
	subprojectCommitOid?: GraphQLTypes["GitObjectID"] | undefined
};
	/** The connection type for Submodule. */
["SubmoduleConnection"]: {
	__typename: "SubmoduleConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["SubmoduleEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Submodule"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["SubmoduleEdge"]: {
	__typename: "SubmoduleEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Submodule"] | undefined
};
	/** Entities that can be subscribed to for web and email notifications. */
["Subscribable"]: {
	__typename:"Commit" | "Discussion" | "Issue" | "PullRequest" | "Repository" | "Team" | "TeamDiscussion",
	id: string,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: GraphQLTypes["SubscriptionState"] | undefined
	['...on Commit']: '__union' & GraphQLTypes["Commit"];
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
	['...on Team']: '__union' & GraphQLTypes["Team"];
	['...on TeamDiscussion']: '__union' & GraphQLTypes["TeamDiscussion"];
};
	/** Represents a 'subscribed' event on a given `Subscribable`. */
["SubscribedEvent"]: {
	__typename: "SubscribedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Object referenced by event. */
	subscribable: GraphQLTypes["Subscribable"]
};
	/** The possible states of a subscription. */
["SubscriptionState"]: SubscriptionState;
	/** A suggestion to review a pull request based on a user's commit history and review comments. */
["SuggestedReviewer"]: {
	__typename: "SuggestedReviewer",
	/** Is this suggestion based on past commits? */
	isAuthor: boolean,
	/** Is this suggestion based on past review comments? */
	isCommenter: boolean,
	/** Identifies the user suggested to review the pull request. */
	reviewer: GraphQLTypes["User"]
};
	/** Represents a Git tag. */
["Tag"]: {
	__typename: "Tag",
	/** An abbreviated version of the Git object ID */
	abbreviatedOid: string,
	/** The HTTP path for this Git object */
	commitResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this Git object */
	commitUrl: GraphQLTypes["URI"],
	id: string,
	/** The Git tag message. */
	message?: string | undefined,
	/** The Git tag name. */
	name: string,
	/** The Git object ID */
	oid: GraphQLTypes["GitObjectID"],
	/** The Repository the Git object belongs to */
	repository: GraphQLTypes["Repository"],
	/** Details about the tag author. */
	tagger?: GraphQLTypes["GitActor"] | undefined,
	/** The Git object the tag points to. */
	target: GraphQLTypes["GitObject"]
};
	/** A team of users in an organization. */
["Team"]: {
	__typename: "Team",
	/** A list of teams that are ancestors of this team. */
	ancestors: GraphQLTypes["TeamConnection"],
	/** A URL pointing to the team's avatar. */
	avatarUrl?: GraphQLTypes["URI"] | undefined,
	/** List of child teams belonging to this team */
	childTeams: GraphQLTypes["TeamConnection"],
	/** The slug corresponding to the organization and team. */
	combinedSlug: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The description of the team. */
	description?: string | undefined,
	/** Find a team discussion by its number. */
	discussion?: GraphQLTypes["TeamDiscussion"] | undefined,
	/** A list of team discussions. */
	discussions: GraphQLTypes["TeamDiscussionConnection"],
	/** The HTTP path for team discussions */
	discussionsResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for team discussions */
	discussionsUrl: GraphQLTypes["URI"],
	/** The HTTP path for editing this team */
	editTeamResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for editing this team */
	editTeamUrl: GraphQLTypes["URI"],
	id: string,
	/** A list of pending invitations for users to this team */
	invitations?: GraphQLTypes["OrganizationInvitationConnection"] | undefined,
	/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
	memberStatuses: GraphQLTypes["UserStatusConnection"],
	/** A list of users who are members of this team. */
	members: GraphQLTypes["TeamMemberConnection"],
	/** The HTTP path for the team' members */
	membersResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for the team' members */
	membersUrl: GraphQLTypes["URI"],
	/** The name of the team. */
	name: string,
	/** The HTTP path creating a new team */
	newTeamResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL creating a new team */
	newTeamUrl: GraphQLTypes["URI"],
	/** The organization that owns this team. */
	organization: GraphQLTypes["Organization"],
	/** The parent team of the team. */
	parentTeam?: GraphQLTypes["Team"] | undefined,
	/** The level of privacy the team has. */
	privacy: GraphQLTypes["TeamPrivacy"],
	/** Finds and returns the project according to the provided project number. */
	projectV2?: GraphQLTypes["ProjectV2"] | undefined,
	/** List of projects this team has collaborator access to. */
	projectsV2: GraphQLTypes["ProjectV2Connection"],
	/** A list of repositories this team has access to. */
	repositories: GraphQLTypes["TeamRepositoryConnection"],
	/** The HTTP path for this team's repositories */
	repositoriesResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this team's repositories */
	repositoriesUrl: GraphQLTypes["URI"],
	/** The HTTP path for this team */
	resourcePath: GraphQLTypes["URI"],
	/** What algorithm is used for review assignment for this team */
	reviewRequestDelegationAlgorithm?: GraphQLTypes["TeamReviewAssignmentAlgorithm"] | undefined,
	/** True if review assignment is enabled for this team */
	reviewRequestDelegationEnabled: boolean,
	/** How many team members are required for review assignment for this team */
	reviewRequestDelegationMemberCount?: number | undefined,
	/** When assigning team members via delegation, whether the entire team should be notified as well. */
	reviewRequestDelegationNotifyTeam: boolean,
	/** The slug corresponding to the team. */
	slug: string,
	/** The HTTP path for this team's teams */
	teamsResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this team's teams */
	teamsUrl: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this team */
	url: GraphQLTypes["URI"],
	/** Team is adminable by the viewer. */
	viewerCanAdminister: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: GraphQLTypes["SubscriptionState"] | undefined
};
	/** Audit log entry for a team.add_member event. */
["TeamAddMemberAuditEntry"]: {
	__typename: "TeamAddMemberAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: GraphQLTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a team.add_repository event. */
["TeamAddRepositoryAuditEntry"]: {
	__typename: "TeamAddRepositoryAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: GraphQLTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Metadata for an audit entry with action team.* */
["TeamAuditEntryData"]: {
	__typename:"OrgRestoreMemberMembershipTeamAuditEntryData" | "TeamAddMemberAuditEntry" | "TeamAddRepositoryAuditEntry" | "TeamChangeParentTeamAuditEntry" | "TeamRemoveMemberAuditEntry" | "TeamRemoveRepositoryAuditEntry",
	/** The team associated with the action */
	team?: GraphQLTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: GraphQLTypes["URI"] | undefined
	['...on OrgRestoreMemberMembershipTeamAuditEntryData']: '__union' & GraphQLTypes["OrgRestoreMemberMembershipTeamAuditEntryData"];
	['...on TeamAddMemberAuditEntry']: '__union' & GraphQLTypes["TeamAddMemberAuditEntry"];
	['...on TeamAddRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamAddRepositoryAuditEntry"];
	['...on TeamChangeParentTeamAuditEntry']: '__union' & GraphQLTypes["TeamChangeParentTeamAuditEntry"];
	['...on TeamRemoveMemberAuditEntry']: '__union' & GraphQLTypes["TeamRemoveMemberAuditEntry"];
	['...on TeamRemoveRepositoryAuditEntry']: '__union' & GraphQLTypes["TeamRemoveRepositoryAuditEntry"];
};
	/** Audit log entry for a team.change_parent_team event. */
["TeamChangeParentTeamAuditEntry"]: {
	__typename: "TeamChangeParentTeamAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The new parent team. */
	parentTeam?: GraphQLTypes["Team"] | undefined,
	/** The name of the new parent team */
	parentTeamName?: string | undefined,
	/** The name of the former parent team */
	parentTeamNameWas?: string | undefined,
	/** The HTTP path for the parent team */
	parentTeamResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the parent team */
	parentTeamUrl?: GraphQLTypes["URI"] | undefined,
	/** The former parent team. */
	parentTeamWas?: GraphQLTypes["Team"] | undefined,
	/** The HTTP path for the previous parent team */
	parentTeamWasResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the previous parent team */
	parentTeamWasUrl?: GraphQLTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: GraphQLTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The connection type for Team. */
["TeamConnection"]: {
	__typename: "TeamConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["TeamEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Team"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** A team discussion. */
["TeamDiscussion"]: {
	__typename: "TeamDiscussion",
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the discussion's team. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** Identifies the discussion body hash. */
	bodyVersion: string,
	/** A list of comments on this discussion. */
	comments: GraphQLTypes["TeamDiscussionCommentConnection"],
	/** The HTTP path for discussion comments */
	commentsResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for discussion comments */
	commentsUrl: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** Whether or not the discussion is pinned. */
	isPinned: boolean,
	/** Whether or not the discussion is only visible to team members and org admins. */
	isPrivate: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the discussion within its team. */
	number: number,
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The HTTP path for this discussion */
	resourcePath: GraphQLTypes["URI"],
	/** The team that defines the context of this discussion. */
	team: GraphQLTypes["Team"],
	/** The title of the discussion */
	title: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this discussion */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Whether or not the current viewer can pin this discussion. */
	viewerCanPin: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the viewer is able to change their subscription status for the repository. */
	viewerCanSubscribe: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean,
	/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
	viewerSubscription?: GraphQLTypes["SubscriptionState"] | undefined
};
	/** A comment on a team discussion. */
["TeamDiscussionComment"]: {
	__typename: "TeamDiscussionComment",
	/** The actor who authored the comment. */
	author?: GraphQLTypes["Actor"] | undefined,
	/** Author's association with the comment's team. */
	authorAssociation: GraphQLTypes["CommentAuthorAssociation"],
	/** The body as Markdown. */
	body: string,
	/** The body rendered to HTML. */
	bodyHTML: GraphQLTypes["HTML"],
	/** The body rendered to text. */
	bodyText: string,
	/** The current version of the body content. */
	bodyVersion: string,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Check if this comment was created via an email reply. */
	createdViaEmail: boolean,
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The discussion this comment is about. */
	discussion: GraphQLTypes["TeamDiscussion"],
	/** The actor who edited the comment. */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Check if this comment was edited and includes an edit with the creation data */
	includesCreatedEdit: boolean,
	/** The moment the editor made the last edit */
	lastEditedAt?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the comment number. */
	number: number,
	/** Identifies when the comment was published at. */
	publishedAt?: GraphQLTypes["DateTime"] | undefined,
	/** A list of reactions grouped by content left on the subject. */
	reactionGroups?: Array<GraphQLTypes["ReactionGroup"]> | undefined,
	/** A list of Reactions left on the Issue. */
	reactions: GraphQLTypes["ReactionConnection"],
	/** The HTTP path for this comment */
	resourcePath: GraphQLTypes["URI"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this comment */
	url: GraphQLTypes["URI"],
	/** A list of edits to this content. */
	userContentEdits?: GraphQLTypes["UserContentEditConnection"] | undefined,
	/** Check if the current viewer can delete this object. */
	viewerCanDelete: boolean,
	/** Can user react to this subject */
	viewerCanReact: boolean,
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean,
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>,
	/** Did the viewer author this comment. */
	viewerDidAuthor: boolean
};
	/** The connection type for TeamDiscussionComment. */
["TeamDiscussionCommentConnection"]: {
	__typename: "TeamDiscussionCommentConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["TeamDiscussionCommentEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["TeamDiscussionComment"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["TeamDiscussionCommentEdge"]: {
	__typename: "TeamDiscussionCommentEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["TeamDiscussionComment"] | undefined
};
	/** Ways in which team discussion comment connections can be ordered. */
["TeamDiscussionCommentOrder"]: {
		/** The direction in which to order nodes. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field by which to order nodes. */
	field: GraphQLTypes["TeamDiscussionCommentOrderField"]
};
	/** Properties by which team discussion comment connections can be ordered. */
["TeamDiscussionCommentOrderField"]: TeamDiscussionCommentOrderField;
	/** The connection type for TeamDiscussion. */
["TeamDiscussionConnection"]: {
	__typename: "TeamDiscussionConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["TeamDiscussionEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["TeamDiscussion"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["TeamDiscussionEdge"]: {
	__typename: "TeamDiscussionEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["TeamDiscussion"] | undefined
};
	/** Ways in which team discussion connections can be ordered. */
["TeamDiscussionOrder"]: {
		/** The direction in which to order nodes. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field by which to order nodes. */
	field: GraphQLTypes["TeamDiscussionOrderField"]
};
	/** Properties by which team discussion connections can be ordered. */
["TeamDiscussionOrderField"]: TeamDiscussionOrderField;
	/** An edge in a connection. */
["TeamEdge"]: {
	__typename: "TeamEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["Team"] | undefined
};
	/** The connection type for User. */
["TeamMemberConnection"]: {
	__typename: "TeamMemberConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["TeamMemberEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a user who is a member of a team. */
["TeamMemberEdge"]: {
	__typename: "TeamMemberEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The HTTP path to the organization's member access page. */
	memberAccessResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL to the organization's member access page. */
	memberAccessUrl: GraphQLTypes["URI"],
	node: GraphQLTypes["User"],
	/** The role the member has on the team. */
	role: GraphQLTypes["TeamMemberRole"]
};
	/** Ordering options for team member connections */
["TeamMemberOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order team members by. */
	field: GraphQLTypes["TeamMemberOrderField"]
};
	/** Properties by which team member connections can be ordered. */
["TeamMemberOrderField"]: TeamMemberOrderField;
	/** The possible team member roles; either 'maintainer' or 'member'. */
["TeamMemberRole"]: TeamMemberRole;
	/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
["TeamMembershipType"]: TeamMembershipType;
	/** Ways in which team connections can be ordered. */
["TeamOrder"]: {
		/** The direction in which to order nodes. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field in which to order nodes by. */
	field: GraphQLTypes["TeamOrderField"]
};
	/** Properties by which team connections can be ordered. */
["TeamOrderField"]: TeamOrderField;
	/** The possible team privacy values. */
["TeamPrivacy"]: TeamPrivacy;
	/** Audit log entry for a team.remove_member event. */
["TeamRemoveMemberAuditEntry"]: {
	__typename: "TeamRemoveMemberAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: GraphQLTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** Audit log entry for a team.remove_repository event. */
["TeamRemoveRepositoryAuditEntry"]: {
	__typename: "TeamRemoveRepositoryAuditEntry",
	/** The action name */
	action: string,
	/** The user who initiated the action */
	actor?: GraphQLTypes["AuditEntryActor"] | undefined,
	/** The IP address of the actor */
	actorIp?: string | undefined,
	/** A readable representation of the actor's location */
	actorLocation?: GraphQLTypes["ActorLocation"] | undefined,
	/** The username of the user who initiated the action */
	actorLogin?: string | undefined,
	/** The HTTP path for the actor. */
	actorResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the actor. */
	actorUrl?: GraphQLTypes["URI"] | undefined,
	/** The time the action was initiated */
	createdAt: GraphQLTypes["PreciseDateTime"],
	id: string,
	/** Whether the team was mapped to an LDAP Group. */
	isLdapMapped?: boolean | undefined,
	/** The corresponding operation type for the action */
	operationType?: GraphQLTypes["OperationType"] | undefined,
	/** The Organization associated with the Audit Entry. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** The name of the Organization. */
	organizationName?: string | undefined,
	/** The HTTP path for the organization */
	organizationResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the organization */
	organizationUrl?: GraphQLTypes["URI"] | undefined,
	/** The repository associated with the action */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The name of the repository */
	repositoryName?: string | undefined,
	/** The HTTP path for the repository */
	repositoryResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the repository */
	repositoryUrl?: GraphQLTypes["URI"] | undefined,
	/** The team associated with the action */
	team?: GraphQLTypes["Team"] | undefined,
	/** The name of the team */
	teamName?: string | undefined,
	/** The HTTP path for this team */
	teamResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for this team */
	teamUrl?: GraphQLTypes["URI"] | undefined,
	/** The user affected by the action */
	user?: GraphQLTypes["User"] | undefined,
	/** For actions involving two users, the actor is the initiator and the user is the affected user. */
	userLogin?: string | undefined,
	/** The HTTP path for the user. */
	userResourcePath?: GraphQLTypes["URI"] | undefined,
	/** The HTTP URL for the user. */
	userUrl?: GraphQLTypes["URI"] | undefined
};
	/** The connection type for Repository. */
["TeamRepositoryConnection"]: {
	__typename: "TeamRepositoryConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["TeamRepositoryEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["Repository"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** Represents a team repository. */
["TeamRepositoryEdge"]: {
	__typename: "TeamRepositoryEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	node: GraphQLTypes["Repository"],
	/** The permission level the team has on the repository */
	permission: GraphQLTypes["RepositoryPermission"]
};
	/** Ordering options for team repository connections */
["TeamRepositoryOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order repositories by. */
	field: GraphQLTypes["TeamRepositoryOrderField"]
};
	/** Properties by which team repository connections can be ordered. */
["TeamRepositoryOrderField"]: TeamRepositoryOrderField;
	/** The possible team review assignment algorithms */
["TeamReviewAssignmentAlgorithm"]: TeamReviewAssignmentAlgorithm;
	/** The role of a user on a team. */
["TeamRole"]: TeamRole;
	/** A text match within a search result. */
["TextMatch"]: {
	__typename: "TextMatch",
	/** The specific text fragment within the property matched on. */
	fragment: string,
	/** Highlights within the matched fragment. */
	highlights: Array<GraphQLTypes["TextMatchHighlight"]>,
	/** The property matched on. */
	property: string
};
	/** Represents a single highlight in a search result match. */
["TextMatchHighlight"]: {
	__typename: "TextMatchHighlight",
	/** The indice in the fragment where the matched text begins. */
	beginIndice: number,
	/** The indice in the fragment where the matched text ends. */
	endIndice: number,
	/** The text matched. */
	text: string
};
	/** A topic aggregates entities that are related to a subject. */
["Topic"]: {
	__typename: "Topic",
	id: string,
	/** The topic's name. */
	name: string,
	/** A list of related topics, including aliases of this topic, sorted with the most relevant
first. Returns up to 10 Topics. */
	relatedTopics: Array<GraphQLTypes["Topic"]>,
	/** A list of repositories. */
	repositories: GraphQLTypes["RepositoryConnection"],
	/** Returns a count of how many stargazers there are on this object */
	stargazerCount: number,
	/** A list of users who have starred this starrable. */
	stargazers: GraphQLTypes["StargazerConnection"],
	/** Returns a boolean indicating whether the viewing user has starred this starrable. */
	viewerHasStarred: boolean
};
	/** Metadata for an audit entry with a topic. */
["TopicAuditEntryData"]: {
	__typename:"RepoAddTopicAuditEntry" | "RepoRemoveTopicAuditEntry",
	/** The name of the topic added to the repository */
	topic?: GraphQLTypes["Topic"] | undefined,
	/** The name of the topic added to the repository */
	topicName?: string | undefined
	['...on RepoAddTopicAuditEntry']: '__union' & GraphQLTypes["RepoAddTopicAuditEntry"];
	['...on RepoRemoveTopicAuditEntry']: '__union' & GraphQLTypes["RepoRemoveTopicAuditEntry"];
};
	/** Reason that the suggested topic is declined. */
["TopicSuggestionDeclineReason"]: TopicSuggestionDeclineReason;
	/** The possible states of a tracked issue. */
["TrackedIssueStates"]: TrackedIssueStates;
	/** Autogenerated input type of TransferIssue */
["TransferIssueInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether to create labels if they don't exist in the target repository (matched by name) */
	createLabelsIfMissing?: boolean | undefined,
	/** The Node ID of the issue to be transferred */
	issueId: string,
	/** The Node ID of the repository the issue should be transferred to */
	repositoryId: string
};
	/** Autogenerated return type of TransferIssue */
["TransferIssuePayload"]: {
	__typename: "TransferIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was transferred */
	issue?: GraphQLTypes["Issue"] | undefined
};
	/** Represents a 'transferred' event on a given issue or pull request. */
["TransferredEvent"]: {
	__typename: "TransferredEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The repository this came from */
	fromRepository?: GraphQLTypes["Repository"] | undefined,
	id: string,
	/** Identifies the issue associated with the event. */
	issue: GraphQLTypes["Issue"]
};
	/** Represents a Git tree. */
["Tree"]: {
	__typename: "Tree",
	/** An abbreviated version of the Git object ID */
	abbreviatedOid: string,
	/** The HTTP path for this Git object */
	commitResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL for this Git object */
	commitUrl: GraphQLTypes["URI"],
	/** A list of tree entries. */
	entries?: Array<GraphQLTypes["TreeEntry"]> | undefined,
	id: string,
	/** The Git object ID */
	oid: GraphQLTypes["GitObjectID"],
	/** The Repository the Git object belongs to */
	repository: GraphQLTypes["Repository"]
};
	/** Represents a Git tree entry. */
["TreeEntry"]: {
	__typename: "TreeEntry",
	/** The extension of the file */
	extension?: string | undefined,
	/** Whether or not this tree entry is generated */
	isGenerated: boolean,
	/** The programming language this file is written in. */
	language?: GraphQLTypes["Language"] | undefined,
	/** Number of lines in the file. */
	lineCount?: number | undefined,
	/** Entry file mode. */
	mode: number,
	/** Entry file name. */
	name: string,
	/** Entry file object. */
	object?: GraphQLTypes["GitObject"] | undefined,
	/** Entry file Git object ID. */
	oid: GraphQLTypes["GitObjectID"],
	/** The full path of the file. */
	path?: string | undefined,
	/** The Repository the tree entry belongs to */
	repository: GraphQLTypes["Repository"],
	/** Entry byte size */
	size: number,
	/** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
	submodule?: GraphQLTypes["Submodule"] | undefined,
	/** Entry file type. */
	type: string
};
	/** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
["URI"]: "scalar" & { name: "URI" };
	/** Autogenerated input type of UnarchiveRepository */
["UnarchiveRepositoryInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the repository to unarchive. */
	repositoryId: string
};
	/** Autogenerated return type of UnarchiveRepository */
["UnarchiveRepositoryPayload"]: {
	__typename: "UnarchiveRepositoryPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository that was unarchived. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** Represents an 'unassigned' event on any assignable object. */
["UnassignedEvent"]: {
	__typename: "UnassignedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the assignable associated with the event. */
	assignable: GraphQLTypes["Assignable"],
	/** Identifies the user or mannequin that was unassigned. */
	assignee?: GraphQLTypes["Assignee"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Identifies the subject (user) who was unassigned. */
	user?: GraphQLTypes["User"] | undefined
};
	/** Autogenerated input type of UnfollowOrganization */
["UnfollowOrganizationInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the organization to unfollow. */
	organizationId: string
};
	/** Autogenerated return type of UnfollowOrganization */
["UnfollowOrganizationPayload"]: {
	__typename: "UnfollowOrganizationPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The organization that was unfollowed. */
	organization?: GraphQLTypes["Organization"] | undefined
};
	/** Autogenerated input type of UnfollowUser */
["UnfollowUserInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the user to unfollow. */
	userId: string
};
	/** Autogenerated return type of UnfollowUser */
["UnfollowUserPayload"]: {
	__typename: "UnfollowUserPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The user that was unfollowed. */
	user?: GraphQLTypes["User"] | undefined
};
	/** Represents a type that can be retrieved by a URL. */
["UniformResourceLocatable"]: {
	__typename:"Bot" | "CheckRun" | "ClosedEvent" | "Commit" | "ConvertToDraftEvent" | "CrossReferencedEvent" | "Gist" | "Issue" | "Mannequin" | "MergedEvent" | "Milestone" | "Organization" | "PullRequest" | "PullRequestCommit" | "ReadyForReviewEvent" | "Release" | "Repository" | "RepositoryTopic" | "ReviewDismissedEvent" | "TeamDiscussion" | "TeamDiscussionComment" | "User",
	/** The HTML path to this resource. */
	resourcePath: GraphQLTypes["URI"],
	/** The URL to this resource. */
	url: GraphQLTypes["URI"]
	['...on Bot']: '__union' & GraphQLTypes["Bot"];
	['...on CheckRun']: '__union' & GraphQLTypes["CheckRun"];
	['...on ClosedEvent']: '__union' & GraphQLTypes["ClosedEvent"];
	['...on Commit']: '__union' & GraphQLTypes["Commit"];
	['...on ConvertToDraftEvent']: '__union' & GraphQLTypes["ConvertToDraftEvent"];
	['...on CrossReferencedEvent']: '__union' & GraphQLTypes["CrossReferencedEvent"];
	['...on Gist']: '__union' & GraphQLTypes["Gist"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on Mannequin']: '__union' & GraphQLTypes["Mannequin"];
	['...on MergedEvent']: '__union' & GraphQLTypes["MergedEvent"];
	['...on Milestone']: '__union' & GraphQLTypes["Milestone"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on PullRequestCommit']: '__union' & GraphQLTypes["PullRequestCommit"];
	['...on ReadyForReviewEvent']: '__union' & GraphQLTypes["ReadyForReviewEvent"];
	['...on Release']: '__union' & GraphQLTypes["Release"];
	['...on Repository']: '__union' & GraphQLTypes["Repository"];
	['...on RepositoryTopic']: '__union' & GraphQLTypes["RepositoryTopic"];
	['...on ReviewDismissedEvent']: '__union' & GraphQLTypes["ReviewDismissedEvent"];
	['...on TeamDiscussion']: '__union' & GraphQLTypes["TeamDiscussion"];
	['...on TeamDiscussionComment']: '__union' & GraphQLTypes["TeamDiscussionComment"];
	['...on User']: '__union' & GraphQLTypes["User"];
};
	/** Represents an unknown signature on a Commit or Tag. */
["UnknownSignature"]: {
	__typename: "UnknownSignature",
	/** Email used to sign this object. */
	email: string,
	/** True if the signature is valid and verified by GitHub. */
	isValid: boolean,
	/** Payload for GPG signing object. Raw ODB object without the signature header. */
	payload: string,
	/** ASCII-armored signature header from object. */
	signature: string,
	/** GitHub user corresponding to the email signing this commit. */
	signer?: GraphQLTypes["User"] | undefined,
	/** The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid. */
	state: GraphQLTypes["GitSignatureState"],
	/** True if the signature was made with GitHub's signing key. */
	wasSignedByGitHub: boolean
};
	/** Represents an 'unlabeled' event on a given issue or pull request. */
["UnlabeledEvent"]: {
	__typename: "UnlabeledEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Identifies the label associated with the 'unlabeled' event. */
	label: GraphQLTypes["Label"],
	/** Identifies the `Labelable` associated with the event. */
	labelable: GraphQLTypes["Labelable"]
};
	/** Autogenerated input type of UnlinkRepositoryFromProject */
["UnlinkRepositoryFromProjectInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Project linked to the Repository. */
	projectId: string,
	/** The ID of the Repository linked to the Project. */
	repositoryId: string
};
	/** Autogenerated return type of UnlinkRepositoryFromProject */
["UnlinkRepositoryFromProjectPayload"]: {
	__typename: "UnlinkRepositoryFromProjectPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The linked Project. */
	project?: GraphQLTypes["Project"] | undefined,
	/** The linked Repository. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** Autogenerated input type of UnlockLockable */
["UnlockLockableInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the item to be unlocked. */
	lockableId: string
};
	/** Autogenerated return type of UnlockLockable */
["UnlockLockablePayload"]: {
	__typename: "UnlockLockablePayload",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The item that was unlocked. */
	unlockedRecord?: GraphQLTypes["Lockable"] | undefined
};
	/** Represents an 'unlocked' event on a given issue or pull request. */
["UnlockedEvent"]: {
	__typename: "UnlockedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Object that was unlocked. */
	lockable: GraphQLTypes["Lockable"]
};
	/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
["UnmarkDiscussionCommentAsAnswerInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion comment to unmark as an answer. */
	id: string
};
	/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */
["UnmarkDiscussionCommentAsAnswerPayload"]: {
	__typename: "UnmarkDiscussionCommentAsAnswerPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The discussion that includes the comment. */
	discussion?: GraphQLTypes["Discussion"] | undefined
};
	/** Autogenerated input type of UnmarkFileAsViewed */
["UnmarkFileAsViewedInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The path of the file to mark as unviewed */
	path: string,
	/** The Node ID of the pull request. */
	pullRequestId: string
};
	/** Autogenerated return type of UnmarkFileAsViewed */
["UnmarkFileAsViewedPayload"]: {
	__typename: "UnmarkFileAsViewedPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of UnmarkIssueAsDuplicate */
["UnmarkIssueAsDuplicateInput"]: {
		/** ID of the issue or pull request currently considered canonical/authoritative/original. */
	canonicalId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** ID of the issue or pull request currently marked as a duplicate. */
	duplicateId: string
};
	/** Autogenerated return type of UnmarkIssueAsDuplicate */
["UnmarkIssueAsDuplicatePayload"]: {
	__typename: "UnmarkIssueAsDuplicatePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue or pull request that was marked as a duplicate. */
	duplicate?: GraphQLTypes["IssueOrPullRequest"] | undefined
};
	/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
["UnmarkedAsDuplicateEvent"]: {
	__typename: "UnmarkedAsDuplicateEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** The authoritative issue or pull request which has been duplicated by another. */
	canonical?: GraphQLTypes["IssueOrPullRequest"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** The issue or pull request which has been marked as a duplicate of another. */
	duplicate?: GraphQLTypes["IssueOrPullRequest"] | undefined,
	id: string,
	/** Canonical and duplicate belong to different repositories. */
	isCrossRepository: boolean
};
	/** Autogenerated input type of UnminimizeComment */
["UnminimizeCommentInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the subject to modify. */
	subjectId: string
};
	/** Autogenerated return type of UnminimizeComment */
["UnminimizeCommentPayload"]: {
	__typename: "UnminimizeCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The comment that was unminimized. */
	unminimizedComment?: GraphQLTypes["Minimizable"] | undefined
};
	/** Autogenerated input type of UnpinIssue */
["UnpinIssueInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the issue to be unpinned */
	issueId: string
};
	/** Autogenerated return type of UnpinIssue */
["UnpinIssuePayload"]: {
	__typename: "UnpinIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue that was unpinned */
	issue?: GraphQLTypes["Issue"] | undefined
};
	/** Represents an 'unpinned' event on a given issue or pull request. */
["UnpinnedEvent"]: {
	__typename: "UnpinnedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Identifies the issue associated with the event. */
	issue: GraphQLTypes["Issue"]
};
	/** Autogenerated input type of UnresolveReviewThread */
["UnresolveReviewThreadInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the thread to unresolve */
	threadId: string
};
	/** Autogenerated return type of UnresolveReviewThread */
["UnresolveReviewThreadPayload"]: {
	__typename: "UnresolveReviewThreadPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The thread to resolve. */
	thread?: GraphQLTypes["PullRequestReviewThread"] | undefined
};
	/** Represents an 'unsubscribed' event on a given `Subscribable`. */
["UnsubscribedEvent"]: {
	__typename: "UnsubscribedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** Object referenced by event. */
	subscribable: GraphQLTypes["Subscribable"]
};
	/** Entities that can be updated. */
["Updatable"]: {
	__typename:"CommitComment" | "Discussion" | "DiscussionComment" | "GistComment" | "Issue" | "IssueComment" | "Project" | "ProjectNext" | "ProjectV2" | "PullRequest" | "PullRequestReview" | "PullRequestReviewComment" | "TeamDiscussion" | "TeamDiscussionComment",
	/** Check if the current viewer can update this object. */
	viewerCanUpdate: boolean
	['...on CommitComment']: '__union' & GraphQLTypes["CommitComment"];
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on DiscussionComment']: '__union' & GraphQLTypes["DiscussionComment"];
	['...on GistComment']: '__union' & GraphQLTypes["GistComment"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on Project']: '__union' & GraphQLTypes["Project"];
	['...on ProjectNext']: '__union' & GraphQLTypes["ProjectNext"];
	['...on ProjectV2']: '__union' & GraphQLTypes["ProjectV2"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on PullRequestReview']: '__union' & GraphQLTypes["PullRequestReview"];
	['...on PullRequestReviewComment']: '__union' & GraphQLTypes["PullRequestReviewComment"];
	['...on TeamDiscussion']: '__union' & GraphQLTypes["TeamDiscussion"];
	['...on TeamDiscussionComment']: '__union' & GraphQLTypes["TeamDiscussionComment"];
};
	/** Comments that can be updated. */
["UpdatableComment"]: {
	__typename:"CommitComment" | "DiscussionComment" | "GistComment" | "Issue" | "IssueComment" | "PullRequest" | "PullRequestReview" | "PullRequestReviewComment" | "TeamDiscussion" | "TeamDiscussionComment",
	/** Reasons why the current viewer can not update this comment. */
	viewerCannotUpdateReasons: Array<GraphQLTypes["CommentCannotUpdateReason"]>
	['...on CommitComment']: '__union' & GraphQLTypes["CommitComment"];
	['...on DiscussionComment']: '__union' & GraphQLTypes["DiscussionComment"];
	['...on GistComment']: '__union' & GraphQLTypes["GistComment"];
	['...on Issue']: '__union' & GraphQLTypes["Issue"];
	['...on IssueComment']: '__union' & GraphQLTypes["IssueComment"];
	['...on PullRequest']: '__union' & GraphQLTypes["PullRequest"];
	['...on PullRequestReview']: '__union' & GraphQLTypes["PullRequestReview"];
	['...on PullRequestReviewComment']: '__union' & GraphQLTypes["PullRequestReviewComment"];
	['...on TeamDiscussion']: '__union' & GraphQLTypes["TeamDiscussion"];
	['...on TeamDiscussionComment']: '__union' & GraphQLTypes["TeamDiscussionComment"];
};
	/** Autogenerated input type of UpdateBranchProtectionRule */
["UpdateBranchProtectionRuleInput"]: {
		/** Can this branch be deleted. */
	allowsDeletions?: boolean | undefined,
	/** Are force pushes allowed on this branch. */
	allowsForcePushes?: boolean | undefined,
	/** Is branch creation a protected operation. */
	blocksCreations?: boolean | undefined,
	/** The global relay id of the branch protection rule to be updated. */
	branchProtectionRuleId: string,
	/** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
	bypassForcePushActorIds?: Array<string> | undefined,
	/** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
	bypassPullRequestActorIds?: Array<string> | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Will new commits pushed to matching branches dismiss pull request review approvals. */
	dismissesStaleReviews?: boolean | undefined,
	/** Can admins overwrite branch protection. */
	isAdminEnforced?: boolean | undefined,
	/** The glob-like pattern used to determine matching branches. */
	pattern?: string | undefined,
	/** A list of User, Team, or App IDs allowed to push to matching branches. */
	pushActorIds?: Array<string> | undefined,
	/** Number of approving reviews required to update matching branches. */
	requiredApprovingReviewCount?: number | undefined,
	/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
	requiredStatusCheckContexts?: Array<string> | undefined,
	/** The list of required status checks */
	requiredStatusChecks?: Array<GraphQLTypes["RequiredStatusCheckInput"]> | undefined,
	/** Are approving reviews required to update matching branches. */
	requiresApprovingReviews?: boolean | undefined,
	/** Are reviews from code owners required to update matching branches. */
	requiresCodeOwnerReviews?: boolean | undefined,
	/** Are commits required to be signed. */
	requiresCommitSignatures?: boolean | undefined,
	/** Are conversations required to be resolved before merging. */
	requiresConversationResolution?: boolean | undefined,
	/** Are merge commits prohibited from being pushed to this branch. */
	requiresLinearHistory?: boolean | undefined,
	/** Are status checks required to update matching branches. */
	requiresStatusChecks?: boolean | undefined,
	/** Are branches required to be up to date before merging. */
	requiresStrictStatusChecks?: boolean | undefined,
	/** Is pushing to matching branches restricted. */
	restrictsPushes?: boolean | undefined,
	/** Is dismissal of pull request reviews restricted. */
	restrictsReviewDismissals?: boolean | undefined,
	/** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
	reviewDismissalActorIds?: Array<string> | undefined
};
	/** Autogenerated return type of UpdateBranchProtectionRule */
["UpdateBranchProtectionRulePayload"]: {
	__typename: "UpdateBranchProtectionRulePayload",
	/** The newly created BranchProtectionRule. */
	branchProtectionRule?: GraphQLTypes["BranchProtectionRule"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of UpdateCheckRun */
["UpdateCheckRunInput"]: {
		/** Possible further actions the integrator can perform, which a user may trigger. */
	actions?: Array<GraphQLTypes["CheckRunAction"]> | undefined,
	/** The node of the check. */
	checkRunId: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The time that the check run finished. */
	completedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The final conclusion of the check. */
	conclusion?: GraphQLTypes["CheckConclusionState"] | undefined,
	/** The URL of the integrator's site that has the full details of the check. */
	detailsUrl?: GraphQLTypes["URI"] | undefined,
	/** A reference for the run on the integrator's system. */
	externalId?: string | undefined,
	/** The name of the check. */
	name?: string | undefined,
	/** Descriptive details about the run. */
	output?: GraphQLTypes["CheckRunOutput"] | undefined,
	/** The node ID of the repository. */
	repositoryId: string,
	/** The time that the check run began. */
	startedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The current status. */
	status?: GraphQLTypes["RequestableCheckStatusState"] | undefined
};
	/** Autogenerated return type of UpdateCheckRun */
["UpdateCheckRunPayload"]: {
	__typename: "UpdateCheckRunPayload",
	/** The updated check run. */
	checkRun?: GraphQLTypes["CheckRun"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of UpdateCheckSuitePreferences */
["UpdateCheckSuitePreferencesInput"]: {
		/** The check suite preferences to modify. */
	autoTriggerPreferences: Array<GraphQLTypes["CheckSuiteAutoTriggerPreference"]>,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of UpdateCheckSuitePreferences */
["UpdateCheckSuitePreferencesPayload"]: {
	__typename: "UpdateCheckSuitePreferencesPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated repository. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** Autogenerated input type of UpdateDiscussionComment */
["UpdateDiscussionCommentInput"]: {
		/** The new contents of the comment body. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion comment to update. */
	commentId: string
};
	/** Autogenerated return type of UpdateDiscussionComment */
["UpdateDiscussionCommentPayload"]: {
	__typename: "UpdateDiscussionCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The modified discussion comment. */
	comment?: GraphQLTypes["DiscussionComment"] | undefined
};
	/** Autogenerated input type of UpdateDiscussion */
["UpdateDiscussionInput"]: {
		/** The new contents of the discussion body. */
	body?: string | undefined,
	/** The Node ID of a discussion category within the same repository to change this discussion to. */
	categoryId?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion to update. */
	discussionId: string,
	/** The new discussion title. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateDiscussion */
["UpdateDiscussionPayload"]: {
	__typename: "UpdateDiscussionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The modified discussion. */
	discussion?: GraphQLTypes["Discussion"] | undefined
};
	/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
["UpdateEnterpriseAdministratorRoleInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Enterprise which the admin belongs to. */
	enterpriseId: string,
	/** The login of a administrator whose role is being changed. */
	login: string,
	/** The new role for the Enterprise administrator. */
	role: GraphQLTypes["EnterpriseAdministratorRole"]
};
	/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
["UpdateEnterpriseAdministratorRolePayload"]: {
	__typename: "UpdateEnterpriseAdministratorRolePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of changing the administrator's role. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
["UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the allow private repository forking setting. */
	enterpriseId: string,
	/** The value for the allow private repository forking policy on the enterprise. */
	policyValue?: GraphQLTypes["EnterpriseAllowPrivateRepositoryForkingPolicyValue"] | undefined,
	/** The value for the allow private repository forking setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
["UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"]: {
	__typename: "UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated allow private repository forking setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the allow private repository forking setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
["UpdateEnterpriseDefaultRepositoryPermissionSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the base repository permission setting. */
	enterpriseId: string,
	/** The value for the base repository permission setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseDefaultRepositoryPermissionSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
["UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"]: {
	__typename: "UpdateEnterpriseDefaultRepositoryPermissionSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated base repository permission setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the base repository permission setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can change repository visibility setting. */
	enterpriseId: string,
	/** The value for the members can change repository visibility setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"]: {
	__typename: "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can change repository visibility setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can change repository visibility setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
["UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can create repositories setting. */
	enterpriseId: string,
	/** Allow members to create internal repositories. Defaults to current value. */
	membersCanCreateInternalRepositories?: boolean | undefined,
	/** Allow members to create private repositories. Defaults to current value. */
	membersCanCreatePrivateRepositories?: boolean | undefined,
	/** Allow members to create public repositories. Defaults to current value. */
	membersCanCreatePublicRepositories?: boolean | undefined,
	/** When false, allow member organizations to set their own repository creation member privileges. */
	membersCanCreateRepositoriesPolicyEnabled?: boolean | undefined,
	/** Value for the members can create repositories setting on the enterprise. This
or the granular public/private/internal allowed fields (but not both) must be provided. */
	settingValue?: GraphQLTypes["EnterpriseMembersCanCreateRepositoriesSettingValue"] | undefined
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
["UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"]: {
	__typename: "UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can create repositories setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can create repositories setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
["UpdateEnterpriseMembersCanDeleteIssuesSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can delete issues setting. */
	enterpriseId: string,
	/** The value for the members can delete issues setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
["UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"]: {
	__typename: "UpdateEnterpriseMembersCanDeleteIssuesSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can delete issues setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can delete issues setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
["UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can delete repositories setting. */
	enterpriseId: string,
	/** The value for the members can delete repositories setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
["UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"]: {
	__typename: "UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can delete repositories setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can delete repositories setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
["UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can invite collaborators setting. */
	enterpriseId: string,
	/** The value for the members can invite collaborators setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
["UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"]: {
	__typename: "UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can invite collaborators setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can invite collaborators setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
["UpdateEnterpriseMembersCanMakePurchasesSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can make purchases setting. */
	enterpriseId: string,
	/** The value for the members can make purchases setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseMembersCanMakePurchasesSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
["UpdateEnterpriseMembersCanMakePurchasesSettingPayload"]: {
	__typename: "UpdateEnterpriseMembersCanMakePurchasesSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can make purchases setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can make purchases setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can update protected branches setting. */
	enterpriseId: string,
	/** The value for the members can update protected branches setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"]: {
	__typename: "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can update protected branches setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can update protected branches setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
["UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the members can view dependency insights setting. */
	enterpriseId: string,
	/** The value for the members can view dependency insights setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
["UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"]: {
	__typename: "UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated members can view dependency insights setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the members can view dependency insights setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
["UpdateEnterpriseOrganizationProjectsSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the organization projects setting. */
	enterpriseId: string,
	/** The value for the organization projects setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
["UpdateEnterpriseOrganizationProjectsSettingPayload"]: {
	__typename: "UpdateEnterpriseOrganizationProjectsSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated organization projects setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the organization projects setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
["UpdateEnterpriseOwnerOrganizationRoleInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Enterprise which the owner belongs to. */
	enterpriseId: string,
	/** The ID of the organization for membership change. */
	organizationId: string,
	/** The role to assume in the organization. */
	organizationRole: GraphQLTypes["RoleInOrganization"]
};
	/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */
["UpdateEnterpriseOwnerOrganizationRolePayload"]: {
	__typename: "UpdateEnterpriseOwnerOrganizationRolePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of changing the owner's organization role. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseProfile */
["UpdateEnterpriseProfileInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The description of the enterprise. */
	description?: string | undefined,
	/** The Enterprise ID to update. */
	enterpriseId: string,
	/** The location of the enterprise. */
	location?: string | undefined,
	/** The name of the enterprise. */
	name?: string | undefined,
	/** The URL of the enterprise's website. */
	websiteUrl?: string | undefined
};
	/** Autogenerated return type of UpdateEnterpriseProfile */
["UpdateEnterpriseProfilePayload"]: {
	__typename: "UpdateEnterpriseProfilePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated enterprise. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined
};
	/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
["UpdateEnterpriseRepositoryProjectsSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the repository projects setting. */
	enterpriseId: string,
	/** The value for the repository projects setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
["UpdateEnterpriseRepositoryProjectsSettingPayload"]: {
	__typename: "UpdateEnterpriseRepositoryProjectsSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated repository projects setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the repository projects setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
["UpdateEnterpriseTeamDiscussionsSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the team discussions setting. */
	enterpriseId: string,
	/** The value for the team discussions setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledDisabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
["UpdateEnterpriseTeamDiscussionsSettingPayload"]: {
	__typename: "UpdateEnterpriseTeamDiscussionsSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated team discussions setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the team discussions setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the enterprise on which to set the two factor authentication required setting. */
	enterpriseId: string,
	/** The value for the two factor authentication required setting on the enterprise. */
	settingValue: GraphQLTypes["EnterpriseEnabledSettingValue"]
};
	/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"]: {
	__typename: "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The enterprise with the updated two factor authentication required setting. */
	enterprise?: GraphQLTypes["Enterprise"] | undefined,
	/** A message confirming the result of updating the two factor authentication required setting. */
	message?: string | undefined
};
	/** Autogenerated input type of UpdateEnvironment */
["UpdateEnvironmentInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The node ID of the environment. */
	environmentId: string,
	/** The ids of users or teams that can approve deployments to this environment */
	reviewers?: Array<string> | undefined,
	/** The wait timer in minutes. */
	waitTimer?: number | undefined
};
	/** Autogenerated return type of UpdateEnvironment */
["UpdateEnvironmentPayload"]: {
	__typename: "UpdateEnvironmentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated environment. */
	environment?: GraphQLTypes["Environment"] | undefined
};
	/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
["UpdateIpAllowListEnabledSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the owner on which to set the IP allow list enabled setting. */
	ownerId: string,
	/** The value for the IP allow list enabled setting. */
	settingValue: GraphQLTypes["IpAllowListEnabledSettingValue"]
};
	/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
["UpdateIpAllowListEnabledSettingPayload"]: {
	__typename: "UpdateIpAllowListEnabledSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list owner on which the setting was updated. */
	owner?: GraphQLTypes["IpAllowListOwner"] | undefined
};
	/** Autogenerated input type of UpdateIpAllowListEntry */
["UpdateIpAllowListEntryInput"]: {
		/** An IP address or range of addresses in CIDR notation. */
	allowListValue: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the IP allow list entry to update. */
	ipAllowListEntryId: string,
	/** Whether the IP allow list entry is active when an IP allow list is enabled. */
	isActive: boolean,
	/** An optional name for the IP allow list entry. */
	name?: string | undefined
};
	/** Autogenerated return type of UpdateIpAllowListEntry */
["UpdateIpAllowListEntryPayload"]: {
	__typename: "UpdateIpAllowListEntryPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list entry that was updated. */
	ipAllowListEntry?: GraphQLTypes["IpAllowListEntry"] | undefined
};
	/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
["UpdateIpAllowListForInstalledAppsEnabledSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the owner. */
	ownerId: string,
	/** The value for the IP allow list configuration for installed GitHub Apps setting. */
	settingValue: GraphQLTypes["IpAllowListForInstalledAppsEnabledSettingValue"]
};
	/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */
["UpdateIpAllowListForInstalledAppsEnabledSettingPayload"]: {
	__typename: "UpdateIpAllowListForInstalledAppsEnabledSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The IP allow list owner on which the setting was updated. */
	owner?: GraphQLTypes["IpAllowListOwner"] | undefined
};
	/** Autogenerated input type of UpdateIssueComment */
["UpdateIssueCommentInput"]: {
		/** The updated text of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the IssueComment to modify. */
	id: string
};
	/** Autogenerated return type of UpdateIssueComment */
["UpdateIssueCommentPayload"]: {
	__typename: "UpdateIssueCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated comment. */
	issueComment?: GraphQLTypes["IssueComment"] | undefined
};
	/** Autogenerated input type of UpdateIssue */
["UpdateIssueInput"]: {
		/** An array of Node IDs of users for this issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body for the issue description. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the Issue to modify. */
	id: string,
	/** An array of Node IDs of labels for this issue. */
	labelIds?: Array<string> | undefined,
	/** The Node ID of the milestone for this issue. */
	milestoneId?: string | undefined,
	/** An array of Node IDs for projects associated with this issue. */
	projectIds?: Array<string> | undefined,
	/** The desired issue state. */
	state?: GraphQLTypes["IssueState"] | undefined,
	/** The title for the issue. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateIssue */
["UpdateIssuePayload"]: {
	__typename: "UpdateIssuePayload",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The issue. */
	issue?: GraphQLTypes["Issue"] | undefined
};
	/** Autogenerated input type of UpdateLabel */
["UpdateLabelInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A 6 character hex code, without the leading #, identifying the updated color of the label. */
	color?: string | undefined,
	/** A brief description of the label, such as its purpose. */
	description?: string | undefined,
	/** The Node ID of the label to be updated. */
	id: string,
	/** The updated name of the label. */
	name?: string | undefined
};
	/** Autogenerated return type of UpdateLabel */
["UpdateLabelPayload"]: {
	__typename: "UpdateLabelPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated label. */
	label?: GraphQLTypes["Label"] | undefined
};
	/** Autogenerated input type of UpdateNotificationRestrictionSetting */
["UpdateNotificationRestrictionSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the owner on which to set the restrict notifications setting. */
	ownerId: string,
	/** The value for the restrict notifications setting. */
	settingValue: GraphQLTypes["NotificationRestrictionSettingValue"]
};
	/** Autogenerated return type of UpdateNotificationRestrictionSetting */
["UpdateNotificationRestrictionSettingPayload"]: {
	__typename: "UpdateNotificationRestrictionSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The owner on which the setting was updated. */
	owner?: GraphQLTypes["VerifiableDomainOwner"] | undefined
};
	/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
["UpdateOrganizationAllowPrivateRepositoryForkingSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Enable forking of private repositories in the organization? */
	forkingEnabled: boolean,
	/** The ID of the organization on which to set the allow private repository forking setting. */
	organizationId: string
};
	/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
["UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"]: {
	__typename: "UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of updating the allow private repository forking setting. */
	message?: string | undefined,
	/** The organization with the updated allow private repository forking setting. */
	organization?: GraphQLTypes["Organization"] | undefined
};
	/** Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting */
["UpdateOrganizationWebCommitSignoffSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the organization on which to set the web commit signoff setting. */
	organizationId: string,
	/** Enable signoff on web-based commits for repositories in the organization? */
	webCommitSignoffRequired: boolean
};
	/** Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting */
["UpdateOrganizationWebCommitSignoffSettingPayload"]: {
	__typename: "UpdateOrganizationWebCommitSignoffSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of updating the web commit signoff setting. */
	message?: string | undefined,
	/** The organization with the updated web commit signoff setting. */
	organization?: GraphQLTypes["Organization"] | undefined
};
	/** Autogenerated input type of UpdateProjectCard */
["UpdateProjectCardInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Whether or not the ProjectCard should be archived */
	isArchived?: boolean | undefined,
	/** The note of ProjectCard. */
	note?: string | undefined,
	/** The ProjectCard ID to update. */
	projectCardId: string
};
	/** Autogenerated return type of UpdateProjectCard */
["UpdateProjectCardPayload"]: {
	__typename: "UpdateProjectCardPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated ProjectCard. */
	projectCard?: GraphQLTypes["ProjectCard"] | undefined
};
	/** Autogenerated input type of UpdateProjectColumn */
["UpdateProjectColumnInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of project column. */
	name: string,
	/** The ProjectColumn ID to update. */
	projectColumnId: string
};
	/** Autogenerated return type of UpdateProjectColumn */
["UpdateProjectColumnPayload"]: {
	__typename: "UpdateProjectColumnPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated project column. */
	projectColumn?: GraphQLTypes["ProjectColumn"] | undefined
};
	/** Autogenerated input type of UpdateProjectDraftIssue */
["UpdateProjectDraftIssueInput"]: {
		/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body of the draft issue. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the draft issue to update. */
	draftIssueId: string,
	/** The title of the draft issue. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateProjectDraftIssue */
["UpdateProjectDraftIssuePayload"]: {
	__typename: "UpdateProjectDraftIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The draft issue updated in the project. */
	draftIssue?: GraphQLTypes["DraftIssue"] | undefined
};
	/** Autogenerated input type of UpdateProject */
["UpdateProjectInput"]: {
		/** The description of project. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The name of project. */
	name?: string | undefined,
	/** The Project ID to update. */
	projectId: string,
	/** Whether the project is public or not. */
	public?: boolean | undefined,
	/** Whether the project is open or closed. */
	state?: GraphQLTypes["ProjectState"] | undefined
};
	/** Autogenerated input type of UpdateProjectNext */
["UpdateProjectNextInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Set the project to closed or open.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `closed` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	closed?: boolean | undefined,
	/** Set the readme description of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `description` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	description?: string | undefined,
	/** The ID of the Project to update. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	projectId?: string | undefined,
	/** Set the project to public or private.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `public` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	public?: boolean | undefined,
	/** Set the short description of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `shortDescription` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	shortDescription?: string | undefined,
	/** Set the title of the project.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	title?: string | undefined
};
	/** Autogenerated input type of UpdateProjectNextItemField */
["UpdateProjectNextItemFieldInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The id of the field to be updated.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `fieldId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	fieldId?: string | undefined,
	/** The id of the item to be updated. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	itemId?: string | undefined,
	/** The ID of the Project. This field is required. */
	projectId?: string | undefined,
	/** The value which will be set on the field. This field is required.

**Upcoming Change on 2023-01-01 UTC**
**Description:** `value` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,
to find a suitable replacement.
**Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. */
	value?: string | undefined
};
	/** Autogenerated return type of UpdateProjectNextItemField */
["UpdateProjectNextItemFieldPayload"]: {
	__typename: "UpdateProjectNextItemFieldPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated item. */
	projectNextItem?: GraphQLTypes["ProjectNextItem"] | undefined
};
	/** Autogenerated return type of UpdateProjectNext */
["UpdateProjectNextPayload"]: {
	__typename: "UpdateProjectNextPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated Project. */
	projectNext?: GraphQLTypes["ProjectNext"] | undefined
};
	/** Autogenerated return type of UpdateProject */
["UpdateProjectPayload"]: {
	__typename: "UpdateProjectPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated project. */
	project?: GraphQLTypes["Project"] | undefined
};
	/** Autogenerated input type of UpdateProjectV2DraftIssue */
["UpdateProjectV2DraftIssueInput"]: {
		/** The IDs of the assignees of the draft issue. */
	assigneeIds?: Array<string> | undefined,
	/** The body of the draft issue. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the draft issue to update. */
	draftIssueId: string,
	/** The title of the draft issue. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateProjectV2DraftIssue */
["UpdateProjectV2DraftIssuePayload"]: {
	__typename: "UpdateProjectV2DraftIssuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The draft issue updated in the project. */
	draftIssue?: GraphQLTypes["DraftIssue"] | undefined
};
	/** Autogenerated input type of UpdateProjectV2 */
["UpdateProjectV2Input"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Set the project to closed or open. */
	closed?: boolean | undefined,
	/** The ID of the Project to update. */
	projectId: string,
	/** Set the project to public or private. */
	public?: boolean | undefined,
	/** Set the readme description of the project. */
	readme?: string | undefined,
	/** Set the short description of the project. */
	shortDescription?: string | undefined,
	/** Set the title of the project. */
	title?: string | undefined
};
	/** Autogenerated input type of UpdateProjectV2ItemFieldValue */
["UpdateProjectV2ItemFieldValueInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the field to be updated. */
	fieldId: string,
	/** The ID of the item to be updated. */
	itemId: string,
	/** The ID of the Project. */
	projectId: string,
	/** The value which will be set on the field. */
	value: GraphQLTypes["ProjectV2FieldValue"]
};
	/** Autogenerated return type of UpdateProjectV2ItemFieldValue */
["UpdateProjectV2ItemFieldValuePayload"]: {
	__typename: "UpdateProjectV2ItemFieldValuePayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated item. */
	projectV2Item?: GraphQLTypes["ProjectV2Item"] | undefined
};
	/** Autogenerated input type of UpdateProjectV2ItemPosition */
["UpdateProjectV2ItemPositionInput"]: {
		/** The ID of the item to position this item after. If omitted or set to null the item will be moved to top. */
	afterId?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the item to be moved. */
	itemId: string,
	/** The ID of the Project. */
	projectId: string
};
	/** Autogenerated return type of UpdateProjectV2ItemPosition */
["UpdateProjectV2ItemPositionPayload"]: {
	__typename: "UpdateProjectV2ItemPositionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The items in the new order */
	items?: GraphQLTypes["ProjectV2ItemConnection"] | undefined
};
	/** Autogenerated return type of UpdateProjectV2 */
["UpdateProjectV2Payload"]: {
	__typename: "UpdateProjectV2Payload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated Project. */
	projectV2?: GraphQLTypes["ProjectV2"] | undefined
};
	/** Autogenerated input type of UpdatePullRequestBranch */
["UpdatePullRequestBranchInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The head ref oid for the upstream branch. */
	expectedHeadOid?: GraphQLTypes["GitObjectID"] | undefined,
	/** The Node ID of the pull request. */
	pullRequestId: string
};
	/** Autogenerated return type of UpdatePullRequestBranch */
["UpdatePullRequestBranchPayload"]: {
	__typename: "UpdatePullRequestBranchPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of UpdatePullRequest */
["UpdatePullRequestInput"]: {
		/** An array of Node IDs of users for this pull request. */
	assigneeIds?: Array<string> | undefined,
	/** The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository. */
	baseRefName?: string | undefined,
	/** The contents of the pull request. */
	body?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** An array of Node IDs of labels for this pull request. */
	labelIds?: Array<string> | undefined,
	/** Indicates whether maintainers can modify the pull request. */
	maintainerCanModify?: boolean | undefined,
	/** The Node ID of the milestone for this pull request. */
	milestoneId?: string | undefined,
	/** An array of Node IDs for projects associated with this pull request. */
	projectIds?: Array<string> | undefined,
	/** The Node ID of the pull request. */
	pullRequestId: string,
	/** The target state of the pull request. */
	state?: GraphQLTypes["PullRequestUpdateState"] | undefined,
	/** The title of the pull request. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdatePullRequest */
["UpdatePullRequestPayload"]: {
	__typename: "UpdatePullRequestPayload",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request. */
	pullRequest?: GraphQLTypes["PullRequest"] | undefined
};
	/** Autogenerated input type of UpdatePullRequestReviewComment */
["UpdatePullRequestReviewCommentInput"]: {
		/** The text of the comment. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the comment to modify. */
	pullRequestReviewCommentId: string
};
	/** Autogenerated return type of UpdatePullRequestReviewComment */
["UpdatePullRequestReviewCommentPayload"]: {
	__typename: "UpdatePullRequestReviewCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated comment. */
	pullRequestReviewComment?: GraphQLTypes["PullRequestReviewComment"] | undefined
};
	/** Autogenerated input type of UpdatePullRequestReview */
["UpdatePullRequestReviewInput"]: {
		/** The contents of the pull request review body. */
	body: string,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the pull request review to modify. */
	pullRequestReviewId: string
};
	/** Autogenerated return type of UpdatePullRequestReview */
["UpdatePullRequestReviewPayload"]: {
	__typename: "UpdatePullRequestReviewPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated pull request review. */
	pullRequestReview?: GraphQLTypes["PullRequestReview"] | undefined
};
	/** Autogenerated input type of UpdateRef */
["UpdateRefInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Permit updates of branch Refs that are not fast-forwards? */
	force?: boolean | undefined,
	/** The GitObjectID that the Ref shall be updated to target. */
	oid: GraphQLTypes["GitObjectID"],
	/** The Node ID of the Ref to be updated. */
	refId: string
};
	/** Autogenerated return type of UpdateRef */
["UpdateRefPayload"]: {
	__typename: "UpdateRefPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated Ref. */
	ref?: GraphQLTypes["Ref"] | undefined
};
	/** Autogenerated input type of UpdateRefs */
["UpdateRefsInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A list of ref updates. */
	refUpdates: Array<GraphQLTypes["RefUpdate"]>,
	/** The Node ID of the repository. */
	repositoryId: string
};
	/** Autogenerated return type of UpdateRefs */
["UpdateRefsPayload"]: {
	__typename: "UpdateRefsPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined
};
	/** Autogenerated input type of UpdateRepository */
["UpdateRepositoryInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A new description for the repository. Pass an empty string to erase the existing description. */
	description?: string | undefined,
	/** Indicates if the repository should have the issues feature enabled. */
	hasIssuesEnabled?: boolean | undefined,
	/** Indicates if the repository should have the project boards feature enabled. */
	hasProjectsEnabled?: boolean | undefined,
	/** Indicates if the repository should have the wiki feature enabled. */
	hasWikiEnabled?: boolean | undefined,
	/** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
	homepageUrl?: GraphQLTypes["URI"] | undefined,
	/** The new name of the repository. */
	name?: string | undefined,
	/** The ID of the repository to update. */
	repositoryId: string,
	/** Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure. */
	template?: boolean | undefined
};
	/** Autogenerated return type of UpdateRepository */
["UpdateRepositoryPayload"]: {
	__typename: "UpdateRepositoryPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated repository. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting */
["UpdateRepositoryWebCommitSignoffSettingInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the repository to update. */
	repositoryId: string,
	/** Indicates if the repository should require signoff on web-based commits. */
	webCommitSignoffRequired: boolean
};
	/** Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting */
["UpdateRepositoryWebCommitSignoffSettingPayload"]: {
	__typename: "UpdateRepositoryWebCommitSignoffSettingPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** A message confirming the result of updating the web commit signoff setting. */
	message?: string | undefined,
	/** The updated repository. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** Autogenerated input type of UpdateSponsorshipPreferences */
["UpdateSponsorshipPreferencesInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Specify whether others should be able to see that the sponsor is sponsoring
the sponsorable. Public visibility still does not reveal which tier is used. */
	privacyLevel?: GraphQLTypes["SponsorshipPrivacy"] | undefined,
	/** Whether the sponsor should receive email updates from the sponsorable. */
	receiveEmails?: boolean | undefined,
	/** The ID of the user or organization who is acting as the sponsor, paying for
the sponsorship. Required if sponsorLogin is not given. */
	sponsorId?: string | undefined,
	/** The username of the user or organization who is acting as the sponsor, paying
for the sponsorship. Required if sponsorId is not given. */
	sponsorLogin?: string | undefined,
	/** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
	sponsorableId?: string | undefined,
	/** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
	sponsorableLogin?: string | undefined
};
	/** Autogenerated return type of UpdateSponsorshipPreferences */
["UpdateSponsorshipPreferencesPayload"]: {
	__typename: "UpdateSponsorshipPreferencesPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The sponsorship that was updated. */
	sponsorship?: GraphQLTypes["Sponsorship"] | undefined
};
	/** Autogenerated input type of UpdateSubscription */
["UpdateSubscriptionInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The new state of the subscription. */
	state: GraphQLTypes["SubscriptionState"],
	/** The Node ID of the subscribable object to modify. */
	subscribableId: string
};
	/** Autogenerated return type of UpdateSubscription */
["UpdateSubscriptionPayload"]: {
	__typename: "UpdateSubscriptionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The input subscribable entity. */
	subscribable?: GraphQLTypes["Subscribable"] | undefined
};
	/** Autogenerated input type of UpdateTeamDiscussionComment */
["UpdateTeamDiscussionCommentInput"]: {
		/** The updated text of the comment. */
	body: string,
	/** The current version of the body content. */
	bodyVersion?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the comment to modify. */
	id: string
};
	/** Autogenerated return type of UpdateTeamDiscussionComment */
["UpdateTeamDiscussionCommentPayload"]: {
	__typename: "UpdateTeamDiscussionCommentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated comment. */
	teamDiscussionComment?: GraphQLTypes["TeamDiscussionComment"] | undefined
};
	/** Autogenerated input type of UpdateTeamDiscussion */
["UpdateTeamDiscussionInput"]: {
		/** The updated text of the discussion. */
	body?: string | undefined,
	/** The current version of the body content. If provided, this update operation
will be rejected if the given version does not match the latest version on the server. */
	bodyVersion?: string | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the discussion to modify. */
	id: string,
	/** If provided, sets the pinned state of the updated discussion. */
	pinned?: boolean | undefined,
	/** The updated title of the discussion. */
	title?: string | undefined
};
	/** Autogenerated return type of UpdateTeamDiscussion */
["UpdateTeamDiscussionPayload"]: {
	__typename: "UpdateTeamDiscussionPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The updated discussion. */
	teamDiscussion?: GraphQLTypes["TeamDiscussion"] | undefined
};
	/** Autogenerated input type of UpdateTeamReviewAssignment */
["UpdateTeamReviewAssignmentInput"]: {
		/** The algorithm to use for review assignment */
	algorithm?: GraphQLTypes["TeamReviewAssignmentAlgorithm"] | undefined,
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Turn on or off review assignment */
	enabled: boolean,
	/** An array of team member IDs to exclude */
	excludedTeamMemberIds?: Array<string> | undefined,
	/** The Node ID of the team to update review assignments of */
	id: string,
	/** Notify the entire team of the PR if it is delegated */
	notifyTeam?: boolean | undefined,
	/** The number of team members to assign */
	teamMemberCount?: number | undefined
};
	/** Autogenerated return type of UpdateTeamReviewAssignment */
["UpdateTeamReviewAssignmentPayload"]: {
	__typename: "UpdateTeamReviewAssignmentPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The team that was modified */
	team?: GraphQLTypes["Team"] | undefined
};
	/** Autogenerated input type of UpdateTeamsRepository */
["UpdateTeamsRepositoryInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Permission that should be granted to the teams. */
	permission: GraphQLTypes["RepositoryPermission"],
	/** Repository ID being granted access to. */
	repositoryId: string,
	/** A list of teams being granted access. Limit: 10 */
	teamIds: Array<string>
};
	/** Autogenerated return type of UpdateTeamsRepository */
["UpdateTeamsRepositoryPayload"]: {
	__typename: "UpdateTeamsRepositoryPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The repository that was updated. */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** The teams granted permission on the repository. */
	teams?: Array<GraphQLTypes["Team"]> | undefined
};
	/** Autogenerated input type of UpdateTopics */
["UpdateTopicsInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The Node ID of the repository. */
	repositoryId: string,
	/** An array of topic names. */
	topicNames: Array<string>
};
	/** Autogenerated return type of UpdateTopics */
["UpdateTopicsPayload"]: {
	__typename: "UpdateTopicsPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** Names of the provided topics that are not valid. */
	invalidTopicNames?: Array<string> | undefined,
	/** The updated repository. */
	repository?: GraphQLTypes["Repository"] | undefined
};
	/** A user is an individual's account on GitHub that owns repositories and can make new content. */
["User"]: {
	__typename: "User",
	/** Determine if this repository owner has any items that can be pinned to their profile. */
	anyPinnableItems: boolean,
	/** A URL pointing to the user's public avatar. */
	avatarUrl: GraphQLTypes["URI"],
	/** The user's public profile bio. */
	bio?: string | undefined,
	/** The user's public profile bio as HTML. */
	bioHTML: GraphQLTypes["HTML"],
	/** Could this user receive email notifications, if the organization had notification restrictions enabled? */
	canReceiveOrganizationEmailsWhenNotificationsRestricted: boolean,
	/** A list of commit comments made by this user. */
	commitComments: GraphQLTypes["CommitCommentConnection"],
	/** The user's public profile company. */
	company?: string | undefined,
	/** The user's public profile company as HTML. */
	companyHTML: GraphQLTypes["HTML"],
	/** The collection of contributions this user has made to different repositories. */
	contributionsCollection: GraphQLTypes["ContributionsCollection"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The user's publicly visible profile email. */
	email: string,
	/** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
	estimatedNextSponsorsPayoutInCents: number,
	/** A list of users the given user is followed by. */
	followers: GraphQLTypes["FollowerConnection"],
	/** A list of users the given user is following. */
	following: GraphQLTypes["FollowingConnection"],
	/** Find gist by repo name. */
	gist?: GraphQLTypes["Gist"] | undefined,
	/** A list of gist comments made by this user. */
	gistComments: GraphQLTypes["GistCommentConnection"],
	/** A list of the Gists the user has created. */
	gists: GraphQLTypes["GistConnection"],
	/** True if this user/organization has a GitHub Sponsors listing. */
	hasSponsorsListing: boolean,
	/** The hovercard information for this user in a given context */
	hovercard: GraphQLTypes["Hovercard"],
	id: string,
	/** The interaction ability settings for this user. */
	interactionAbility?: GraphQLTypes["RepositoryInteractionAbility"] | undefined,
	/** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
	isBountyHunter: boolean,
	/** Whether or not this user is a participant in the GitHub Campus Experts Program. */
	isCampusExpert: boolean,
	/** Whether or not this user is a GitHub Developer Program member. */
	isDeveloperProgramMember: boolean,
	/** Whether or not this user is a GitHub employee. */
	isEmployee: boolean,
	/** Whether or not this user is following the viewer. Inverse of viewer_is_following */
	isFollowingViewer: boolean,
	/** Whether or not this user is a member of the GitHub Stars Program. */
	isGitHubStar: boolean,
	/** Whether or not the user has marked themselves as for hire. */
	isHireable: boolean,
	/** Whether or not this user is a site administrator. */
	isSiteAdmin: boolean,
	/** Check if the given account is sponsoring this user/organization. */
	isSponsoredBy: boolean,
	/** True if the viewer is sponsored by this user/organization. */
	isSponsoringViewer: boolean,
	/** Whether or not this user is the viewing user. */
	isViewer: boolean,
	/** A list of issue comments made by this user. */
	issueComments: GraphQLTypes["IssueCommentConnection"],
	/** A list of issues associated with this user. */
	issues: GraphQLTypes["IssueConnection"],
	/** Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity. */
	itemShowcase: GraphQLTypes["ProfileItemShowcase"],
	/** The user's public profile location. */
	location?: string | undefined,
	/** The username used to login. */
	login: string,
	/** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
	monthlyEstimatedSponsorsIncomeInCents: number,
	/** The user's public profile name. */
	name?: string | undefined,
	/** Find an organization by its login that the user belongs to. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** Verified email addresses that match verified domains for a specified organization the user is a member of. */
	organizationVerifiedDomainEmails: Array<string>,
	/** A list of organizations the user belongs to. */
	organizations: GraphQLTypes["OrganizationConnection"],
	/** A list of packages under the owner. */
	packages: GraphQLTypes["PackageConnection"],
	/** A list of repositories and gists this profile owner can pin to their profile. */
	pinnableItems: GraphQLTypes["PinnableItemConnection"],
	/** A list of repositories and gists this profile owner has pinned to their profile */
	pinnedItems: GraphQLTypes["PinnableItemConnection"],
	/** Returns how many more items this profile owner can pin to their profile. */
	pinnedItemsRemaining: number,
	/** Find project by number. */
	project?: GraphQLTypes["Project"] | undefined,
	/** Find a project by project (beta) number. */
	projectNext?: GraphQLTypes["ProjectNext"] | undefined,
	/** Find a project by number. */
	projectV2?: GraphQLTypes["ProjectV2"] | undefined,
	/** A list of projects under the owner. */
	projects: GraphQLTypes["ProjectConnection"],
	/** A list of projects (beta) under the owner. */
	projectsNext: GraphQLTypes["ProjectNextConnection"],
	/** The HTTP path listing user's projects */
	projectsResourcePath: GraphQLTypes["URI"],
	/** The HTTP URL listing user's projects */
	projectsUrl: GraphQLTypes["URI"],
	/** A list of projects under the owner. */
	projectsV2: GraphQLTypes["ProjectV2Connection"],
	/** A list of public keys associated with this user. */
	publicKeys: GraphQLTypes["PublicKeyConnection"],
	/** A list of pull requests associated with this user. */
	pullRequests: GraphQLTypes["PullRequestConnection"],
	/** Recent projects that this user has modified in the context of the owner. */
	recentProjects: GraphQLTypes["ProjectV2Connection"],
	/** A list of repositories that the user owns. */
	repositories: GraphQLTypes["RepositoryConnection"],
	/** A list of repositories that the user recently contributed to. */
	repositoriesContributedTo: GraphQLTypes["RepositoryConnection"],
	/** Find Repository. */
	repository?: GraphQLTypes["Repository"] | undefined,
	/** Discussion comments this user has authored. */
	repositoryDiscussionComments: GraphQLTypes["DiscussionCommentConnection"],
	/** Discussions this user has started. */
	repositoryDiscussions: GraphQLTypes["DiscussionConnection"],
	/** The HTTP path for this user */
	resourcePath: GraphQLTypes["URI"],
	/** Replies this user has saved */
	savedReplies?: GraphQLTypes["SavedReplyConnection"] | undefined,
	/** List of users and organizations this entity is sponsoring. */
	sponsoring: GraphQLTypes["SponsorConnection"],
	/** List of sponsors for this user or organization. */
	sponsors: GraphQLTypes["SponsorConnection"],
	/** Events involving this sponsorable, such as new sponsorships. */
	sponsorsActivities: GraphQLTypes["SponsorsActivityConnection"],
	/** The GitHub Sponsors listing for this user or organization. */
	sponsorsListing?: GraphQLTypes["SponsorsListing"] | undefined,
	/** The sponsorship from the viewer to this user/organization; that is, the
sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsor?: GraphQLTypes["Sponsorship"] | undefined,
	/** The sponsorship from this user/organization to the viewer; that is, the
sponsorship you're receiving. Only returns a sponsorship if it is active. */
	sponsorshipForViewerAsSponsorable?: GraphQLTypes["Sponsorship"] | undefined,
	/** List of sponsorship updates sent from this sponsorable to sponsors. */
	sponsorshipNewsletters: GraphQLTypes["SponsorshipNewsletterConnection"],
	/** This object's sponsorships as the maintainer. */
	sponsorshipsAsMaintainer: GraphQLTypes["SponsorshipConnection"],
	/** This object's sponsorships as the sponsor. */
	sponsorshipsAsSponsor: GraphQLTypes["SponsorshipConnection"],
	/** Repositories the user has starred. */
	starredRepositories: GraphQLTypes["StarredRepositoryConnection"],
	/** The user's description of what they're currently doing. */
	status?: GraphQLTypes["UserStatus"] | undefined,
	/** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */
	topRepositories: GraphQLTypes["RepositoryConnection"],
	/** The user's Twitter username. */
	twitterUsername?: string | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this user */
	url: GraphQLTypes["URI"],
	/** Can the viewer pin repositories and gists to the profile? */
	viewerCanChangePinnedItems: boolean,
	/** Can the current viewer create new projects on this owner. */
	viewerCanCreateProjects: boolean,
	/** Whether or not the viewer is able to follow the user. */
	viewerCanFollow: boolean,
	/** Whether or not the viewer is able to sponsor this user/organization. */
	viewerCanSponsor: boolean,
	/** Whether or not this user is followed by the viewer. Inverse of is_following_viewer. */
	viewerIsFollowing: boolean,
	/** True if the viewer is sponsoring this user/organization. */
	viewerIsSponsoring: boolean,
	/** A list of repositories the given user is watching. */
	watching: GraphQLTypes["RepositoryConnection"],
	/** A URL pointing to the user's public website/blog. */
	websiteUrl?: GraphQLTypes["URI"] | undefined
};
	/** The possible durations that a user can be blocked for. */
["UserBlockDuration"]: UserBlockDuration;
	/** Represents a 'user_blocked' event on a given user. */
["UserBlockedEvent"]: {
	__typename: "UserBlockedEvent",
	/** Identifies the actor who performed the event. */
	actor?: GraphQLTypes["Actor"] | undefined,
	/** Number of days that the user was blocked for. */
	blockDuration: GraphQLTypes["UserBlockDuration"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	id: string,
	/** The user who was blocked. */
	subject?: GraphQLTypes["User"] | undefined
};
	/** The connection type for User. */
["UserConnection"]: {
	__typename: "UserConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["UserEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["User"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edit on user content */
["UserContentEdit"]: {
	__typename: "UserContentEdit",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the date and time when the object was deleted. */
	deletedAt?: GraphQLTypes["DateTime"] | undefined,
	/** The actor who deleted this content */
	deletedBy?: GraphQLTypes["Actor"] | undefined,
	/** A summary of the changes for this edit */
	diff?: string | undefined,
	/** When this content was edited */
	editedAt: GraphQLTypes["DateTime"],
	/** The actor who edited this content */
	editor?: GraphQLTypes["Actor"] | undefined,
	id: string,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** A list of edits to content. */
["UserContentEditConnection"]: {
	__typename: "UserContentEditConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["UserContentEditEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["UserContentEdit"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["UserContentEditEdge"]: {
	__typename: "UserContentEditEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["UserContentEdit"] | undefined
};
	/** Represents a user. */
["UserEdge"]: {
	__typename: "UserEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["User"] | undefined
};
	/** Email attributes from External Identity */
["UserEmailMetadata"]: {
	__typename: "UserEmailMetadata",
	/** Boolean to identify primary emails */
	primary?: boolean | undefined,
	/** Type of email */
	type?: string | undefined,
	/** Email id */
	value: string
};
	/** The user's description of what they're currently doing. */
["UserStatus"]: {
	__typename: "UserStatus",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** An emoji summarizing the user's status. */
	emoji?: string | undefined,
	/** The status emoji as HTML. */
	emojiHTML?: GraphQLTypes["HTML"] | undefined,
	/** If set, the status will not be shown after this date. */
	expiresAt?: GraphQLTypes["DateTime"] | undefined,
	id: string,
	/** Whether this status indicates the user is not fully available on GitHub. */
	indicatesLimitedAvailability: boolean,
	/** A brief message describing what the user is doing. */
	message?: string | undefined,
	/** The organization whose members can see this status. If null, this status is publicly visible. */
	organization?: GraphQLTypes["Organization"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The user who has this status. */
	user: GraphQLTypes["User"]
};
	/** The connection type for UserStatus. */
["UserStatusConnection"]: {
	__typename: "UserStatusConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["UserStatusEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["UserStatus"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["UserStatusEdge"]: {
	__typename: "UserStatusEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["UserStatus"] | undefined
};
	/** Ordering options for user status connections. */
["UserStatusOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order user statuses by. */
	field: GraphQLTypes["UserStatusOrderField"]
};
	/** Properties by which user status connections can be ordered. */
["UserStatusOrderField"]: UserStatusOrderField;
	/** A domain that can be verified or approved for an organization or an enterprise. */
["VerifiableDomain"]: {
	__typename: "VerifiableDomain",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The DNS host name that should be used for verification. */
	dnsHostName?: GraphQLTypes["URI"] | undefined,
	/** The unicode encoded domain. */
	domain: GraphQLTypes["URI"],
	/** Whether a TXT record for verification with the expected host name was found. */
	hasFoundHostName: boolean,
	/** Whether a TXT record for verification with the expected verification token was found. */
	hasFoundVerificationToken: boolean,
	id: string,
	/** Whether or not the domain is approved. */
	isApproved: boolean,
	/** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
	isRequiredForPolicyEnforcement: boolean,
	/** Whether or not the domain is verified. */
	isVerified: boolean,
	/** The owner of the domain. */
	owner: GraphQLTypes["VerifiableDomainOwner"],
	/** The punycode encoded domain. */
	punycodeEncodedDomain: GraphQLTypes["URI"],
	/** The time that the current verification token will expire. */
	tokenExpirationTime?: GraphQLTypes["DateTime"] | undefined,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The current verification token for the domain. */
	verificationToken?: string | undefined
};
	/** The connection type for VerifiableDomain. */
["VerifiableDomainConnection"]: {
	__typename: "VerifiableDomainConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["VerifiableDomainEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["VerifiableDomain"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["VerifiableDomainEdge"]: {
	__typename: "VerifiableDomainEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["VerifiableDomain"] | undefined
};
	/** Ordering options for verifiable domain connections. */
["VerifiableDomainOrder"]: {
		/** The ordering direction. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field to order verifiable domains by. */
	field: GraphQLTypes["VerifiableDomainOrderField"]
};
	/** Properties by which verifiable domain connections can be ordered. */
["VerifiableDomainOrderField"]: VerifiableDomainOrderField;
	/** Types that can own a verifiable domain. */
["VerifiableDomainOwner"]:{
        	__typename:"Enterprise" | "Organization"
        	['...on Enterprise']: '__union' & GraphQLTypes["Enterprise"];
	['...on Organization']: '__union' & GraphQLTypes["Organization"];
};
	/** Autogenerated input type of VerifyVerifiableDomain */
["VerifyVerifiableDomainInput"]: {
		/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The ID of the verifiable domain to verify. */
	id: string
};
	/** Autogenerated return type of VerifyVerifiableDomain */
["VerifyVerifiableDomainPayload"]: {
	__typename: "VerifyVerifiableDomainPayload",
	/** A unique identifier for the client performing the mutation. */
	clientMutationId?: string | undefined,
	/** The verifiable domain that was verified. */
	domain?: GraphQLTypes["VerifiableDomain"] | undefined
};
	/** A hovercard context with a message describing how the viewer is related. */
["ViewerHovercardContext"]: {
	__typename: "ViewerHovercardContext",
	/** A string describing this context */
	message: string,
	/** An octicon to accompany this context */
	octicon: string,
	/** Identifies the user who is related to this context. */
	viewer: GraphQLTypes["User"]
};
	/** A subject that may be upvoted. */
["Votable"]: {
	__typename:"Discussion" | "DiscussionComment",
	/** Number of upvotes that this subject has received. */
	upvoteCount: number,
	/** Whether or not the current user can add or remove an upvote on this subject. */
	viewerCanUpvote: boolean,
	/** Whether or not the current user has already upvoted this subject. */
	viewerHasUpvoted: boolean
	['...on Discussion']: '__union' & GraphQLTypes["Discussion"];
	['...on DiscussionComment']: '__union' & GraphQLTypes["DiscussionComment"];
};
	/** A workflow contains meta information about an Actions workflow file. */
["Workflow"]: {
	__typename: "Workflow",
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	id: string,
	/** The name of the workflow. */
	name: string,
	/** The runs of the workflow. */
	runs: GraphQLTypes["WorkflowRunConnection"],
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"]
};
	/** A workflow run. */
["WorkflowRun"]: {
	__typename: "WorkflowRun",
	/** The check suite this workflow run belongs to. */
	checkSuite: GraphQLTypes["CheckSuite"],
	/** Identifies the date and time when the object was created. */
	createdAt: GraphQLTypes["DateTime"],
	/** Identifies the primary key from the database. */
	databaseId?: number | undefined,
	/** The log of deployment reviews */
	deploymentReviews: GraphQLTypes["DeploymentReviewConnection"],
	id: string,
	/** The pending deployment requests of all check runs in this workflow run */
	pendingDeploymentRequests: GraphQLTypes["DeploymentRequestConnection"],
	/** The HTTP path for this workflow run */
	resourcePath: GraphQLTypes["URI"],
	/** A number that uniquely identifies this workflow run in its parent workflow. */
	runNumber: number,
	/** Identifies the date and time when the object was last updated. */
	updatedAt: GraphQLTypes["DateTime"],
	/** The HTTP URL for this workflow run */
	url: GraphQLTypes["URI"],
	/** The workflow executed in this workflow run. */
	workflow: GraphQLTypes["Workflow"]
};
	/** The connection type for WorkflowRun. */
["WorkflowRunConnection"]: {
	__typename: "WorkflowRunConnection",
	/** A list of edges. */
	edges?: Array<GraphQLTypes["WorkflowRunEdge"] | undefined> | undefined,
	/** A list of nodes. */
	nodes?: Array<GraphQLTypes["WorkflowRun"] | undefined> | undefined,
	/** Information to aid in pagination. */
	pageInfo: GraphQLTypes["PageInfo"],
	/** Identifies the total count of items in the connection. */
	totalCount: number
};
	/** An edge in a connection. */
["WorkflowRunEdge"]: {
	__typename: "WorkflowRunEdge",
	/** A cursor for use in pagination. */
	cursor: string,
	/** The item at the end of the edge. */
	node?: GraphQLTypes["WorkflowRun"] | undefined
};
	/** Ways in which lists of workflow runs can be ordered upon return. */
["WorkflowRunOrder"]: {
		/** The direction in which to order workflow runs by the specified field. */
	direction: GraphQLTypes["OrderDirection"],
	/** The field by which to order workflows. */
	field: GraphQLTypes["WorkflowRunOrderField"]
};
	/** Properties by which workflow run connections can be ordered. */
["WorkflowRunOrderField"]: WorkflowRunOrderField;
	/** A valid x509 certificate string */
["X509Certificate"]: "scalar" & { name: "X509Certificate" }
    }
/** The actor's type. */
export const enum ActorType {
	TEAM = "TEAM",
	USER = "USER"
}
/** Properties by which Audit Log connections can be ordered. */
export const enum AuditLogOrderField {
	CREATED_AT = "CREATED_AT"
}
/** Represents an annotation's information level. */
export const enum CheckAnnotationLevel {
	FAILURE = "FAILURE",
	NOTICE = "NOTICE",
	WARNING = "WARNING"
}
/** The possible states for a check suite or run conclusion. */
export const enum CheckConclusionState {
	ACTION_REQUIRED = "ACTION_REQUIRED",
	CANCELLED = "CANCELLED",
	FAILURE = "FAILURE",
	NEUTRAL = "NEUTRAL",
	SKIPPED = "SKIPPED",
	STALE = "STALE",
	STARTUP_FAILURE = "STARTUP_FAILURE",
	SUCCESS = "SUCCESS",
	TIMED_OUT = "TIMED_OUT"
}
/** The possible states of a check run in a status rollup. */
export const enum CheckRunState {
	ACTION_REQUIRED = "ACTION_REQUIRED",
	CANCELLED = "CANCELLED",
	COMPLETED = "COMPLETED",
	FAILURE = "FAILURE",
	IN_PROGRESS = "IN_PROGRESS",
	NEUTRAL = "NEUTRAL",
	PENDING = "PENDING",
	QUEUED = "QUEUED",
	SKIPPED = "SKIPPED",
	STALE = "STALE",
	STARTUP_FAILURE = "STARTUP_FAILURE",
	SUCCESS = "SUCCESS",
	TIMED_OUT = "TIMED_OUT",
	WAITING = "WAITING"
}
/** The possible types of check runs. */
export const enum CheckRunType {
	ALL = "ALL",
	LATEST = "LATEST"
}
/** The possible states for a check suite or run status. */
export const enum CheckStatusState {
	COMPLETED = "COMPLETED",
	IN_PROGRESS = "IN_PROGRESS",
	PENDING = "PENDING",
	QUEUED = "QUEUED",
	REQUESTED = "REQUESTED",
	WAITING = "WAITING"
}
/** Collaborators affiliation level with a subject. */
export const enum CollaboratorAffiliation {
	ALL = "ALL",
	DIRECT = "DIRECT",
	OUTSIDE = "OUTSIDE"
}
/** A comment author association with repository. */
export const enum CommentAuthorAssociation {
	COLLABORATOR = "COLLABORATOR",
	CONTRIBUTOR = "CONTRIBUTOR",
	FIRST_TIMER = "FIRST_TIMER",
	FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR",
	MANNEQUIN = "MANNEQUIN",
	MEMBER = "MEMBER",
	NONE = "NONE",
	OWNER = "OWNER"
}
/** The possible errors that will prevent a user from updating a comment. */
export const enum CommentCannotUpdateReason {
	ARCHIVED = "ARCHIVED",
	DENIED = "DENIED",
	INSUFFICIENT_ACCESS = "INSUFFICIENT_ACCESS",
	LOCKED = "LOCKED",
	LOGIN_REQUIRED = "LOGIN_REQUIRED",
	MAINTENANCE = "MAINTENANCE",
	VERIFIED_EMAIL_REQUIRED = "VERIFIED_EMAIL_REQUIRED"
}
/** Properties by which commit contribution connections can be ordered. */
export const enum CommitContributionOrderField {
	COMMIT_COUNT = "COMMIT_COUNT",
	OCCURRED_AT = "OCCURRED_AT"
}
/** The status of a git comparison between two refs. */
export const enum ComparisonStatus {
	AHEAD = "AHEAD",
	BEHIND = "BEHIND",
	DIVERGED = "DIVERGED",
	IDENTICAL = "IDENTICAL"
}
/** Varying levels of contributions from none to many. */
export const enum ContributionLevel {
	FIRST_QUARTILE = "FIRST_QUARTILE",
	FOURTH_QUARTILE = "FOURTH_QUARTILE",
	NONE = "NONE",
	SECOND_QUARTILE = "SECOND_QUARTILE",
	THIRD_QUARTILE = "THIRD_QUARTILE"
}
/** The possible base permissions for repositories. */
export const enum DefaultRepositoryPermissionField {
	ADMIN = "ADMIN",
	NONE = "NONE",
	READ = "READ",
	WRITE = "WRITE"
}
/** The possible ecosystems of a dependency graph package. */
export const enum DependencyGraphEcosystem {
	ACTIONS = "ACTIONS",
	COMPOSER = "COMPOSER",
	GO = "GO",
	MAVEN = "MAVEN",
	NPM = "NPM",
	NUGET = "NUGET",
	PIP = "PIP",
	PUB = "PUB",
	RUBYGEMS = "RUBYGEMS",
	RUST = "RUST"
}
/** Properties by which deployment connections can be ordered. */
export const enum DeploymentOrderField {
	CREATED_AT = "CREATED_AT"
}
/** The possible protection rule types. */
export const enum DeploymentProtectionRuleType {
	REQUIRED_REVIEWERS = "REQUIRED_REVIEWERS",
	WAIT_TIMER = "WAIT_TIMER"
}
/** The possible states for a deployment review. */
export const enum DeploymentReviewState {
	APPROVED = "APPROVED",
	REJECTED = "REJECTED"
}
/** The possible states in which a deployment can be. */
export const enum DeploymentState {
	ABANDONED = "ABANDONED",
	ACTIVE = "ACTIVE",
	DESTROYED = "DESTROYED",
	ERROR = "ERROR",
	FAILURE = "FAILURE",
	INACTIVE = "INACTIVE",
	IN_PROGRESS = "IN_PROGRESS",
	PENDING = "PENDING",
	QUEUED = "QUEUED",
	WAITING = "WAITING"
}
/** The possible states for a deployment status. */
export const enum DeploymentStatusState {
	ERROR = "ERROR",
	FAILURE = "FAILURE",
	INACTIVE = "INACTIVE",
	IN_PROGRESS = "IN_PROGRESS",
	PENDING = "PENDING",
	QUEUED = "QUEUED",
	SUCCESS = "SUCCESS",
	WAITING = "WAITING"
}
/** The possible sides of a diff. */
export const enum DiffSide {
	LEFT = "LEFT",
	RIGHT = "RIGHT"
}
/** Properties by which discussion connections can be ordered. */
export const enum DiscussionOrderField {
	CREATED_AT = "CREATED_AT",
	UPDATED_AT = "UPDATED_AT"
}
/** Properties by which discussion poll option connections can be ordered. */
export const enum DiscussionPollOptionOrderField {
	AUTHORED_ORDER = "AUTHORED_ORDER",
	VOTE_COUNT = "VOTE_COUNT"
}
/** The possible reasons that a Dependabot alert was dismissed. */
export const enum DismissReason {
	FIX_STARTED = "FIX_STARTED",
	INACCURATE = "INACCURATE",
	NOT_USED = "NOT_USED",
	NO_BANDWIDTH = "NO_BANDWIDTH",
	TOLERABLE_RISK = "TOLERABLE_RISK"
}
/** Properties by which enterprise administrator invitation connections can be ordered. */
export const enum EnterpriseAdministratorInvitationOrderField {
	CREATED_AT = "CREATED_AT"
}
/** The possible administrator roles in an enterprise account. */
export const enum EnterpriseAdministratorRole {
	BILLING_MANAGER = "BILLING_MANAGER",
	OWNER = "OWNER"
}
/** The possible values for the enterprise allow private repository forking policy value. */
export const enum EnterpriseAllowPrivateRepositoryForkingPolicyValue {
	ENTERPRISE_ORGANIZATIONS = "ENTERPRISE_ORGANIZATIONS",
	ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS = "ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS",
	EVERYWHERE = "EVERYWHERE",
	SAME_ORGANIZATION = "SAME_ORGANIZATION",
	SAME_ORGANIZATION_USER_ACCOUNTS = "SAME_ORGANIZATION_USER_ACCOUNTS",
	USER_ACCOUNTS = "USER_ACCOUNTS"
}
/** The possible values for the enterprise base repository permission setting. */
export const enum EnterpriseDefaultRepositoryPermissionSettingValue {
	ADMIN = "ADMIN",
	NONE = "NONE",
	NO_POLICY = "NO_POLICY",
	READ = "READ",
	WRITE = "WRITE"
}
/** The possible values for an enabled/disabled enterprise setting. */
export const enum EnterpriseEnabledDisabledSettingValue {
	DISABLED = "DISABLED",
	ENABLED = "ENABLED",
	NO_POLICY = "NO_POLICY"
}
/** The possible values for an enabled/no policy enterprise setting. */
export const enum EnterpriseEnabledSettingValue {
	ENABLED = "ENABLED",
	NO_POLICY = "NO_POLICY"
}
/** Properties by which enterprise member connections can be ordered. */
export const enum EnterpriseMemberOrderField {
	CREATED_AT = "CREATED_AT",
	LOGIN = "LOGIN"
}
/** The possible values for the enterprise members can create repositories setting. */
export const enum EnterpriseMembersCanCreateRepositoriesSettingValue {
	ALL = "ALL",
	DISABLED = "DISABLED",
	NO_POLICY = "NO_POLICY",
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The possible values for the members can make purchases setting. */
export const enum EnterpriseMembersCanMakePurchasesSettingValue {
	DISABLED = "DISABLED",
	ENABLED = "ENABLED"
}
/** Properties by which Enterprise Server installation connections can be ordered. */
export const enum EnterpriseServerInstallationOrderField {
	CREATED_AT = "CREATED_AT",
	CUSTOMER_NAME = "CUSTOMER_NAME",
	HOST_NAME = "HOST_NAME"
}
/** Properties by which Enterprise Server user account email connections can be ordered. */
export const enum EnterpriseServerUserAccountEmailOrderField {
	EMAIL = "EMAIL"
}
/** Properties by which Enterprise Server user account connections can be ordered. */
export const enum EnterpriseServerUserAccountOrderField {
	LOGIN = "LOGIN",
	REMOTE_CREATED_AT = "REMOTE_CREATED_AT"
}
/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
export const enum EnterpriseServerUserAccountsUploadOrderField {
	CREATED_AT = "CREATED_AT"
}
/** Synchronization state of the Enterprise Server user accounts upload */
export const enum EnterpriseServerUserAccountsUploadSyncState {
	FAILURE = "FAILURE",
	PENDING = "PENDING",
	SUCCESS = "SUCCESS"
}
/** The possible roles for enterprise membership. */
export const enum EnterpriseUserAccountMembershipRole {
	MEMBER = "MEMBER",
	OWNER = "OWNER",
	UNAFFILIATED = "UNAFFILIATED"
}
/** The possible GitHub Enterprise deployments where this user can exist. */
export const enum EnterpriseUserDeployment {
	CLOUD = "CLOUD",
	SERVER = "SERVER"
}
/** The possible viewed states of a file . */
export const enum FileViewedState {
	DISMISSED = "DISMISSED",
	UNVIEWED = "UNVIEWED",
	VIEWED = "VIEWED"
}
/** The possible funding platforms for repository funding links. */
export const enum FundingPlatform {
	COMMUNITY_BRIDGE = "COMMUNITY_BRIDGE",
	CUSTOM = "CUSTOM",
	GITHUB = "GITHUB",
	ISSUEHUNT = "ISSUEHUNT",
	KO_FI = "KO_FI",
	LFX_CROWDFUNDING = "LFX_CROWDFUNDING",
	LIBERAPAY = "LIBERAPAY",
	OPEN_COLLECTIVE = "OPEN_COLLECTIVE",
	OTECHIE = "OTECHIE",
	PATREON = "PATREON",
	TIDELIFT = "TIDELIFT"
}
/** Properties by which gist connections can be ordered. */
export const enum GistOrderField {
	CREATED_AT = "CREATED_AT",
	PUSHED_AT = "PUSHED_AT",
	UPDATED_AT = "UPDATED_AT"
}
/** The privacy of a Gist */
export const enum GistPrivacy {
	ALL = "ALL",
	PUBLIC = "PUBLIC",
	SECRET = "SECRET"
}
/** The state of a Git signature. */
export const enum GitSignatureState {
	BAD_CERT = "BAD_CERT",
	BAD_EMAIL = "BAD_EMAIL",
	EXPIRED_KEY = "EXPIRED_KEY",
	GPGVERIFY_ERROR = "GPGVERIFY_ERROR",
	GPGVERIFY_UNAVAILABLE = "GPGVERIFY_UNAVAILABLE",
	INVALID = "INVALID",
	MALFORMED_SIG = "MALFORMED_SIG",
	NOT_SIGNING_KEY = "NOT_SIGNING_KEY",
	NO_USER = "NO_USER",
	OCSP_ERROR = "OCSP_ERROR",
	OCSP_PENDING = "OCSP_PENDING",
	OCSP_REVOKED = "OCSP_REVOKED",
	UNKNOWN_KEY = "UNKNOWN_KEY",
	UNKNOWN_SIG_TYPE = "UNKNOWN_SIG_TYPE",
	UNSIGNED = "UNSIGNED",
	UNVERIFIED_EMAIL = "UNVERIFIED_EMAIL",
	VALID = "VALID"
}
/** The possible states in which authentication can be configured with an identity provider. */
export const enum IdentityProviderConfigurationState {
	CONFIGURED = "CONFIGURED",
	ENFORCED = "ENFORCED",
	UNCONFIGURED = "UNCONFIGURED"
}
/** The possible values for the IP allow list enabled setting. */
export const enum IpAllowListEnabledSettingValue {
	DISABLED = "DISABLED",
	ENABLED = "ENABLED"
}
/** Properties by which IP allow list entry connections can be ordered. */
export const enum IpAllowListEntryOrderField {
	ALLOW_LIST_VALUE = "ALLOW_LIST_VALUE",
	CREATED_AT = "CREATED_AT"
}
/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
export const enum IpAllowListForInstalledAppsEnabledSettingValue {
	DISABLED = "DISABLED",
	ENABLED = "ENABLED"
}
/** The possible state reasons of a closed issue. */
export const enum IssueClosedStateReason {
	COMPLETED = "COMPLETED",
	NOT_PLANNED = "NOT_PLANNED"
}
/** Properties by which issue comment connections can be ordered. */
export const enum IssueCommentOrderField {
	UPDATED_AT = "UPDATED_AT"
}
/** Properties by which issue connections can be ordered. */
export const enum IssueOrderField {
	COMMENTS = "COMMENTS",
	CREATED_AT = "CREATED_AT",
	UPDATED_AT = "UPDATED_AT"
}
/** The possible states of an issue. */
export const enum IssueState {
	CLOSED = "CLOSED",
	OPEN = "OPEN"
}
/** The possible state reasons of an issue. */
export const enum IssueStateReason {
	COMPLETED = "COMPLETED",
	NOT_PLANNED = "NOT_PLANNED",
	REOPENED = "REOPENED"
}
/** The possible item types found in a timeline. */
export const enum IssueTimelineItemsItemType {
	ADDED_TO_PROJECT_EVENT = "ADDED_TO_PROJECT_EVENT",
	ASSIGNED_EVENT = "ASSIGNED_EVENT",
	CLOSED_EVENT = "CLOSED_EVENT",
	COMMENT_DELETED_EVENT = "COMMENT_DELETED_EVENT",
	CONNECTED_EVENT = "CONNECTED_EVENT",
	CONVERTED_NOTE_TO_ISSUE_EVENT = "CONVERTED_NOTE_TO_ISSUE_EVENT",
	CONVERTED_TO_DISCUSSION_EVENT = "CONVERTED_TO_DISCUSSION_EVENT",
	CROSS_REFERENCED_EVENT = "CROSS_REFERENCED_EVENT",
	DEMILESTONED_EVENT = "DEMILESTONED_EVENT",
	DISCONNECTED_EVENT = "DISCONNECTED_EVENT",
	ISSUE_COMMENT = "ISSUE_COMMENT",
	LABELED_EVENT = "LABELED_EVENT",
	LOCKED_EVENT = "LOCKED_EVENT",
	MARKED_AS_DUPLICATE_EVENT = "MARKED_AS_DUPLICATE_EVENT",
	MENTIONED_EVENT = "MENTIONED_EVENT",
	MILESTONED_EVENT = "MILESTONED_EVENT",
	MOVED_COLUMNS_IN_PROJECT_EVENT = "MOVED_COLUMNS_IN_PROJECT_EVENT",
	PINNED_EVENT = "PINNED_EVENT",
	REFERENCED_EVENT = "REFERENCED_EVENT",
	REMOVED_FROM_PROJECT_EVENT = "REMOVED_FROM_PROJECT_EVENT",
	RENAMED_TITLE_EVENT = "RENAMED_TITLE_EVENT",
	REOPENED_EVENT = "REOPENED_EVENT",
	SUBSCRIBED_EVENT = "SUBSCRIBED_EVENT",
	TRANSFERRED_EVENT = "TRANSFERRED_EVENT",
	UNASSIGNED_EVENT = "UNASSIGNED_EVENT",
	UNLABELED_EVENT = "UNLABELED_EVENT",
	UNLOCKED_EVENT = "UNLOCKED_EVENT",
	UNMARKED_AS_DUPLICATE_EVENT = "UNMARKED_AS_DUPLICATE_EVENT",
	UNPINNED_EVENT = "UNPINNED_EVENT",
	UNSUBSCRIBED_EVENT = "UNSUBSCRIBED_EVENT",
	USER_BLOCKED_EVENT = "USER_BLOCKED_EVENT"
}
/** Properties by which label connections can be ordered. */
export const enum LabelOrderField {
	CREATED_AT = "CREATED_AT",
	NAME = "NAME"
}
/** Properties by which language connections can be ordered. */
export const enum LanguageOrderField {
	SIZE = "SIZE"
}
/** The possible reasons that an issue or pull request was locked. */
export const enum LockReason {
	OFF_TOPIC = "OFF_TOPIC",
	RESOLVED = "RESOLVED",
	SPAM = "SPAM",
	TOO_HEATED = "TOO_HEATED"
}
/** The possible default commit messages for merges. */
export const enum MergeCommitMessage {
	BLANK = "BLANK",
	PR_BODY = "PR_BODY",
	PR_TITLE = "PR_TITLE"
}
/** The possible default commit titles for merges. */
export const enum MergeCommitTitle {
	MERGE_MESSAGE = "MERGE_MESSAGE",
	PR_TITLE = "PR_TITLE"
}
/** Detailed status information about a pull request merge. */
export const enum MergeStateStatus {
	BEHIND = "BEHIND",
	BLOCKED = "BLOCKED",
	CLEAN = "CLEAN",
	DIRTY = "DIRTY",
	DRAFT = "DRAFT",
	HAS_HOOKS = "HAS_HOOKS",
	UNKNOWN = "UNKNOWN",
	UNSTABLE = "UNSTABLE"
}
/** Whether or not a PullRequest can be merged. */
export const enum MergeableState {
	CONFLICTING = "CONFLICTING",
	MERGEABLE = "MERGEABLE",
	UNKNOWN = "UNKNOWN"
}
/** Represents the different Octoshift migration sources. */
export const enum MigrationSourceType {
	AZURE_DEVOPS = "AZURE_DEVOPS",
	BITBUCKET_SERVER = "BITBUCKET_SERVER",
	GITHUB_ARCHIVE = "GITHUB_ARCHIVE"
}
/** The Octoshift migration state. */
export const enum MigrationState {
	FAILED = "FAILED",
	FAILED_VALIDATION = "FAILED_VALIDATION",
	IN_PROGRESS = "IN_PROGRESS",
	NOT_STARTED = "NOT_STARTED",
	PENDING_VALIDATION = "PENDING_VALIDATION",
	QUEUED = "QUEUED",
	SUCCEEDED = "SUCCEEDED"
}
/** Properties by which milestone connections can be ordered. */
export const enum MilestoneOrderField {
	CREATED_AT = "CREATED_AT",
	DUE_DATE = "DUE_DATE",
	NUMBER = "NUMBER",
	UPDATED_AT = "UPDATED_AT"
}
/** The possible states of a milestone. */
export const enum MilestoneState {
	CLOSED = "CLOSED",
	OPEN = "OPEN"
}
/** The possible values for the notification restriction setting. */
export const enum NotificationRestrictionSettingValue {
	DISABLED = "DISABLED",
	ENABLED = "ENABLED"
}
/** The OIDC identity provider type */
export const enum OIDCProviderType {
	AAD = "AAD"
}
/** The state of an OAuth Application when it was created. */
export const enum OauthApplicationCreateAuditEntryState {
	ACTIVE = "ACTIVE",
	PENDING_DELETION = "PENDING_DELETION",
	SUSPENDED = "SUSPENDED"
}
/** The corresponding operation type for the action */
export const enum OperationType {
	ACCESS = "ACCESS",
	AUTHENTICATION = "AUTHENTICATION",
	CREATE = "CREATE",
	MODIFY = "MODIFY",
	REMOVE = "REMOVE",
	RESTORE = "RESTORE",
	TRANSFER = "TRANSFER"
}
/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export const enum OrderDirection {
	ASC = "ASC",
	DESC = "DESC"
}
/** The permissions available to members on an Organization. */
export const enum OrgAddMemberAuditEntryPermission {
	ADMIN = "ADMIN",
	READ = "READ"
}
/** The billing plans available for organizations. */
export const enum OrgCreateAuditEntryBillingPlan {
	BUSINESS = "BUSINESS",
	BUSINESS_PLUS = "BUSINESS_PLUS",
	FREE = "FREE",
	TIERED_PER_SEAT = "TIERED_PER_SEAT",
	UNLIMITED = "UNLIMITED"
}
/** Properties by which enterprise owners can be ordered. */
export const enum OrgEnterpriseOwnerOrderField {
	LOGIN = "LOGIN"
}
/** The reason a billing manager was removed from an Organization. */
export const enum OrgRemoveBillingManagerAuditEntryReason {
	SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING",
	SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY",
	TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
}
/** The type of membership a user has with an Organization. */
export const enum OrgRemoveMemberAuditEntryMembershipType {
	ADMIN = "ADMIN",
	BILLING_MANAGER = "BILLING_MANAGER",
	DIRECT_MEMBER = "DIRECT_MEMBER",
	OUTSIDE_COLLABORATOR = "OUTSIDE_COLLABORATOR",
	SUSPENDED = "SUSPENDED",
	UNAFFILIATED = "UNAFFILIATED"
}
/** The reason a member was removed from an Organization. */
export const enum OrgRemoveMemberAuditEntryReason {
	SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING",
	SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY",
	TWO_FACTOR_ACCOUNT_RECOVERY = "TWO_FACTOR_ACCOUNT_RECOVERY",
	TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
	USER_ACCOUNT_DELETED = "USER_ACCOUNT_DELETED"
}
/** The type of membership a user has with an Organization. */
export const enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
	BILLING_MANAGER = "BILLING_MANAGER",
	OUTSIDE_COLLABORATOR = "OUTSIDE_COLLABORATOR",
	UNAFFILIATED = "UNAFFILIATED"
}
/** The reason an outside collaborator was removed from an Organization. */
export const enum OrgRemoveOutsideCollaboratorAuditEntryReason {
	SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING",
	TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
}
/** The default permission a repository can have in an Organization. */
export const enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
	ADMIN = "ADMIN",
	NONE = "NONE",
	READ = "READ",
	WRITE = "WRITE"
}
/** The permissions available to members on an Organization. */
export const enum OrgUpdateMemberAuditEntryPermission {
	ADMIN = "ADMIN",
	READ = "READ"
}
/** The permissions available for repository creation on an Organization. */
export const enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
	ALL = "ALL",
	INTERNAL = "INTERNAL",
	NONE = "NONE",
	PRIVATE = "PRIVATE",
	PRIVATE_INTERNAL = "PRIVATE_INTERNAL",
	PUBLIC = "PUBLIC",
	PUBLIC_INTERNAL = "PUBLIC_INTERNAL",
	PUBLIC_PRIVATE = "PUBLIC_PRIVATE"
}
/** The possible organization invitation roles. */
export const enum OrganizationInvitationRole {
	ADMIN = "ADMIN",
	BILLING_MANAGER = "BILLING_MANAGER",
	DIRECT_MEMBER = "DIRECT_MEMBER",
	REINSTATE = "REINSTATE"
}
/** The possible organization invitation types. */
export const enum OrganizationInvitationType {
	EMAIL = "EMAIL",
	USER = "USER"
}
/** The possible roles within an organization for its members. */
export const enum OrganizationMemberRole {
	ADMIN = "ADMIN",
	MEMBER = "MEMBER"
}
/** The possible values for the members can create repositories setting on an organization. */
export const enum OrganizationMembersCanCreateRepositoriesSettingValue {
	ALL = "ALL",
	DISABLED = "DISABLED",
	INTERNAL = "INTERNAL",
	PRIVATE = "PRIVATE"
}
/** Properties by which organization connections can be ordered. */
export const enum OrganizationOrderField {
	CREATED_AT = "CREATED_AT",
	LOGIN = "LOGIN"
}
/** Properties by which package file connections can be ordered. */
export const enum PackageFileOrderField {
	CREATED_AT = "CREATED_AT"
}
/** Properties by which package connections can be ordered. */
export const enum PackageOrderField {
	CREATED_AT = "CREATED_AT"
}
/** The possible types of a package. */
export const enum PackageType {
	DEBIAN = "DEBIAN",
	DOCKER = "DOCKER",
	MAVEN = "MAVEN",
	NPM = "NPM",
	NUGET = "NUGET",
	PYPI = "PYPI",
	RUBYGEMS = "RUBYGEMS"
}
/** Properties by which package version connections can be ordered. */
export const enum PackageVersionOrderField {
	CREATED_AT = "CREATED_AT"
}
/** The possible types of patch statuses. */
export const enum PatchStatus {
	ADDED = "ADDED",
	CHANGED = "CHANGED",
	COPIED = "COPIED",
	DELETED = "DELETED",
	MODIFIED = "MODIFIED",
	RENAMED = "RENAMED"
}
/** Represents items that can be pinned to a profile page or dashboard. */
export const enum PinnableItemType {
	GIST = "GIST",
	ISSUE = "ISSUE",
	ORGANIZATION = "ORGANIZATION",
	PROJECT = "PROJECT",
	PULL_REQUEST = "PULL_REQUEST",
	REPOSITORY = "REPOSITORY",
	TEAM = "TEAM",
	USER = "USER"
}
/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
export const enum PinnedDiscussionGradient {
	BLUE_MINT = "BLUE_MINT",
	BLUE_PURPLE = "BLUE_PURPLE",
	PINK_BLUE = "PINK_BLUE",
	PURPLE_CORAL = "PURPLE_CORAL",
	RED_ORANGE = "RED_ORANGE"
}
/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
export const enum PinnedDiscussionPattern {
	CHEVRON_UP = "CHEVRON_UP",
	DOT = "DOT",
	DOT_FILL = "DOT_FILL",
	HEART_FILL = "HEART_FILL",
	PLUS = "PLUS",
	ZAP = "ZAP"
}
/** The possible archived states of a project card. */
export const enum ProjectCardArchivedState {
	ARCHIVED = "ARCHIVED",
	NOT_ARCHIVED = "NOT_ARCHIVED"
}
/** Various content states of a ProjectCard */
export const enum ProjectCardState {
	CONTENT_ONLY = "CONTENT_ONLY",
	NOTE_ONLY = "NOTE_ONLY",
	REDACTED = "REDACTED"
}
/** The semantic purpose of the column - todo, in progress, or done. */
export const enum ProjectColumnPurpose {
	DONE = "DONE",
	IN_PROGRESS = "IN_PROGRESS",
	TODO = "TODO"
}
/** The type of a project item. */
export const enum ProjectItemType {
	DRAFT_ISSUE = "DRAFT_ISSUE",
	ISSUE = "ISSUE",
	PULL_REQUEST = "PULL_REQUEST",
	REDACTED = "REDACTED"
}
/** The type of a project next field. */
export const enum ProjectNextFieldType {
	ASSIGNEES = "ASSIGNEES",
	DATE = "DATE",
	ITERATION = "ITERATION",
	LABELS = "LABELS",
	LINKED_PULL_REQUESTS = "LINKED_PULL_REQUESTS",
	MILESTONE = "MILESTONE",
	NUMBER = "NUMBER",
	REPOSITORY = "REPOSITORY",
	REVIEWERS = "REVIEWERS",
	SINGLE_SELECT = "SINGLE_SELECT",
	TEXT = "TEXT",
	TITLE = "TITLE",
	TRACKS = "TRACKS"
}
/** Properties by which the return project can be ordered. */
export const enum ProjectNextOrderField {
	CREATED_AT = "CREATED_AT",
	NUMBER = "NUMBER",
	TITLE = "TITLE",
	UPDATED_AT = "UPDATED_AT"
}
/** Properties by which project connections can be ordered. */
export const enum ProjectOrderField {
	CREATED_AT = "CREATED_AT",
	NAME = "NAME",
	UPDATED_AT = "UPDATED_AT"
}
/** State of the project; either 'open' or 'closed' */
export const enum ProjectState {
	CLOSED = "CLOSED",
	OPEN = "OPEN"
}
/** GitHub-provided templates for Projects */
export const enum ProjectTemplate {
	AUTOMATED_KANBAN_V2 = "AUTOMATED_KANBAN_V2",
	AUTOMATED_REVIEWS_KANBAN = "AUTOMATED_REVIEWS_KANBAN",
	BASIC_KANBAN = "BASIC_KANBAN",
	BUG_TRIAGE = "BUG_TRIAGE"
}
/** Properties by which project v2 field connections can be ordered. */
export const enum ProjectV2FieldOrderField {
	CREATED_AT = "CREATED_AT",
	NAME = "NAME",
	POSITION = "POSITION"
}
/** The type of a project field. */
export const enum ProjectV2FieldType {
	ASSIGNEES = "ASSIGNEES",
	DATE = "DATE",
	ITERATION = "ITERATION",
	LABELS = "LABELS",
	LINKED_PULL_REQUESTS = "LINKED_PULL_REQUESTS",
	MILESTONE = "MILESTONE",
	NUMBER = "NUMBER",
	REPOSITORY = "REPOSITORY",
	REVIEWERS = "REVIEWERS",
	SINGLE_SELECT = "SINGLE_SELECT",
	TEXT = "TEXT",
	TITLE = "TITLE",
	TRACKS = "TRACKS"
}
/** Properties by which project v2 item field value connections can be ordered. */
export const enum ProjectV2ItemFieldValueOrderField {
	POSITION = "POSITION"
}
/** Properties by which project v2 item connections can be ordered. */
export const enum ProjectV2ItemOrderField {
	POSITION = "POSITION"
}
/** The type of a project item. */
export const enum ProjectV2ItemType {
	DRAFT_ISSUE = "DRAFT_ISSUE",
	ISSUE = "ISSUE",
	PULL_REQUEST = "PULL_REQUEST",
	REDACTED = "REDACTED"
}
/** Properties by which projects can be ordered. */
export const enum ProjectV2OrderField {
	CREATED_AT = "CREATED_AT",
	NUMBER = "NUMBER",
	TITLE = "TITLE",
	UPDATED_AT = "UPDATED_AT"
}
/** The layout of a project v2 view. */
export const enum ProjectV2ViewLayout {
	BOARD_LAYOUT = "BOARD_LAYOUT",
	TABLE_LAYOUT = "TABLE_LAYOUT"
}
/** Properties by which project v2 view connections can be ordered. */
export const enum ProjectV2ViewOrderField {
	CREATED_AT = "CREATED_AT",
	NAME = "NAME",
	POSITION = "POSITION"
}
/** The layout of a project view. */
export const enum ProjectViewLayout {
	BOARD_LAYOUT = "BOARD_LAYOUT",
	TABLE_LAYOUT = "TABLE_LAYOUT"
}
/** Represents available types of methods to use when merging a pull request. */
export const enum PullRequestMergeMethod {
	MERGE = "MERGE",
	REBASE = "REBASE",
	SQUASH = "SQUASH"
}
/** Properties by which pull_requests connections can be ordered. */
export const enum PullRequestOrderField {
	CREATED_AT = "CREATED_AT",
	UPDATED_AT = "UPDATED_AT"
}
/** The possible states of a pull request review comment. */
export const enum PullRequestReviewCommentState {
	PENDING = "PENDING",
	SUBMITTED = "SUBMITTED"
}
/** The review status of a pull request. */
export const enum PullRequestReviewDecision {
	APPROVED = "APPROVED",
	CHANGES_REQUESTED = "CHANGES_REQUESTED",
	REVIEW_REQUIRED = "REVIEW_REQUIRED"
}
/** The possible events to perform on a pull request review. */
export const enum PullRequestReviewEvent {
	APPROVE = "APPROVE",
	COMMENT = "COMMENT",
	DISMISS = "DISMISS",
	REQUEST_CHANGES = "REQUEST_CHANGES"
}
/** The possible states of a pull request review. */
export const enum PullRequestReviewState {
	APPROVED = "APPROVED",
	CHANGES_REQUESTED = "CHANGES_REQUESTED",
	COMMENTED = "COMMENTED",
	DISMISSED = "DISMISSED",
	PENDING = "PENDING"
}
/** The possible states of a pull request. */
export const enum PullRequestState {
	CLOSED = "CLOSED",
	MERGED = "MERGED",
	OPEN = "OPEN"
}
/** The possible item types found in a timeline. */
export const enum PullRequestTimelineItemsItemType {
	ADDED_TO_MERGE_QUEUE_EVENT = "ADDED_TO_MERGE_QUEUE_EVENT",
	ADDED_TO_PROJECT_EVENT = "ADDED_TO_PROJECT_EVENT",
	ASSIGNED_EVENT = "ASSIGNED_EVENT",
	AUTOMATIC_BASE_CHANGE_FAILED_EVENT = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT",
	AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT",
	AUTO_MERGE_DISABLED_EVENT = "AUTO_MERGE_DISABLED_EVENT",
	AUTO_MERGE_ENABLED_EVENT = "AUTO_MERGE_ENABLED_EVENT",
	AUTO_REBASE_ENABLED_EVENT = "AUTO_REBASE_ENABLED_EVENT",
	AUTO_SQUASH_ENABLED_EVENT = "AUTO_SQUASH_ENABLED_EVENT",
	BASE_REF_CHANGED_EVENT = "BASE_REF_CHANGED_EVENT",
	BASE_REF_DELETED_EVENT = "BASE_REF_DELETED_EVENT",
	BASE_REF_FORCE_PUSHED_EVENT = "BASE_REF_FORCE_PUSHED_EVENT",
	CLOSED_EVENT = "CLOSED_EVENT",
	COMMENT_DELETED_EVENT = "COMMENT_DELETED_EVENT",
	CONNECTED_EVENT = "CONNECTED_EVENT",
	CONVERTED_NOTE_TO_ISSUE_EVENT = "CONVERTED_NOTE_TO_ISSUE_EVENT",
	CONVERTED_TO_DISCUSSION_EVENT = "CONVERTED_TO_DISCUSSION_EVENT",
	CONVERT_TO_DRAFT_EVENT = "CONVERT_TO_DRAFT_EVENT",
	CROSS_REFERENCED_EVENT = "CROSS_REFERENCED_EVENT",
	DEMILESTONED_EVENT = "DEMILESTONED_EVENT",
	DEPLOYED_EVENT = "DEPLOYED_EVENT",
	DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT",
	DISCONNECTED_EVENT = "DISCONNECTED_EVENT",
	HEAD_REF_DELETED_EVENT = "HEAD_REF_DELETED_EVENT",
	HEAD_REF_FORCE_PUSHED_EVENT = "HEAD_REF_FORCE_PUSHED_EVENT",
	HEAD_REF_RESTORED_EVENT = "HEAD_REF_RESTORED_EVENT",
	ISSUE_COMMENT = "ISSUE_COMMENT",
	LABELED_EVENT = "LABELED_EVENT",
	LOCKED_EVENT = "LOCKED_EVENT",
	MARKED_AS_DUPLICATE_EVENT = "MARKED_AS_DUPLICATE_EVENT",
	MENTIONED_EVENT = "MENTIONED_EVENT",
	MERGED_EVENT = "MERGED_EVENT",
	MILESTONED_EVENT = "MILESTONED_EVENT",
	MOVED_COLUMNS_IN_PROJECT_EVENT = "MOVED_COLUMNS_IN_PROJECT_EVENT",
	PINNED_EVENT = "PINNED_EVENT",
	PULL_REQUEST_COMMIT = "PULL_REQUEST_COMMIT",
	PULL_REQUEST_COMMIT_COMMENT_THREAD = "PULL_REQUEST_COMMIT_COMMENT_THREAD",
	PULL_REQUEST_REVIEW = "PULL_REQUEST_REVIEW",
	PULL_REQUEST_REVIEW_THREAD = "PULL_REQUEST_REVIEW_THREAD",
	PULL_REQUEST_REVISION_MARKER = "PULL_REQUEST_REVISION_MARKER",
	READY_FOR_REVIEW_EVENT = "READY_FOR_REVIEW_EVENT",
	REFERENCED_EVENT = "REFERENCED_EVENT",
	REMOVED_FROM_MERGE_QUEUE_EVENT = "REMOVED_FROM_MERGE_QUEUE_EVENT",
	REMOVED_FROM_PROJECT_EVENT = "REMOVED_FROM_PROJECT_EVENT",
	RENAMED_TITLE_EVENT = "RENAMED_TITLE_EVENT",
	REOPENED_EVENT = "REOPENED_EVENT",
	REVIEW_DISMISSED_EVENT = "REVIEW_DISMISSED_EVENT",
	REVIEW_REQUESTED_EVENT = "REVIEW_REQUESTED_EVENT",
	REVIEW_REQUEST_REMOVED_EVENT = "REVIEW_REQUEST_REMOVED_EVENT",
	SUBSCRIBED_EVENT = "SUBSCRIBED_EVENT",
	TRANSFERRED_EVENT = "TRANSFERRED_EVENT",
	UNASSIGNED_EVENT = "UNASSIGNED_EVENT",
	UNLABELED_EVENT = "UNLABELED_EVENT",
	UNLOCKED_EVENT = "UNLOCKED_EVENT",
	UNMARKED_AS_DUPLICATE_EVENT = "UNMARKED_AS_DUPLICATE_EVENT",
	UNPINNED_EVENT = "UNPINNED_EVENT",
	UNSUBSCRIBED_EVENT = "UNSUBSCRIBED_EVENT",
	USER_BLOCKED_EVENT = "USER_BLOCKED_EVENT"
}
/** The possible target states when updating a pull request. */
export const enum PullRequestUpdateState {
	CLOSED = "CLOSED",
	OPEN = "OPEN"
}
/** Emojis that can be attached to Issues, Pull Requests and Comments. */
export const enum ReactionContent {
	CONFUSED = "CONFUSED",
	EYES = "EYES",
	HEART = "HEART",
	HOORAY = "HOORAY",
	LAUGH = "LAUGH",
	ROCKET = "ROCKET",
	THUMBS_DOWN = "THUMBS_DOWN",
	THUMBS_UP = "THUMBS_UP"
}
/** A list of fields that reactions can be ordered by. */
export const enum ReactionOrderField {
	CREATED_AT = "CREATED_AT"
}
/** Properties by which ref connections can be ordered. */
export const enum RefOrderField {
	ALPHABETICAL = "ALPHABETICAL",
	TAG_COMMIT_DATE = "TAG_COMMIT_DATE"
}
/** Properties by which release connections can be ordered. */
export const enum ReleaseOrderField {
	CREATED_AT = "CREATED_AT",
	NAME = "NAME"
}
/** The privacy of a repository */
export const enum RepoAccessAuditEntryVisibility {
	INTERNAL = "INTERNAL",
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The privacy of a repository */
export const enum RepoAddMemberAuditEntryVisibility {
	INTERNAL = "INTERNAL",
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The privacy of a repository */
export const enum RepoArchivedAuditEntryVisibility {
	INTERNAL = "INTERNAL",
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The merge options available for pull requests to this repository. */
export const enum RepoChangeMergeSettingAuditEntryMergeType {
	MERGE = "MERGE",
	REBASE = "REBASE",
	SQUASH = "SQUASH"
}
/** The privacy of a repository */
export const enum RepoCreateAuditEntryVisibility {
	INTERNAL = "INTERNAL",
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The privacy of a repository */
export const enum RepoDestroyAuditEntryVisibility {
	INTERNAL = "INTERNAL",
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The privacy of a repository */
export const enum RepoRemoveMemberAuditEntryVisibility {
	INTERNAL = "INTERNAL",
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The reasons a piece of content can be reported or minimized. */
export const enum ReportedContentClassifiers {
	ABUSE = "ABUSE",
	DUPLICATE = "DUPLICATE",
	OFF_TOPIC = "OFF_TOPIC",
	OUTDATED = "OUTDATED",
	RESOLVED = "RESOLVED",
	SPAM = "SPAM"
}
/** The affiliation of a user to a repository */
export const enum RepositoryAffiliation {
	COLLABORATOR = "COLLABORATOR",
	ORGANIZATION_MEMBER = "ORGANIZATION_MEMBER",
	OWNER = "OWNER"
}
/** The reason a repository is listed as 'contributed'. */
export const enum RepositoryContributionType {
	COMMIT = "COMMIT",
	ISSUE = "ISSUE",
	PULL_REQUEST = "PULL_REQUEST",
	PULL_REQUEST_REVIEW = "PULL_REQUEST_REVIEW",
	REPOSITORY = "REPOSITORY"
}
/** A repository interaction limit. */
export const enum RepositoryInteractionLimit {
	COLLABORATORS_ONLY = "COLLABORATORS_ONLY",
	CONTRIBUTORS_ONLY = "CONTRIBUTORS_ONLY",
	EXISTING_USERS = "EXISTING_USERS",
	NO_LIMIT = "NO_LIMIT"
}
/** The length for a repository interaction limit to be enabled for. */
export const enum RepositoryInteractionLimitExpiry {
	ONE_DAY = "ONE_DAY",
	ONE_MONTH = "ONE_MONTH",
	ONE_WEEK = "ONE_WEEK",
	SIX_MONTHS = "SIX_MONTHS",
	THREE_DAYS = "THREE_DAYS"
}
/** Indicates where an interaction limit is configured. */
export const enum RepositoryInteractionLimitOrigin {
	ORGANIZATION = "ORGANIZATION",
	REPOSITORY = "REPOSITORY",
	USER = "USER"
}
/** Properties by which repository invitation connections can be ordered. */
export const enum RepositoryInvitationOrderField {
	CREATED_AT = "CREATED_AT"
}
/** The possible reasons a given repository could be in a locked state. */
export const enum RepositoryLockReason {
	BILLING = "BILLING",
	MIGRATING = "MIGRATING",
	MOVING = "MOVING",
	RENAME = "RENAME"
}
/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
export const enum RepositoryMigrationOrderDirection {
	ASC = "ASC",
	DESC = "DESC"
}
/** Properties by which repository migrations can be ordered. */
export const enum RepositoryMigrationOrderField {
	CREATED_AT = "CREATED_AT"
}
/** Properties by which repository connections can be ordered. */
export const enum RepositoryOrderField {
	CREATED_AT = "CREATED_AT",
	NAME = "NAME",
	PUSHED_AT = "PUSHED_AT",
	STARGAZERS = "STARGAZERS",
	UPDATED_AT = "UPDATED_AT"
}
/** The access level to a repository */
export const enum RepositoryPermission {
	ADMIN = "ADMIN",
	MAINTAIN = "MAINTAIN",
	READ = "READ",
	TRIAGE = "TRIAGE",
	WRITE = "WRITE"
}
/** The privacy of a repository */
export const enum RepositoryPrivacy {
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The repository's visibility level. */
export const enum RepositoryVisibility {
	INTERNAL = "INTERNAL",
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The possible scopes of an alert's dependency. */
export const enum RepositoryVulnerabilityAlertDependencyScope {
	DEVELOPMENT = "DEVELOPMENT",
	RUNTIME = "RUNTIME"
}
/** The possible states of an alert */
export const enum RepositoryVulnerabilityAlertState {
	DISMISSED = "DISMISSED",
	FIXED = "FIXED",
	OPEN = "OPEN"
}
/** The possible states that can be requested when creating a check run. */
export const enum RequestableCheckStatusState {
	COMPLETED = "COMPLETED",
	IN_PROGRESS = "IN_PROGRESS",
	PENDING = "PENDING",
	QUEUED = "QUEUED",
	WAITING = "WAITING"
}
/** Possible roles a user may have in relation to an organization. */
export const enum RoleInOrganization {
	DIRECT_MEMBER = "DIRECT_MEMBER",
	OWNER = "OWNER",
	UNAFFILIATED = "UNAFFILIATED"
}
/** The possible digest algorithms used to sign SAML requests for an identity provider. */
export const enum SamlDigestAlgorithm {
	SHA1 = "SHA1",
	SHA256 = "SHA256",
	SHA384 = "SHA384",
	SHA512 = "SHA512"
}
/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
export const enum SamlSignatureAlgorithm {
	RSA_SHA1 = "RSA_SHA1",
	RSA_SHA256 = "RSA_SHA256",
	RSA_SHA384 = "RSA_SHA384",
	RSA_SHA512 = "RSA_SHA512"
}
/** Properties by which saved reply connections can be ordered. */
export const enum SavedReplyOrderField {
	UPDATED_AT = "UPDATED_AT"
}
/** Represents the individual results of a search. */
export const enum SearchType {
	DISCUSSION = "DISCUSSION",
	ISSUE = "ISSUE",
	REPOSITORY = "REPOSITORY",
	USER = "USER"
}
/** Classification of the advisory. */
export const enum SecurityAdvisoryClassification {
	GENERAL = "GENERAL",
	MALWARE = "MALWARE"
}
/** The possible ecosystems of a security vulnerability's package. */
export const enum SecurityAdvisoryEcosystem {
	ACTIONS = "ACTIONS",
	COMPOSER = "COMPOSER",
	ERLANG = "ERLANG",
	GO = "GO",
	MAVEN = "MAVEN",
	NPM = "NPM",
	NUGET = "NUGET",
	PIP = "PIP",
	PUB = "PUB",
	RUBYGEMS = "RUBYGEMS",
	RUST = "RUST"
}
/** Identifier formats available for advisories. */
export const enum SecurityAdvisoryIdentifierType {
	CVE = "CVE",
	GHSA = "GHSA"
}
/** Properties by which security advisory connections can be ordered. */
export const enum SecurityAdvisoryOrderField {
	PUBLISHED_AT = "PUBLISHED_AT",
	UPDATED_AT = "UPDATED_AT"
}
/** Severity of the vulnerability. */
export const enum SecurityAdvisorySeverity {
	CRITICAL = "CRITICAL",
	HIGH = "HIGH",
	LOW = "LOW",
	MODERATE = "MODERATE"
}
/** Properties by which security vulnerability connections can be ordered. */
export const enum SecurityVulnerabilityOrderField {
	UPDATED_AT = "UPDATED_AT"
}
/** Properties by which sponsor connections can be ordered. */
export const enum SponsorOrderField {
	LOGIN = "LOGIN",
	RELEVANCE = "RELEVANCE"
}
/** Properties by which sponsorable connections can be ordered. */
export const enum SponsorableOrderField {
	LOGIN = "LOGIN"
}
/** The possible actions that GitHub Sponsors activities can represent. */
export const enum SponsorsActivityAction {
	CANCELLED_SPONSORSHIP = "CANCELLED_SPONSORSHIP",
	NEW_SPONSORSHIP = "NEW_SPONSORSHIP",
	PENDING_CHANGE = "PENDING_CHANGE",
	REFUND = "REFUND",
	SPONSOR_MATCH_DISABLED = "SPONSOR_MATCH_DISABLED",
	TIER_CHANGE = "TIER_CHANGE"
}
/** Properties by which GitHub Sponsors activity connections can be ordered. */
export const enum SponsorsActivityOrderField {
	TIMESTAMP = "TIMESTAMP"
}
/** The possible time periods for which Sponsors activities can be requested. */
export const enum SponsorsActivityPeriod {
	ALL = "ALL",
	DAY = "DAY",
	MONTH = "MONTH",
	WEEK = "WEEK"
}
/** The different kinds of goals a GitHub Sponsors member can have. */
export const enum SponsorsGoalKind {
	MONTHLY_SPONSORSHIP_AMOUNT = "MONTHLY_SPONSORSHIP_AMOUNT",
	TOTAL_SPONSORS_COUNT = "TOTAL_SPONSORS_COUNT"
}
/** Properties by which Sponsors tiers connections can be ordered. */
export const enum SponsorsTierOrderField {
	CREATED_AT = "CREATED_AT",
	MONTHLY_PRICE_IN_CENTS = "MONTHLY_PRICE_IN_CENTS"
}
/** Properties by which sponsorship update connections can be ordered. */
export const enum SponsorshipNewsletterOrderField {
	CREATED_AT = "CREATED_AT"
}
/** Properties by which sponsorship connections can be ordered. */
export const enum SponsorshipOrderField {
	CREATED_AT = "CREATED_AT"
}
/** The privacy of a sponsorship */
export const enum SponsorshipPrivacy {
	PRIVATE = "PRIVATE",
	PUBLIC = "PUBLIC"
}
/** The possible default commit messages for squash merges. */
export const enum SquashMergeCommitMessage {
	BLANK = "BLANK",
	COMMIT_MESSAGES = "COMMIT_MESSAGES",
	PR_BODY = "PR_BODY"
}
/** The possible default commit titles for squash merges. */
export const enum SquashMergeCommitTitle {
	COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE",
	PR_TITLE = "PR_TITLE"
}
/** Properties by which star connections can be ordered. */
export const enum StarOrderField {
	STARRED_AT = "STARRED_AT"
}
/** The possible commit status states. */
export const enum StatusState {
	ERROR = "ERROR",
	EXPECTED = "EXPECTED",
	FAILURE = "FAILURE",
	PENDING = "PENDING",
	SUCCESS = "SUCCESS"
}
/** The possible states of a subscription. */
export const enum SubscriptionState {
	IGNORED = "IGNORED",
	SUBSCRIBED = "SUBSCRIBED",
	UNSUBSCRIBED = "UNSUBSCRIBED"
}
/** Properties by which team discussion comment connections can be ordered. */
export const enum TeamDiscussionCommentOrderField {
	NUMBER = "NUMBER"
}
/** Properties by which team discussion connections can be ordered. */
export const enum TeamDiscussionOrderField {
	CREATED_AT = "CREATED_AT"
}
/** Properties by which team member connections can be ordered. */
export const enum TeamMemberOrderField {
	CREATED_AT = "CREATED_AT",
	LOGIN = "LOGIN"
}
/** The possible team member roles; either 'maintainer' or 'member'. */
export const enum TeamMemberRole {
	MAINTAINER = "MAINTAINER",
	MEMBER = "MEMBER"
}
/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
export const enum TeamMembershipType {
	ALL = "ALL",
	CHILD_TEAM = "CHILD_TEAM",
	IMMEDIATE = "IMMEDIATE"
}
/** Properties by which team connections can be ordered. */
export const enum TeamOrderField {
	NAME = "NAME"
}
/** The possible team privacy values. */
export const enum TeamPrivacy {
	SECRET = "SECRET",
	VISIBLE = "VISIBLE"
}
/** Properties by which team repository connections can be ordered. */
export const enum TeamRepositoryOrderField {
	CREATED_AT = "CREATED_AT",
	NAME = "NAME",
	PERMISSION = "PERMISSION",
	PUSHED_AT = "PUSHED_AT",
	STARGAZERS = "STARGAZERS",
	UPDATED_AT = "UPDATED_AT"
}
/** The possible team review assignment algorithms */
export const enum TeamReviewAssignmentAlgorithm {
	LOAD_BALANCE = "LOAD_BALANCE",
	ROUND_ROBIN = "ROUND_ROBIN"
}
/** The role of a user on a team. */
export const enum TeamRole {
	ADMIN = "ADMIN",
	MEMBER = "MEMBER"
}
/** Reason that the suggested topic is declined. */
export const enum TopicSuggestionDeclineReason {
	NOT_RELEVANT = "NOT_RELEVANT",
	PERSONAL_PREFERENCE = "PERSONAL_PREFERENCE",
	TOO_GENERAL = "TOO_GENERAL",
	TOO_SPECIFIC = "TOO_SPECIFIC"
}
/** The possible states of a tracked issue. */
export const enum TrackedIssueStates {
	CLOSED = "CLOSED",
	OPEN = "OPEN"
}
/** The possible durations that a user can be blocked for. */
export const enum UserBlockDuration {
	ONE_DAY = "ONE_DAY",
	ONE_MONTH = "ONE_MONTH",
	ONE_WEEK = "ONE_WEEK",
	PERMANENT = "PERMANENT",
	THREE_DAYS = "THREE_DAYS"
}
/** Properties by which user status connections can be ordered. */
export const enum UserStatusOrderField {
	UPDATED_AT = "UPDATED_AT"
}
/** Properties by which verifiable domain connections can be ordered. */
export const enum VerifiableDomainOrderField {
	CREATED_AT = "CREATED_AT",
	DOMAIN = "DOMAIN"
}
/** Properties by which workflow run connections can be ordered. */
export const enum WorkflowRunOrderField {
	CREATED_AT = "CREATED_AT"
}

type ZEUS_VARIABLES = {
	["AbortQueuedMigrationsInput"]: ValueTypes["AbortQueuedMigrationsInput"];
	["AcceptEnterpriseAdministratorInvitationInput"]: ValueTypes["AcceptEnterpriseAdministratorInvitationInput"];
	["AcceptTopicSuggestionInput"]: ValueTypes["AcceptTopicSuggestionInput"];
	["ActorType"]: ValueTypes["ActorType"];
	["AddAssigneesToAssignableInput"]: ValueTypes["AddAssigneesToAssignableInput"];
	["AddCommentInput"]: ValueTypes["AddCommentInput"];
	["AddDiscussionCommentInput"]: ValueTypes["AddDiscussionCommentInput"];
	["AddDiscussionPollVoteInput"]: ValueTypes["AddDiscussionPollVoteInput"];
	["AddEnterpriseSupportEntitlementInput"]: ValueTypes["AddEnterpriseSupportEntitlementInput"];
	["AddLabelsToLabelableInput"]: ValueTypes["AddLabelsToLabelableInput"];
	["AddProjectCardInput"]: ValueTypes["AddProjectCardInput"];
	["AddProjectColumnInput"]: ValueTypes["AddProjectColumnInput"];
	["AddProjectDraftIssueInput"]: ValueTypes["AddProjectDraftIssueInput"];
	["AddProjectNextItemInput"]: ValueTypes["AddProjectNextItemInput"];
	["AddProjectV2DraftIssueInput"]: ValueTypes["AddProjectV2DraftIssueInput"];
	["AddProjectV2ItemByIdInput"]: ValueTypes["AddProjectV2ItemByIdInput"];
	["AddPullRequestReviewCommentInput"]: ValueTypes["AddPullRequestReviewCommentInput"];
	["AddPullRequestReviewInput"]: ValueTypes["AddPullRequestReviewInput"];
	["AddPullRequestReviewThreadInput"]: ValueTypes["AddPullRequestReviewThreadInput"];
	["AddReactionInput"]: ValueTypes["AddReactionInput"];
	["AddStarInput"]: ValueTypes["AddStarInput"];
	["AddUpvoteInput"]: ValueTypes["AddUpvoteInput"];
	["AddVerifiableDomainInput"]: ValueTypes["AddVerifiableDomainInput"];
	["ApproveDeploymentsInput"]: ValueTypes["ApproveDeploymentsInput"];
	["ApproveVerifiableDomainInput"]: ValueTypes["ApproveVerifiableDomainInput"];
	["ArchiveRepositoryInput"]: ValueTypes["ArchiveRepositoryInput"];
	["AuditLogOrder"]: ValueTypes["AuditLogOrder"];
	["AuditLogOrderField"]: ValueTypes["AuditLogOrderField"];
	["Base64String"]: ValueTypes["Base64String"];
	["CancelEnterpriseAdminInvitationInput"]: ValueTypes["CancelEnterpriseAdminInvitationInput"];
	["CancelSponsorshipInput"]: ValueTypes["CancelSponsorshipInput"];
	["ChangeUserStatusInput"]: ValueTypes["ChangeUserStatusInput"];
	["CheckAnnotationData"]: ValueTypes["CheckAnnotationData"];
	["CheckAnnotationLevel"]: ValueTypes["CheckAnnotationLevel"];
	["CheckAnnotationRange"]: ValueTypes["CheckAnnotationRange"];
	["CheckConclusionState"]: ValueTypes["CheckConclusionState"];
	["CheckRunAction"]: ValueTypes["CheckRunAction"];
	["CheckRunFilter"]: ValueTypes["CheckRunFilter"];
	["CheckRunOutput"]: ValueTypes["CheckRunOutput"];
	["CheckRunOutputImage"]: ValueTypes["CheckRunOutputImage"];
	["CheckRunState"]: ValueTypes["CheckRunState"];
	["CheckRunType"]: ValueTypes["CheckRunType"];
	["CheckStatusState"]: ValueTypes["CheckStatusState"];
	["CheckSuiteAutoTriggerPreference"]: ValueTypes["CheckSuiteAutoTriggerPreference"];
	["CheckSuiteFilter"]: ValueTypes["CheckSuiteFilter"];
	["ClearLabelsFromLabelableInput"]: ValueTypes["ClearLabelsFromLabelableInput"];
	["ClearProjectV2ItemFieldValueInput"]: ValueTypes["ClearProjectV2ItemFieldValueInput"];
	["CloneProjectInput"]: ValueTypes["CloneProjectInput"];
	["CloneTemplateRepositoryInput"]: ValueTypes["CloneTemplateRepositoryInput"];
	["CloseIssueInput"]: ValueTypes["CloseIssueInput"];
	["ClosePullRequestInput"]: ValueTypes["ClosePullRequestInput"];
	["CollaboratorAffiliation"]: ValueTypes["CollaboratorAffiliation"];
	["CommentAuthorAssociation"]: ValueTypes["CommentAuthorAssociation"];
	["CommentCannotUpdateReason"]: ValueTypes["CommentCannotUpdateReason"];
	["CommitAuthor"]: ValueTypes["CommitAuthor"];
	["CommitContributionOrder"]: ValueTypes["CommitContributionOrder"];
	["CommitContributionOrderField"]: ValueTypes["CommitContributionOrderField"];
	["CommitMessage"]: ValueTypes["CommitMessage"];
	["CommittableBranch"]: ValueTypes["CommittableBranch"];
	["ComparisonStatus"]: ValueTypes["ComparisonStatus"];
	["ContributionLevel"]: ValueTypes["ContributionLevel"];
	["ContributionOrder"]: ValueTypes["ContributionOrder"];
	["ConvertProjectCardNoteToIssueInput"]: ValueTypes["ConvertProjectCardNoteToIssueInput"];
	["ConvertPullRequestToDraftInput"]: ValueTypes["ConvertPullRequestToDraftInput"];
	["CreateBranchProtectionRuleInput"]: ValueTypes["CreateBranchProtectionRuleInput"];
	["CreateCheckRunInput"]: ValueTypes["CreateCheckRunInput"];
	["CreateCheckSuiteInput"]: ValueTypes["CreateCheckSuiteInput"];
	["CreateCommitOnBranchInput"]: ValueTypes["CreateCommitOnBranchInput"];
	["CreateDeploymentInput"]: ValueTypes["CreateDeploymentInput"];
	["CreateDeploymentStatusInput"]: ValueTypes["CreateDeploymentStatusInput"];
	["CreateDiscussionInput"]: ValueTypes["CreateDiscussionInput"];
	["CreateEnterpriseOrganizationInput"]: ValueTypes["CreateEnterpriseOrganizationInput"];
	["CreateEnvironmentInput"]: ValueTypes["CreateEnvironmentInput"];
	["CreateIpAllowListEntryInput"]: ValueTypes["CreateIpAllowListEntryInput"];
	["CreateIssueInput"]: ValueTypes["CreateIssueInput"];
	["CreateLabelInput"]: ValueTypes["CreateLabelInput"];
	["CreateLinkedBranchInput"]: ValueTypes["CreateLinkedBranchInput"];
	["CreateMigrationSourceInput"]: ValueTypes["CreateMigrationSourceInput"];
	["CreateProjectInput"]: ValueTypes["CreateProjectInput"];
	["CreateProjectV2Input"]: ValueTypes["CreateProjectV2Input"];
	["CreatePullRequestInput"]: ValueTypes["CreatePullRequestInput"];
	["CreateRefInput"]: ValueTypes["CreateRefInput"];
	["CreateRepositoryInput"]: ValueTypes["CreateRepositoryInput"];
	["CreateSponsorsTierInput"]: ValueTypes["CreateSponsorsTierInput"];
	["CreateSponsorshipInput"]: ValueTypes["CreateSponsorshipInput"];
	["CreateTeamDiscussionCommentInput"]: ValueTypes["CreateTeamDiscussionCommentInput"];
	["CreateTeamDiscussionInput"]: ValueTypes["CreateTeamDiscussionInput"];
	["Date"]: ValueTypes["Date"];
	["DateTime"]: ValueTypes["DateTime"];
	["DeclineTopicSuggestionInput"]: ValueTypes["DeclineTopicSuggestionInput"];
	["DefaultRepositoryPermissionField"]: ValueTypes["DefaultRepositoryPermissionField"];
	["DeleteBranchProtectionRuleInput"]: ValueTypes["DeleteBranchProtectionRuleInput"];
	["DeleteDeploymentInput"]: ValueTypes["DeleteDeploymentInput"];
	["DeleteDiscussionCommentInput"]: ValueTypes["DeleteDiscussionCommentInput"];
	["DeleteDiscussionInput"]: ValueTypes["DeleteDiscussionInput"];
	["DeleteEnvironmentInput"]: ValueTypes["DeleteEnvironmentInput"];
	["DeleteIpAllowListEntryInput"]: ValueTypes["DeleteIpAllowListEntryInput"];
	["DeleteIssueCommentInput"]: ValueTypes["DeleteIssueCommentInput"];
	["DeleteIssueInput"]: ValueTypes["DeleteIssueInput"];
	["DeleteLabelInput"]: ValueTypes["DeleteLabelInput"];
	["DeleteLinkedBranchInput"]: ValueTypes["DeleteLinkedBranchInput"];
	["DeletePackageVersionInput"]: ValueTypes["DeletePackageVersionInput"];
	["DeleteProjectCardInput"]: ValueTypes["DeleteProjectCardInput"];
	["DeleteProjectColumnInput"]: ValueTypes["DeleteProjectColumnInput"];
	["DeleteProjectInput"]: ValueTypes["DeleteProjectInput"];
	["DeleteProjectNextItemInput"]: ValueTypes["DeleteProjectNextItemInput"];
	["DeleteProjectV2ItemInput"]: ValueTypes["DeleteProjectV2ItemInput"];
	["DeletePullRequestReviewCommentInput"]: ValueTypes["DeletePullRequestReviewCommentInput"];
	["DeletePullRequestReviewInput"]: ValueTypes["DeletePullRequestReviewInput"];
	["DeleteRefInput"]: ValueTypes["DeleteRefInput"];
	["DeleteTeamDiscussionCommentInput"]: ValueTypes["DeleteTeamDiscussionCommentInput"];
	["DeleteTeamDiscussionInput"]: ValueTypes["DeleteTeamDiscussionInput"];
	["DeleteVerifiableDomainInput"]: ValueTypes["DeleteVerifiableDomainInput"];
	["DependencyGraphEcosystem"]: ValueTypes["DependencyGraphEcosystem"];
	["DeploymentOrder"]: ValueTypes["DeploymentOrder"];
	["DeploymentOrderField"]: ValueTypes["DeploymentOrderField"];
	["DeploymentProtectionRuleType"]: ValueTypes["DeploymentProtectionRuleType"];
	["DeploymentReviewState"]: ValueTypes["DeploymentReviewState"];
	["DeploymentState"]: ValueTypes["DeploymentState"];
	["DeploymentStatusState"]: ValueTypes["DeploymentStatusState"];
	["DiffSide"]: ValueTypes["DiffSide"];
	["DisablePullRequestAutoMergeInput"]: ValueTypes["DisablePullRequestAutoMergeInput"];
	["DiscussionOrder"]: ValueTypes["DiscussionOrder"];
	["DiscussionOrderField"]: ValueTypes["DiscussionOrderField"];
	["DiscussionPollOptionOrder"]: ValueTypes["DiscussionPollOptionOrder"];
	["DiscussionPollOptionOrderField"]: ValueTypes["DiscussionPollOptionOrderField"];
	["DismissPullRequestReviewInput"]: ValueTypes["DismissPullRequestReviewInput"];
	["DismissReason"]: ValueTypes["DismissReason"];
	["DismissRepositoryVulnerabilityAlertInput"]: ValueTypes["DismissRepositoryVulnerabilityAlertInput"];
	["DraftPullRequestReviewComment"]: ValueTypes["DraftPullRequestReviewComment"];
	["DraftPullRequestReviewThread"]: ValueTypes["DraftPullRequestReviewThread"];
	["EnablePullRequestAutoMergeInput"]: ValueTypes["EnablePullRequestAutoMergeInput"];
	["EnterpriseAdministratorInvitationOrder"]: ValueTypes["EnterpriseAdministratorInvitationOrder"];
	["EnterpriseAdministratorInvitationOrderField"]: ValueTypes["EnterpriseAdministratorInvitationOrderField"];
	["EnterpriseAdministratorRole"]: ValueTypes["EnterpriseAdministratorRole"];
	["EnterpriseAllowPrivateRepositoryForkingPolicyValue"]: ValueTypes["EnterpriseAllowPrivateRepositoryForkingPolicyValue"];
	["EnterpriseDefaultRepositoryPermissionSettingValue"]: ValueTypes["EnterpriseDefaultRepositoryPermissionSettingValue"];
	["EnterpriseEnabledDisabledSettingValue"]: ValueTypes["EnterpriseEnabledDisabledSettingValue"];
	["EnterpriseEnabledSettingValue"]: ValueTypes["EnterpriseEnabledSettingValue"];
	["EnterpriseMemberOrder"]: ValueTypes["EnterpriseMemberOrder"];
	["EnterpriseMemberOrderField"]: ValueTypes["EnterpriseMemberOrderField"];
	["EnterpriseMembersCanCreateRepositoriesSettingValue"]: ValueTypes["EnterpriseMembersCanCreateRepositoriesSettingValue"];
	["EnterpriseMembersCanMakePurchasesSettingValue"]: ValueTypes["EnterpriseMembersCanMakePurchasesSettingValue"];
	["EnterpriseServerInstallationOrder"]: ValueTypes["EnterpriseServerInstallationOrder"];
	["EnterpriseServerInstallationOrderField"]: ValueTypes["EnterpriseServerInstallationOrderField"];
	["EnterpriseServerUserAccountEmailOrder"]: ValueTypes["EnterpriseServerUserAccountEmailOrder"];
	["EnterpriseServerUserAccountEmailOrderField"]: ValueTypes["EnterpriseServerUserAccountEmailOrderField"];
	["EnterpriseServerUserAccountOrder"]: ValueTypes["EnterpriseServerUserAccountOrder"];
	["EnterpriseServerUserAccountOrderField"]: ValueTypes["EnterpriseServerUserAccountOrderField"];
	["EnterpriseServerUserAccountsUploadOrder"]: ValueTypes["EnterpriseServerUserAccountsUploadOrder"];
	["EnterpriseServerUserAccountsUploadOrderField"]: ValueTypes["EnterpriseServerUserAccountsUploadOrderField"];
	["EnterpriseServerUserAccountsUploadSyncState"]: ValueTypes["EnterpriseServerUserAccountsUploadSyncState"];
	["EnterpriseUserAccountMembershipRole"]: ValueTypes["EnterpriseUserAccountMembershipRole"];
	["EnterpriseUserDeployment"]: ValueTypes["EnterpriseUserDeployment"];
	["FileAddition"]: ValueTypes["FileAddition"];
	["FileChanges"]: ValueTypes["FileChanges"];
	["FileDeletion"]: ValueTypes["FileDeletion"];
	["FileViewedState"]: ValueTypes["FileViewedState"];
	["FollowOrganizationInput"]: ValueTypes["FollowOrganizationInput"];
	["FollowUserInput"]: ValueTypes["FollowUserInput"];
	["FundingPlatform"]: ValueTypes["FundingPlatform"];
	["GistOrder"]: ValueTypes["GistOrder"];
	["GistOrderField"]: ValueTypes["GistOrderField"];
	["GistPrivacy"]: ValueTypes["GistPrivacy"];
	["GitObjectID"]: ValueTypes["GitObjectID"];
	["GitRefname"]: ValueTypes["GitRefname"];
	["GitSSHRemote"]: ValueTypes["GitSSHRemote"];
	["GitSignatureState"]: ValueTypes["GitSignatureState"];
	["GitTimestamp"]: ValueTypes["GitTimestamp"];
	["GrantEnterpriseOrganizationsMigratorRoleInput"]: ValueTypes["GrantEnterpriseOrganizationsMigratorRoleInput"];
	["GrantMigratorRoleInput"]: ValueTypes["GrantMigratorRoleInput"];
	["HTML"]: ValueTypes["HTML"];
	["IdentityProviderConfigurationState"]: ValueTypes["IdentityProviderConfigurationState"];
	["ImportProjectInput"]: ValueTypes["ImportProjectInput"];
	["InviteEnterpriseAdminInput"]: ValueTypes["InviteEnterpriseAdminInput"];
	["IpAllowListEnabledSettingValue"]: ValueTypes["IpAllowListEnabledSettingValue"];
	["IpAllowListEntryOrder"]: ValueTypes["IpAllowListEntryOrder"];
	["IpAllowListEntryOrderField"]: ValueTypes["IpAllowListEntryOrderField"];
	["IpAllowListForInstalledAppsEnabledSettingValue"]: ValueTypes["IpAllowListForInstalledAppsEnabledSettingValue"];
	["IssueClosedStateReason"]: ValueTypes["IssueClosedStateReason"];
	["IssueCommentOrder"]: ValueTypes["IssueCommentOrder"];
	["IssueCommentOrderField"]: ValueTypes["IssueCommentOrderField"];
	["IssueFilters"]: ValueTypes["IssueFilters"];
	["IssueOrder"]: ValueTypes["IssueOrder"];
	["IssueOrderField"]: ValueTypes["IssueOrderField"];
	["IssueState"]: ValueTypes["IssueState"];
	["IssueStateReason"]: ValueTypes["IssueStateReason"];
	["IssueTimelineItemsItemType"]: ValueTypes["IssueTimelineItemsItemType"];
	["LabelOrder"]: ValueTypes["LabelOrder"];
	["LabelOrderField"]: ValueTypes["LabelOrderField"];
	["LanguageOrder"]: ValueTypes["LanguageOrder"];
	["LanguageOrderField"]: ValueTypes["LanguageOrderField"];
	["LinkRepositoryToProjectInput"]: ValueTypes["LinkRepositoryToProjectInput"];
	["LockLockableInput"]: ValueTypes["LockLockableInput"];
	["LockReason"]: ValueTypes["LockReason"];
	["MarkDiscussionCommentAsAnswerInput"]: ValueTypes["MarkDiscussionCommentAsAnswerInput"];
	["MarkFileAsViewedInput"]: ValueTypes["MarkFileAsViewedInput"];
	["MarkPullRequestReadyForReviewInput"]: ValueTypes["MarkPullRequestReadyForReviewInput"];
	["MergeBranchInput"]: ValueTypes["MergeBranchInput"];
	["MergeCommitMessage"]: ValueTypes["MergeCommitMessage"];
	["MergeCommitTitle"]: ValueTypes["MergeCommitTitle"];
	["MergePullRequestInput"]: ValueTypes["MergePullRequestInput"];
	["MergeStateStatus"]: ValueTypes["MergeStateStatus"];
	["MergeableState"]: ValueTypes["MergeableState"];
	["MigrationSourceType"]: ValueTypes["MigrationSourceType"];
	["MigrationState"]: ValueTypes["MigrationState"];
	["MilestoneOrder"]: ValueTypes["MilestoneOrder"];
	["MilestoneOrderField"]: ValueTypes["MilestoneOrderField"];
	["MilestoneState"]: ValueTypes["MilestoneState"];
	["MinimizeCommentInput"]: ValueTypes["MinimizeCommentInput"];
	["MoveProjectCardInput"]: ValueTypes["MoveProjectCardInput"];
	["MoveProjectColumnInput"]: ValueTypes["MoveProjectColumnInput"];
	["NotificationRestrictionSettingValue"]: ValueTypes["NotificationRestrictionSettingValue"];
	["OIDCProviderType"]: ValueTypes["OIDCProviderType"];
	["OauthApplicationCreateAuditEntryState"]: ValueTypes["OauthApplicationCreateAuditEntryState"];
	["OperationType"]: ValueTypes["OperationType"];
	["OrderDirection"]: ValueTypes["OrderDirection"];
	["OrgAddMemberAuditEntryPermission"]: ValueTypes["OrgAddMemberAuditEntryPermission"];
	["OrgCreateAuditEntryBillingPlan"]: ValueTypes["OrgCreateAuditEntryBillingPlan"];
	["OrgEnterpriseOwnerOrder"]: ValueTypes["OrgEnterpriseOwnerOrder"];
	["OrgEnterpriseOwnerOrderField"]: ValueTypes["OrgEnterpriseOwnerOrderField"];
	["OrgRemoveBillingManagerAuditEntryReason"]: ValueTypes["OrgRemoveBillingManagerAuditEntryReason"];
	["OrgRemoveMemberAuditEntryMembershipType"]: ValueTypes["OrgRemoveMemberAuditEntryMembershipType"];
	["OrgRemoveMemberAuditEntryReason"]: ValueTypes["OrgRemoveMemberAuditEntryReason"];
	["OrgRemoveOutsideCollaboratorAuditEntryMembershipType"]: ValueTypes["OrgRemoveOutsideCollaboratorAuditEntryMembershipType"];
	["OrgRemoveOutsideCollaboratorAuditEntryReason"]: ValueTypes["OrgRemoveOutsideCollaboratorAuditEntryReason"];
	["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"]: ValueTypes["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"];
	["OrgUpdateMemberAuditEntryPermission"]: ValueTypes["OrgUpdateMemberAuditEntryPermission"];
	["OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"]: ValueTypes["OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"];
	["OrganizationInvitationRole"]: ValueTypes["OrganizationInvitationRole"];
	["OrganizationInvitationType"]: ValueTypes["OrganizationInvitationType"];
	["OrganizationMemberRole"]: ValueTypes["OrganizationMemberRole"];
	["OrganizationMembersCanCreateRepositoriesSettingValue"]: ValueTypes["OrganizationMembersCanCreateRepositoriesSettingValue"];
	["OrganizationOrder"]: ValueTypes["OrganizationOrder"];
	["OrganizationOrderField"]: ValueTypes["OrganizationOrderField"];
	["PackageFileOrder"]: ValueTypes["PackageFileOrder"];
	["PackageFileOrderField"]: ValueTypes["PackageFileOrderField"];
	["PackageOrder"]: ValueTypes["PackageOrder"];
	["PackageOrderField"]: ValueTypes["PackageOrderField"];
	["PackageType"]: ValueTypes["PackageType"];
	["PackageVersionOrder"]: ValueTypes["PackageVersionOrder"];
	["PackageVersionOrderField"]: ValueTypes["PackageVersionOrderField"];
	["PatchStatus"]: ValueTypes["PatchStatus"];
	["PinIssueInput"]: ValueTypes["PinIssueInput"];
	["PinnableItemType"]: ValueTypes["PinnableItemType"];
	["PinnedDiscussionGradient"]: ValueTypes["PinnedDiscussionGradient"];
	["PinnedDiscussionPattern"]: ValueTypes["PinnedDiscussionPattern"];
	["PreciseDateTime"]: ValueTypes["PreciseDateTime"];
	["ProjectCardArchivedState"]: ValueTypes["ProjectCardArchivedState"];
	["ProjectCardImport"]: ValueTypes["ProjectCardImport"];
	["ProjectCardState"]: ValueTypes["ProjectCardState"];
	["ProjectColumnImport"]: ValueTypes["ProjectColumnImport"];
	["ProjectColumnPurpose"]: ValueTypes["ProjectColumnPurpose"];
	["ProjectItemType"]: ValueTypes["ProjectItemType"];
	["ProjectNextFieldType"]: ValueTypes["ProjectNextFieldType"];
	["ProjectNextOrderField"]: ValueTypes["ProjectNextOrderField"];
	["ProjectOrder"]: ValueTypes["ProjectOrder"];
	["ProjectOrderField"]: ValueTypes["ProjectOrderField"];
	["ProjectState"]: ValueTypes["ProjectState"];
	["ProjectTemplate"]: ValueTypes["ProjectTemplate"];
	["ProjectV2FieldOrder"]: ValueTypes["ProjectV2FieldOrder"];
	["ProjectV2FieldOrderField"]: ValueTypes["ProjectV2FieldOrderField"];
	["ProjectV2FieldType"]: ValueTypes["ProjectV2FieldType"];
	["ProjectV2FieldValue"]: ValueTypes["ProjectV2FieldValue"];
	["ProjectV2ItemFieldValueOrder"]: ValueTypes["ProjectV2ItemFieldValueOrder"];
	["ProjectV2ItemFieldValueOrderField"]: ValueTypes["ProjectV2ItemFieldValueOrderField"];
	["ProjectV2ItemOrder"]: ValueTypes["ProjectV2ItemOrder"];
	["ProjectV2ItemOrderField"]: ValueTypes["ProjectV2ItemOrderField"];
	["ProjectV2ItemType"]: ValueTypes["ProjectV2ItemType"];
	["ProjectV2Order"]: ValueTypes["ProjectV2Order"];
	["ProjectV2OrderField"]: ValueTypes["ProjectV2OrderField"];
	["ProjectV2ViewLayout"]: ValueTypes["ProjectV2ViewLayout"];
	["ProjectV2ViewOrder"]: ValueTypes["ProjectV2ViewOrder"];
	["ProjectV2ViewOrderField"]: ValueTypes["ProjectV2ViewOrderField"];
	["ProjectViewLayout"]: ValueTypes["ProjectViewLayout"];
	["PullRequestMergeMethod"]: ValueTypes["PullRequestMergeMethod"];
	["PullRequestOrder"]: ValueTypes["PullRequestOrder"];
	["PullRequestOrderField"]: ValueTypes["PullRequestOrderField"];
	["PullRequestReviewCommentState"]: ValueTypes["PullRequestReviewCommentState"];
	["PullRequestReviewDecision"]: ValueTypes["PullRequestReviewDecision"];
	["PullRequestReviewEvent"]: ValueTypes["PullRequestReviewEvent"];
	["PullRequestReviewState"]: ValueTypes["PullRequestReviewState"];
	["PullRequestState"]: ValueTypes["PullRequestState"];
	["PullRequestTimelineItemsItemType"]: ValueTypes["PullRequestTimelineItemsItemType"];
	["PullRequestUpdateState"]: ValueTypes["PullRequestUpdateState"];
	["ReactionContent"]: ValueTypes["ReactionContent"];
	["ReactionOrder"]: ValueTypes["ReactionOrder"];
	["ReactionOrderField"]: ValueTypes["ReactionOrderField"];
	["RefOrder"]: ValueTypes["RefOrder"];
	["RefOrderField"]: ValueTypes["RefOrderField"];
	["RefUpdate"]: ValueTypes["RefUpdate"];
	["RegenerateEnterpriseIdentityProviderRecoveryCodesInput"]: ValueTypes["RegenerateEnterpriseIdentityProviderRecoveryCodesInput"];
	["RegenerateVerifiableDomainTokenInput"]: ValueTypes["RegenerateVerifiableDomainTokenInput"];
	["RejectDeploymentsInput"]: ValueTypes["RejectDeploymentsInput"];
	["ReleaseOrder"]: ValueTypes["ReleaseOrder"];
	["ReleaseOrderField"]: ValueTypes["ReleaseOrderField"];
	["RemoveAssigneesFromAssignableInput"]: ValueTypes["RemoveAssigneesFromAssignableInput"];
	["RemoveEnterpriseAdminInput"]: ValueTypes["RemoveEnterpriseAdminInput"];
	["RemoveEnterpriseIdentityProviderInput"]: ValueTypes["RemoveEnterpriseIdentityProviderInput"];
	["RemoveEnterpriseOrganizationInput"]: ValueTypes["RemoveEnterpriseOrganizationInput"];
	["RemoveEnterpriseSupportEntitlementInput"]: ValueTypes["RemoveEnterpriseSupportEntitlementInput"];
	["RemoveLabelsFromLabelableInput"]: ValueTypes["RemoveLabelsFromLabelableInput"];
	["RemoveOutsideCollaboratorInput"]: ValueTypes["RemoveOutsideCollaboratorInput"];
	["RemoveReactionInput"]: ValueTypes["RemoveReactionInput"];
	["RemoveStarInput"]: ValueTypes["RemoveStarInput"];
	["RemoveUpvoteInput"]: ValueTypes["RemoveUpvoteInput"];
	["ReopenIssueInput"]: ValueTypes["ReopenIssueInput"];
	["ReopenPullRequestInput"]: ValueTypes["ReopenPullRequestInput"];
	["RepoAccessAuditEntryVisibility"]: ValueTypes["RepoAccessAuditEntryVisibility"];
	["RepoAddMemberAuditEntryVisibility"]: ValueTypes["RepoAddMemberAuditEntryVisibility"];
	["RepoArchivedAuditEntryVisibility"]: ValueTypes["RepoArchivedAuditEntryVisibility"];
	["RepoChangeMergeSettingAuditEntryMergeType"]: ValueTypes["RepoChangeMergeSettingAuditEntryMergeType"];
	["RepoCreateAuditEntryVisibility"]: ValueTypes["RepoCreateAuditEntryVisibility"];
	["RepoDestroyAuditEntryVisibility"]: ValueTypes["RepoDestroyAuditEntryVisibility"];
	["RepoRemoveMemberAuditEntryVisibility"]: ValueTypes["RepoRemoveMemberAuditEntryVisibility"];
	["ReportedContentClassifiers"]: ValueTypes["ReportedContentClassifiers"];
	["RepositoryAffiliation"]: ValueTypes["RepositoryAffiliation"];
	["RepositoryContributionType"]: ValueTypes["RepositoryContributionType"];
	["RepositoryInteractionLimit"]: ValueTypes["RepositoryInteractionLimit"];
	["RepositoryInteractionLimitExpiry"]: ValueTypes["RepositoryInteractionLimitExpiry"];
	["RepositoryInteractionLimitOrigin"]: ValueTypes["RepositoryInteractionLimitOrigin"];
	["RepositoryInvitationOrder"]: ValueTypes["RepositoryInvitationOrder"];
	["RepositoryInvitationOrderField"]: ValueTypes["RepositoryInvitationOrderField"];
	["RepositoryLockReason"]: ValueTypes["RepositoryLockReason"];
	["RepositoryMigrationOrder"]: ValueTypes["RepositoryMigrationOrder"];
	["RepositoryMigrationOrderDirection"]: ValueTypes["RepositoryMigrationOrderDirection"];
	["RepositoryMigrationOrderField"]: ValueTypes["RepositoryMigrationOrderField"];
	["RepositoryOrder"]: ValueTypes["RepositoryOrder"];
	["RepositoryOrderField"]: ValueTypes["RepositoryOrderField"];
	["RepositoryPermission"]: ValueTypes["RepositoryPermission"];
	["RepositoryPrivacy"]: ValueTypes["RepositoryPrivacy"];
	["RepositoryVisibility"]: ValueTypes["RepositoryVisibility"];
	["RepositoryVulnerabilityAlertDependencyScope"]: ValueTypes["RepositoryVulnerabilityAlertDependencyScope"];
	["RepositoryVulnerabilityAlertState"]: ValueTypes["RepositoryVulnerabilityAlertState"];
	["RequestReviewsInput"]: ValueTypes["RequestReviewsInput"];
	["RequestableCheckStatusState"]: ValueTypes["RequestableCheckStatusState"];
	["RequiredStatusCheckInput"]: ValueTypes["RequiredStatusCheckInput"];
	["RerequestCheckSuiteInput"]: ValueTypes["RerequestCheckSuiteInput"];
	["ResolveReviewThreadInput"]: ValueTypes["ResolveReviewThreadInput"];
	["RevokeEnterpriseOrganizationsMigratorRoleInput"]: ValueTypes["RevokeEnterpriseOrganizationsMigratorRoleInput"];
	["RevokeMigratorRoleInput"]: ValueTypes["RevokeMigratorRoleInput"];
	["RoleInOrganization"]: ValueTypes["RoleInOrganization"];
	["SamlDigestAlgorithm"]: ValueTypes["SamlDigestAlgorithm"];
	["SamlSignatureAlgorithm"]: ValueTypes["SamlSignatureAlgorithm"];
	["SavedReplyOrder"]: ValueTypes["SavedReplyOrder"];
	["SavedReplyOrderField"]: ValueTypes["SavedReplyOrderField"];
	["SearchType"]: ValueTypes["SearchType"];
	["SecurityAdvisoryClassification"]: ValueTypes["SecurityAdvisoryClassification"];
	["SecurityAdvisoryEcosystem"]: ValueTypes["SecurityAdvisoryEcosystem"];
	["SecurityAdvisoryIdentifierFilter"]: ValueTypes["SecurityAdvisoryIdentifierFilter"];
	["SecurityAdvisoryIdentifierType"]: ValueTypes["SecurityAdvisoryIdentifierType"];
	["SecurityAdvisoryOrder"]: ValueTypes["SecurityAdvisoryOrder"];
	["SecurityAdvisoryOrderField"]: ValueTypes["SecurityAdvisoryOrderField"];
	["SecurityAdvisorySeverity"]: ValueTypes["SecurityAdvisorySeverity"];
	["SecurityVulnerabilityOrder"]: ValueTypes["SecurityVulnerabilityOrder"];
	["SecurityVulnerabilityOrderField"]: ValueTypes["SecurityVulnerabilityOrderField"];
	["SetEnterpriseIdentityProviderInput"]: ValueTypes["SetEnterpriseIdentityProviderInput"];
	["SetOrganizationInteractionLimitInput"]: ValueTypes["SetOrganizationInteractionLimitInput"];
	["SetRepositoryInteractionLimitInput"]: ValueTypes["SetRepositoryInteractionLimitInput"];
	["SetUserInteractionLimitInput"]: ValueTypes["SetUserInteractionLimitInput"];
	["SponsorOrder"]: ValueTypes["SponsorOrder"];
	["SponsorOrderField"]: ValueTypes["SponsorOrderField"];
	["SponsorableOrder"]: ValueTypes["SponsorableOrder"];
	["SponsorableOrderField"]: ValueTypes["SponsorableOrderField"];
	["SponsorsActivityAction"]: ValueTypes["SponsorsActivityAction"];
	["SponsorsActivityOrder"]: ValueTypes["SponsorsActivityOrder"];
	["SponsorsActivityOrderField"]: ValueTypes["SponsorsActivityOrderField"];
	["SponsorsActivityPeriod"]: ValueTypes["SponsorsActivityPeriod"];
	["SponsorsGoalKind"]: ValueTypes["SponsorsGoalKind"];
	["SponsorsTierOrder"]: ValueTypes["SponsorsTierOrder"];
	["SponsorsTierOrderField"]: ValueTypes["SponsorsTierOrderField"];
	["SponsorshipNewsletterOrder"]: ValueTypes["SponsorshipNewsletterOrder"];
	["SponsorshipNewsletterOrderField"]: ValueTypes["SponsorshipNewsletterOrderField"];
	["SponsorshipOrder"]: ValueTypes["SponsorshipOrder"];
	["SponsorshipOrderField"]: ValueTypes["SponsorshipOrderField"];
	["SponsorshipPrivacy"]: ValueTypes["SponsorshipPrivacy"];
	["SquashMergeCommitMessage"]: ValueTypes["SquashMergeCommitMessage"];
	["SquashMergeCommitTitle"]: ValueTypes["SquashMergeCommitTitle"];
	["StarOrder"]: ValueTypes["StarOrder"];
	["StarOrderField"]: ValueTypes["StarOrderField"];
	["StartRepositoryMigrationInput"]: ValueTypes["StartRepositoryMigrationInput"];
	["StatusState"]: ValueTypes["StatusState"];
	["SubmitPullRequestReviewInput"]: ValueTypes["SubmitPullRequestReviewInput"];
	["SubscriptionState"]: ValueTypes["SubscriptionState"];
	["TeamDiscussionCommentOrder"]: ValueTypes["TeamDiscussionCommentOrder"];
	["TeamDiscussionCommentOrderField"]: ValueTypes["TeamDiscussionCommentOrderField"];
	["TeamDiscussionOrder"]: ValueTypes["TeamDiscussionOrder"];
	["TeamDiscussionOrderField"]: ValueTypes["TeamDiscussionOrderField"];
	["TeamMemberOrder"]: ValueTypes["TeamMemberOrder"];
	["TeamMemberOrderField"]: ValueTypes["TeamMemberOrderField"];
	["TeamMemberRole"]: ValueTypes["TeamMemberRole"];
	["TeamMembershipType"]: ValueTypes["TeamMembershipType"];
	["TeamOrder"]: ValueTypes["TeamOrder"];
	["TeamOrderField"]: ValueTypes["TeamOrderField"];
	["TeamPrivacy"]: ValueTypes["TeamPrivacy"];
	["TeamRepositoryOrder"]: ValueTypes["TeamRepositoryOrder"];
	["TeamRepositoryOrderField"]: ValueTypes["TeamRepositoryOrderField"];
	["TeamReviewAssignmentAlgorithm"]: ValueTypes["TeamReviewAssignmentAlgorithm"];
	["TeamRole"]: ValueTypes["TeamRole"];
	["TopicSuggestionDeclineReason"]: ValueTypes["TopicSuggestionDeclineReason"];
	["TrackedIssueStates"]: ValueTypes["TrackedIssueStates"];
	["TransferIssueInput"]: ValueTypes["TransferIssueInput"];
	["URI"]: ValueTypes["URI"];
	["UnarchiveRepositoryInput"]: ValueTypes["UnarchiveRepositoryInput"];
	["UnfollowOrganizationInput"]: ValueTypes["UnfollowOrganizationInput"];
	["UnfollowUserInput"]: ValueTypes["UnfollowUserInput"];
	["UnlinkRepositoryFromProjectInput"]: ValueTypes["UnlinkRepositoryFromProjectInput"];
	["UnlockLockableInput"]: ValueTypes["UnlockLockableInput"];
	["UnmarkDiscussionCommentAsAnswerInput"]: ValueTypes["UnmarkDiscussionCommentAsAnswerInput"];
	["UnmarkFileAsViewedInput"]: ValueTypes["UnmarkFileAsViewedInput"];
	["UnmarkIssueAsDuplicateInput"]: ValueTypes["UnmarkIssueAsDuplicateInput"];
	["UnminimizeCommentInput"]: ValueTypes["UnminimizeCommentInput"];
	["UnpinIssueInput"]: ValueTypes["UnpinIssueInput"];
	["UnresolveReviewThreadInput"]: ValueTypes["UnresolveReviewThreadInput"];
	["UpdateBranchProtectionRuleInput"]: ValueTypes["UpdateBranchProtectionRuleInput"];
	["UpdateCheckRunInput"]: ValueTypes["UpdateCheckRunInput"];
	["UpdateCheckSuitePreferencesInput"]: ValueTypes["UpdateCheckSuitePreferencesInput"];
	["UpdateDiscussionCommentInput"]: ValueTypes["UpdateDiscussionCommentInput"];
	["UpdateDiscussionInput"]: ValueTypes["UpdateDiscussionInput"];
	["UpdateEnterpriseAdministratorRoleInput"]: ValueTypes["UpdateEnterpriseAdministratorRoleInput"];
	["UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"]: ValueTypes["UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"];
	["UpdateEnterpriseDefaultRepositoryPermissionSettingInput"]: ValueTypes["UpdateEnterpriseDefaultRepositoryPermissionSettingInput"];
	["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"]: ValueTypes["UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"];
	["UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"]: ValueTypes["UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"];
	["UpdateEnterpriseMembersCanDeleteIssuesSettingInput"]: ValueTypes["UpdateEnterpriseMembersCanDeleteIssuesSettingInput"];
	["UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"]: ValueTypes["UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"];
	["UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"]: ValueTypes["UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"];
	["UpdateEnterpriseMembersCanMakePurchasesSettingInput"]: ValueTypes["UpdateEnterpriseMembersCanMakePurchasesSettingInput"];
	["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"]: ValueTypes["UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"];
	["UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"]: ValueTypes["UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"];
	["UpdateEnterpriseOrganizationProjectsSettingInput"]: ValueTypes["UpdateEnterpriseOrganizationProjectsSettingInput"];
	["UpdateEnterpriseOwnerOrganizationRoleInput"]: ValueTypes["UpdateEnterpriseOwnerOrganizationRoleInput"];
	["UpdateEnterpriseProfileInput"]: ValueTypes["UpdateEnterpriseProfileInput"];
	["UpdateEnterpriseRepositoryProjectsSettingInput"]: ValueTypes["UpdateEnterpriseRepositoryProjectsSettingInput"];
	["UpdateEnterpriseTeamDiscussionsSettingInput"]: ValueTypes["UpdateEnterpriseTeamDiscussionsSettingInput"];
	["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"]: ValueTypes["UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"];
	["UpdateEnvironmentInput"]: ValueTypes["UpdateEnvironmentInput"];
	["UpdateIpAllowListEnabledSettingInput"]: ValueTypes["UpdateIpAllowListEnabledSettingInput"];
	["UpdateIpAllowListEntryInput"]: ValueTypes["UpdateIpAllowListEntryInput"];
	["UpdateIpAllowListForInstalledAppsEnabledSettingInput"]: ValueTypes["UpdateIpAllowListForInstalledAppsEnabledSettingInput"];
	["UpdateIssueCommentInput"]: ValueTypes["UpdateIssueCommentInput"];
	["UpdateIssueInput"]: ValueTypes["UpdateIssueInput"];
	["UpdateLabelInput"]: ValueTypes["UpdateLabelInput"];
	["UpdateNotificationRestrictionSettingInput"]: ValueTypes["UpdateNotificationRestrictionSettingInput"];
	["UpdateOrganizationAllowPrivateRepositoryForkingSettingInput"]: ValueTypes["UpdateOrganizationAllowPrivateRepositoryForkingSettingInput"];
	["UpdateOrganizationWebCommitSignoffSettingInput"]: ValueTypes["UpdateOrganizationWebCommitSignoffSettingInput"];
	["UpdateProjectCardInput"]: ValueTypes["UpdateProjectCardInput"];
	["UpdateProjectColumnInput"]: ValueTypes["UpdateProjectColumnInput"];
	["UpdateProjectDraftIssueInput"]: ValueTypes["UpdateProjectDraftIssueInput"];
	["UpdateProjectInput"]: ValueTypes["UpdateProjectInput"];
	["UpdateProjectNextInput"]: ValueTypes["UpdateProjectNextInput"];
	["UpdateProjectNextItemFieldInput"]: ValueTypes["UpdateProjectNextItemFieldInput"];
	["UpdateProjectV2DraftIssueInput"]: ValueTypes["UpdateProjectV2DraftIssueInput"];
	["UpdateProjectV2Input"]: ValueTypes["UpdateProjectV2Input"];
	["UpdateProjectV2ItemFieldValueInput"]: ValueTypes["UpdateProjectV2ItemFieldValueInput"];
	["UpdateProjectV2ItemPositionInput"]: ValueTypes["UpdateProjectV2ItemPositionInput"];
	["UpdatePullRequestBranchInput"]: ValueTypes["UpdatePullRequestBranchInput"];
	["UpdatePullRequestInput"]: ValueTypes["UpdatePullRequestInput"];
	["UpdatePullRequestReviewCommentInput"]: ValueTypes["UpdatePullRequestReviewCommentInput"];
	["UpdatePullRequestReviewInput"]: ValueTypes["UpdatePullRequestReviewInput"];
	["UpdateRefInput"]: ValueTypes["UpdateRefInput"];
	["UpdateRefsInput"]: ValueTypes["UpdateRefsInput"];
	["UpdateRepositoryInput"]: ValueTypes["UpdateRepositoryInput"];
	["UpdateRepositoryWebCommitSignoffSettingInput"]: ValueTypes["UpdateRepositoryWebCommitSignoffSettingInput"];
	["UpdateSponsorshipPreferencesInput"]: ValueTypes["UpdateSponsorshipPreferencesInput"];
	["UpdateSubscriptionInput"]: ValueTypes["UpdateSubscriptionInput"];
	["UpdateTeamDiscussionCommentInput"]: ValueTypes["UpdateTeamDiscussionCommentInput"];
	["UpdateTeamDiscussionInput"]: ValueTypes["UpdateTeamDiscussionInput"];
	["UpdateTeamReviewAssignmentInput"]: ValueTypes["UpdateTeamReviewAssignmentInput"];
	["UpdateTeamsRepositoryInput"]: ValueTypes["UpdateTeamsRepositoryInput"];
	["UpdateTopicsInput"]: ValueTypes["UpdateTopicsInput"];
	["UserBlockDuration"]: ValueTypes["UserBlockDuration"];
	["UserStatusOrder"]: ValueTypes["UserStatusOrder"];
	["UserStatusOrderField"]: ValueTypes["UserStatusOrderField"];
	["VerifiableDomainOrder"]: ValueTypes["VerifiableDomainOrder"];
	["VerifiableDomainOrderField"]: ValueTypes["VerifiableDomainOrderField"];
	["VerifyVerifiableDomainInput"]: ValueTypes["VerifyVerifiableDomainInput"];
	["WorkflowRunOrder"]: ValueTypes["WorkflowRunOrder"];
	["WorkflowRunOrderField"]: ValueTypes["WorkflowRunOrderField"];
	["X509Certificate"]: ValueTypes["X509Certificate"];
}